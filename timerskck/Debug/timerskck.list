
timerskck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006878  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08006a48  08006a48  00016a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e38  08006e38  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e40  08006e40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e40  08006e40  00016e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e44  08006e44  00016e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000070  08006eb8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08006eb8  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fdbc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002145  00000000  00000000  0002fe5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00031fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00032d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228d5  00000000  00000000  00033a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015481  00000000  00000000  00056315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbd8d  00000000  00000000  0006b796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147523  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e30  00000000  00000000  00147574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0014b3a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0014b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006a30 	.word	0x08006a30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006a30 	.word	0x08006a30

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fbc7 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f833 	bl	8000638 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  time();
 80005d2:	f005 fdab 	bl	800612c <time>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f99f 	bl	8000918 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005da:	f000 f8f1 	bl	80007c0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80005de:	f000 f971 	bl	80008c4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005e2:	f000 f89b 	bl	800071c <MX_ADC1_Init>
 char q[20];
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 HAL_ADC_Start(&hadc1);
 80005e6:	4811      	ldr	r0, [pc, #68]	; (800062c <main+0x68>)
 80005e8:	f000 fd96 	bl	8001118 <HAL_ADC_Start>
 HAL_ADC_PollForConversion(&hadc1, 10);
 80005ec:	210a      	movs	r1, #10
 80005ee:	480f      	ldr	r0, [pc, #60]	; (800062c <main+0x68>)
 80005f0:	f000 fe8a 	bl	8001308 <HAL_ADC_PollForConversion>
 int val = HAL_ADC_GetValue(&hadc1);
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <main+0x68>)
 80005f6:	f000 ff12 	bl	800141e <HAL_ADC_GetValue>
 80005fa:	4603      	mov	r3, r0
 80005fc:	617b      	str	r3, [r7, #20]
 sprintf(q,"%d",val);
 80005fe:	463b      	mov	r3, r7
 8000600:	697a      	ldr	r2, [r7, #20]
 8000602:	490b      	ldr	r1, [pc, #44]	; (8000630 <main+0x6c>)
 8000604:	4618      	mov	r0, r3
 8000606:	f005 fd71 	bl	80060ec <siprintf>


 	       HAL_UART_Transmit(&huart2, q, strlen(q), 10);
 800060a:	463b      	mov	r3, r7
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fdff 	bl	8000210 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	4639      	mov	r1, r7
 8000618:	230a      	movs	r3, #10
 800061a:	4806      	ldr	r0, [pc, #24]	; (8000634 <main+0x70>)
 800061c:	f004 fd28 	bl	8005070 <HAL_UART_Transmit>
 8000620:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8000622:	4618      	mov	r0, r3
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	2000008c 	.word	0x2000008c
 8000630:	08006a48 	.word	0x08006a48
 8000634:	20000188 	.word	0x20000188

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2234      	movs	r2, #52	; 0x34
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f005 fd48 	bl	80060dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b2c      	ldr	r3, [pc, #176]	; (8000714 <SystemClock_Config+0xdc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a2b      	ldr	r2, [pc, #172]	; (8000714 <SystemClock_Config+0xdc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b29      	ldr	r3, [pc, #164]	; (8000714 <SystemClock_Config+0xdc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000678:	2300      	movs	r3, #0
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <SystemClock_Config+0xe0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000684:	4a24      	ldr	r2, [pc, #144]	; (8000718 <SystemClock_Config+0xe0>)
 8000686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b22      	ldr	r3, [pc, #136]	; (8000718 <SystemClock_Config+0xe0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000698:	2302      	movs	r3, #2
 800069a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a0:	2310      	movs	r3, #16
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a4:	2302      	movs	r3, #2
 80006a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006ac:	2310      	movs	r3, #16
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006b0:	2364      	movs	r3, #100	; 0x64
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 faa5 	bl	8002c14 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006d0:	f000 f978 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2101      	movs	r1, #1
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fe56 	bl	80023a4 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006fe:	f000 f961 	bl	80009c4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	2000      	movs	r0, #0
 8000708:	f001 fff2 	bl	80026f0 <HAL_RCC_MCOConfig>
}
 800070c:	bf00      	nop
 800070e:	3750      	adds	r7, #80	; 0x50
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000722:	463b      	mov	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800072e:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000730:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <MX_ADC1_Init+0x9c>)
 8000732:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800073a:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <MX_ADC1_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000740:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000746:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800074c:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <MX_ADC1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_ADC1_Init+0x98>)
 800075c:	4a17      	ldr	r2, [pc, #92]	; (80007bc <MX_ADC1_Init+0xa0>)
 800075e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000768:	2201      	movs	r2, #1
 800076a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_ADC1_Init+0x98>)
 800076e:	2200      	movs	r2, #0
 8000770:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000776:	2201      	movs	r2, #1
 8000778:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800077a:	480e      	ldr	r0, [pc, #56]	; (80007b4 <MX_ADC1_Init+0x98>)
 800077c:	f000 fb60 	bl	8000e40 <HAL_ADC_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 f91d 	bl	80009c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800078a:	2301      	movs	r3, #1
 800078c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	4619      	mov	r1, r3
 800079a:	4806      	ldr	r0, [pc, #24]	; (80007b4 <MX_ADC1_Init+0x98>)
 800079c:	f000 fe4c 	bl	8001438 <HAL_ADC_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007a6:	f000 f90d 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000008c 	.word	0x2000008c
 80007b8:	40012000 	.word	0x40012000
 80007bc:	0f000001 	.word	0x0f000001

080007c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08e      	sub	sp, #56	; 0x38
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	f107 0320 	add.w	r3, r7, #32
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
 80007ec:	615a      	str	r2, [r3, #20]
 80007ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f0:	4b33      	ldr	r3, [pc, #204]	; (80008c0 <MX_TIM2_Init+0x100>)
 80007f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80007f8:	4b31      	ldr	r3, [pc, #196]	; (80008c0 <MX_TIM2_Init+0x100>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fe:	4b30      	ldr	r3, [pc, #192]	; (80008c0 <MX_TIM2_Init+0x100>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000804:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <MX_TIM2_Init+0x100>)
 8000806:	f04f 32ff 	mov.w	r2, #4294967295
 800080a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080c:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <MX_TIM2_Init+0x100>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000812:	4b2b      	ldr	r3, [pc, #172]	; (80008c0 <MX_TIM2_Init+0x100>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000818:	4829      	ldr	r0, [pc, #164]	; (80008c0 <MX_TIM2_Init+0x100>)
 800081a:	f002 fd57 	bl	80032cc <HAL_TIM_Base_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000824:	f000 f8ce 	bl	80009c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800082e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000832:	4619      	mov	r1, r3
 8000834:	4822      	ldr	r0, [pc, #136]	; (80008c0 <MX_TIM2_Init+0x100>)
 8000836:	f003 fa95 	bl	8003d64 <HAL_TIM_ConfigClockSource>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000840:	f000 f8c0 	bl	80009c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000844:	481e      	ldr	r0, [pc, #120]	; (80008c0 <MX_TIM2_Init+0x100>)
 8000846:	f002 fe3d 	bl	80034c4 <HAL_TIM_OC_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000850:	f000 f8b8 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085c:	f107 0320 	add.w	r3, r7, #32
 8000860:	4619      	mov	r1, r3
 8000862:	4817      	ldr	r0, [pc, #92]	; (80008c0 <MX_TIM2_Init+0x100>)
 8000864:	f004 fa2e 	bl	8004cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800086e:	f000 f8a9 	bl	80009c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000872:	2330      	movs	r3, #48	; 0x30
 8000874:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000;
 8000876:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800087a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	4619      	mov	r1, r3
 800088a:	480d      	ldr	r0, [pc, #52]	; (80008c0 <MX_TIM2_Init+0x100>)
 800088c:	f002 ff20 	bl	80036d0 <HAL_TIM_OC_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000896:	f000 f895 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  if(HAL_TIM_PWM_ConfigChannel(&htim2,  &sConfigOC,TIM_CHANNEL_1)!=HAL_OK){
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2200      	movs	r2, #0
 800089e:	4619      	mov	r1, r3
 80008a0:	4807      	ldr	r0, [pc, #28]	; (80008c0 <MX_TIM2_Init+0x100>)
 80008a2:	f003 f887 	bl	80039b4 <HAL_TIM_PWM_ConfigChannel>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM2_Init+0xf0>
 	  Error_Handler();
 80008ac:	f000 f88a 	bl	80009c4 <Error_Handler>
   }
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <MX_TIM2_Init+0x100>)
 80008b2:	f000 f923 	bl	8000afc <HAL_TIM_MspPostInit>

}
 80008b6:	bf00      	nop
 80008b8:	3738      	adds	r7, #56	; 0x38
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000d4 	.word	0x200000d4

080008c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008ca:	4a12      	ldr	r2, [pc, #72]	; (8000914 <MX_USART2_UART_Init+0x50>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008fc:	f004 fade 	bl	8004ebc <HAL_UART_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000906:	f000 f85d 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000188 	.word	0x20000188
 8000914:	40004400 	.word	0x40004400

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	4b22      	ldr	r3, [pc, #136]	; (80009bc <MX_GPIO_Init+0xa4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a21      	ldr	r2, [pc, #132]	; (80009bc <MX_GPIO_Init+0xa4>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <MX_GPIO_Init+0xa4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_GPIO_Init+0xa4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a1a      	ldr	r2, [pc, #104]	; (80009bc <MX_GPIO_Init+0xa4>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_GPIO_Init+0xa4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 800096c:	4814      	ldr	r0, [pc, #80]	; (80009c0 <MX_GPIO_Init+0xa8>)
 800096e:	f001 fce7 	bl	8002340 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA5 PA6 PA7 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8000972:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 8000976:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	4619      	mov	r1, r3
 800098a:	480d      	ldr	r0, [pc, #52]	; (80009c0 <MX_GPIO_Init+0xa8>)
 800098c:	f001 f9b4 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000994:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4619      	mov	r1, r3
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_GPIO_Init+0xa8>)
 80009ae:	f001 f9a3 	bl	8001cf8 <HAL_GPIO_Init>

}
 80009b2:	bf00      	nop
 80009b4:	3720      	adds	r7, #32
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020000 	.word	0x40020000

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>

080009ce <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
 80009d6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <HAL_MspInit+0x4c>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a17      	ldr	r2, [pc, #92]	; (8000ab0 <HAL_ADC_MspInit+0x7c>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d127      	bne.n	8000aa6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <HAL_ADC_MspInit+0x80>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <HAL_ADC_MspInit+0x80>)
 8000a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a64:	6453      	str	r3, [r2, #68]	; 0x44
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <HAL_ADC_MspInit+0x80>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_ADC_MspInit+0x80>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <HAL_ADC_MspInit+0x80>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_ADC_MspInit+0x80>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a92:	2303      	movs	r3, #3
 8000a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <HAL_ADC_MspInit+0x84>)
 8000aa2:	f001 f929 	bl	8001cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40012000 	.word	0x40012000
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000

08000abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000acc:	d10d      	bne.n	8000aea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b1c:	d11d      	bne.n	8000b5a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <HAL_TIM_MspPostInit+0x68>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <HAL_TIM_MspPostInit+0x68>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <HAL_TIM_MspPostInit+0x68>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	4619      	mov	r1, r3
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <HAL_TIM_MspPostInit+0x6c>)
 8000b56:	f001 f8cf 	bl	8001cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3720      	adds	r7, #32
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a1d      	ldr	r2, [pc, #116]	; (8000c00 <HAL_UART_MspInit+0x94>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d133      	bne.n	8000bf6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <HAL_UART_MspInit+0x98>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <HAL_UART_MspInit+0x98>)
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <HAL_UART_MspInit+0x98>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <HAL_UART_MspInit+0x98>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <HAL_UART_MspInit+0x98>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_UART_MspInit+0x98>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4809      	ldr	r0, [pc, #36]	; (8000c08 <HAL_UART_MspInit+0x9c>)
 8000be2:	f001 f889 	bl	8001cf8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	2026      	movs	r0, #38	; 0x26
 8000bec:	f000 ff94 	bl	8001b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bf0:	2026      	movs	r0, #38	; 0x26
 8000bf2:	f000 ffbd 	bl	8001b70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3728      	adds	r7, #40	; 0x28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40004400 	.word	0x40004400
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020000 	.word	0x40020000

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <NMI_Handler+0x4>

08000c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <HardFault_Handler+0x4>

08000c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <MemManage_Handler+0x4>

08000c1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c58:	f000 f8d2 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
HAL_SYSTICK_IRQHandler();
 8000c5c:	f000 ffac 	bl	8001bb8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <USART2_IRQHandler+0x10>)
 8000c6a:	f004 fa93 	bl	8005194 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000188 	.word	0x20000188

08000c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c80:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <_sbrk+0x5c>)
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <_sbrk+0x60>)
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <_sbrk+0x64>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <_sbrk+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d207      	bcs.n	8000cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca8:	f005 f9ee 	bl	8006088 <__errno>
 8000cac:	4603      	mov	r3, r0
 8000cae:	220c      	movs	r2, #12
 8000cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	e009      	b.n	8000ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <_sbrk+0x64>)
 8000cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20020000 	.word	0x20020000
 8000cd8:	00000400 	.word	0x00000400
 8000cdc:	200001cc 	.word	0x200001cc
 8000ce0:	200001e8 	.word	0x200001e8

08000ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <SystemInit+0x20>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <SystemInit+0x20>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d0c:	480d      	ldr	r0, [pc, #52]	; (8000d44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d0e:	490e      	ldr	r1, [pc, #56]	; (8000d48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d10:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d24:	4c0b      	ldr	r4, [pc, #44]	; (8000d54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d32:	f7ff ffd7 	bl	8000ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d36:	f005 f9ad 	bl	8006094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3a:	f7ff fc43 	bl	80005c4 <main>
  bx  lr    
 8000d3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d4c:	08006e48 	.word	0x08006e48
  ldr r2, =_sbss
 8000d50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d54:	200001e4 	.word	0x200001e4

08000d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <HAL_Init+0x40>)
 8000d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <HAL_Init+0x40>)
 8000d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <HAL_Init+0x40>)
 8000d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 fea7 	bl	8001ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f000 f808 	bl	8000da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d90:	f7ff fe28 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023c00 	.word	0x40023c00

08000da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_InitTick+0x54>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_InitTick+0x58>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 feee 	bl	8001ba0 <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00e      	b.n	8000dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d80a      	bhi.n	8000dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f000 fe9c 	bl	8001b18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de0:	4a06      	ldr	r2, [pc, #24]	; (8000dfc <HAL_InitTick+0x5c>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e000      	b.n	8000dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000000 	.word	0x20000000
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000004 	.word	0x20000004

08000e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x20>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x24>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <HAL_IncTick+0x24>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008
 8000e24:	200001d0 	.word	0x200001d0

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <HAL_GetTick+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	200001d0 	.word	0x200001d0

08000e40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d101      	bne.n	8000e56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e15c      	b.n	8001110 <HAL_ADC_Init+0x2d0>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a8e      	ldr	r2, [pc, #568]	; (8001094 <HAL_ADC_Init+0x254>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d00e      	beq.n	8000e7e <HAL_ADC_Init+0x3e>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a8c      	ldr	r2, [pc, #560]	; (8001098 <HAL_ADC_Init+0x258>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d009      	beq.n	8000e7e <HAL_ADC_Init+0x3e>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a8b      	ldr	r2, [pc, #556]	; (800109c <HAL_ADC_Init+0x25c>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d004      	beq.n	8000e7e <HAL_ADC_Init+0x3e>
 8000e74:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8000e78:	4889      	ldr	r0, [pc, #548]	; (80010a0 <HAL_ADC_Init+0x260>)
 8000e7a:	f7ff fda8 	bl	80009ce <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d013      	beq.n	8000eae <HAL_ADC_Init+0x6e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e8e:	d00e      	beq.n	8000eae <HAL_ADC_Init+0x6e>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000e98:	d009      	beq.n	8000eae <HAL_ADC_Init+0x6e>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000ea2:	d004      	beq.n	8000eae <HAL_ADC_Init+0x6e>
 8000ea4:	f240 1143 	movw	r1, #323	; 0x143
 8000ea8:	487d      	ldr	r0, [pc, #500]	; (80010a0 <HAL_ADC_Init+0x260>)
 8000eaa:	f7ff fd90 	bl	80009ce <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d013      	beq.n	8000ede <HAL_ADC_Init+0x9e>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ebe:	d00e      	beq.n	8000ede <HAL_ADC_Init+0x9e>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000ec8:	d009      	beq.n	8000ede <HAL_ADC_Init+0x9e>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8000ed2:	d004      	beq.n	8000ede <HAL_ADC_Init+0x9e>
 8000ed4:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8000ed8:	4871      	ldr	r0, [pc, #452]	; (80010a0 <HAL_ADC_Init+0x260>)
 8000eda:	f7ff fd78 	bl	80009ce <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	691b      	ldr	r3, [r3, #16]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d008      	beq.n	8000ef8 <HAL_ADC_Init+0xb8>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d004      	beq.n	8000ef8 <HAL_ADC_Init+0xb8>
 8000eee:	f240 1145 	movw	r1, #325	; 0x145
 8000ef2:	486b      	ldr	r0, [pc, #428]	; (80010a0 <HAL_ADC_Init+0x260>)
 8000ef4:	f7ff fd6b 	bl	80009ce <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7e1b      	ldrb	r3, [r3, #24]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d008      	beq.n	8000f12 <HAL_ADC_Init+0xd2>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7e1b      	ldrb	r3, [r3, #24]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d004      	beq.n	8000f12 <HAL_ADC_Init+0xd2>
 8000f08:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8000f0c:	4864      	ldr	r0, [pc, #400]	; (80010a0 <HAL_ADC_Init+0x260>)
 8000f0e:	f7ff fd5e 	bl	80009ce <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d054      	beq.n	8000fc4 <HAL_ADC_Init+0x184>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f22:	d04f      	beq.n	8000fc4 <HAL_ADC_Init+0x184>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000f2c:	d04a      	beq.n	8000fc4 <HAL_ADC_Init+0x184>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8000f36:	d045      	beq.n	8000fc4 <HAL_ADC_Init+0x184>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000f40:	d040      	beq.n	8000fc4 <HAL_ADC_Init+0x184>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f46:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8000f4a:	d03b      	beq.n	8000fc4 <HAL_ADC_Init+0x184>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f50:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8000f54:	d036      	beq.n	8000fc4 <HAL_ADC_Init+0x184>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5a:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8000f5e:	d031      	beq.n	8000fc4 <HAL_ADC_Init+0x184>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000f68:	d02c      	beq.n	8000fc4 <HAL_ADC_Init+0x184>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6e:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8000f72:	d027      	beq.n	8000fc4 <HAL_ADC_Init+0x184>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f78:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8000f7c:	d022      	beq.n	8000fc4 <HAL_ADC_Init+0x184>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f82:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8000f86:	d01d      	beq.n	8000fc4 <HAL_ADC_Init+0x184>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8000f90:	d018      	beq.n	8000fc4 <HAL_ADC_Init+0x184>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f96:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8000f9a:	d013      	beq.n	8000fc4 <HAL_ADC_Init+0x184>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8000fa4:	d00e      	beq.n	8000fc4 <HAL_ADC_Init+0x184>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000faa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8000fae:	d009      	beq.n	8000fc4 <HAL_ADC_Init+0x184>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb4:	4a3b      	ldr	r2, [pc, #236]	; (80010a4 <HAL_ADC_Init+0x264>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d004      	beq.n	8000fc4 <HAL_ADC_Init+0x184>
 8000fba:	f240 1147 	movw	r1, #327	; 0x147
 8000fbe:	4838      	ldr	r0, [pc, #224]	; (80010a0 <HAL_ADC_Init+0x260>)
 8000fc0:	f7ff fd05 	bl	80009ce <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d009      	beq.n	8000fe0 <HAL_ADC_Init+0x1a0>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fd4:	d004      	beq.n	8000fe0 <HAL_ADC_Init+0x1a0>
 8000fd6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000fda:	4831      	ldr	r0, [pc, #196]	; (80010a0 <HAL_ADC_Init+0x260>)
 8000fdc:	f7ff fcf7 	bl	80009ce <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_ADC_Init+0x1b0>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69db      	ldr	r3, [r3, #28]
 8000fec:	2b10      	cmp	r3, #16
 8000fee:	d904      	bls.n	8000ffa <HAL_ADC_Init+0x1ba>
 8000ff0:	f240 1149 	movw	r1, #329	; 0x149
 8000ff4:	482a      	ldr	r0, [pc, #168]	; (80010a0 <HAL_ADC_Init+0x260>)
 8000ff6:	f7ff fcea 	bl	80009ce <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001000:	2b00      	cmp	r3, #0
 8001002:	d009      	beq.n	8001018 <HAL_ADC_Init+0x1d8>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800100a:	2b01      	cmp	r3, #1
 800100c:	d004      	beq.n	8001018 <HAL_ADC_Init+0x1d8>
 800100e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8001012:	4823      	ldr	r0, [pc, #140]	; (80010a0 <HAL_ADC_Init+0x260>)
 8001014:	f7ff fcdb 	bl	80009ce <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d00c      	beq.n	800103a <HAL_ADC_Init+0x1fa>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d008      	beq.n	800103a <HAL_ADC_Init+0x1fa>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	2b02      	cmp	r3, #2
 800102e:	d004      	beq.n	800103a <HAL_ADC_Init+0x1fa>
 8001030:	f240 114b 	movw	r1, #331	; 0x14b
 8001034:	481a      	ldr	r0, [pc, #104]	; (80010a0 <HAL_ADC_Init+0x260>)
 8001036:	f7ff fcca 	bl	80009ce <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d009      	beq.n	8001058 <HAL_ADC_Init+0x218>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f893 3020 	ldrb.w	r3, [r3, #32]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d004      	beq.n	8001058 <HAL_ADC_Init+0x218>
 800104e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8001052:	4813      	ldr	r0, [pc, #76]	; (80010a0 <HAL_ADC_Init+0x260>)
 8001054:	f7ff fcbb 	bl	80009ce <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105c:	4a11      	ldr	r2, [pc, #68]	; (80010a4 <HAL_ADC_Init+0x264>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d022      	beq.n	80010a8 <HAL_ADC_Init+0x268>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001066:	2b00      	cmp	r3, #0
 8001068:	d01e      	beq.n	80010a8 <HAL_ADC_Init+0x268>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001072:	d019      	beq.n	80010a8 <HAL_ADC_Init+0x268>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800107c:	d014      	beq.n	80010a8 <HAL_ADC_Init+0x268>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001082:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001086:	d00f      	beq.n	80010a8 <HAL_ADC_Init+0x268>
 8001088:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <HAL_ADC_Init+0x260>)
 800108e:	f7ff fc9e 	bl	80009ce <assert_failed>
 8001092:	e009      	b.n	80010a8 <HAL_ADC_Init+0x268>
 8001094:	40012000 	.word	0x40012000
 8001098:	40012100 	.word	0x40012100
 800109c:	40012200 	.word	0x40012200
 80010a0:	08006a4c 	.word	0x08006a4c
 80010a4:	0f000001 	.word	0x0f000001
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d109      	bne.n	80010c4 <HAL_ADC_Init+0x284>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff fcbf 	bl	8000a34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	f003 0310 	and.w	r3, r3, #16
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d118      	bne.n	8001102 <HAL_ADC_Init+0x2c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010d8:	f023 0302 	bic.w	r3, r3, #2
 80010dc:	f043 0202 	orr.w	r2, r3, #2
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 fb1d 	bl	8001724 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	f023 0303 	bic.w	r3, r3, #3
 80010f8:	f043 0201 	orr.w	r2, r3, #1
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001100:	e001      	b.n	8001106 <HAL_ADC_Init+0x2c6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7e1b      	ldrb	r3, [r3, #24]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d008      	beq.n	800113e <HAL_ADC_Start+0x26>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7e1b      	ldrb	r3, [r3, #24]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d004      	beq.n	800113e <HAL_ADC_Start+0x26>
 8001134:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001138:	486c      	ldr	r0, [pc, #432]	; (80012ec <HAL_ADC_Start+0x1d4>)
 800113a:	f7ff fc48 	bl	80009ce <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001142:	2b00      	cmp	r3, #0
 8001144:	d013      	beq.n	800116e <HAL_ADC_Start+0x56>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800114e:	d00e      	beq.n	800116e <HAL_ADC_Start+0x56>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001158:	d009      	beq.n	800116e <HAL_ADC_Start+0x56>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001162:	d004      	beq.n	800116e <HAL_ADC_Start+0x56>
 8001164:	f240 21d3 	movw	r1, #723	; 0x2d3
 8001168:	4860      	ldr	r0, [pc, #384]	; (80012ec <HAL_ADC_Start+0x1d4>)
 800116a:	f7ff fc30 	bl	80009ce <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001174:	2b01      	cmp	r3, #1
 8001176:	d101      	bne.n	800117c <HAL_ADC_Start+0x64>
 8001178:	2302      	movs	r3, #2
 800117a:	e0b2      	b.n	80012e2 <HAL_ADC_Start+0x1ca>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b01      	cmp	r3, #1
 8001190:	d018      	beq.n	80011c4 <HAL_ADC_Start+0xac>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f042 0201 	orr.w	r2, r2, #1
 80011a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011a2:	4b53      	ldr	r3, [pc, #332]	; (80012f0 <HAL_ADC_Start+0x1d8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a53      	ldr	r2, [pc, #332]	; (80012f4 <HAL_ADC_Start+0x1dc>)
 80011a8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ac:	0c9a      	lsrs	r2, r3, #18
 80011ae:	4613      	mov	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011b6:	e002      	b.n	80011be <HAL_ADC_Start+0xa6>
    {
      counter--;
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1f9      	bne.n	80011b8 <HAL_ADC_Start+0xa0>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d17a      	bne.n	80012c8 <HAL_ADC_Start+0x1b0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011da:	f023 0301 	bic.w	r3, r3, #1
 80011de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d007      	beq.n	8001204 <HAL_ADC_Start+0xec>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800120c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001210:	d106      	bne.n	8001220 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f023 0206 	bic.w	r2, r3, #6
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	645a      	str	r2, [r3, #68]	; 0x44
 800121e:	e002      	b.n	8001226 <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800122e:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <HAL_ADC_Start+0x1e0>)
 8001230:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800123a:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 031f 	and.w	r3, r3, #31
 8001244:	2b00      	cmp	r3, #0
 8001246:	d12a      	bne.n	800129e <HAL_ADC_Start+0x186>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a2b      	ldr	r2, [pc, #172]	; (80012fc <HAL_ADC_Start+0x1e4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d015      	beq.n	800127e <HAL_ADC_Start+0x166>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a2a      	ldr	r2, [pc, #168]	; (8001300 <HAL_ADC_Start+0x1e8>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d105      	bne.n	8001268 <HAL_ADC_Start+0x150>
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <HAL_ADC_Start+0x1e0>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 031f 	and.w	r3, r3, #31
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00a      	beq.n	800127e <HAL_ADC_Start+0x166>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a25      	ldr	r2, [pc, #148]	; (8001304 <HAL_ADC_Start+0x1ec>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d136      	bne.n	80012e0 <HAL_ADC_Start+0x1c8>
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <HAL_ADC_Start+0x1e0>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	2b00      	cmp	r3, #0
 800127c:	d130      	bne.n	80012e0 <HAL_ADC_Start+0x1c8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d129      	bne.n	80012e0 <HAL_ADC_Start+0x1c8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	e020      	b.n	80012e0 <HAL_ADC_Start+0x1c8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a16      	ldr	r2, [pc, #88]	; (80012fc <HAL_ADC_Start+0x1e4>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d11b      	bne.n	80012e0 <HAL_ADC_Start+0x1c8>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d114      	bne.n	80012e0 <HAL_ADC_Start+0x1c8>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	e00b      	b.n	80012e0 <HAL_ADC_Start+0x1c8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	f043 0210 	orr.w	r2, r3, #16
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d8:	f043 0201 	orr.w	r2, r3, #1
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	08006a4c 	.word	0x08006a4c
 80012f0:	20000000 	.word	0x20000000
 80012f4:	431bde83 	.word	0x431bde83
 80012f8:	40012300 	.word	0x40012300
 80012fc:	40012000 	.word	0x40012000
 8001300:	40012100 	.word	0x40012100
 8001304:	40012200 	.word	0x40012200

08001308 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001324:	d113      	bne.n	800134e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001334:	d10b      	bne.n	800134e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f043 0220 	orr.w	r2, r3, #32
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e063      	b.n	8001416 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800134e:	f7ff fd6b 	bl	8000e28 <HAL_GetTick>
 8001352:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001354:	e021      	b.n	800139a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135c:	d01d      	beq.n	800139a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d007      	beq.n	8001374 <HAL_ADC_PollForConversion+0x6c>
 8001364:	f7ff fd60 	bl	8000e28 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	429a      	cmp	r2, r3
 8001372:	d212      	bcs.n	800139a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b02      	cmp	r3, #2
 8001380:	d00b      	beq.n	800139a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f043 0204 	orr.w	r2, r3, #4
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e03d      	b.n	8001416 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d1d6      	bne.n	8001356 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f06f 0212 	mvn.w	r2, #18
 80013b0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d123      	bne.n	8001414 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d11f      	bne.n	8001414 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d111      	bne.n	8001414 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d105      	bne.n	8001414 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f043 0201 	orr.w	r2, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b12      	cmp	r3, #18
 800144c:	d909      	bls.n	8001462 <HAL_ADC_ConfigChannel+0x2a>
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a72      	ldr	r2, [pc, #456]	; (800161c <HAL_ADC_ConfigChannel+0x1e4>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d004      	beq.n	8001462 <HAL_ADC_ConfigChannel+0x2a>
 8001458:	f240 618b 	movw	r1, #1675	; 0x68b
 800145c:	4870      	ldr	r0, [pc, #448]	; (8001620 <HAL_ADC_ConfigChannel+0x1e8>)
 800145e:	f7ff fab6 	bl	80009ce <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_ADC_ConfigChannel+0x3a>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b10      	cmp	r3, #16
 8001470:	d904      	bls.n	800147c <HAL_ADC_ConfigChannel+0x44>
 8001472:	f240 618c 	movw	r1, #1676	; 0x68c
 8001476:	486a      	ldr	r0, [pc, #424]	; (8001620 <HAL_ADC_ConfigChannel+0x1e8>)
 8001478:	f7ff faa9 	bl	80009ce <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d020      	beq.n	80014c6 <HAL_ADC_ConfigChannel+0x8e>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d01c      	beq.n	80014c6 <HAL_ADC_ConfigChannel+0x8e>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d018      	beq.n	80014c6 <HAL_ADC_ConfigChannel+0x8e>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b03      	cmp	r3, #3
 800149a:	d014      	beq.n	80014c6 <HAL_ADC_ConfigChannel+0x8e>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d010      	beq.n	80014c6 <HAL_ADC_ConfigChannel+0x8e>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b05      	cmp	r3, #5
 80014aa:	d00c      	beq.n	80014c6 <HAL_ADC_ConfigChannel+0x8e>
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b06      	cmp	r3, #6
 80014b2:	d008      	beq.n	80014c6 <HAL_ADC_ConfigChannel+0x8e>
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b07      	cmp	r3, #7
 80014ba:	d004      	beq.n	80014c6 <HAL_ADC_ConfigChannel+0x8e>
 80014bc:	f240 618d 	movw	r1, #1677	; 0x68d
 80014c0:	4857      	ldr	r0, [pc, #348]	; (8001620 <HAL_ADC_ConfigChannel+0x1e8>)
 80014c2:	f7ff fa84 	bl	80009ce <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x9c>
 80014d0:	2302      	movs	r3, #2
 80014d2:	e118      	b.n	8001706 <HAL_ADC_ConfigChannel+0x2ce>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b09      	cmp	r3, #9
 80014e2:	d925      	bls.n	8001530 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68d9      	ldr	r1, [r3, #12]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	4613      	mov	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	3b1e      	subs	r3, #30
 80014fa:	2207      	movs	r2, #7
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43da      	mvns	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	400a      	ands	r2, r1
 8001508:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68d9      	ldr	r1, [r3, #12]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	b29b      	uxth	r3, r3
 800151a:	4618      	mov	r0, r3
 800151c:	4603      	mov	r3, r0
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4403      	add	r3, r0
 8001522:	3b1e      	subs	r3, #30
 8001524:	409a      	lsls	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	e022      	b.n	8001576 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6919      	ldr	r1, [r3, #16]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	461a      	mov	r2, r3
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	2207      	movs	r2, #7
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	400a      	ands	r2, r1
 8001552:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6919      	ldr	r1, [r3, #16]
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	b29b      	uxth	r3, r3
 8001564:	4618      	mov	r0, r3
 8001566:	4603      	mov	r3, r0
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4403      	add	r3, r0
 800156c:	409a      	lsls	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b06      	cmp	r3, #6
 800157c:	d824      	bhi.n	80015c8 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	3b05      	subs	r3, #5
 8001590:	221f      	movs	r2, #31
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	400a      	ands	r2, r1
 800159e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	4618      	mov	r0, r3
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	3b05      	subs	r3, #5
 80015ba:	fa00 f203 	lsl.w	r2, r0, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	635a      	str	r2, [r3, #52]	; 0x34
 80015c6:	e051      	b.n	800166c <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b0c      	cmp	r3, #12
 80015ce:	d829      	bhi.n	8001624 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	3b23      	subs	r3, #35	; 0x23
 80015e2:	221f      	movs	r2, #31
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43da      	mvns	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	400a      	ands	r2, r1
 80015f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	3b23      	subs	r3, #35	; 0x23
 800160c:	fa00 f203 	lsl.w	r2, r0, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	631a      	str	r2, [r3, #48]	; 0x30
 8001618:	e028      	b.n	800166c <HAL_ADC_ConfigChannel+0x234>
 800161a:	bf00      	nop
 800161c:	10000012 	.word	0x10000012
 8001620:	08006a4c 	.word	0x08006a4c
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	3b41      	subs	r3, #65	; 0x41
 8001636:	221f      	movs	r2, #31
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43da      	mvns	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	400a      	ands	r2, r1
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	b29b      	uxth	r3, r3
 8001652:	4618      	mov	r0, r3
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	3b41      	subs	r3, #65	; 0x41
 8001660:	fa00 f203 	lsl.w	r2, r0, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800166c:	4b28      	ldr	r3, [pc, #160]	; (8001710 <HAL_ADC_ConfigChannel+0x2d8>)
 800166e:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a27      	ldr	r2, [pc, #156]	; (8001714 <HAL_ADC_ConfigChannel+0x2dc>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d10f      	bne.n	800169a <HAL_ADC_ConfigChannel+0x262>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b12      	cmp	r3, #18
 8001680:	d10b      	bne.n	800169a <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <HAL_ADC_ConfigChannel+0x2dc>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d12b      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x2c4>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <HAL_ADC_ConfigChannel+0x2e0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d003      	beq.n	80016b6 <HAL_ADC_ConfigChannel+0x27e>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b11      	cmp	r3, #17
 80016b4:	d122      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a11      	ldr	r2, [pc, #68]	; (8001718 <HAL_ADC_ConfigChannel+0x2e0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d111      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016d8:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_ADC_ConfigChannel+0x2e4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a10      	ldr	r2, [pc, #64]	; (8001720 <HAL_ADC_ConfigChannel+0x2e8>)
 80016de:	fba2 2303 	umull	r2, r3, r2, r3
 80016e2:	0c9a      	lsrs	r2, r3, #18
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016ee:	e002      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f9      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40012300 	.word	0x40012300
 8001714:	40012000 	.word	0x40012000
 8001718:	10000012 	.word	0x10000012
 800171c:	20000000 	.word	0x20000000
 8001720:	431bde83 	.word	0x431bde83

08001724 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800172c:	4b7f      	ldr	r3, [pc, #508]	; (800192c <ADC_Init+0x208>)
 800172e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	431a      	orrs	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001758:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	021a      	lsls	r2, r3, #8
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800177c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800179e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6899      	ldr	r1, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	4a5e      	ldr	r2, [pc, #376]	; (8001930 <ADC_Init+0x20c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d022      	beq.n	8001802 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6899      	ldr	r1, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6899      	ldr	r1, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	e00f      	b.n	8001822 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001820:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0202 	bic.w	r2, r2, #2
 8001830:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6899      	ldr	r1, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7e1b      	ldrb	r3, [r3, #24]
 800183c:	005a      	lsls	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d028      	beq.n	80018a2 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <ADC_Init+0x13c>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	2b08      	cmp	r3, #8
 800185e:	d904      	bls.n	800186a <ADC_Init+0x146>
 8001860:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8001864:	4833      	ldr	r0, [pc, #204]	; (8001934 <ADC_Init+0x210>)
 8001866:	f7ff f8b2 	bl	80009ce <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001878:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001888:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6859      	ldr	r1, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	3b01      	subs	r3, #1
 8001896:	035a      	lsls	r2, r3, #13
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	e007      	b.n	80018b2 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018b0:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	3b01      	subs	r3, #1
 80018ce:	051a      	lsls	r2, r3, #20
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6899      	ldr	r1, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018f4:	025a      	lsls	r2, r3, #9
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800190c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6899      	ldr	r1, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	029a      	lsls	r2, r3, #10
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	609a      	str	r2, [r3, #8]
}
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40012300 	.word	0x40012300
 8001930:	0f000001 	.word	0x0f000001
 8001934:	08006a4c 	.word	0x08006a4c

08001938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001954:	4013      	ands	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196a:	4a04      	ldr	r2, [pc, #16]	; (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60d3      	str	r3, [r2, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <__NVIC_GetPriorityGrouping+0x18>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	f003 0307 	and.w	r3, r3, #7
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	db0b      	blt.n	80019c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	f003 021f 	and.w	r2, r3, #31
 80019b4:	4907      	ldr	r1, [pc, #28]	; (80019d4 <__NVIC_EnableIRQ+0x38>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	2001      	movs	r0, #1
 80019be:	fa00 f202 	lsl.w	r2, r0, r2
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000e100 	.word	0xe000e100

080019d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	db0a      	blt.n	8001a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	490c      	ldr	r1, [pc, #48]	; (8001a24 <__NVIC_SetPriority+0x4c>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	0112      	lsls	r2, r2, #4
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	440b      	add	r3, r1
 80019fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a00:	e00a      	b.n	8001a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4908      	ldr	r1, [pc, #32]	; (8001a28 <__NVIC_SetPriority+0x50>)
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	3b04      	subs	r3, #4
 8001a10:	0112      	lsls	r2, r2, #4
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	440b      	add	r3, r1
 8001a16:	761a      	strb	r2, [r3, #24]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000e100 	.word	0xe000e100
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	; 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f1c3 0307 	rsb	r3, r3, #7
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	bf28      	it	cs
 8001a4a:	2304      	movcs	r3, #4
 8001a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3304      	adds	r3, #4
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d902      	bls.n	8001a5c <NVIC_EncodePriority+0x30>
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3b03      	subs	r3, #3
 8001a5a:	e000      	b.n	8001a5e <NVIC_EncodePriority+0x32>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	401a      	ands	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43d9      	mvns	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	4313      	orrs	r3, r2
         );
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3724      	adds	r7, #36	; 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa4:	d301      	bcc.n	8001aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00f      	b.n	8001aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <SysTick_Config+0x40>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab2:	210f      	movs	r1, #15
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f7ff ff8e 	bl	80019d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <SysTick_Config+0x40>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac2:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <SysTick_Config+0x40>)
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	e000e010 	.word	0xe000e010

08001ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b07      	cmp	r3, #7
 8001ae4:	d00f      	beq.n	8001b06 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b06      	cmp	r3, #6
 8001aea:	d00c      	beq.n	8001b06 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b05      	cmp	r3, #5
 8001af0:	d009      	beq.n	8001b06 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d006      	beq.n	8001b06 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d003      	beq.n	8001b06 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001afe:	2190      	movs	r1, #144	; 0x90
 8001b00:	4804      	ldr	r0, [pc, #16]	; (8001b14 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001b02:	f7fe ff64 	bl	80009ce <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ff16 	bl	8001938 <__NVIC_SetPriorityGrouping>
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	08006ac0 	.word	0x08006ac0

08001b18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b0f      	cmp	r3, #15
 8001b2e:	d903      	bls.n	8001b38 <HAL_NVIC_SetPriority+0x20>
 8001b30:	21a8      	movs	r1, #168	; 0xa8
 8001b32:	480e      	ldr	r0, [pc, #56]	; (8001b6c <HAL_NVIC_SetPriority+0x54>)
 8001b34:	f7fe ff4b 	bl	80009ce <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b0f      	cmp	r3, #15
 8001b3c:	d903      	bls.n	8001b46 <HAL_NVIC_SetPriority+0x2e>
 8001b3e:	21a9      	movs	r1, #169	; 0xa9
 8001b40:	480a      	ldr	r0, [pc, #40]	; (8001b6c <HAL_NVIC_SetPriority+0x54>)
 8001b42:	f7fe ff44 	bl	80009ce <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b46:	f7ff ff1b 	bl	8001980 <__NVIC_GetPriorityGrouping>
 8001b4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	68b9      	ldr	r1, [r7, #8]
 8001b50:	6978      	ldr	r0, [r7, #20]
 8001b52:	f7ff ff6b 	bl	8001a2c <NVIC_EncodePriority>
 8001b56:	4602      	mov	r2, r0
 8001b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ff3a 	bl	80019d8 <__NVIC_SetPriority>
}
 8001b64:	bf00      	nop
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	08006ac0 	.word	0x08006ac0

08001b70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	da03      	bge.n	8001b8a <HAL_NVIC_EnableIRQ+0x1a>
 8001b82:	21bc      	movs	r1, #188	; 0xbc
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <HAL_NVIC_EnableIRQ+0x2c>)
 8001b86:	f7fe ff22 	bl	80009ce <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff ff04 	bl	800199c <__NVIC_EnableIRQ>
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	08006ac0 	.word	0x08006ac0

08001ba0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff73 	bl	8001a94 <SysTick_Config>
 8001bae:	4603      	mov	r3, r0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001bbc:	f000 f802 	bl	8001bc4 <HAL_SYSTICK_Callback>
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bde:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff f922 	bl	8000e28 <HAL_GetTick>
 8001be4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d008      	beq.n	8001c04 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e052      	b.n	8001caa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0216 	bic.w	r2, r2, #22
 8001c12:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	695a      	ldr	r2, [r3, #20]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c22:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d103      	bne.n	8001c34 <HAL_DMA_Abort+0x62>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d007      	beq.n	8001c44 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0208 	bic.w	r2, r2, #8
 8001c42:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0201 	bic.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c54:	e013      	b.n	8001c7e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c56:	f7ff f8e7 	bl	8000e28 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d90c      	bls.n	8001c7e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2220      	movs	r2, #32
 8001c68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e015      	b.n	8001caa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1e4      	bne.n	8001c56 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c90:	223f      	movs	r2, #63	; 0x3f
 8001c92:	409a      	lsls	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d004      	beq.n	8001cd0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2280      	movs	r2, #128	; 0x80
 8001cca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e00c      	b.n	8001cea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2205      	movs	r2, #5
 8001cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a37      	ldr	r2, [pc, #220]	; (8001df0 <HAL_GPIO_Init+0xf8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01f      	beq.n	8001d56 <HAL_GPIO_Init+0x5e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a36      	ldr	r2, [pc, #216]	; (8001df4 <HAL_GPIO_Init+0xfc>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d01b      	beq.n	8001d56 <HAL_GPIO_Init+0x5e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a35      	ldr	r2, [pc, #212]	; (8001df8 <HAL_GPIO_Init+0x100>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d017      	beq.n	8001d56 <HAL_GPIO_Init+0x5e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a34      	ldr	r2, [pc, #208]	; (8001dfc <HAL_GPIO_Init+0x104>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d013      	beq.n	8001d56 <HAL_GPIO_Init+0x5e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a33      	ldr	r2, [pc, #204]	; (8001e00 <HAL_GPIO_Init+0x108>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00f      	beq.n	8001d56 <HAL_GPIO_Init+0x5e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a32      	ldr	r2, [pc, #200]	; (8001e04 <HAL_GPIO_Init+0x10c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00b      	beq.n	8001d56 <HAL_GPIO_Init+0x5e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a31      	ldr	r2, [pc, #196]	; (8001e08 <HAL_GPIO_Init+0x110>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d007      	beq.n	8001d56 <HAL_GPIO_Init+0x5e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a30      	ldr	r2, [pc, #192]	; (8001e0c <HAL_GPIO_Init+0x114>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x5e>
 8001d4e:	21ac      	movs	r1, #172	; 0xac
 8001d50:	482f      	ldr	r0, [pc, #188]	; (8001e10 <HAL_GPIO_Init+0x118>)
 8001d52:	f7fe fe3c 	bl	80009ce <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <HAL_GPIO_Init+0x74>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	0c1b      	lsrs	r3, r3, #16
 8001d66:	041b      	lsls	r3, r3, #16
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x7c>
 8001d6c:	21ad      	movs	r1, #173	; 0xad
 8001d6e:	4828      	ldr	r0, [pc, #160]	; (8001e10 <HAL_GPIO_Init+0x118>)
 8001d70:	f7fe fe2d 	bl	80009ce <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d035      	beq.n	8001de8 <HAL_GPIO_Init+0xf0>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d031      	beq.n	8001de8 <HAL_GPIO_Init+0xf0>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b11      	cmp	r3, #17
 8001d8a:	d02d      	beq.n	8001de8 <HAL_GPIO_Init+0xf0>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d029      	beq.n	8001de8 <HAL_GPIO_Init+0xf0>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b12      	cmp	r3, #18
 8001d9a:	d025      	beq.n	8001de8 <HAL_GPIO_Init+0xf0>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001da4:	d020      	beq.n	8001de8 <HAL_GPIO_Init+0xf0>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001dae:	d01b      	beq.n	8001de8 <HAL_GPIO_Init+0xf0>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001db8:	d016      	beq.n	8001de8 <HAL_GPIO_Init+0xf0>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001dc2:	d011      	beq.n	8001de8 <HAL_GPIO_Init+0xf0>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001dcc:	d00c      	beq.n	8001de8 <HAL_GPIO_Init+0xf0>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001dd6:	d007      	beq.n	8001de8 <HAL_GPIO_Init+0xf0>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0xf0>
 8001de0:	21ae      	movs	r1, #174	; 0xae
 8001de2:	480b      	ldr	r0, [pc, #44]	; (8001e10 <HAL_GPIO_Init+0x118>)
 8001de4:	f7fe fdf3 	bl	80009ce <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
 8001dec:	e289      	b.n	8002302 <HAL_GPIO_Init+0x60a>
 8001dee:	bf00      	nop
 8001df0:	40020000 	.word	0x40020000
 8001df4:	40020400 	.word	0x40020400
 8001df8:	40020800 	.word	0x40020800
 8001dfc:	40020c00 	.word	0x40020c00
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40021400 	.word	0x40021400
 8001e08:	40021800 	.word	0x40021800
 8001e0c:	40021c00 	.word	0x40021c00
 8001e10:	08006b34 	.word	0x08006b34
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e14:	2201      	movs	r2, #1
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	f040 8265 	bne.w	80022fc <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d005      	beq.n	8001e4a <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d144      	bne.n	8001ed4 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00f      	beq.n	8001e72 <HAL_GPIO_Init+0x17a>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d00b      	beq.n	8001e72 <HAL_GPIO_Init+0x17a>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d007      	beq.n	8001e72 <HAL_GPIO_Init+0x17a>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x17a>
 8001e6a:	21c0      	movs	r1, #192	; 0xc0
 8001e6c:	4831      	ldr	r0, [pc, #196]	; (8001f34 <HAL_GPIO_Init+0x23c>)
 8001e6e:	f7fe fdae 	bl	80009ce <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 0201 	and.w	r2, r3, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d02b      	beq.n	8001f38 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00b      	beq.n	8001f00 <HAL_GPIO_Init+0x208>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d007      	beq.n	8001f00 <HAL_GPIO_Init+0x208>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x208>
 8001ef8:	21d1      	movs	r1, #209	; 0xd1
 8001efa:	480e      	ldr	r0, [pc, #56]	; (8001f34 <HAL_GPIO_Init+0x23c>)
 8001efc:	f7fe fd67 	bl	80009ce <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	60da      	str	r2, [r3, #12]
 8001f30:	e002      	b.n	8001f38 <HAL_GPIO_Init+0x240>
 8001f32:	bf00      	nop
 8001f34:	08006b34 	.word	0x08006b34
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	f040 810c 	bne.w	800215e <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 80e3 	beq.w	8002116 <HAL_GPIO_Init+0x41e>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	2b09      	cmp	r3, #9
 8001f56:	f000 80de 	beq.w	8002116 <HAL_GPIO_Init+0x41e>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80d9 	beq.w	8002116 <HAL_GPIO_Init+0x41e>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80d4 	beq.w	8002116 <HAL_GPIO_Init+0x41e>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 80cf 	beq.w	8002116 <HAL_GPIO_Init+0x41e>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 80ca 	beq.w	8002116 <HAL_GPIO_Init+0x41e>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	f000 80c5 	beq.w	8002116 <HAL_GPIO_Init+0x41e>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	f000 80c0 	beq.w	8002116 <HAL_GPIO_Init+0x41e>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	f000 80bb 	beq.w	8002116 <HAL_GPIO_Init+0x41e>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	f000 80b6 	beq.w	8002116 <HAL_GPIO_Init+0x41e>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	f000 80b1 	beq.w	8002116 <HAL_GPIO_Init+0x41e>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	f000 80ac 	beq.w	8002116 <HAL_GPIO_Init+0x41e>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	f000 80a7 	beq.w	8002116 <HAL_GPIO_Init+0x41e>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	f000 80a2 	beq.w	8002116 <HAL_GPIO_Init+0x41e>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	f000 809d 	beq.w	8002116 <HAL_GPIO_Init+0x41e>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	f000 8098 	beq.w	8002116 <HAL_GPIO_Init+0x41e>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	f000 8093 	beq.w	8002116 <HAL_GPIO_Init+0x41e>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2b09      	cmp	r3, #9
 8001ff6:	f000 808e 	beq.w	8002116 <HAL_GPIO_Init+0x41e>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	f000 8089 	beq.w	8002116 <HAL_GPIO_Init+0x41e>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	2b09      	cmp	r3, #9
 800200a:	f000 8084 	beq.w	8002116 <HAL_GPIO_Init+0x41e>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	2b07      	cmp	r3, #7
 8002014:	d07f      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	2b07      	cmp	r3, #7
 800201c:	d07b      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	2b07      	cmp	r3, #7
 8002024:	d077      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b08      	cmp	r3, #8
 800202c:	d073      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b08      	cmp	r3, #8
 8002034:	d06f      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b08      	cmp	r3, #8
 800203c:	d06b      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	2b09      	cmp	r3, #9
 8002044:	d067      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	2b09      	cmp	r3, #9
 800204c:	d063      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2b0a      	cmp	r3, #10
 8002054:	d05f      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	2b0a      	cmp	r3, #10
 800205c:	d05b      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b0b      	cmp	r3, #11
 8002064:	d057      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	2b0c      	cmp	r3, #12
 800206c:	d053      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b0c      	cmp	r3, #12
 8002074:	d04f      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	2b0d      	cmp	r3, #13
 800207c:	d04b      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2b0f      	cmp	r3, #15
 8002084:	d047      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	2b05      	cmp	r3, #5
 800208c:	d043      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	2b0c      	cmp	r3, #12
 8002094:	d03f      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b06      	cmp	r3, #6
 800209c:	d03b      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d037      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d033      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d02f      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d02b      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d027      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	2b07      	cmp	r3, #7
 80020cc:	d023      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	2b07      	cmp	r3, #7
 80020d4:	d01f      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b07      	cmp	r3, #7
 80020dc:	d01b      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b07      	cmp	r3, #7
 80020e4:	d017      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d013      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d00f      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	2b09      	cmp	r3, #9
 80020fc:	d00b      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b0a      	cmp	r3, #10
 8002104:	d007      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	2b0a      	cmp	r3, #10
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x41e>
 800210e:	21de      	movs	r1, #222	; 0xde
 8002110:	4880      	ldr	r0, [pc, #512]	; (8002314 <HAL_GPIO_Init+0x61c>)
 8002112:	f7fe fc5c 	bl	80009ce <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	08da      	lsrs	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3208      	adds	r2, #8
 800211e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	220f      	movs	r2, #15
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	08da      	lsrs	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3208      	adds	r2, #8
 8002158:	69b9      	ldr	r1, [r7, #24]
 800215a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	2203      	movs	r2, #3
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 0203 	and.w	r2, r3, #3
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 80ae 	beq.w	80022fc <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	4b5c      	ldr	r3, [pc, #368]	; (8002318 <HAL_GPIO_Init+0x620>)
 80021a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a8:	4a5b      	ldr	r2, [pc, #364]	; (8002318 <HAL_GPIO_Init+0x620>)
 80021aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ae:	6453      	str	r3, [r2, #68]	; 0x44
 80021b0:	4b59      	ldr	r3, [pc, #356]	; (8002318 <HAL_GPIO_Init+0x620>)
 80021b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021bc:	4a57      	ldr	r2, [pc, #348]	; (800231c <HAL_GPIO_Init+0x624>)
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	3302      	adds	r3, #2
 80021c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	220f      	movs	r2, #15
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a4f      	ldr	r2, [pc, #316]	; (8002320 <HAL_GPIO_Init+0x628>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d025      	beq.n	8002234 <HAL_GPIO_Init+0x53c>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a4e      	ldr	r2, [pc, #312]	; (8002324 <HAL_GPIO_Init+0x62c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d01f      	beq.n	8002230 <HAL_GPIO_Init+0x538>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a4d      	ldr	r2, [pc, #308]	; (8002328 <HAL_GPIO_Init+0x630>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d019      	beq.n	800222c <HAL_GPIO_Init+0x534>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a4c      	ldr	r2, [pc, #304]	; (800232c <HAL_GPIO_Init+0x634>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d013      	beq.n	8002228 <HAL_GPIO_Init+0x530>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a4b      	ldr	r2, [pc, #300]	; (8002330 <HAL_GPIO_Init+0x638>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d00d      	beq.n	8002224 <HAL_GPIO_Init+0x52c>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a4a      	ldr	r2, [pc, #296]	; (8002334 <HAL_GPIO_Init+0x63c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d007      	beq.n	8002220 <HAL_GPIO_Init+0x528>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a49      	ldr	r2, [pc, #292]	; (8002338 <HAL_GPIO_Init+0x640>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d101      	bne.n	800221c <HAL_GPIO_Init+0x524>
 8002218:	2306      	movs	r3, #6
 800221a:	e00c      	b.n	8002236 <HAL_GPIO_Init+0x53e>
 800221c:	2307      	movs	r3, #7
 800221e:	e00a      	b.n	8002236 <HAL_GPIO_Init+0x53e>
 8002220:	2305      	movs	r3, #5
 8002222:	e008      	b.n	8002236 <HAL_GPIO_Init+0x53e>
 8002224:	2304      	movs	r3, #4
 8002226:	e006      	b.n	8002236 <HAL_GPIO_Init+0x53e>
 8002228:	2303      	movs	r3, #3
 800222a:	e004      	b.n	8002236 <HAL_GPIO_Init+0x53e>
 800222c:	2302      	movs	r3, #2
 800222e:	e002      	b.n	8002236 <HAL_GPIO_Init+0x53e>
 8002230:	2301      	movs	r3, #1
 8002232:	e000      	b.n	8002236 <HAL_GPIO_Init+0x53e>
 8002234:	2300      	movs	r3, #0
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	f002 0203 	and.w	r2, r2, #3
 800223c:	0092      	lsls	r2, r2, #2
 800223e:	4093      	lsls	r3, r2
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002246:	4935      	ldr	r1, [pc, #212]	; (800231c <HAL_GPIO_Init+0x624>)
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	089b      	lsrs	r3, r3, #2
 800224c:	3302      	adds	r3, #2
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002254:	4b39      	ldr	r3, [pc, #228]	; (800233c <HAL_GPIO_Init+0x644>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002278:	4a30      	ldr	r2, [pc, #192]	; (800233c <HAL_GPIO_Init+0x644>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800227e:	4b2f      	ldr	r3, [pc, #188]	; (800233c <HAL_GPIO_Init+0x644>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022a2:	4a26      	ldr	r2, [pc, #152]	; (800233c <HAL_GPIO_Init+0x644>)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_GPIO_Init+0x644>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022cc:	4a1b      	ldr	r2, [pc, #108]	; (800233c <HAL_GPIO_Init+0x644>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d2:	4b1a      	ldr	r3, [pc, #104]	; (800233c <HAL_GPIO_Init+0x644>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022f6:	4a11      	ldr	r2, [pc, #68]	; (800233c <HAL_GPIO_Init+0x644>)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	3301      	adds	r3, #1
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	2b0f      	cmp	r3, #15
 8002306:	f67f ad85 	bls.w	8001e14 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 800230a:	bf00      	nop
 800230c:	bf00      	nop
 800230e:	3720      	adds	r7, #32
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	08006b34 	.word	0x08006b34
 8002318:	40023800 	.word	0x40023800
 800231c:	40013800 	.word	0x40013800
 8002320:	40020000 	.word	0x40020000
 8002324:	40020400 	.word	0x40020400
 8002328:	40020800 	.word	0x40020800
 800232c:	40020c00 	.word	0x40020c00
 8002330:	40021000 	.word	0x40021000
 8002334:	40021400 	.word	0x40021400
 8002338:	40021800 	.word	0x40021800
 800233c:	40013c00 	.word	0x40013c00

08002340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
 800234c:	4613      	mov	r3, r2
 800234e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002350:	887b      	ldrh	r3, [r7, #2]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d004      	beq.n	8002360 <HAL_GPIO_WritePin+0x20>
 8002356:	887b      	ldrh	r3, [r7, #2]
 8002358:	0c1b      	lsrs	r3, r3, #16
 800235a:	041b      	lsls	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	d004      	beq.n	800236a <HAL_GPIO_WritePin+0x2a>
 8002360:	f240 119d 	movw	r1, #413	; 0x19d
 8002364:	480e      	ldr	r0, [pc, #56]	; (80023a0 <HAL_GPIO_WritePin+0x60>)
 8002366:	f7fe fb32 	bl	80009ce <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800236a:	787b      	ldrb	r3, [r7, #1]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d007      	beq.n	8002380 <HAL_GPIO_WritePin+0x40>
 8002370:	787b      	ldrb	r3, [r7, #1]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d004      	beq.n	8002380 <HAL_GPIO_WritePin+0x40>
 8002376:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800237a:	4809      	ldr	r0, [pc, #36]	; (80023a0 <HAL_GPIO_WritePin+0x60>)
 800237c:	f7fe fb27 	bl	80009ce <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002380:	787b      	ldrb	r3, [r7, #1]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002386:	887a      	ldrh	r2, [r7, #2]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800238c:	e003      	b.n	8002396 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800238e:	887b      	ldrh	r3, [r7, #2]
 8002390:	041a      	lsls	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	619a      	str	r2, [r3, #24]
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	08006b34 	.word	0x08006b34

080023a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e18c      	b.n	80026d2 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x24>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b0f      	cmp	r3, #15
 80023c6:	d904      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x2e>
 80023c8:	f240 215a 	movw	r1, #602	; 0x25a
 80023cc:	4887      	ldr	r0, [pc, #540]	; (80025ec <HAL_RCC_ClockConfig+0x248>)
 80023ce:	f7fe fafe 	bl	80009ce <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d031      	beq.n	800243c <HAL_RCC_ClockConfig+0x98>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d02e      	beq.n	800243c <HAL_RCC_ClockConfig+0x98>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d02b      	beq.n	800243c <HAL_RCC_ClockConfig+0x98>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d028      	beq.n	800243c <HAL_RCC_ClockConfig+0x98>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d025      	beq.n	800243c <HAL_RCC_ClockConfig+0x98>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2b05      	cmp	r3, #5
 80023f4:	d022      	beq.n	800243c <HAL_RCC_ClockConfig+0x98>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2b06      	cmp	r3, #6
 80023fa:	d01f      	beq.n	800243c <HAL_RCC_ClockConfig+0x98>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	2b07      	cmp	r3, #7
 8002400:	d01c      	beq.n	800243c <HAL_RCC_ClockConfig+0x98>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b08      	cmp	r3, #8
 8002406:	d019      	beq.n	800243c <HAL_RCC_ClockConfig+0x98>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	2b09      	cmp	r3, #9
 800240c:	d016      	beq.n	800243c <HAL_RCC_ClockConfig+0x98>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b0a      	cmp	r3, #10
 8002412:	d013      	beq.n	800243c <HAL_RCC_ClockConfig+0x98>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2b0b      	cmp	r3, #11
 8002418:	d010      	beq.n	800243c <HAL_RCC_ClockConfig+0x98>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b0c      	cmp	r3, #12
 800241e:	d00d      	beq.n	800243c <HAL_RCC_ClockConfig+0x98>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	2b0d      	cmp	r3, #13
 8002424:	d00a      	beq.n	800243c <HAL_RCC_ClockConfig+0x98>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b0e      	cmp	r3, #14
 800242a:	d007      	beq.n	800243c <HAL_RCC_ClockConfig+0x98>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	2b0f      	cmp	r3, #15
 8002430:	d004      	beq.n	800243c <HAL_RCC_ClockConfig+0x98>
 8002432:	f240 215b 	movw	r1, #603	; 0x25b
 8002436:	486d      	ldr	r0, [pc, #436]	; (80025ec <HAL_RCC_ClockConfig+0x248>)
 8002438:	f7fe fac9 	bl	80009ce <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800243c:	4b6c      	ldr	r3, [pc, #432]	; (80025f0 <HAL_RCC_ClockConfig+0x24c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d90c      	bls.n	8002464 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b69      	ldr	r3, [pc, #420]	; (80025f0 <HAL_RCC_ClockConfig+0x24c>)
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002452:	4b67      	ldr	r3, [pc, #412]	; (80025f0 <HAL_RCC_ClockConfig+0x24c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e136      	b.n	80026d2 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d049      	beq.n	8002504 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800247c:	4b5d      	ldr	r3, [pc, #372]	; (80025f4 <HAL_RCC_ClockConfig+0x250>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4a5c      	ldr	r2, [pc, #368]	; (80025f4 <HAL_RCC_ClockConfig+0x250>)
 8002482:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002486:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002494:	4b57      	ldr	r3, [pc, #348]	; (80025f4 <HAL_RCC_ClockConfig+0x250>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4a56      	ldr	r2, [pc, #344]	; (80025f4 <HAL_RCC_ClockConfig+0x250>)
 800249a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800249e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d024      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x14e>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b80      	cmp	r3, #128	; 0x80
 80024ae:	d020      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x14e>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b90      	cmp	r3, #144	; 0x90
 80024b6:	d01c      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x14e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2ba0      	cmp	r3, #160	; 0xa0
 80024be:	d018      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x14e>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2bb0      	cmp	r3, #176	; 0xb0
 80024c6:	d014      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x14e>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2bc0      	cmp	r3, #192	; 0xc0
 80024ce:	d010      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x14e>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2bd0      	cmp	r3, #208	; 0xd0
 80024d6:	d00c      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x14e>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2be0      	cmp	r3, #224	; 0xe0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x14e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2bf0      	cmp	r3, #240	; 0xf0
 80024e6:	d004      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x14e>
 80024e8:	f240 217e 	movw	r1, #638	; 0x27e
 80024ec:	483f      	ldr	r0, [pc, #252]	; (80025ec <HAL_RCC_ClockConfig+0x248>)
 80024ee:	f7fe fa6e 	bl	80009ce <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f2:	4b40      	ldr	r3, [pc, #256]	; (80025f4 <HAL_RCC_ClockConfig+0x250>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	493d      	ldr	r1, [pc, #244]	; (80025f4 <HAL_RCC_ClockConfig+0x250>)
 8002500:	4313      	orrs	r3, r2
 8002502:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d059      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d010      	beq.n	800253a <HAL_RCC_ClockConfig+0x196>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d00c      	beq.n	800253a <HAL_RCC_ClockConfig+0x196>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d008      	beq.n	800253a <HAL_RCC_ClockConfig+0x196>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d004      	beq.n	800253a <HAL_RCC_ClockConfig+0x196>
 8002530:	f240 2185 	movw	r1, #645	; 0x285
 8002534:	482d      	ldr	r0, [pc, #180]	; (80025ec <HAL_RCC_ClockConfig+0x248>)
 8002536:	f7fe fa4a 	bl	80009ce <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	4b2c      	ldr	r3, [pc, #176]	; (80025f4 <HAL_RCC_ClockConfig+0x250>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d119      	bne.n	8002582 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e0bf      	b.n	80026d2 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d003      	beq.n	8002562 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800255e:	2b03      	cmp	r3, #3
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002562:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <HAL_RCC_ClockConfig+0x250>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e0af      	b.n	80026d2 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002572:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <HAL_RCC_ClockConfig+0x250>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e0a7      	b.n	80026d2 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002582:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <HAL_RCC_ClockConfig+0x250>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f023 0203 	bic.w	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4919      	ldr	r1, [pc, #100]	; (80025f4 <HAL_RCC_ClockConfig+0x250>)
 8002590:	4313      	orrs	r3, r2
 8002592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002594:	f7fe fc48 	bl	8000e28 <HAL_GetTick>
 8002598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259c:	f7fe fc44 	bl	8000e28 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e08f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_RCC_ClockConfig+0x250>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 020c 	and.w	r2, r3, #12
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d1eb      	bne.n	800259c <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025c4:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_RCC_ClockConfig+0x24c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d212      	bcs.n	80025f8 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <HAL_RCC_ClockConfig+0x24c>)
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_RCC_ClockConfig+0x24c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d007      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e072      	b.n	80026d2 <HAL_RCC_ClockConfig+0x32e>
 80025ec:	08006ba8 	.word	0x08006ba8
 80025f0:	40023c00 	.word	0x40023c00
 80025f4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d025      	beq.n	8002650 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d018      	beq.n	800263e <HAL_RCC_ClockConfig+0x29a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002614:	d013      	beq.n	800263e <HAL_RCC_ClockConfig+0x29a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800261e:	d00e      	beq.n	800263e <HAL_RCC_ClockConfig+0x29a>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002628:	d009      	beq.n	800263e <HAL_RCC_ClockConfig+0x29a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002632:	d004      	beq.n	800263e <HAL_RCC_ClockConfig+0x29a>
 8002634:	f240 21c3 	movw	r1, #707	; 0x2c3
 8002638:	4828      	ldr	r0, [pc, #160]	; (80026dc <HAL_RCC_ClockConfig+0x338>)
 800263a:	f7fe f9c8 	bl	80009ce <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800263e:	4b28      	ldr	r3, [pc, #160]	; (80026e0 <HAL_RCC_ClockConfig+0x33c>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	4925      	ldr	r1, [pc, #148]	; (80026e0 <HAL_RCC_ClockConfig+0x33c>)
 800264c:	4313      	orrs	r3, r2
 800264e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d026      	beq.n	80026aa <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d018      	beq.n	8002696 <HAL_RCC_ClockConfig+0x2f2>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266c:	d013      	beq.n	8002696 <HAL_RCC_ClockConfig+0x2f2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002676:	d00e      	beq.n	8002696 <HAL_RCC_ClockConfig+0x2f2>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002680:	d009      	beq.n	8002696 <HAL_RCC_ClockConfig+0x2f2>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800268a:	d004      	beq.n	8002696 <HAL_RCC_ClockConfig+0x2f2>
 800268c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8002690:	4812      	ldr	r0, [pc, #72]	; (80026dc <HAL_RCC_ClockConfig+0x338>)
 8002692:	f7fe f99c 	bl	80009ce <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002696:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_RCC_ClockConfig+0x33c>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	490e      	ldr	r1, [pc, #56]	; (80026e0 <HAL_RCC_ClockConfig+0x33c>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026aa:	f000 f909 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 80026ae:	4602      	mov	r2, r0
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_RCC_ClockConfig+0x33c>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	490a      	ldr	r1, [pc, #40]	; (80026e4 <HAL_RCC_ClockConfig+0x340>)
 80026bc:	5ccb      	ldrb	r3, [r1, r3]
 80026be:	fa22 f303 	lsr.w	r3, r2, r3
 80026c2:	4a09      	ldr	r2, [pc, #36]	; (80026e8 <HAL_RCC_ClockConfig+0x344>)
 80026c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCC_ClockConfig+0x348>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fb68 	bl	8000da0 <HAL_InitTick>

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	08006ba8 	.word	0x08006ba8
 80026e0:	40023800 	.word	0x40023800
 80026e4:	08006dec 	.word	0x08006dec
 80026e8:	20000000 	.word	0x20000000
 80026ec:	20000004 	.word	0x20000004

080026f0 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08c      	sub	sp, #48	; 0x30
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d007      	beq.n	8002712 <HAL_RCC_MCOConfig+0x22>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d004      	beq.n	8002712 <HAL_RCC_MCOConfig+0x22>
 8002708:	f240 310b 	movw	r1, #779	; 0x30b
 800270c:	484e      	ldr	r0, [pc, #312]	; (8002848 <HAL_RCC_MCOConfig+0x158>)
 800270e:	f7fe f95e 	bl	80009ce <assert_failed>
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d014      	beq.n	8002742 <HAL_RCC_MCOConfig+0x52>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800271e:	d010      	beq.n	8002742 <HAL_RCC_MCOConfig+0x52>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002726:	d00c      	beq.n	8002742 <HAL_RCC_MCOConfig+0x52>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800272e:	d008      	beq.n	8002742 <HAL_RCC_MCOConfig+0x52>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8002736:	d004      	beq.n	8002742 <HAL_RCC_MCOConfig+0x52>
 8002738:	f44f 7143 	mov.w	r1, #780	; 0x30c
 800273c:	4842      	ldr	r0, [pc, #264]	; (8002848 <HAL_RCC_MCOConfig+0x158>)
 800273e:	f7fe f946 	bl	80009ce <assert_failed>
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d13d      	bne.n	80027c4 <HAL_RCC_MCOConfig+0xd4>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d010      	beq.n	8002770 <HAL_RCC_MCOConfig+0x80>
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002754:	d00c      	beq.n	8002770 <HAL_RCC_MCOConfig+0x80>
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800275c:	d008      	beq.n	8002770 <HAL_RCC_MCOConfig+0x80>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002764:	d004      	beq.n	8002770 <HAL_RCC_MCOConfig+0x80>
 8002766:	f44f 7144 	mov.w	r1, #784	; 0x310
 800276a:	4837      	ldr	r0, [pc, #220]	; (8002848 <HAL_RCC_MCOConfig+0x158>)
 800276c:	f7fe f92f 	bl	80009ce <assert_failed>

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8002770:	2300      	movs	r3, #0
 8002772:	61bb      	str	r3, [r7, #24]
 8002774:	4b35      	ldr	r3, [pc, #212]	; (800284c <HAL_RCC_MCOConfig+0x15c>)
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	4a34      	ldr	r2, [pc, #208]	; (800284c <HAL_RCC_MCOConfig+0x15c>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6313      	str	r3, [r2, #48]	; 0x30
 8002780:	4b32      	ldr	r3, [pc, #200]	; (800284c <HAL_RCC_MCOConfig+0x15c>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800278c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002792:	2302      	movs	r3, #2
 8002794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002796:	2303      	movs	r3, #3
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800279e:	2300      	movs	r3, #0
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80027a2:	f107 031c 	add.w	r3, r7, #28
 80027a6:	4619      	mov	r1, r3
 80027a8:	4829      	ldr	r0, [pc, #164]	; (8002850 <HAL_RCC_MCOConfig+0x160>)
 80027aa:	f7ff faa5 	bl	8001cf8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80027ae:	4b27      	ldr	r3, [pc, #156]	; (800284c <HAL_RCC_MCOConfig+0x15c>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80027b6:	68b9      	ldr	r1, [r7, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	430b      	orrs	r3, r1
 80027bc:	4923      	ldr	r1, [pc, #140]	; (800284c <HAL_RCC_MCOConfig+0x15c>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80027c2:	e03d      	b.n	8002840 <HAL_RCC_MCOConfig+0x150>
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d010      	beq.n	80027ec <HAL_RCC_MCOConfig+0xfc>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d0:	d00c      	beq.n	80027ec <HAL_RCC_MCOConfig+0xfc>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027d8:	d008      	beq.n	80027ec <HAL_RCC_MCOConfig+0xfc>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80027e0:	d004      	beq.n	80027ec <HAL_RCC_MCOConfig+0xfc>
 80027e2:	f44f 714a 	mov.w	r1, #808	; 0x328
 80027e6:	4818      	ldr	r0, [pc, #96]	; (8002848 <HAL_RCC_MCOConfig+0x158>)
 80027e8:	f7fe f8f1 	bl	80009ce <assert_failed>
    __MCO2_CLK_ENABLE();
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	4b16      	ldr	r3, [pc, #88]	; (800284c <HAL_RCC_MCOConfig+0x15c>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	4a15      	ldr	r2, [pc, #84]	; (800284c <HAL_RCC_MCOConfig+0x15c>)
 80027f6:	f043 0304 	orr.w	r3, r3, #4
 80027fa:	6313      	str	r3, [r2, #48]	; 0x30
 80027fc:	4b13      	ldr	r3, [pc, #76]	; (800284c <HAL_RCC_MCOConfig+0x15c>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800280c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280e:	2302      	movs	r3, #2
 8002810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002812:	2303      	movs	r3, #3
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800281a:	2300      	movs	r3, #0
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800281e:	f107 031c 	add.w	r3, r7, #28
 8002822:	4619      	mov	r1, r3
 8002824:	480b      	ldr	r0, [pc, #44]	; (8002854 <HAL_RCC_MCOConfig+0x164>)
 8002826:	f7ff fa67 	bl	8001cf8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <HAL_RCC_MCOConfig+0x15c>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	00d9      	lsls	r1, r3, #3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	430b      	orrs	r3, r1
 800283a:	4904      	ldr	r1, [pc, #16]	; (800284c <HAL_RCC_MCOConfig+0x15c>)
 800283c:	4313      	orrs	r3, r2
 800283e:	608b      	str	r3, [r1, #8]
}
 8002840:	bf00      	nop
 8002842:	3730      	adds	r7, #48	; 0x30
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	08006ba8 	.word	0x08006ba8
 800284c:	40023800 	.word	0x40023800
 8002850:	40020000 	.word	0x40020000
 8002854:	40020800 	.word	0x40020800

08002858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_RCC_GetHCLKFreq+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000000 	.word	0x20000000

08002870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002874:	f7ff fff0 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 8002878:	4602      	mov	r2, r0
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	0a9b      	lsrs	r3, r3, #10
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	4903      	ldr	r1, [pc, #12]	; (8002894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002886:	5ccb      	ldrb	r3, [r1, r3]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40023800 	.word	0x40023800
 8002894:	08006dfc 	.word	0x08006dfc

08002898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800289c:	f7ff ffdc 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	0b5b      	lsrs	r3, r3, #13
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4903      	ldr	r1, [pc, #12]	; (80028bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40023800 	.word	0x40023800
 80028bc:	08006dfc 	.word	0x08006dfc

080028c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c4:	b0a6      	sub	sp, #152	; 0x98
 80028c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028e6:	4bc8      	ldr	r3, [pc, #800]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x348>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b0c      	cmp	r3, #12
 80028f0:	f200 817e 	bhi.w	8002bf0 <HAL_RCC_GetSysClockFreq+0x330>
 80028f4:	a201      	add	r2, pc, #4	; (adr r2, 80028fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80028f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fa:	bf00      	nop
 80028fc:	08002931 	.word	0x08002931
 8002900:	08002bf1 	.word	0x08002bf1
 8002904:	08002bf1 	.word	0x08002bf1
 8002908:	08002bf1 	.word	0x08002bf1
 800290c:	08002939 	.word	0x08002939
 8002910:	08002bf1 	.word	0x08002bf1
 8002914:	08002bf1 	.word	0x08002bf1
 8002918:	08002bf1 	.word	0x08002bf1
 800291c:	08002941 	.word	0x08002941
 8002920:	08002bf1 	.word	0x08002bf1
 8002924:	08002bf1 	.word	0x08002bf1
 8002928:	08002bf1 	.word	0x08002bf1
 800292c:	08002aab 	.word	0x08002aab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002930:	4bb6      	ldr	r3, [pc, #728]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002936:	e15f      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002938:	4bb5      	ldr	r3, [pc, #724]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x350>)
 800293a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800293e:	e15b      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002940:	4bb1      	ldr	r3, [pc, #708]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x348>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002948:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800294c:	4bae      	ldr	r3, [pc, #696]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x348>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d031      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002958:	4bab      	ldr	r3, [pc, #684]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x348>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	099b      	lsrs	r3, r3, #6
 800295e:	2200      	movs	r2, #0
 8002960:	66bb      	str	r3, [r7, #104]	; 0x68
 8002962:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002964:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800296a:	663b      	str	r3, [r7, #96]	; 0x60
 800296c:	2300      	movs	r3, #0
 800296e:	667b      	str	r3, [r7, #100]	; 0x64
 8002970:	4ba7      	ldr	r3, [pc, #668]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x350>)
 8002972:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002976:	462a      	mov	r2, r5
 8002978:	fb03 f202 	mul.w	r2, r3, r2
 800297c:	2300      	movs	r3, #0
 800297e:	4621      	mov	r1, r4
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	4413      	add	r3, r2
 8002986:	4aa2      	ldr	r2, [pc, #648]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x350>)
 8002988:	4621      	mov	r1, r4
 800298a:	fba1 1202 	umull	r1, r2, r1, r2
 800298e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002990:	460a      	mov	r2, r1
 8002992:	67ba      	str	r2, [r7, #120]	; 0x78
 8002994:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002996:	4413      	add	r3, r2
 8002998:	67fb      	str	r3, [r7, #124]	; 0x7c
 800299a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800299e:	2200      	movs	r2, #0
 80029a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80029a2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80029a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029a8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80029ac:	f7fd fc88 	bl	80002c0 <__aeabi_uldivmod>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4613      	mov	r3, r2
 80029b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80029ba:	e064      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029bc:	4b92      	ldr	r3, [pc, #584]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x348>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	099b      	lsrs	r3, r3, #6
 80029c2:	2200      	movs	r2, #0
 80029c4:	653b      	str	r3, [r7, #80]	; 0x50
 80029c6:	657a      	str	r2, [r7, #84]	; 0x54
 80029c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80029d0:	2300      	movs	r3, #0
 80029d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029d4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80029d8:	4622      	mov	r2, r4
 80029da:	462b      	mov	r3, r5
 80029dc:	f04f 0000 	mov.w	r0, #0
 80029e0:	f04f 0100 	mov.w	r1, #0
 80029e4:	0159      	lsls	r1, r3, #5
 80029e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029ea:	0150      	lsls	r0, r2, #5
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4621      	mov	r1, r4
 80029f2:	1a51      	subs	r1, r2, r1
 80029f4:	6139      	str	r1, [r7, #16]
 80029f6:	4629      	mov	r1, r5
 80029f8:	eb63 0301 	sbc.w	r3, r3, r1
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a0a:	4659      	mov	r1, fp
 8002a0c:	018b      	lsls	r3, r1, #6
 8002a0e:	4651      	mov	r1, sl
 8002a10:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a14:	4651      	mov	r1, sl
 8002a16:	018a      	lsls	r2, r1, #6
 8002a18:	4651      	mov	r1, sl
 8002a1a:	ebb2 0801 	subs.w	r8, r2, r1
 8002a1e:	4659      	mov	r1, fp
 8002a20:	eb63 0901 	sbc.w	r9, r3, r1
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a38:	4690      	mov	r8, r2
 8002a3a:	4699      	mov	r9, r3
 8002a3c:	4623      	mov	r3, r4
 8002a3e:	eb18 0303 	adds.w	r3, r8, r3
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	462b      	mov	r3, r5
 8002a46:	eb49 0303 	adc.w	r3, r9, r3
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a58:	4629      	mov	r1, r5
 8002a5a:	028b      	lsls	r3, r1, #10
 8002a5c:	4621      	mov	r1, r4
 8002a5e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a62:	4621      	mov	r1, r4
 8002a64:	028a      	lsls	r2, r1, #10
 8002a66:	4610      	mov	r0, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a6e:	2200      	movs	r2, #0
 8002a70:	643b      	str	r3, [r7, #64]	; 0x40
 8002a72:	647a      	str	r2, [r7, #68]	; 0x44
 8002a74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a78:	f7fd fc22 	bl	80002c0 <__aeabi_uldivmod>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4613      	mov	r3, r2
 8002a82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a86:	4b60      	ldr	r3, [pc, #384]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	0c1b      	lsrs	r3, r3, #16
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	3301      	adds	r3, #1
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002a98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002aa8:	e0a6      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aaa:	4b57      	ldr	r3, [pc, #348]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x348>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ab2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ab6:	4b54      	ldr	r3, [pc, #336]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d02a      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac2:	4b51      	ldr	r3, [pc, #324]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	099b      	lsrs	r3, r3, #6
 8002ac8:	2200      	movs	r2, #0
 8002aca:	63bb      	str	r3, [r7, #56]	; 0x38
 8002acc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4b4e      	ldr	r3, [pc, #312]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x350>)
 8002ad8:	fb03 f201 	mul.w	r2, r3, r1
 8002adc:	2300      	movs	r3, #0
 8002ade:	fb00 f303 	mul.w	r3, r0, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	4a4a      	ldr	r2, [pc, #296]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x350>)
 8002ae6:	fba0 1202 	umull	r1, r2, r0, r2
 8002aea:	677a      	str	r2, [r7, #116]	; 0x74
 8002aec:	460a      	mov	r2, r1
 8002aee:	673a      	str	r2, [r7, #112]	; 0x70
 8002af0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002af2:	4413      	add	r3, r2
 8002af4:	677b      	str	r3, [r7, #116]	; 0x74
 8002af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002afa:	2200      	movs	r2, #0
 8002afc:	633b      	str	r3, [r7, #48]	; 0x30
 8002afe:	637a      	str	r2, [r7, #52]	; 0x34
 8002b00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b04:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002b08:	f7fd fbda 	bl	80002c0 <__aeabi_uldivmod>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4613      	mov	r3, r2
 8002b12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b16:	e05b      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b18:	4b3b      	ldr	r3, [pc, #236]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	099b      	lsrs	r3, r3, #6
 8002b1e:	2200      	movs	r2, #0
 8002b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2a:	623b      	str	r3, [r7, #32]
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b34:	4642      	mov	r2, r8
 8002b36:	464b      	mov	r3, r9
 8002b38:	f04f 0000 	mov.w	r0, #0
 8002b3c:	f04f 0100 	mov.w	r1, #0
 8002b40:	0159      	lsls	r1, r3, #5
 8002b42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b46:	0150      	lsls	r0, r2, #5
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4641      	mov	r1, r8
 8002b4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b52:	4649      	mov	r1, r9
 8002b54:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b6c:	ebb2 040a 	subs.w	r4, r2, sl
 8002b70:	eb63 050b 	sbc.w	r5, r3, fp
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	00eb      	lsls	r3, r5, #3
 8002b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b82:	00e2      	lsls	r2, r4, #3
 8002b84:	4614      	mov	r4, r2
 8002b86:	461d      	mov	r5, r3
 8002b88:	4643      	mov	r3, r8
 8002b8a:	18e3      	adds	r3, r4, r3
 8002b8c:	603b      	str	r3, [r7, #0]
 8002b8e:	464b      	mov	r3, r9
 8002b90:	eb45 0303 	adc.w	r3, r5, r3
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	028b      	lsls	r3, r1, #10
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bac:	4621      	mov	r1, r4
 8002bae:	028a      	lsls	r2, r1, #10
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bb8:	2200      	movs	r2, #0
 8002bba:	61bb      	str	r3, [r7, #24]
 8002bbc:	61fa      	str	r2, [r7, #28]
 8002bbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bc2:	f7fd fb7d 	bl	80002c0 <__aeabi_uldivmod>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4613      	mov	r3, r2
 8002bcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bd0:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	0f1b      	lsrs	r3, r3, #28
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002bde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002be2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002bee:	e003      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002bf6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3798      	adds	r7, #152	; 0x98
 8002c00:	46bd      	mov	sp, r7
 8002c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c06:	bf00      	nop
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	00f42400 	.word	0x00f42400
 8002c10:	017d7840 	.word	0x017d7840

08002c14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e347      	b.n	80032b6 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b0f      	cmp	r3, #15
 8002c2c:	d904      	bls.n	8002c38 <HAL_RCC_OscConfig+0x24>
 8002c2e:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 8002c32:	4893      	ldr	r0, [pc, #588]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	f7fd fecb 	bl	80009ce <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8096 	beq.w	8002d72 <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00e      	beq.n	8002c6c <HAL_RCC_OscConfig+0x58>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c56:	d009      	beq.n	8002c6c <HAL_RCC_OscConfig+0x58>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c60:	d004      	beq.n	8002c6c <HAL_RCC_OscConfig+0x58>
 8002c62:	f640 5115 	movw	r1, #3349	; 0xd15
 8002c66:	4886      	ldr	r0, [pc, #536]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	f7fd feb1 	bl	80009ce <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c6c:	4b85      	ldr	r3, [pc, #532]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d019      	beq.n	8002cac <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c78:	4b82      	ldr	r3, [pc, #520]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c84:	4b7f      	ldr	r3, [pc, #508]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c90:	d00c      	beq.n	8002cac <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c92:	4b7c      	ldr	r3, [pc, #496]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c9a:	2b0c      	cmp	r3, #12
 8002c9c:	d112      	bne.n	8002cc4 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c9e:	4b79      	ldr	r3, [pc, #484]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002caa:	d10b      	bne.n	8002cc4 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cac:	4b75      	ldr	r3, [pc, #468]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d05b      	beq.n	8002d70 <HAL_RCC_OscConfig+0x15c>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d157      	bne.n	8002d70 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e2f8      	b.n	80032b6 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ccc:	d106      	bne.n	8002cdc <HAL_RCC_OscConfig+0xc8>
 8002cce:	4b6d      	ldr	r3, [pc, #436]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a6c      	ldr	r2, [pc, #432]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e01d      	b.n	8002d18 <HAL_RCC_OscConfig+0x104>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCC_OscConfig+0xec>
 8002ce6:	4b67      	ldr	r3, [pc, #412]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a66      	ldr	r2, [pc, #408]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	4b64      	ldr	r3, [pc, #400]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a63      	ldr	r2, [pc, #396]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e00b      	b.n	8002d18 <HAL_RCC_OscConfig+0x104>
 8002d00:	4b60      	ldr	r3, [pc, #384]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a5f      	ldr	r2, [pc, #380]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	4b5d      	ldr	r3, [pc, #372]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a5c      	ldr	r2, [pc, #368]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d013      	beq.n	8002d48 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe f882 	bl	8000e28 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d28:	f7fe f87e 	bl	8000e28 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	; 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e2bd      	b.n	80032b6 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3a:	4b52      	ldr	r3, [pc, #328]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x114>
 8002d46:	e014      	b.n	8002d72 <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe f86e 	bl	8000e28 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d50:	f7fe f86a 	bl	8000e28 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	; 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e2a9      	b.n	80032b6 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d62:	4b48      	ldr	r3, [pc, #288]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x13c>
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 808c 	beq.w	8002e98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_RCC_OscConfig+0x186>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d004      	beq.n	8002d9a <HAL_RCC_OscConfig+0x186>
 8002d90:	f640 514d 	movw	r1, #3405	; 0xd4d
 8002d94:	483a      	ldr	r0, [pc, #232]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	f7fd fe1a 	bl	80009ce <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b1f      	cmp	r3, #31
 8002da0:	d904      	bls.n	8002dac <HAL_RCC_OscConfig+0x198>
 8002da2:	f640 514e 	movw	r1, #3406	; 0xd4e
 8002da6:	4836      	ldr	r0, [pc, #216]	; (8002e80 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	f7fd fe11 	bl	80009ce <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002dac:	4b35      	ldr	r3, [pc, #212]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 030c 	and.w	r3, r3, #12
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d017      	beq.n	8002de8 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002db8:	4b32      	ldr	r3, [pc, #200]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d105      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dc4:	4b2f      	ldr	r3, [pc, #188]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00b      	beq.n	8002de8 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd0:	4b2c      	ldr	r3, [pc, #176]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dd8:	2b0c      	cmp	r3, #12
 8002dda:	d11c      	bne.n	8002e16 <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ddc:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d116      	bne.n	8002e16 <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de8:	4b26      	ldr	r3, [pc, #152]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_OscConfig+0x1ec>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e25a      	b.n	80032b6 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e00:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	491d      	ldr	r1, [pc, #116]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e14:	e040      	b.n	8002e98 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d020      	beq.n	8002e60 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <HAL_RCC_OscConfig+0x274>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe f800 	bl	8000e28 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e2c:	f7fd fffc 	bl	8000e28 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e23b      	b.n	80032b6 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	490a      	ldr	r1, [pc, #40]	; (8002e84 <HAL_RCC_OscConfig+0x270>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]
 8002e5e:	e01b      	b.n	8002e98 <HAL_RCC_OscConfig+0x284>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e60:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <HAL_RCC_OscConfig+0x274>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7fd ffdf 	bl	8000e28 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6c:	e00e      	b.n	8002e8c <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7fd ffdb 	bl	8000e28 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d907      	bls.n	8002e8c <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e21a      	b.n	80032b6 <HAL_RCC_OscConfig+0x6a2>
 8002e80:	08006c1c 	.word	0x08006c1c
 8002e84:	40023800 	.word	0x40023800
 8002e88:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8c:	4b74      	ldr	r3, [pc, #464]	; (8003060 <HAL_RCC_OscConfig+0x44c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1ea      	bne.n	8002e6e <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d03d      	beq.n	8002f20 <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_RCC_OscConfig+0x2aa>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d004      	beq.n	8002ebe <HAL_RCC_OscConfig+0x2aa>
 8002eb4:	f640 5194 	movw	r1, #3476	; 0xd94
 8002eb8:	486a      	ldr	r0, [pc, #424]	; (8003064 <HAL_RCC_OscConfig+0x450>)
 8002eba:	f7fd fd88 	bl	80009ce <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d016      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec6:	4b68      	ldr	r3, [pc, #416]	; (8003068 <HAL_RCC_OscConfig+0x454>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ecc:	f7fd ffac 	bl	8000e28 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed4:	f7fd ffa8 	bl	8000e28 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e1e7      	b.n	80032b6 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee6:	4b5e      	ldr	r3, [pc, #376]	; (8003060 <HAL_RCC_OscConfig+0x44c>)
 8002ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x2c0>
 8002ef2:	e015      	b.n	8002f20 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef4:	4b5c      	ldr	r3, [pc, #368]	; (8003068 <HAL_RCC_OscConfig+0x454>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efa:	f7fd ff95 	bl	8000e28 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f02:	f7fd ff91 	bl	8000e28 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e1d0      	b.n	80032b6 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f14:	4b52      	ldr	r3, [pc, #328]	; (8003060 <HAL_RCC_OscConfig+0x44c>)
 8002f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f0      	bne.n	8002f02 <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80b0 	beq.w	800308e <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00c      	beq.n	8002f54 <HAL_RCC_OscConfig+0x340>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d008      	beq.n	8002f54 <HAL_RCC_OscConfig+0x340>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b05      	cmp	r3, #5
 8002f48:	d004      	beq.n	8002f54 <HAL_RCC_OscConfig+0x340>
 8002f4a:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8002f4e:	4845      	ldr	r0, [pc, #276]	; (8003064 <HAL_RCC_OscConfig+0x450>)
 8002f50:	f7fd fd3d 	bl	80009ce <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f54:	4b42      	ldr	r3, [pc, #264]	; (8003060 <HAL_RCC_OscConfig+0x44c>)
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10f      	bne.n	8002f80 <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f60:	2300      	movs	r3, #0
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	4b3e      	ldr	r3, [pc, #248]	; (8003060 <HAL_RCC_OscConfig+0x44c>)
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	4a3d      	ldr	r2, [pc, #244]	; (8003060 <HAL_RCC_OscConfig+0x44c>)
 8002f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f70:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <HAL_RCC_OscConfig+0x44c>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	4b3a      	ldr	r3, [pc, #232]	; (800306c <HAL_RCC_OscConfig+0x458>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d118      	bne.n	8002fbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f8c:	4b37      	ldr	r3, [pc, #220]	; (800306c <HAL_RCC_OscConfig+0x458>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a36      	ldr	r2, [pc, #216]	; (800306c <HAL_RCC_OscConfig+0x458>)
 8002f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f98:	f7fd ff46 	bl	8000e28 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa0:	f7fd ff42 	bl	8000e28 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e181      	b.n	80032b6 <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb2:	4b2e      	ldr	r3, [pc, #184]	; (800306c <HAL_RCC_OscConfig+0x458>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d106      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x3c0>
 8002fc6:	4b26      	ldr	r3, [pc, #152]	; (8003060 <HAL_RCC_OscConfig+0x44c>)
 8002fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fca:	4a25      	ldr	r2, [pc, #148]	; (8003060 <HAL_RCC_OscConfig+0x44c>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd2:	e01c      	b.n	800300e <HAL_RCC_OscConfig+0x3fa>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b05      	cmp	r3, #5
 8002fda:	d10c      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x3e2>
 8002fdc:	4b20      	ldr	r3, [pc, #128]	; (8003060 <HAL_RCC_OscConfig+0x44c>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	4a1f      	ldr	r2, [pc, #124]	; (8003060 <HAL_RCC_OscConfig+0x44c>)
 8002fe2:	f043 0304 	orr.w	r3, r3, #4
 8002fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe8:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_RCC_OscConfig+0x44c>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	4a1c      	ldr	r2, [pc, #112]	; (8003060 <HAL_RCC_OscConfig+0x44c>)
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff4:	e00b      	b.n	800300e <HAL_RCC_OscConfig+0x3fa>
 8002ff6:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <HAL_RCC_OscConfig+0x44c>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffa:	4a19      	ldr	r2, [pc, #100]	; (8003060 <HAL_RCC_OscConfig+0x44c>)
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	6713      	str	r3, [r2, #112]	; 0x70
 8003002:	4b17      	ldr	r3, [pc, #92]	; (8003060 <HAL_RCC_OscConfig+0x44c>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	4a16      	ldr	r2, [pc, #88]	; (8003060 <HAL_RCC_OscConfig+0x44c>)
 8003008:	f023 0304 	bic.w	r3, r3, #4
 800300c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d015      	beq.n	8003042 <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003016:	f7fd ff07 	bl	8000e28 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301c:	e00a      	b.n	8003034 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800301e:	f7fd ff03 	bl	8000e28 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	f241 3288 	movw	r2, #5000	; 0x1388
 800302c:	4293      	cmp	r3, r2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e140      	b.n	80032b6 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003034:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <HAL_RCC_OscConfig+0x44c>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0ee      	beq.n	800301e <HAL_RCC_OscConfig+0x40a>
 8003040:	e01c      	b.n	800307c <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003042:	f7fd fef1 	bl	8000e28 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003048:	e012      	b.n	8003070 <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800304a:	f7fd feed 	bl	8000e28 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	f241 3288 	movw	r2, #5000	; 0x1388
 8003058:	4293      	cmp	r3, r2
 800305a:	d909      	bls.n	8003070 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e12a      	b.n	80032b6 <HAL_RCC_OscConfig+0x6a2>
 8003060:	40023800 	.word	0x40023800
 8003064:	08006c1c 	.word	0x08006c1c
 8003068:	42470e80 	.word	0x42470e80
 800306c:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003070:	4b93      	ldr	r3, [pc, #588]	; (80032c0 <HAL_RCC_OscConfig+0x6ac>)
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1e6      	bne.n	800304a <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800307c:	7dfb      	ldrb	r3, [r7, #23]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d105      	bne.n	800308e <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003082:	4b8f      	ldr	r3, [pc, #572]	; (80032c0 <HAL_RCC_OscConfig+0x6ac>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	4a8e      	ldr	r2, [pc, #568]	; (80032c0 <HAL_RCC_OscConfig+0x6ac>)
 8003088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800308c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00c      	beq.n	80030b0 <HAL_RCC_OscConfig+0x49c>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d008      	beq.n	80030b0 <HAL_RCC_OscConfig+0x49c>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d004      	beq.n	80030b0 <HAL_RCC_OscConfig+0x49c>
 80030a6:	f640 6103 	movw	r1, #3587	; 0xe03
 80030aa:	4886      	ldr	r0, [pc, #536]	; (80032c4 <HAL_RCC_OscConfig+0x6b0>)
 80030ac:	f7fd fc8f 	bl	80009ce <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80fd 	beq.w	80032b4 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ba:	4b81      	ldr	r3, [pc, #516]	; (80032c0 <HAL_RCC_OscConfig+0x6ac>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	f000 80b6 	beq.w	8003234 <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	f040 809a 	bne.w	8003206 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d009      	beq.n	80030ee <HAL_RCC_OscConfig+0x4da>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e2:	d004      	beq.n	80030ee <HAL_RCC_OscConfig+0x4da>
 80030e4:	f640 610c 	movw	r1, #3596	; 0xe0c
 80030e8:	4876      	ldr	r0, [pc, #472]	; (80032c4 <HAL_RCC_OscConfig+0x6b0>)
 80030ea:	f7fd fc70 	bl	80009ce <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	2b3f      	cmp	r3, #63	; 0x3f
 80030f4:	d904      	bls.n	8003100 <HAL_RCC_OscConfig+0x4ec>
 80030f6:	f640 610d 	movw	r1, #3597	; 0xe0d
 80030fa:	4872      	ldr	r0, [pc, #456]	; (80032c4 <HAL_RCC_OscConfig+0x6b0>)
 80030fc:	f7fd fc67 	bl	80009ce <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	2b31      	cmp	r3, #49	; 0x31
 8003106:	d904      	bls.n	8003112 <HAL_RCC_OscConfig+0x4fe>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003110:	d904      	bls.n	800311c <HAL_RCC_OscConfig+0x508>
 8003112:	f640 610e 	movw	r1, #3598	; 0xe0e
 8003116:	486b      	ldr	r0, [pc, #428]	; (80032c4 <HAL_RCC_OscConfig+0x6b0>)
 8003118:	f7fd fc59 	bl	80009ce <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	2b02      	cmp	r3, #2
 8003122:	d010      	beq.n	8003146 <HAL_RCC_OscConfig+0x532>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	2b04      	cmp	r3, #4
 800312a:	d00c      	beq.n	8003146 <HAL_RCC_OscConfig+0x532>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	2b06      	cmp	r3, #6
 8003132:	d008      	beq.n	8003146 <HAL_RCC_OscConfig+0x532>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	2b08      	cmp	r3, #8
 800313a:	d004      	beq.n	8003146 <HAL_RCC_OscConfig+0x532>
 800313c:	f640 610f 	movw	r1, #3599	; 0xe0f
 8003140:	4860      	ldr	r0, [pc, #384]	; (80032c4 <HAL_RCC_OscConfig+0x6b0>)
 8003142:	f7fd fc44 	bl	80009ce <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314a:	2b01      	cmp	r3, #1
 800314c:	d903      	bls.n	8003156 <HAL_RCC_OscConfig+0x542>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	2b0f      	cmp	r3, #15
 8003154:	d904      	bls.n	8003160 <HAL_RCC_OscConfig+0x54c>
 8003156:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800315a:	485a      	ldr	r0, [pc, #360]	; (80032c4 <HAL_RCC_OscConfig+0x6b0>)
 800315c:	f7fd fc37 	bl	80009ce <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	2b01      	cmp	r3, #1
 8003166:	d903      	bls.n	8003170 <HAL_RCC_OscConfig+0x55c>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	2b07      	cmp	r3, #7
 800316e:	d904      	bls.n	800317a <HAL_RCC_OscConfig+0x566>
 8003170:	f640 6111 	movw	r1, #3601	; 0xe11
 8003174:	4853      	ldr	r0, [pc, #332]	; (80032c4 <HAL_RCC_OscConfig+0x6b0>)
 8003176:	f7fd fc2a 	bl	80009ce <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317a:	4b53      	ldr	r3, [pc, #332]	; (80032c8 <HAL_RCC_OscConfig+0x6b4>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fd fe52 	bl	8000e28 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003188:	f7fd fe4e 	bl	8000e28 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e08d      	b.n	80032b6 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319a:	4b49      	ldr	r3, [pc, #292]	; (80032c0 <HAL_RCC_OscConfig+0x6ac>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69da      	ldr	r2, [r3, #28]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	019b      	lsls	r3, r3, #6
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	3b01      	subs	r3, #1
 80031c0:	041b      	lsls	r3, r3, #16
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	061b      	lsls	r3, r3, #24
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	071b      	lsls	r3, r3, #28
 80031d2:	493b      	ldr	r1, [pc, #236]	; (80032c0 <HAL_RCC_OscConfig+0x6ac>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d8:	4b3b      	ldr	r3, [pc, #236]	; (80032c8 <HAL_RCC_OscConfig+0x6b4>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031de:	f7fd fe23 	bl	8000e28 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e6:	f7fd fe1f 	bl	8000e28 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e05e      	b.n	80032b6 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f8:	4b31      	ldr	r3, [pc, #196]	; (80032c0 <HAL_RCC_OscConfig+0x6ac>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f0      	beq.n	80031e6 <HAL_RCC_OscConfig+0x5d2>
 8003204:	e056      	b.n	80032b4 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003206:	4b30      	ldr	r3, [pc, #192]	; (80032c8 <HAL_RCC_OscConfig+0x6b4>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320c:	f7fd fe0c 	bl	8000e28 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003214:	f7fd fe08 	bl	8000e28 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e047      	b.n	80032b6 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003226:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <HAL_RCC_OscConfig+0x6ac>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x600>
 8003232:	e03f      	b.n	80032b4 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e03a      	b.n	80032b6 <HAL_RCC_OscConfig+0x6a2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003240:	4b1f      	ldr	r3, [pc, #124]	; (80032c0 <HAL_RCC_OscConfig+0x6ac>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d030      	beq.n	80032b0 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d129      	bne.n	80032b0 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003266:	429a      	cmp	r2, r3
 8003268:	d122      	bne.n	80032b0 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003270:	4013      	ands	r3, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003276:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003278:	4293      	cmp	r3, r2
 800327a:	d119      	bne.n	80032b0 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	3b01      	subs	r3, #1
 800328a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d10f      	bne.n	80032b0 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_OscConfig+0x6a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <HAL_RCC_OscConfig+0x6a2>
        }
      }
    }
  }
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800
 80032c4:	08006c1c 	.word	0x08006c1c
 80032c8:	42470060 	.word	0x42470060

080032cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e0d0      	b.n	8003480 <HAL_TIM_Base_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a69      	ldr	r2, [pc, #420]	; (8003488 <HAL_TIM_Base_Init+0x1bc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d045      	beq.n	8003374 <HAL_TIM_Base_Init+0xa8>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f0:	d040      	beq.n	8003374 <HAL_TIM_Base_Init+0xa8>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a65      	ldr	r2, [pc, #404]	; (800348c <HAL_TIM_Base_Init+0x1c0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d03b      	beq.n	8003374 <HAL_TIM_Base_Init+0xa8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a63      	ldr	r2, [pc, #396]	; (8003490 <HAL_TIM_Base_Init+0x1c4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d036      	beq.n	8003374 <HAL_TIM_Base_Init+0xa8>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a62      	ldr	r2, [pc, #392]	; (8003494 <HAL_TIM_Base_Init+0x1c8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d031      	beq.n	8003374 <HAL_TIM_Base_Init+0xa8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a60      	ldr	r2, [pc, #384]	; (8003498 <HAL_TIM_Base_Init+0x1cc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d02c      	beq.n	8003374 <HAL_TIM_Base_Init+0xa8>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a5f      	ldr	r2, [pc, #380]	; (800349c <HAL_TIM_Base_Init+0x1d0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d027      	beq.n	8003374 <HAL_TIM_Base_Init+0xa8>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a5d      	ldr	r2, [pc, #372]	; (80034a0 <HAL_TIM_Base_Init+0x1d4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d022      	beq.n	8003374 <HAL_TIM_Base_Init+0xa8>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a5c      	ldr	r2, [pc, #368]	; (80034a4 <HAL_TIM_Base_Init+0x1d8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d01d      	beq.n	8003374 <HAL_TIM_Base_Init+0xa8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a5a      	ldr	r2, [pc, #360]	; (80034a8 <HAL_TIM_Base_Init+0x1dc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d018      	beq.n	8003374 <HAL_TIM_Base_Init+0xa8>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a59      	ldr	r2, [pc, #356]	; (80034ac <HAL_TIM_Base_Init+0x1e0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d013      	beq.n	8003374 <HAL_TIM_Base_Init+0xa8>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a57      	ldr	r2, [pc, #348]	; (80034b0 <HAL_TIM_Base_Init+0x1e4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00e      	beq.n	8003374 <HAL_TIM_Base_Init+0xa8>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a56      	ldr	r2, [pc, #344]	; (80034b4 <HAL_TIM_Base_Init+0x1e8>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_TIM_Base_Init+0xa8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a54      	ldr	r2, [pc, #336]	; (80034b8 <HAL_TIM_Base_Init+0x1ec>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_TIM_Base_Init+0xa8>
 800336a:	f240 1113 	movw	r1, #275	; 0x113
 800336e:	4853      	ldr	r0, [pc, #332]	; (80034bc <HAL_TIM_Base_Init+0x1f0>)
 8003370:	f7fd fb2d 	bl	80009ce <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d014      	beq.n	80033a6 <HAL_TIM_Base_Init+0xda>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b10      	cmp	r3, #16
 8003382:	d010      	beq.n	80033a6 <HAL_TIM_Base_Init+0xda>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b20      	cmp	r3, #32
 800338a:	d00c      	beq.n	80033a6 <HAL_TIM_Base_Init+0xda>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b40      	cmp	r3, #64	; 0x40
 8003392:	d008      	beq.n	80033a6 <HAL_TIM_Base_Init+0xda>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b60      	cmp	r3, #96	; 0x60
 800339a:	d004      	beq.n	80033a6 <HAL_TIM_Base_Init+0xda>
 800339c:	f44f 718a 	mov.w	r1, #276	; 0x114
 80033a0:	4846      	ldr	r0, [pc, #280]	; (80034bc <HAL_TIM_Base_Init+0x1f0>)
 80033a2:	f7fd fb14 	bl	80009ce <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00e      	beq.n	80033cc <HAL_TIM_Base_Init+0x100>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b6:	d009      	beq.n	80033cc <HAL_TIM_Base_Init+0x100>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033c0:	d004      	beq.n	80033cc <HAL_TIM_Base_Init+0x100>
 80033c2:	f240 1115 	movw	r1, #277	; 0x115
 80033c6:	483d      	ldr	r0, [pc, #244]	; (80034bc <HAL_TIM_Base_Init+0x1f0>)
 80033c8:	f7fd fb01 	bl	80009ce <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_TIM_Base_Init+0x11a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b80      	cmp	r3, #128	; 0x80
 80033da:	d004      	beq.n	80033e6 <HAL_TIM_Base_Init+0x11a>
 80033dc:	f44f 718b 	mov.w	r1, #278	; 0x116
 80033e0:	4836      	ldr	r0, [pc, #216]	; (80034bc <HAL_TIM_Base_Init+0x1f0>)
 80033e2:	f7fd faf4 	bl	80009ce <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d111      	bne.n	8003416 <HAL_TIM_Base_Init+0x14a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f001 fc0a 	bl	8004c14 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003404:	2b00      	cmp	r3, #0
 8003406:	d102      	bne.n	800340e <HAL_TIM_Base_Init+0x142>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a2d      	ldr	r2, [pc, #180]	; (80034c0 <HAL_TIM_Base_Init+0x1f4>)
 800340c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2202      	movs	r2, #2
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3304      	adds	r3, #4
 8003426:	4619      	mov	r1, r3
 8003428:	4610      	mov	r0, r2
 800342a:	f001 f87f 	bl	800452c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40010000 	.word	0x40010000
 800348c:	40000400 	.word	0x40000400
 8003490:	40000800 	.word	0x40000800
 8003494:	40000c00 	.word	0x40000c00
 8003498:	40001000 	.word	0x40001000
 800349c:	40001400 	.word	0x40001400
 80034a0:	40010400 	.word	0x40010400
 80034a4:	40014000 	.word	0x40014000
 80034a8:	40014400 	.word	0x40014400
 80034ac:	40014800 	.word	0x40014800
 80034b0:	40001800 	.word	0x40001800
 80034b4:	40001c00 	.word	0x40001c00
 80034b8:	40002000 	.word	0x40002000
 80034bc:	08006c90 	.word	0x08006c90
 80034c0:	08000abd 	.word	0x08000abd

080034c4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e0d0      	b.n	8003678 <HAL_TIM_OC_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a69      	ldr	r2, [pc, #420]	; (8003680 <HAL_TIM_OC_Init+0x1bc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d045      	beq.n	800356c <HAL_TIM_OC_Init+0xa8>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e8:	d040      	beq.n	800356c <HAL_TIM_OC_Init+0xa8>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a65      	ldr	r2, [pc, #404]	; (8003684 <HAL_TIM_OC_Init+0x1c0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d03b      	beq.n	800356c <HAL_TIM_OC_Init+0xa8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a63      	ldr	r2, [pc, #396]	; (8003688 <HAL_TIM_OC_Init+0x1c4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d036      	beq.n	800356c <HAL_TIM_OC_Init+0xa8>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a62      	ldr	r2, [pc, #392]	; (800368c <HAL_TIM_OC_Init+0x1c8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d031      	beq.n	800356c <HAL_TIM_OC_Init+0xa8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a60      	ldr	r2, [pc, #384]	; (8003690 <HAL_TIM_OC_Init+0x1cc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d02c      	beq.n	800356c <HAL_TIM_OC_Init+0xa8>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a5f      	ldr	r2, [pc, #380]	; (8003694 <HAL_TIM_OC_Init+0x1d0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d027      	beq.n	800356c <HAL_TIM_OC_Init+0xa8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a5d      	ldr	r2, [pc, #372]	; (8003698 <HAL_TIM_OC_Init+0x1d4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d022      	beq.n	800356c <HAL_TIM_OC_Init+0xa8>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a5c      	ldr	r2, [pc, #368]	; (800369c <HAL_TIM_OC_Init+0x1d8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d01d      	beq.n	800356c <HAL_TIM_OC_Init+0xa8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a5a      	ldr	r2, [pc, #360]	; (80036a0 <HAL_TIM_OC_Init+0x1dc>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d018      	beq.n	800356c <HAL_TIM_OC_Init+0xa8>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a59      	ldr	r2, [pc, #356]	; (80036a4 <HAL_TIM_OC_Init+0x1e0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d013      	beq.n	800356c <HAL_TIM_OC_Init+0xa8>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a57      	ldr	r2, [pc, #348]	; (80036a8 <HAL_TIM_OC_Init+0x1e4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00e      	beq.n	800356c <HAL_TIM_OC_Init+0xa8>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a56      	ldr	r2, [pc, #344]	; (80036ac <HAL_TIM_OC_Init+0x1e8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d009      	beq.n	800356c <HAL_TIM_OC_Init+0xa8>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a54      	ldr	r2, [pc, #336]	; (80036b0 <HAL_TIM_OC_Init+0x1ec>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d004      	beq.n	800356c <HAL_TIM_OC_Init+0xa8>
 8003562:	f240 2192 	movw	r1, #658	; 0x292
 8003566:	4853      	ldr	r0, [pc, #332]	; (80036b4 <HAL_TIM_OC_Init+0x1f0>)
 8003568:	f7fd fa31 	bl	80009ce <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d014      	beq.n	800359e <HAL_TIM_OC_Init+0xda>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b10      	cmp	r3, #16
 800357a:	d010      	beq.n	800359e <HAL_TIM_OC_Init+0xda>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b20      	cmp	r3, #32
 8003582:	d00c      	beq.n	800359e <HAL_TIM_OC_Init+0xda>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b40      	cmp	r3, #64	; 0x40
 800358a:	d008      	beq.n	800359e <HAL_TIM_OC_Init+0xda>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b60      	cmp	r3, #96	; 0x60
 8003592:	d004      	beq.n	800359e <HAL_TIM_OC_Init+0xda>
 8003594:	f240 2193 	movw	r1, #659	; 0x293
 8003598:	4846      	ldr	r0, [pc, #280]	; (80036b4 <HAL_TIM_OC_Init+0x1f0>)
 800359a:	f7fd fa18 	bl	80009ce <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00e      	beq.n	80035c4 <HAL_TIM_OC_Init+0x100>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ae:	d009      	beq.n	80035c4 <HAL_TIM_OC_Init+0x100>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b8:	d004      	beq.n	80035c4 <HAL_TIM_OC_Init+0x100>
 80035ba:	f44f 7125 	mov.w	r1, #660	; 0x294
 80035be:	483d      	ldr	r0, [pc, #244]	; (80036b4 <HAL_TIM_OC_Init+0x1f0>)
 80035c0:	f7fd fa05 	bl	80009ce <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_TIM_OC_Init+0x11a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	2b80      	cmp	r3, #128	; 0x80
 80035d2:	d004      	beq.n	80035de <HAL_TIM_OC_Init+0x11a>
 80035d4:	f240 2195 	movw	r1, #661	; 0x295
 80035d8:	4836      	ldr	r0, [pc, #216]	; (80036b4 <HAL_TIM_OC_Init+0x1f0>)
 80035da:	f7fd f9f8 	bl	80009ce <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d111      	bne.n	800360e <HAL_TIM_OC_Init+0x14a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f001 fb0e 	bl	8004c14 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d102      	bne.n	8003606 <HAL_TIM_OC_Init+0x142>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a2d      	ldr	r2, [pc, #180]	; (80036b8 <HAL_TIM_OC_Init+0x1f4>)
 8003604:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2202      	movs	r2, #2
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3304      	adds	r3, #4
 800361e:	4619      	mov	r1, r3
 8003620:	4610      	mov	r0, r2
 8003622:	f000 ff83 	bl	800452c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40010000 	.word	0x40010000
 8003684:	40000400 	.word	0x40000400
 8003688:	40000800 	.word	0x40000800
 800368c:	40000c00 	.word	0x40000c00
 8003690:	40001000 	.word	0x40001000
 8003694:	40001400 	.word	0x40001400
 8003698:	40010400 	.word	0x40010400
 800369c:	40014000 	.word	0x40014000
 80036a0:	40014400 	.word	0x40014400
 80036a4:	40014800 	.word	0x40014800
 80036a8:	40001800 	.word	0x40001800
 80036ac:	40001c00 	.word	0x40001c00
 80036b0:	40002000 	.word	0x40002000
 80036b4:	08006c90 	.word	0x08006c90
 80036b8:	080036bd 	.word	0x080036bd

080036bc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d010      	beq.n	8003708 <HAL_TIM_OC_ConfigChannel+0x38>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d00d      	beq.n	8003708 <HAL_TIM_OC_ConfigChannel+0x38>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d00a      	beq.n	8003708 <HAL_TIM_OC_ConfigChannel+0x38>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b0c      	cmp	r3, #12
 80036f6:	d007      	beq.n	8003708 <HAL_TIM_OC_ConfigChannel+0x38>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b3c      	cmp	r3, #60	; 0x3c
 80036fc:	d004      	beq.n	8003708 <HAL_TIM_OC_ConfigChannel+0x38>
 80036fe:	f640 71c5 	movw	r1, #4037	; 0xfc5
 8003702:	487f      	ldr	r0, [pc, #508]	; (8003900 <HAL_TIM_OC_ConfigChannel+0x230>)
 8003704:	f7fd f963 	bl	80009ce <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d018      	beq.n	8003742 <HAL_TIM_OC_ConfigChannel+0x72>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b10      	cmp	r3, #16
 8003716:	d014      	beq.n	8003742 <HAL_TIM_OC_ConfigChannel+0x72>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b20      	cmp	r3, #32
 800371e:	d010      	beq.n	8003742 <HAL_TIM_OC_ConfigChannel+0x72>
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b30      	cmp	r3, #48	; 0x30
 8003726:	d00c      	beq.n	8003742 <HAL_TIM_OC_ConfigChannel+0x72>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b50      	cmp	r3, #80	; 0x50
 800372e:	d008      	beq.n	8003742 <HAL_TIM_OC_ConfigChannel+0x72>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b40      	cmp	r3, #64	; 0x40
 8003736:	d004      	beq.n	8003742 <HAL_TIM_OC_ConfigChannel+0x72>
 8003738:	f640 71c6 	movw	r1, #4038	; 0xfc6
 800373c:	4870      	ldr	r0, [pc, #448]	; (8003900 <HAL_TIM_OC_ConfigChannel+0x230>)
 800373e:	f7fd f946 	bl	80009ce <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <HAL_TIM_OC_ConfigChannel+0x8c>
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d004      	beq.n	800375c <HAL_TIM_OC_ConfigChannel+0x8c>
 8003752:	f640 71c7 	movw	r1, #4039	; 0xfc7
 8003756:	486a      	ldr	r0, [pc, #424]	; (8003900 <HAL_TIM_OC_ConfigChannel+0x230>)
 8003758:	f7fd f939 	bl	80009ce <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_TIM_OC_ConfigChannel+0x9a>
 8003766:	2302      	movs	r3, #2
 8003768:	e114      	b.n	8003994 <HAL_TIM_OC_ConfigChannel+0x2c4>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b0c      	cmp	r3, #12
 8003776:	f200 8105 	bhi.w	8003984 <HAL_TIM_OC_ConfigChannel+0x2b4>
 800377a:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <HAL_TIM_OC_ConfigChannel+0xb0>)
 800377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003780:	080037b5 	.word	0x080037b5
 8003784:	08003985 	.word	0x08003985
 8003788:	08003985 	.word	0x08003985
 800378c:	08003985 	.word	0x08003985
 8003790:	08003845 	.word	0x08003845
 8003794:	08003985 	.word	0x08003985
 8003798:	08003985 	.word	0x08003985
 800379c:	08003985 	.word	0x08003985
 80037a0:	080038ad 	.word	0x080038ad
 80037a4:	08003985 	.word	0x08003985
 80037a8:	08003985 	.word	0x08003985
 80037ac:	08003985 	.word	0x08003985
 80037b0:	08003931 	.word	0x08003931
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a52      	ldr	r2, [pc, #328]	; (8003904 <HAL_TIM_OC_ConfigChannel+0x234>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d03b      	beq.n	8003836 <HAL_TIM_OC_ConfigChannel+0x166>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c6:	d036      	beq.n	8003836 <HAL_TIM_OC_ConfigChannel+0x166>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a4e      	ldr	r2, [pc, #312]	; (8003908 <HAL_TIM_OC_ConfigChannel+0x238>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d031      	beq.n	8003836 <HAL_TIM_OC_ConfigChannel+0x166>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a4d      	ldr	r2, [pc, #308]	; (800390c <HAL_TIM_OC_ConfigChannel+0x23c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d02c      	beq.n	8003836 <HAL_TIM_OC_ConfigChannel+0x166>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a4b      	ldr	r2, [pc, #300]	; (8003910 <HAL_TIM_OC_ConfigChannel+0x240>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d027      	beq.n	8003836 <HAL_TIM_OC_ConfigChannel+0x166>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a4a      	ldr	r2, [pc, #296]	; (8003914 <HAL_TIM_OC_ConfigChannel+0x244>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d022      	beq.n	8003836 <HAL_TIM_OC_ConfigChannel+0x166>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a48      	ldr	r2, [pc, #288]	; (8003918 <HAL_TIM_OC_ConfigChannel+0x248>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d01d      	beq.n	8003836 <HAL_TIM_OC_ConfigChannel+0x166>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a47      	ldr	r2, [pc, #284]	; (800391c <HAL_TIM_OC_ConfigChannel+0x24c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d018      	beq.n	8003836 <HAL_TIM_OC_ConfigChannel+0x166>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a45      	ldr	r2, [pc, #276]	; (8003920 <HAL_TIM_OC_ConfigChannel+0x250>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d013      	beq.n	8003836 <HAL_TIM_OC_ConfigChannel+0x166>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a44      	ldr	r2, [pc, #272]	; (8003924 <HAL_TIM_OC_ConfigChannel+0x254>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00e      	beq.n	8003836 <HAL_TIM_OC_ConfigChannel+0x166>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a42      	ldr	r2, [pc, #264]	; (8003928 <HAL_TIM_OC_ConfigChannel+0x258>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d009      	beq.n	8003836 <HAL_TIM_OC_ConfigChannel+0x166>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a41      	ldr	r2, [pc, #260]	; (800392c <HAL_TIM_OC_ConfigChannel+0x25c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d004      	beq.n	8003836 <HAL_TIM_OC_ConfigChannel+0x166>
 800382c:	f640 71d1 	movw	r1, #4049	; 0xfd1
 8003830:	4833      	ldr	r0, [pc, #204]	; (8003900 <HAL_TIM_OC_ConfigChannel+0x230>)
 8003832:	f7fd f8cc 	bl	80009ce <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68b9      	ldr	r1, [r7, #8]
 800383c:	4618      	mov	r0, r3
 800383e:	f000 ff15 	bl	800466c <TIM_OC1_SetConfig>
      break;
 8003842:	e0a2      	b.n	800398a <HAL_TIM_OC_ConfigChannel+0x2ba>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a2e      	ldr	r2, [pc, #184]	; (8003904 <HAL_TIM_OC_ConfigChannel+0x234>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d027      	beq.n	800389e <HAL_TIM_OC_ConfigChannel+0x1ce>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003856:	d022      	beq.n	800389e <HAL_TIM_OC_ConfigChannel+0x1ce>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a2a      	ldr	r2, [pc, #168]	; (8003908 <HAL_TIM_OC_ConfigChannel+0x238>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d01d      	beq.n	800389e <HAL_TIM_OC_ConfigChannel+0x1ce>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a29      	ldr	r2, [pc, #164]	; (800390c <HAL_TIM_OC_ConfigChannel+0x23c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d018      	beq.n	800389e <HAL_TIM_OC_ConfigChannel+0x1ce>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a27      	ldr	r2, [pc, #156]	; (8003910 <HAL_TIM_OC_ConfigChannel+0x240>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d013      	beq.n	800389e <HAL_TIM_OC_ConfigChannel+0x1ce>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a26      	ldr	r2, [pc, #152]	; (8003914 <HAL_TIM_OC_ConfigChannel+0x244>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00e      	beq.n	800389e <HAL_TIM_OC_ConfigChannel+0x1ce>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a24      	ldr	r2, [pc, #144]	; (8003918 <HAL_TIM_OC_ConfigChannel+0x248>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d009      	beq.n	800389e <HAL_TIM_OC_ConfigChannel+0x1ce>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a25      	ldr	r2, [pc, #148]	; (8003924 <HAL_TIM_OC_ConfigChannel+0x254>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d004      	beq.n	800389e <HAL_TIM_OC_ConfigChannel+0x1ce>
 8003894:	f640 71db 	movw	r1, #4059	; 0xfdb
 8003898:	4819      	ldr	r0, [pc, #100]	; (8003900 <HAL_TIM_OC_ConfigChannel+0x230>)
 800389a:	f7fd f898 	bl	80009ce <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 ff7b 	bl	80047a0 <TIM_OC2_SetConfig>
      break;
 80038aa:	e06e      	b.n	800398a <HAL_TIM_OC_ConfigChannel+0x2ba>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a14      	ldr	r2, [pc, #80]	; (8003904 <HAL_TIM_OC_ConfigChannel+0x234>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01d      	beq.n	80038f2 <HAL_TIM_OC_ConfigChannel+0x222>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038be:	d018      	beq.n	80038f2 <HAL_TIM_OC_ConfigChannel+0x222>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a10      	ldr	r2, [pc, #64]	; (8003908 <HAL_TIM_OC_ConfigChannel+0x238>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <HAL_TIM_OC_ConfigChannel+0x222>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a0f      	ldr	r2, [pc, #60]	; (800390c <HAL_TIM_OC_ConfigChannel+0x23c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d00e      	beq.n	80038f2 <HAL_TIM_OC_ConfigChannel+0x222>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a0d      	ldr	r2, [pc, #52]	; (8003910 <HAL_TIM_OC_ConfigChannel+0x240>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d009      	beq.n	80038f2 <HAL_TIM_OC_ConfigChannel+0x222>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a0c      	ldr	r2, [pc, #48]	; (8003914 <HAL_TIM_OC_ConfigChannel+0x244>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d004      	beq.n	80038f2 <HAL_TIM_OC_ConfigChannel+0x222>
 80038e8:	f640 71e5 	movw	r1, #4069	; 0xfe5
 80038ec:	4804      	ldr	r0, [pc, #16]	; (8003900 <HAL_TIM_OC_ConfigChannel+0x230>)
 80038ee:	f7fd f86e 	bl	80009ce <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68b9      	ldr	r1, [r7, #8]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 ffef 	bl	80048dc <TIM_OC3_SetConfig>
      break;
 80038fe:	e044      	b.n	800398a <HAL_TIM_OC_ConfigChannel+0x2ba>
 8003900:	08006c90 	.word	0x08006c90
 8003904:	40010000 	.word	0x40010000
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800
 8003910:	40000c00 	.word	0x40000c00
 8003914:	40010400 	.word	0x40010400
 8003918:	40014000 	.word	0x40014000
 800391c:	40014400 	.word	0x40014400
 8003920:	40014800 	.word	0x40014800
 8003924:	40001800 	.word	0x40001800
 8003928:	40001c00 	.word	0x40001c00
 800392c:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a19      	ldr	r2, [pc, #100]	; (800399c <HAL_TIM_OC_ConfigChannel+0x2cc>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d01d      	beq.n	8003976 <HAL_TIM_OC_ConfigChannel+0x2a6>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003942:	d018      	beq.n	8003976 <HAL_TIM_OC_ConfigChannel+0x2a6>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a15      	ldr	r2, [pc, #84]	; (80039a0 <HAL_TIM_OC_ConfigChannel+0x2d0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d013      	beq.n	8003976 <HAL_TIM_OC_ConfigChannel+0x2a6>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a14      	ldr	r2, [pc, #80]	; (80039a4 <HAL_TIM_OC_ConfigChannel+0x2d4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00e      	beq.n	8003976 <HAL_TIM_OC_ConfigChannel+0x2a6>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a12      	ldr	r2, [pc, #72]	; (80039a8 <HAL_TIM_OC_ConfigChannel+0x2d8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d009      	beq.n	8003976 <HAL_TIM_OC_ConfigChannel+0x2a6>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a11      	ldr	r2, [pc, #68]	; (80039ac <HAL_TIM_OC_ConfigChannel+0x2dc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d004      	beq.n	8003976 <HAL_TIM_OC_ConfigChannel+0x2a6>
 800396c:	f640 71ef 	movw	r1, #4079	; 0xfef
 8003970:	480f      	ldr	r0, [pc, #60]	; (80039b0 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 8003972:	f7fd f82c 	bl	80009ce <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	4618      	mov	r0, r3
 800397e:	f001 f84b 	bl	8004a18 <TIM_OC4_SetConfig>
      break;
 8003982:	e002      	b.n	800398a <HAL_TIM_OC_ConfigChannel+0x2ba>
    }

    default:
      status = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	75fb      	strb	r3, [r7, #23]
      break;
 8003988:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003992:	7dfb      	ldrb	r3, [r7, #23]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40010000 	.word	0x40010000
 80039a0:	40000400 	.word	0x40000400
 80039a4:	40000800 	.word	0x40000800
 80039a8:	40000c00 	.word	0x40000c00
 80039ac:	40010400 	.word	0x40010400
 80039b0:	08006c90 	.word	0x08006c90

080039b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d010      	beq.n	80039ec <HAL_TIM_PWM_ConfigChannel+0x38>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d00d      	beq.n	80039ec <HAL_TIM_PWM_ConfigChannel+0x38>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d00a      	beq.n	80039ec <HAL_TIM_PWM_ConfigChannel+0x38>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b0c      	cmp	r3, #12
 80039da:	d007      	beq.n	80039ec <HAL_TIM_PWM_ConfigChannel+0x38>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b3c      	cmp	r3, #60	; 0x3c
 80039e0:	d004      	beq.n	80039ec <HAL_TIM_PWM_ConfigChannel+0x38>
 80039e2:	f241 0177 	movw	r1, #4215	; 0x1077
 80039e6:	4883      	ldr	r0, [pc, #524]	; (8003bf4 <HAL_TIM_PWM_ConfigChannel+0x240>)
 80039e8:	f7fc fff1 	bl	80009ce <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b60      	cmp	r3, #96	; 0x60
 80039f2:	d008      	beq.n	8003a06 <HAL_TIM_PWM_ConfigChannel+0x52>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b70      	cmp	r3, #112	; 0x70
 80039fa:	d004      	beq.n	8003a06 <HAL_TIM_PWM_ConfigChannel+0x52>
 80039fc:	f241 0178 	movw	r1, #4216	; 0x1078
 8003a00:	487c      	ldr	r0, [pc, #496]	; (8003bf4 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8003a02:	f7fc ffe4 	bl	80009ce <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d004      	beq.n	8003a20 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8003a16:	f241 0179 	movw	r1, #4217	; 0x1079
 8003a1a:	4876      	ldr	r0, [pc, #472]	; (8003bf4 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8003a1c:	f7fc ffd7 	bl	80009ce <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_TIM_PWM_ConfigChannel+0x86>
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d004      	beq.n	8003a3a <HAL_TIM_PWM_ConfigChannel+0x86>
 8003a30:	f241 017a 	movw	r1, #4218	; 0x107a
 8003a34:	486f      	ldr	r0, [pc, #444]	; (8003bf4 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8003a36:	f7fc ffca 	bl	80009ce <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_TIM_PWM_ConfigChannel+0x94>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e17c      	b.n	8003d42 <HAL_TIM_PWM_ConfigChannel+0x38e>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b0c      	cmp	r3, #12
 8003a54:	f200 816d 	bhi.w	8003d32 <HAL_TIM_PWM_ConfigChannel+0x37e>
 8003a58:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <HAL_TIM_PWM_ConfigChannel+0xac>)
 8003a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5e:	bf00      	nop
 8003a60:	08003a95 	.word	0x08003a95
 8003a64:	08003d33 	.word	0x08003d33
 8003a68:	08003d33 	.word	0x08003d33
 8003a6c:	08003d33 	.word	0x08003d33
 8003a70:	08003b57 	.word	0x08003b57
 8003a74:	08003d33 	.word	0x08003d33
 8003a78:	08003d33 	.word	0x08003d33
 8003a7c:	08003d33 	.word	0x08003d33
 8003a80:	08003c25 	.word	0x08003c25
 8003a84:	08003d33 	.word	0x08003d33
 8003a88:	08003d33 	.word	0x08003d33
 8003a8c:	08003d33 	.word	0x08003d33
 8003a90:	08003cab 	.word	0x08003cab
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a57      	ldr	r2, [pc, #348]	; (8003bf8 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d03b      	beq.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x162>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa6:	d036      	beq.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x162>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a53      	ldr	r2, [pc, #332]	; (8003bfc <HAL_TIM_PWM_ConfigChannel+0x248>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d031      	beq.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x162>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a52      	ldr	r2, [pc, #328]	; (8003c00 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d02c      	beq.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x162>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a50      	ldr	r2, [pc, #320]	; (8003c04 <HAL_TIM_PWM_ConfigChannel+0x250>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d027      	beq.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x162>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a4f      	ldr	r2, [pc, #316]	; (8003c08 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d022      	beq.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x162>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a4d      	ldr	r2, [pc, #308]	; (8003c0c <HAL_TIM_PWM_ConfigChannel+0x258>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d01d      	beq.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x162>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a4c      	ldr	r2, [pc, #304]	; (8003c10 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d018      	beq.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x162>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a4a      	ldr	r2, [pc, #296]	; (8003c14 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x162>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a49      	ldr	r2, [pc, #292]	; (8003c18 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00e      	beq.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x162>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a47      	ldr	r2, [pc, #284]	; (8003c1c <HAL_TIM_PWM_ConfigChannel+0x268>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d009      	beq.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x162>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a46      	ldr	r2, [pc, #280]	; (8003c20 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d004      	beq.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x162>
 8003b0c:	f241 0184 	movw	r1, #4228	; 0x1084
 8003b10:	4838      	ldr	r0, [pc, #224]	; (8003bf4 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8003b12:	f7fc ff5c 	bl	80009ce <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fda5 	bl	800466c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699a      	ldr	r2, [r3, #24]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0208 	orr.w	r2, r2, #8
 8003b30:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699a      	ldr	r2, [r3, #24]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0204 	bic.w	r2, r2, #4
 8003b40:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6999      	ldr	r1, [r3, #24]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	619a      	str	r2, [r3, #24]
      break;
 8003b54:	e0f0      	b.n	8003d38 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a27      	ldr	r2, [pc, #156]	; (8003bf8 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d027      	beq.n	8003bb0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b68:	d022      	beq.n	8003bb0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a23      	ldr	r2, [pc, #140]	; (8003bfc <HAL_TIM_PWM_ConfigChannel+0x248>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d01d      	beq.n	8003bb0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d018      	beq.n	8003bb0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a20      	ldr	r2, [pc, #128]	; (8003c04 <HAL_TIM_PWM_ConfigChannel+0x250>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d013      	beq.n	8003bb0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a1e      	ldr	r2, [pc, #120]	; (8003c08 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00e      	beq.n	8003bb0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a1d      	ldr	r2, [pc, #116]	; (8003c0c <HAL_TIM_PWM_ConfigChannel+0x258>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d009      	beq.n	8003bb0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a1d      	ldr	r2, [pc, #116]	; (8003c18 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d004      	beq.n	8003bb0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8003ba6:	f241 0195 	movw	r1, #4245	; 0x1095
 8003baa:	4812      	ldr	r0, [pc, #72]	; (8003bf4 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8003bac:	f7fc ff0f 	bl	80009ce <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68b9      	ldr	r1, [r7, #8]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fdf2 	bl	80047a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699a      	ldr	r2, [r3, #24]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6999      	ldr	r1, [r3, #24]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	021a      	lsls	r2, r3, #8
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	619a      	str	r2, [r3, #24]
      break;
 8003bf0:	e0a2      	b.n	8003d38 <HAL_TIM_PWM_ConfigChannel+0x384>
 8003bf2:	bf00      	nop
 8003bf4:	08006c90 	.word	0x08006c90
 8003bf8:	40010000 	.word	0x40010000
 8003bfc:	40000400 	.word	0x40000400
 8003c00:	40000800 	.word	0x40000800
 8003c04:	40000c00 	.word	0x40000c00
 8003c08:	40010400 	.word	0x40010400
 8003c0c:	40014000 	.word	0x40014000
 8003c10:	40014400 	.word	0x40014400
 8003c14:	40014800 	.word	0x40014800
 8003c18:	40001800 	.word	0x40001800
 8003c1c:	40001c00 	.word	0x40001c00
 8003c20:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a48      	ldr	r2, [pc, #288]	; (8003d4c <HAL_TIM_PWM_ConfigChannel+0x398>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d01d      	beq.n	8003c6a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c36:	d018      	beq.n	8003c6a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a44      	ldr	r2, [pc, #272]	; (8003d50 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d013      	beq.n	8003c6a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a43      	ldr	r2, [pc, #268]	; (8003d54 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00e      	beq.n	8003c6a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a41      	ldr	r2, [pc, #260]	; (8003d58 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d009      	beq.n	8003c6a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a40      	ldr	r2, [pc, #256]	; (8003d5c <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d004      	beq.n	8003c6a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8003c60:	f241 01a6 	movw	r1, #4262	; 0x10a6
 8003c64:	483e      	ldr	r0, [pc, #248]	; (8003d60 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8003c66:	f7fc feb2 	bl	80009ce <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fe33 	bl	80048dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0208 	orr.w	r2, r2, #8
 8003c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0204 	bic.w	r2, r2, #4
 8003c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69d9      	ldr	r1, [r3, #28]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	61da      	str	r2, [r3, #28]
      break;
 8003ca8:	e046      	b.n	8003d38 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a27      	ldr	r2, [pc, #156]	; (8003d4c <HAL_TIM_PWM_ConfigChannel+0x398>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d01d      	beq.n	8003cf0 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cbc:	d018      	beq.n	8003cf0 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a23      	ldr	r2, [pc, #140]	; (8003d50 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d013      	beq.n	8003cf0 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a21      	ldr	r2, [pc, #132]	; (8003d54 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00e      	beq.n	8003cf0 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a20      	ldr	r2, [pc, #128]	; (8003d58 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d009      	beq.n	8003cf0 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a1e      	ldr	r2, [pc, #120]	; (8003d5c <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d004      	beq.n	8003cf0 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8003ce6:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8003cea:	481d      	ldr	r0, [pc, #116]	; (8003d60 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8003cec:	f7fc fe6f 	bl	80009ce <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fe8e 	bl	8004a18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	69da      	ldr	r2, [r3, #28]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d0a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69da      	ldr	r2, [r3, #28]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	69d9      	ldr	r1, [r3, #28]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	021a      	lsls	r2, r3, #8
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	61da      	str	r2, [r3, #28]
      break;
 8003d30:	e002      	b.n	8003d38 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	75fb      	strb	r3, [r7, #23]
      break;
 8003d36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40010000 	.word	0x40010000
 8003d50:	40000400 	.word	0x40000400
 8003d54:	40000800 	.word	0x40000800
 8003d58:	40000c00 	.word	0x40000c00
 8003d5c:	40010400 	.word	0x40010400
 8003d60:	08006c90 	.word	0x08006c90

08003d64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_TIM_ConfigClockSource+0x1c>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e35c      	b.n	800443a <HAL_TIM_ConfigClockSource+0x6d6>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d98:	d029      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x8a>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b70      	cmp	r3, #112	; 0x70
 8003da0:	d025      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x8a>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003daa:	d020      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x8a>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b40      	cmp	r3, #64	; 0x40
 8003db2:	d01c      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x8a>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b50      	cmp	r3, #80	; 0x50
 8003dba:	d018      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x8a>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b60      	cmp	r3, #96	; 0x60
 8003dc2:	d014      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x8a>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d010      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x8a>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b10      	cmp	r3, #16
 8003dd2:	d00c      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x8a>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d008      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x8a>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b30      	cmp	r3, #48	; 0x30
 8003de2:	d004      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x8a>
 8003de4:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8003de8:	4893      	ldr	r0, [pc, #588]	; (8004038 <HAL_TIM_ConfigClockSource+0x2d4>)
 8003dea:	f7fc fdf0 	bl	80009ce <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dfc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e04:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e16:	f000 812b 	beq.w	8004070 <HAL_TIM_ConfigClockSource+0x30c>
 8003e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e1e:	f200 82ff 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x6bc>
 8003e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e26:	d02e      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x122>
 8003e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2c:	f200 82f8 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x6bc>
 8003e30:	2b70      	cmp	r3, #112	; 0x70
 8003e32:	f000 8082 	beq.w	8003f3a <HAL_TIM_ConfigClockSource+0x1d6>
 8003e36:	2b70      	cmp	r3, #112	; 0x70
 8003e38:	f200 82f2 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x6bc>
 8003e3c:	2b60      	cmp	r3, #96	; 0x60
 8003e3e:	f000 81f9 	beq.w	8004234 <HAL_TIM_ConfigClockSource+0x4d0>
 8003e42:	2b60      	cmp	r3, #96	; 0x60
 8003e44:	f200 82ec 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x6bc>
 8003e48:	2b50      	cmp	r3, #80	; 0x50
 8003e4a:	f000 8182 	beq.w	8004152 <HAL_TIM_ConfigClockSource+0x3ee>
 8003e4e:	2b50      	cmp	r3, #80	; 0x50
 8003e50:	f200 82e6 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x6bc>
 8003e54:	2b40      	cmp	r3, #64	; 0x40
 8003e56:	f000 824d 	beq.w	80042f4 <HAL_TIM_ConfigClockSource+0x590>
 8003e5a:	2b40      	cmp	r3, #64	; 0x40
 8003e5c:	f200 82e0 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x6bc>
 8003e60:	2b30      	cmp	r3, #48	; 0x30
 8003e62:	f000 82a7 	beq.w	80043b4 <HAL_TIM_ConfigClockSource+0x650>
 8003e66:	2b30      	cmp	r3, #48	; 0x30
 8003e68:	f200 82da 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x6bc>
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	f000 82a1 	beq.w	80043b4 <HAL_TIM_ConfigClockSource+0x650>
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	f200 82d4 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x6bc>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 829b 	beq.w	80043b4 <HAL_TIM_ConfigClockSource+0x650>
 8003e7e:	2b10      	cmp	r3, #16
 8003e80:	f000 8298 	beq.w	80043b4 <HAL_TIM_ConfigClockSource+0x650>
 8003e84:	e2cc      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a6c      	ldr	r2, [pc, #432]	; (800403c <HAL_TIM_ConfigClockSource+0x2d8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	f000 82ca 	beq.w	8004426 <HAL_TIM_ConfigClockSource+0x6c2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9a:	f000 82c4 	beq.w	8004426 <HAL_TIM_ConfigClockSource+0x6c2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a67      	ldr	r2, [pc, #412]	; (8004040 <HAL_TIM_ConfigClockSource+0x2dc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	f000 82be 	beq.w	8004426 <HAL_TIM_ConfigClockSource+0x6c2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a65      	ldr	r2, [pc, #404]	; (8004044 <HAL_TIM_ConfigClockSource+0x2e0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	f000 82b8 	beq.w	8004426 <HAL_TIM_ConfigClockSource+0x6c2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a63      	ldr	r2, [pc, #396]	; (8004048 <HAL_TIM_ConfigClockSource+0x2e4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	f000 82b2 	beq.w	8004426 <HAL_TIM_ConfigClockSource+0x6c2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a61      	ldr	r2, [pc, #388]	; (800404c <HAL_TIM_ConfigClockSource+0x2e8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	f000 82ac 	beq.w	8004426 <HAL_TIM_ConfigClockSource+0x6c2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a5f      	ldr	r2, [pc, #380]	; (8004050 <HAL_TIM_ConfigClockSource+0x2ec>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	f000 82a6 	beq.w	8004426 <HAL_TIM_ConfigClockSource+0x6c2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a5d      	ldr	r2, [pc, #372]	; (8004054 <HAL_TIM_ConfigClockSource+0x2f0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	f000 82a0 	beq.w	8004426 <HAL_TIM_ConfigClockSource+0x6c2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a5b      	ldr	r2, [pc, #364]	; (8004058 <HAL_TIM_ConfigClockSource+0x2f4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	f000 829a 	beq.w	8004426 <HAL_TIM_ConfigClockSource+0x6c2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a59      	ldr	r2, [pc, #356]	; (800405c <HAL_TIM_ConfigClockSource+0x2f8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	f000 8294 	beq.w	8004426 <HAL_TIM_ConfigClockSource+0x6c2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a57      	ldr	r2, [pc, #348]	; (8004060 <HAL_TIM_ConfigClockSource+0x2fc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	f000 828e 	beq.w	8004426 <HAL_TIM_ConfigClockSource+0x6c2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a55      	ldr	r2, [pc, #340]	; (8004064 <HAL_TIM_ConfigClockSource+0x300>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	f000 8288 	beq.w	8004426 <HAL_TIM_ConfigClockSource+0x6c2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a53      	ldr	r2, [pc, #332]	; (8004068 <HAL_TIM_ConfigClockSource+0x304>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	f000 8282 	beq.w	8004426 <HAL_TIM_ConfigClockSource+0x6c2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a51      	ldr	r2, [pc, #324]	; (800406c <HAL_TIM_ConfigClockSource+0x308>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	f000 827c 	beq.w	8004426 <HAL_TIM_ConfigClockSource+0x6c2>
 8003f2e:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8003f32:	4841      	ldr	r0, [pc, #260]	; (8004038 <HAL_TIM_ConfigClockSource+0x2d4>)
 8003f34:	f7fc fd4b 	bl	80009ce <assert_failed>
      break;
 8003f38:	e275      	b.n	8004426 <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a3f      	ldr	r2, [pc, #252]	; (800403c <HAL_TIM_ConfigClockSource+0x2d8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d027      	beq.n	8003f94 <HAL_TIM_ConfigClockSource+0x230>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4c:	d022      	beq.n	8003f94 <HAL_TIM_ConfigClockSource+0x230>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a3b      	ldr	r2, [pc, #236]	; (8004040 <HAL_TIM_ConfigClockSource+0x2dc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d01d      	beq.n	8003f94 <HAL_TIM_ConfigClockSource+0x230>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a39      	ldr	r2, [pc, #228]	; (8004044 <HAL_TIM_ConfigClockSource+0x2e0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d018      	beq.n	8003f94 <HAL_TIM_ConfigClockSource+0x230>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a38      	ldr	r2, [pc, #224]	; (8004048 <HAL_TIM_ConfigClockSource+0x2e4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d013      	beq.n	8003f94 <HAL_TIM_ConfigClockSource+0x230>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a38      	ldr	r2, [pc, #224]	; (8004054 <HAL_TIM_ConfigClockSource+0x2f0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00e      	beq.n	8003f94 <HAL_TIM_ConfigClockSource+0x230>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a37      	ldr	r2, [pc, #220]	; (8004058 <HAL_TIM_ConfigClockSource+0x2f4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d009      	beq.n	8003f94 <HAL_TIM_ConfigClockSource+0x230>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a37      	ldr	r2, [pc, #220]	; (8004064 <HAL_TIM_ConfigClockSource+0x300>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <HAL_TIM_ConfigClockSource+0x230>
 8003f8a:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8003f8e:	482a      	ldr	r0, [pc, #168]	; (8004038 <HAL_TIM_ConfigClockSource+0x2d4>)
 8003f90:	f7fc fd1d 	bl	80009ce <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d013      	beq.n	8003fc4 <HAL_TIM_ConfigClockSource+0x260>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa4:	d00e      	beq.n	8003fc4 <HAL_TIM_ConfigClockSource+0x260>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fae:	d009      	beq.n	8003fc4 <HAL_TIM_ConfigClockSource+0x260>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fb8:	d004      	beq.n	8003fc4 <HAL_TIM_ConfigClockSource+0x260>
 8003fba:	f241 41cd 	movw	r1, #5325	; 0x14cd
 8003fbe:	481e      	ldr	r0, [pc, #120]	; (8004038 <HAL_TIM_ConfigClockSource+0x2d4>)
 8003fc0:	f7fc fd05 	bl	80009ce <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fcc:	d014      	beq.n	8003ff8 <HAL_TIM_ConfigClockSource+0x294>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d010      	beq.n	8003ff8 <HAL_TIM_ConfigClockSource+0x294>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00c      	beq.n	8003ff8 <HAL_TIM_ConfigClockSource+0x294>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d008      	beq.n	8003ff8 <HAL_TIM_ConfigClockSource+0x294>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b0a      	cmp	r3, #10
 8003fec:	d004      	beq.n	8003ff8 <HAL_TIM_ConfigClockSource+0x294>
 8003fee:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8003ff2:	4811      	ldr	r0, [pc, #68]	; (8004038 <HAL_TIM_ConfigClockSource+0x2d4>)
 8003ff4:	f7fc fceb 	bl	80009ce <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	2b0f      	cmp	r3, #15
 8003ffe:	d904      	bls.n	800400a <HAL_TIM_ConfigClockSource+0x2a6>
 8004000:	f241 41cf 	movw	r1, #5327	; 0x14cf
 8004004:	480c      	ldr	r0, [pc, #48]	; (8004038 <HAL_TIM_ConfigClockSource+0x2d4>)
 8004006:	f7fc fce2 	bl	80009ce <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6899      	ldr	r1, [r3, #8]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f000 fddb 	bl	8004bd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800402c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	609a      	str	r2, [r3, #8]
      break;
 8004036:	e1f7      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x6c4>
 8004038:	08006c90 	.word	0x08006c90
 800403c:	40010000 	.word	0x40010000
 8004040:	40000400 	.word	0x40000400
 8004044:	40000800 	.word	0x40000800
 8004048:	40000c00 	.word	0x40000c00
 800404c:	40001000 	.word	0x40001000
 8004050:	40001400 	.word	0x40001400
 8004054:	40010400 	.word	0x40010400
 8004058:	40014000 	.word	0x40014000
 800405c:	40014400 	.word	0x40014400
 8004060:	40014800 	.word	0x40014800
 8004064:	40001800 	.word	0x40001800
 8004068:	40001c00 	.word	0x40001c00
 800406c:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a67      	ldr	r2, [pc, #412]	; (8004214 <HAL_TIM_ConfigClockSource+0x4b0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d01d      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0x352>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004082:	d018      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0x352>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a63      	ldr	r2, [pc, #396]	; (8004218 <HAL_TIM_ConfigClockSource+0x4b4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d013      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0x352>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a62      	ldr	r2, [pc, #392]	; (800421c <HAL_TIM_ConfigClockSource+0x4b8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00e      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0x352>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a60      	ldr	r2, [pc, #384]	; (8004220 <HAL_TIM_ConfigClockSource+0x4bc>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d009      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0x352>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a5f      	ldr	r2, [pc, #380]	; (8004224 <HAL_TIM_ConfigClockSource+0x4c0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d004      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0x352>
 80040ac:	f241 41e2 	movw	r1, #5346	; 0x14e2
 80040b0:	485d      	ldr	r0, [pc, #372]	; (8004228 <HAL_TIM_ConfigClockSource+0x4c4>)
 80040b2:	f7fc fc8c 	bl	80009ce <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d013      	beq.n	80040e6 <HAL_TIM_ConfigClockSource+0x382>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c6:	d00e      	beq.n	80040e6 <HAL_TIM_ConfigClockSource+0x382>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d0:	d009      	beq.n	80040e6 <HAL_TIM_ConfigClockSource+0x382>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040da:	d004      	beq.n	80040e6 <HAL_TIM_ConfigClockSource+0x382>
 80040dc:	f241 41e5 	movw	r1, #5349	; 0x14e5
 80040e0:	4851      	ldr	r0, [pc, #324]	; (8004228 <HAL_TIM_ConfigClockSource+0x4c4>)
 80040e2:	f7fc fc74 	bl	80009ce <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ee:	d014      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x3b6>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d010      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x3b6>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00c      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x3b6>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d008      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x3b6>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b0a      	cmp	r3, #10
 800410e:	d004      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x3b6>
 8004110:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8004114:	4844      	ldr	r0, [pc, #272]	; (8004228 <HAL_TIM_ConfigClockSource+0x4c4>)
 8004116:	f7fc fc5a 	bl	80009ce <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	2b0f      	cmp	r3, #15
 8004120:	d904      	bls.n	800412c <HAL_TIM_ConfigClockSource+0x3c8>
 8004122:	f241 41e7 	movw	r1, #5351	; 0x14e7
 8004126:	4840      	ldr	r0, [pc, #256]	; (8004228 <HAL_TIM_ConfigClockSource+0x4c4>)
 8004128:	f7fc fc51 	bl	80009ce <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6818      	ldr	r0, [r3, #0]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	6899      	ldr	r1, [r3, #8]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f000 fd4a 	bl	8004bd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800414e:	609a      	str	r2, [r3, #8]
      break;
 8004150:	e16a      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a2f      	ldr	r2, [pc, #188]	; (8004214 <HAL_TIM_ConfigClockSource+0x4b0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d027      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x448>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004164:	d022      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x448>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a2b      	ldr	r2, [pc, #172]	; (8004218 <HAL_TIM_ConfigClockSource+0x4b4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d01d      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x448>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a29      	ldr	r2, [pc, #164]	; (800421c <HAL_TIM_ConfigClockSource+0x4b8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d018      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x448>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a28      	ldr	r2, [pc, #160]	; (8004220 <HAL_TIM_ConfigClockSource+0x4bc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d013      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x448>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a26      	ldr	r2, [pc, #152]	; (8004224 <HAL_TIM_ConfigClockSource+0x4c0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00e      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x448>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a26      	ldr	r2, [pc, #152]	; (800422c <HAL_TIM_ConfigClockSource+0x4c8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d009      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x448>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a24      	ldr	r2, [pc, #144]	; (8004230 <HAL_TIM_ConfigClockSource+0x4cc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d004      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x448>
 80041a2:	f241 41f6 	movw	r1, #5366	; 0x14f6
 80041a6:	4820      	ldr	r0, [pc, #128]	; (8004228 <HAL_TIM_ConfigClockSource+0x4c4>)
 80041a8:	f7fc fc11 	bl	80009ce <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b4:	d014      	beq.n	80041e0 <HAL_TIM_ConfigClockSource+0x47c>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d010      	beq.n	80041e0 <HAL_TIM_ConfigClockSource+0x47c>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00c      	beq.n	80041e0 <HAL_TIM_ConfigClockSource+0x47c>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d008      	beq.n	80041e0 <HAL_TIM_ConfigClockSource+0x47c>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b0a      	cmp	r3, #10
 80041d4:	d004      	beq.n	80041e0 <HAL_TIM_ConfigClockSource+0x47c>
 80041d6:	f241 41f9 	movw	r1, #5369	; 0x14f9
 80041da:	4813      	ldr	r0, [pc, #76]	; (8004228 <HAL_TIM_ConfigClockSource+0x4c4>)
 80041dc:	f7fc fbf7 	bl	80009ce <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	2b0f      	cmp	r3, #15
 80041e6:	d904      	bls.n	80041f2 <HAL_TIM_ConfigClockSource+0x48e>
 80041e8:	f241 41fa 	movw	r1, #5370	; 0x14fa
 80041ec:	480e      	ldr	r0, [pc, #56]	; (8004228 <HAL_TIM_ConfigClockSource+0x4c4>)
 80041ee:	f7fc fbee 	bl	80009ce <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6859      	ldr	r1, [r3, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	461a      	mov	r2, r3
 8004200:	f000 fc6e 	bl	8004ae0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2150      	movs	r1, #80	; 0x50
 800420a:	4618      	mov	r0, r3
 800420c:	f000 fcc7 	bl	8004b9e <TIM_ITRx_SetConfig>
      break;
 8004210:	e10a      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x6c4>
 8004212:	bf00      	nop
 8004214:	40010000 	.word	0x40010000
 8004218:	40000400 	.word	0x40000400
 800421c:	40000800 	.word	0x40000800
 8004220:	40000c00 	.word	0x40000c00
 8004224:	40010400 	.word	0x40010400
 8004228:	08006c90 	.word	0x08006c90
 800422c:	40014000 	.word	0x40014000
 8004230:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a82      	ldr	r2, [pc, #520]	; (8004444 <HAL_TIM_ConfigClockSource+0x6e0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d027      	beq.n	800428e <HAL_TIM_ConfigClockSource+0x52a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004246:	d022      	beq.n	800428e <HAL_TIM_ConfigClockSource+0x52a>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a7e      	ldr	r2, [pc, #504]	; (8004448 <HAL_TIM_ConfigClockSource+0x6e4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d01d      	beq.n	800428e <HAL_TIM_ConfigClockSource+0x52a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a7d      	ldr	r2, [pc, #500]	; (800444c <HAL_TIM_ConfigClockSource+0x6e8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d018      	beq.n	800428e <HAL_TIM_ConfigClockSource+0x52a>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a7b      	ldr	r2, [pc, #492]	; (8004450 <HAL_TIM_ConfigClockSource+0x6ec>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d013      	beq.n	800428e <HAL_TIM_ConfigClockSource+0x52a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a7a      	ldr	r2, [pc, #488]	; (8004454 <HAL_TIM_ConfigClockSource+0x6f0>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00e      	beq.n	800428e <HAL_TIM_ConfigClockSource+0x52a>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a78      	ldr	r2, [pc, #480]	; (8004458 <HAL_TIM_ConfigClockSource+0x6f4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d009      	beq.n	800428e <HAL_TIM_ConfigClockSource+0x52a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a77      	ldr	r2, [pc, #476]	; (800445c <HAL_TIM_ConfigClockSource+0x6f8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d004      	beq.n	800428e <HAL_TIM_ConfigClockSource+0x52a>
 8004284:	f241 5106 	movw	r1, #5382	; 0x1506
 8004288:	4875      	ldr	r0, [pc, #468]	; (8004460 <HAL_TIM_ConfigClockSource+0x6fc>)
 800428a:	f7fc fba0 	bl	80009ce <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004296:	d014      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0x55e>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d010      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0x55e>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00c      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0x55e>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d008      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0x55e>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b0a      	cmp	r3, #10
 80042b6:	d004      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0x55e>
 80042b8:	f241 5109 	movw	r1, #5385	; 0x1509
 80042bc:	4868      	ldr	r0, [pc, #416]	; (8004460 <HAL_TIM_ConfigClockSource+0x6fc>)
 80042be:	f7fc fb86 	bl	80009ce <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	2b0f      	cmp	r3, #15
 80042c8:	d904      	bls.n	80042d4 <HAL_TIM_ConfigClockSource+0x570>
 80042ca:	f241 510a 	movw	r1, #5386	; 0x150a
 80042ce:	4864      	ldr	r0, [pc, #400]	; (8004460 <HAL_TIM_ConfigClockSource+0x6fc>)
 80042d0:	f7fc fb7d 	bl	80009ce <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	6859      	ldr	r1, [r3, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	461a      	mov	r2, r3
 80042e2:	f000 fc2c 	bl	8004b3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2160      	movs	r1, #96	; 0x60
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fc56 	bl	8004b9e <TIM_ITRx_SetConfig>
      break;
 80042f2:	e099      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a52      	ldr	r2, [pc, #328]	; (8004444 <HAL_TIM_ConfigClockSource+0x6e0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d027      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x5ea>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004306:	d022      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x5ea>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a4e      	ldr	r2, [pc, #312]	; (8004448 <HAL_TIM_ConfigClockSource+0x6e4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d01d      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x5ea>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a4d      	ldr	r2, [pc, #308]	; (800444c <HAL_TIM_ConfigClockSource+0x6e8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d018      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x5ea>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a4b      	ldr	r2, [pc, #300]	; (8004450 <HAL_TIM_ConfigClockSource+0x6ec>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d013      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x5ea>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a4a      	ldr	r2, [pc, #296]	; (8004454 <HAL_TIM_ConfigClockSource+0x6f0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00e      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x5ea>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a48      	ldr	r2, [pc, #288]	; (8004458 <HAL_TIM_ConfigClockSource+0x6f4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d009      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x5ea>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a47      	ldr	r2, [pc, #284]	; (800445c <HAL_TIM_ConfigClockSource+0x6f8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d004      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x5ea>
 8004344:	f241 5116 	movw	r1, #5398	; 0x1516
 8004348:	4845      	ldr	r0, [pc, #276]	; (8004460 <HAL_TIM_ConfigClockSource+0x6fc>)
 800434a:	f7fc fb40 	bl	80009ce <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004356:	d014      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x61e>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d010      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x61e>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00c      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x61e>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d008      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x61e>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b0a      	cmp	r3, #10
 8004376:	d004      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x61e>
 8004378:	f241 5119 	movw	r1, #5401	; 0x1519
 800437c:	4838      	ldr	r0, [pc, #224]	; (8004460 <HAL_TIM_ConfigClockSource+0x6fc>)
 800437e:	f7fc fb26 	bl	80009ce <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	2b0f      	cmp	r3, #15
 8004388:	d904      	bls.n	8004394 <HAL_TIM_ConfigClockSource+0x630>
 800438a:	f241 511a 	movw	r1, #5402	; 0x151a
 800438e:	4834      	ldr	r0, [pc, #208]	; (8004460 <HAL_TIM_ConfigClockSource+0x6fc>)
 8004390:	f7fc fb1d 	bl	80009ce <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6859      	ldr	r1, [r3, #4]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	461a      	mov	r2, r3
 80043a2:	f000 fb9d 	bl	8004ae0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2140      	movs	r1, #64	; 0x40
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fbf6 	bl	8004b9e <TIM_ITRx_SetConfig>
      break;
 80043b2:	e039      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a22      	ldr	r2, [pc, #136]	; (8004444 <HAL_TIM_ConfigClockSource+0x6e0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d027      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x6aa>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c6:	d022      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x6aa>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1e      	ldr	r2, [pc, #120]	; (8004448 <HAL_TIM_ConfigClockSource+0x6e4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d01d      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x6aa>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1d      	ldr	r2, [pc, #116]	; (800444c <HAL_TIM_ConfigClockSource+0x6e8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d018      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x6aa>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a1b      	ldr	r2, [pc, #108]	; (8004450 <HAL_TIM_ConfigClockSource+0x6ec>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d013      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x6aa>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1a      	ldr	r2, [pc, #104]	; (8004454 <HAL_TIM_ConfigClockSource+0x6f0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00e      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x6aa>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a18      	ldr	r2, [pc, #96]	; (8004458 <HAL_TIM_ConfigClockSource+0x6f4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d009      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x6aa>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a17      	ldr	r2, [pc, #92]	; (800445c <HAL_TIM_ConfigClockSource+0x6f8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d004      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x6aa>
 8004404:	f241 5129 	movw	r1, #5417	; 0x1529
 8004408:	4815      	ldr	r0, [pc, #84]	; (8004460 <HAL_TIM_ConfigClockSource+0x6fc>)
 800440a:	f7fc fae0 	bl	80009ce <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4619      	mov	r1, r3
 8004418:	4610      	mov	r0, r2
 800441a:	f000 fbc0 	bl	8004b9e <TIM_ITRx_SetConfig>
      break;
 800441e:	e003      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
      break;
 8004424:	e000      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 8004426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004438:	7bfb      	ldrb	r3, [r7, #15]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40010000 	.word	0x40010000
 8004448:	40000400 	.word	0x40000400
 800444c:	40000800 	.word	0x40000800
 8004450:	40000c00 	.word	0x40000c00
 8004454:	40010400 	.word	0x40010400
 8004458:	40014000 	.word	0x40014000
 800445c:	40001800 	.word	0x40001800
 8004460:	08006c90 	.word	0x08006c90

08004464 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a40      	ldr	r2, [pc, #256]	; (8004640 <TIM_Base_SetConfig+0x114>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d013      	beq.n	800456c <TIM_Base_SetConfig+0x40>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454a:	d00f      	beq.n	800456c <TIM_Base_SetConfig+0x40>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a3d      	ldr	r2, [pc, #244]	; (8004644 <TIM_Base_SetConfig+0x118>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00b      	beq.n	800456c <TIM_Base_SetConfig+0x40>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a3c      	ldr	r2, [pc, #240]	; (8004648 <TIM_Base_SetConfig+0x11c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d007      	beq.n	800456c <TIM_Base_SetConfig+0x40>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a3b      	ldr	r2, [pc, #236]	; (800464c <TIM_Base_SetConfig+0x120>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <TIM_Base_SetConfig+0x40>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a3a      	ldr	r2, [pc, #232]	; (8004650 <TIM_Base_SetConfig+0x124>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d108      	bne.n	800457e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a2f      	ldr	r2, [pc, #188]	; (8004640 <TIM_Base_SetConfig+0x114>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d02b      	beq.n	80045de <TIM_Base_SetConfig+0xb2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458c:	d027      	beq.n	80045de <TIM_Base_SetConfig+0xb2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a2c      	ldr	r2, [pc, #176]	; (8004644 <TIM_Base_SetConfig+0x118>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d023      	beq.n	80045de <TIM_Base_SetConfig+0xb2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a2b      	ldr	r2, [pc, #172]	; (8004648 <TIM_Base_SetConfig+0x11c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d01f      	beq.n	80045de <TIM_Base_SetConfig+0xb2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a2a      	ldr	r2, [pc, #168]	; (800464c <TIM_Base_SetConfig+0x120>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d01b      	beq.n	80045de <TIM_Base_SetConfig+0xb2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a29      	ldr	r2, [pc, #164]	; (8004650 <TIM_Base_SetConfig+0x124>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d017      	beq.n	80045de <TIM_Base_SetConfig+0xb2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a28      	ldr	r2, [pc, #160]	; (8004654 <TIM_Base_SetConfig+0x128>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d013      	beq.n	80045de <TIM_Base_SetConfig+0xb2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a27      	ldr	r2, [pc, #156]	; (8004658 <TIM_Base_SetConfig+0x12c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00f      	beq.n	80045de <TIM_Base_SetConfig+0xb2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a26      	ldr	r2, [pc, #152]	; (800465c <TIM_Base_SetConfig+0x130>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00b      	beq.n	80045de <TIM_Base_SetConfig+0xb2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a25      	ldr	r2, [pc, #148]	; (8004660 <TIM_Base_SetConfig+0x134>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d007      	beq.n	80045de <TIM_Base_SetConfig+0xb2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a24      	ldr	r2, [pc, #144]	; (8004664 <TIM_Base_SetConfig+0x138>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d003      	beq.n	80045de <TIM_Base_SetConfig+0xb2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a23      	ldr	r2, [pc, #140]	; (8004668 <TIM_Base_SetConfig+0x13c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d108      	bne.n	80045f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a0a      	ldr	r2, [pc, #40]	; (8004640 <TIM_Base_SetConfig+0x114>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d003      	beq.n	8004624 <TIM_Base_SetConfig+0xf8>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a0c      	ldr	r2, [pc, #48]	; (8004650 <TIM_Base_SetConfig+0x124>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d103      	bne.n	800462c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	615a      	str	r2, [r3, #20]
}
 8004632:	bf00      	nop
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40010000 	.word	0x40010000
 8004644:	40000400 	.word	0x40000400
 8004648:	40000800 	.word	0x40000800
 800464c:	40000c00 	.word	0x40000c00
 8004650:	40010400 	.word	0x40010400
 8004654:	40014000 	.word	0x40014000
 8004658:	40014400 	.word	0x40014400
 800465c:	40014800 	.word	0x40014800
 8004660:	40001800 	.word	0x40001800
 8004664:	40001c00 	.word	0x40001c00
 8004668:	40002000 	.word	0x40002000

0800466c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	f023 0201 	bic.w	r2, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 0303 	bic.w	r3, r3, #3
 80046a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f023 0302 	bic.w	r3, r3, #2
 80046b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a34      	ldr	r2, [pc, #208]	; (8004794 <TIM_OC1_SetConfig+0x128>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d003      	beq.n	80046d0 <TIM_OC1_SetConfig+0x64>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a33      	ldr	r2, [pc, #204]	; (8004798 <TIM_OC1_SetConfig+0x12c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d119      	bne.n	8004704 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d008      	beq.n	80046ea <TIM_OC1_SetConfig+0x7e>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d004      	beq.n	80046ea <TIM_OC1_SetConfig+0x7e>
 80046e0:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 80046e4:	482d      	ldr	r0, [pc, #180]	; (800479c <TIM_OC1_SetConfig+0x130>)
 80046e6:	f7fc f972 	bl	80009ce <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f023 0308 	bic.w	r3, r3, #8
 80046f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f023 0304 	bic.w	r3, r3, #4
 8004702:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a23      	ldr	r2, [pc, #140]	; (8004794 <TIM_OC1_SetConfig+0x128>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d003      	beq.n	8004714 <TIM_OC1_SetConfig+0xa8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a22      	ldr	r2, [pc, #136]	; (8004798 <TIM_OC1_SetConfig+0x12c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d12d      	bne.n	8004770 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800471c:	d008      	beq.n	8004730 <TIM_OC1_SetConfig+0xc4>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d004      	beq.n	8004730 <TIM_OC1_SetConfig+0xc4>
 8004726:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 800472a:	481c      	ldr	r0, [pc, #112]	; (800479c <TIM_OC1_SetConfig+0x130>)
 800472c:	f7fc f94f 	bl	80009ce <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004738:	d008      	beq.n	800474c <TIM_OC1_SetConfig+0xe0>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d004      	beq.n	800474c <TIM_OC1_SetConfig+0xe0>
 8004742:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 8004746:	4815      	ldr	r0, [pc, #84]	; (800479c <TIM_OC1_SetConfig+0x130>)
 8004748:	f7fc f941 	bl	80009ce <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004752:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800475a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	621a      	str	r2, [r3, #32]
}
 800478a:	bf00      	nop
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40010000 	.word	0x40010000
 8004798:	40010400 	.word	0x40010400
 800479c:	08006c90 	.word	0x08006c90

080047a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	f023 0210 	bic.w	r2, r3, #16
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f023 0320 	bic.w	r3, r3, #32
 80047ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a35      	ldr	r2, [pc, #212]	; (80048d0 <TIM_OC2_SetConfig+0x130>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <TIM_OC2_SetConfig+0x68>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a34      	ldr	r2, [pc, #208]	; (80048d4 <TIM_OC2_SetConfig+0x134>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d11a      	bne.n	800483e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <TIM_OC2_SetConfig+0x82>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	2b08      	cmp	r3, #8
 8004816:	d004      	beq.n	8004822 <TIM_OC2_SetConfig+0x82>
 8004818:	f641 3112 	movw	r1, #6930	; 0x1b12
 800481c:	482e      	ldr	r0, [pc, #184]	; (80048d8 <TIM_OC2_SetConfig+0x138>)
 800481e:	f7fc f8d6 	bl	80009ce <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004828:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	4313      	orrs	r3, r2
 8004834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800483c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a23      	ldr	r2, [pc, #140]	; (80048d0 <TIM_OC2_SetConfig+0x130>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d003      	beq.n	800484e <TIM_OC2_SetConfig+0xae>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a22      	ldr	r2, [pc, #136]	; (80048d4 <TIM_OC2_SetConfig+0x134>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d12f      	bne.n	80048ae <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004856:	d008      	beq.n	800486a <TIM_OC2_SetConfig+0xca>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d004      	beq.n	800486a <TIM_OC2_SetConfig+0xca>
 8004860:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 8004864:	481c      	ldr	r0, [pc, #112]	; (80048d8 <TIM_OC2_SetConfig+0x138>)
 8004866:	f7fc f8b2 	bl	80009ce <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004872:	d008      	beq.n	8004886 <TIM_OC2_SetConfig+0xe6>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d004      	beq.n	8004886 <TIM_OC2_SetConfig+0xe6>
 800487c:	f641 3121 	movw	r1, #6945	; 0x1b21
 8004880:	4815      	ldr	r0, [pc, #84]	; (80048d8 <TIM_OC2_SetConfig+0x138>)
 8004882:	f7fc f8a4 	bl	80009ce <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800488c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	621a      	str	r2, [r3, #32]
}
 80048c8:	bf00      	nop
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40010000 	.word	0x40010000
 80048d4:	40010400 	.word	0x40010400
 80048d8:	08006c90 	.word	0x08006c90

080048dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0303 	bic.w	r3, r3, #3
 8004912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a35      	ldr	r2, [pc, #212]	; (8004a0c <TIM_OC3_SetConfig+0x130>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d003      	beq.n	8004942 <TIM_OC3_SetConfig+0x66>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a34      	ldr	r2, [pc, #208]	; (8004a10 <TIM_OC3_SetConfig+0x134>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d11a      	bne.n	8004978 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d008      	beq.n	800495c <TIM_OC3_SetConfig+0x80>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	2b08      	cmp	r3, #8
 8004950:	d004      	beq.n	800495c <TIM_OC3_SetConfig+0x80>
 8004952:	f641 315d 	movw	r1, #7005	; 0x1b5d
 8004956:	482f      	ldr	r0, [pc, #188]	; (8004a14 <TIM_OC3_SetConfig+0x138>)
 8004958:	f7fc f839 	bl	80009ce <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	021b      	lsls	r3, r3, #8
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004976:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a24      	ldr	r2, [pc, #144]	; (8004a0c <TIM_OC3_SetConfig+0x130>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d003      	beq.n	8004988 <TIM_OC3_SetConfig+0xac>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a23      	ldr	r2, [pc, #140]	; (8004a10 <TIM_OC3_SetConfig+0x134>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d12f      	bne.n	80049e8 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004990:	d008      	beq.n	80049a4 <TIM_OC3_SetConfig+0xc8>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d004      	beq.n	80049a4 <TIM_OC3_SetConfig+0xc8>
 800499a:	f641 316a 	movw	r1, #7018	; 0x1b6a
 800499e:	481d      	ldr	r0, [pc, #116]	; (8004a14 <TIM_OC3_SetConfig+0x138>)
 80049a0:	f7fc f815 	bl	80009ce <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ac:	d008      	beq.n	80049c0 <TIM_OC3_SetConfig+0xe4>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d004      	beq.n	80049c0 <TIM_OC3_SetConfig+0xe4>
 80049b6:	f641 316b 	movw	r1, #7019	; 0x1b6b
 80049ba:	4816      	ldr	r0, [pc, #88]	; (8004a14 <TIM_OC3_SetConfig+0x138>)
 80049bc:	f7fc f807 	bl	80009ce <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	bf00      	nop
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40010000 	.word	0x40010000
 8004a10:	40010400 	.word	0x40010400
 8004a14:	08006c90 	.word	0x08006c90

08004a18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	031b      	lsls	r3, r3, #12
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a18      	ldr	r2, [pc, #96]	; (8004ad4 <TIM_OC4_SetConfig+0xbc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_OC4_SetConfig+0x68>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a17      	ldr	r2, [pc, #92]	; (8004ad8 <TIM_OC4_SetConfig+0xc0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d117      	bne.n	8004ab0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a88:	d008      	beq.n	8004a9c <TIM_OC4_SetConfig+0x84>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d004      	beq.n	8004a9c <TIM_OC4_SetConfig+0x84>
 8004a92:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 8004a96:	4811      	ldr	r0, [pc, #68]	; (8004adc <TIM_OC4_SetConfig+0xc4>)
 8004a98:	f7fb ff99 	bl	80009ce <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	019b      	lsls	r3, r3, #6
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	621a      	str	r2, [r3, #32]
}
 8004aca:	bf00      	nop
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40010000 	.word	0x40010000
 8004ad8:	40010400 	.word	0x40010400
 8004adc:	08006c90 	.word	0x08006c90

08004ae0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	f023 0201 	bic.w	r2, r3, #1
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f023 030a 	bic.w	r3, r3, #10
 8004b1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	621a      	str	r2, [r3, #32]
}
 8004b32:	bf00      	nop
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b087      	sub	sp, #28
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	f023 0210 	bic.w	r2, r3, #16
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	031b      	lsls	r3, r3, #12
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	621a      	str	r2, [r3, #32]
}
 8004b92:	bf00      	nop
 8004b94:	371c      	adds	r7, #28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b085      	sub	sp, #20
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f043 0307 	orr.w	r3, r3, #7
 8004bc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	609a      	str	r2, [r3, #8]
}
 8004bc8:	bf00      	nop
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	021a      	lsls	r2, r3, #8
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	609a      	str	r2, [r3, #8]
}
 8004c08:	bf00      	nop
 8004c0a:	371c      	adds	r7, #28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a1c      	ldr	r2, [pc, #112]	; (8004c90 <TIM_ResetCallback+0x7c>)
 8004c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a1b      	ldr	r2, [pc, #108]	; (8004c94 <TIM_ResetCallback+0x80>)
 8004c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a1a      	ldr	r2, [pc, #104]	; (8004c98 <TIM_ResetCallback+0x84>)
 8004c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a19      	ldr	r2, [pc, #100]	; (8004c9c <TIM_ResetCallback+0x88>)
 8004c38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a18      	ldr	r2, [pc, #96]	; (8004ca0 <TIM_ResetCallback+0x8c>)
 8004c40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a17      	ldr	r2, [pc, #92]	; (8004ca4 <TIM_ResetCallback+0x90>)
 8004c48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a16      	ldr	r2, [pc, #88]	; (8004ca8 <TIM_ResetCallback+0x94>)
 8004c50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a15      	ldr	r2, [pc, #84]	; (8004cac <TIM_ResetCallback+0x98>)
 8004c58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a14      	ldr	r2, [pc, #80]	; (8004cb0 <TIM_ResetCallback+0x9c>)
 8004c60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a13      	ldr	r2, [pc, #76]	; (8004cb4 <TIM_ResetCallback+0xa0>)
 8004c68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a12      	ldr	r2, [pc, #72]	; (8004cb8 <TIM_ResetCallback+0xa4>)
 8004c70:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a11      	ldr	r2, [pc, #68]	; (8004cbc <TIM_ResetCallback+0xa8>)
 8004c78:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a10      	ldr	r2, [pc, #64]	; (8004cc0 <TIM_ResetCallback+0xac>)
 8004c80:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	08004465 	.word	0x08004465
 8004c94:	08004479 	.word	0x08004479
 8004c98:	080044f1 	.word	0x080044f1
 8004c9c:	08004505 	.word	0x08004505
 8004ca0:	080044a1 	.word	0x080044a1
 8004ca4:	080044b5 	.word	0x080044b5
 8004ca8:	0800448d 	.word	0x0800448d
 8004cac:	080044c9 	.word	0x080044c9
 8004cb0:	080044dd 	.word	0x080044dd
 8004cb4:	08004519 	.word	0x08004519
 8004cb8:	08004e81 	.word	0x08004e81
 8004cbc:	08004e95 	.word	0x08004e95
 8004cc0:	08004ea9 	.word	0x08004ea9

08004cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a61      	ldr	r2, [pc, #388]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d027      	beq.n	8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce0:	d022      	beq.n	8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a5d      	ldr	r2, [pc, #372]	; (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d01d      	beq.n	8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a5b      	ldr	r2, [pc, #364]	; (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d018      	beq.n	8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a5a      	ldr	r2, [pc, #360]	; (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d013      	beq.n	8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a58      	ldr	r2, [pc, #352]	; (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00e      	beq.n	8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a57      	ldr	r2, [pc, #348]	; (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d009      	beq.n	8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a55      	ldr	r2, [pc, #340]	; (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d004      	beq.n	8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004d1e:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8004d22:	4854      	ldr	r0, [pc, #336]	; (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8004d24:	f7fb fe53 	bl	80009ce <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d020      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b10      	cmp	r3, #16
 8004d36:	d01c      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d018      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b30      	cmp	r3, #48	; 0x30
 8004d46:	d014      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b40      	cmp	r3, #64	; 0x40
 8004d4e:	d010      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b50      	cmp	r3, #80	; 0x50
 8004d56:	d00c      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b60      	cmp	r3, #96	; 0x60
 8004d5e:	d008      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b70      	cmp	r3, #112	; 0x70
 8004d66:	d004      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004d68:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8004d6c:	4841      	ldr	r0, [pc, #260]	; (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8004d6e:	f7fb fe2e 	bl	80009ce <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b80      	cmp	r3, #128	; 0x80
 8004d78:	d008      	beq.n	8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d004      	beq.n	8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d82:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8004d86:	483b      	ldr	r0, [pc, #236]	; (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8004d88:	f7fb fe21 	bl	80009ce <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d101      	bne.n	8004d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d96:	2302      	movs	r3, #2
 8004d98:	e05a      	b.n	8004e50 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a1f      	ldr	r2, [pc, #124]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d022      	beq.n	8004e24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de6:	d01d      	beq.n	8004e24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a1b      	ldr	r2, [pc, #108]	; (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d018      	beq.n	8004e24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1a      	ldr	r2, [pc, #104]	; (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d013      	beq.n	8004e24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a18      	ldr	r2, [pc, #96]	; (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00e      	beq.n	8004e24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a19      	ldr	r2, [pc, #100]	; (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d009      	beq.n	8004e24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a18      	ldr	r2, [pc, #96]	; (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d004      	beq.n	8004e24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a17      	ldr	r2, [pc, #92]	; (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d10c      	bne.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40010000 	.word	0x40010000
 8004e5c:	40000400 	.word	0x40000400
 8004e60:	40000800 	.word	0x40000800
 8004e64:	40000c00 	.word	0x40000c00
 8004e68:	40001000 	.word	0x40001000
 8004e6c:	40001400 	.word	0x40001400
 8004e70:	40010400 	.word	0x40010400
 8004e74:	08006d04 	.word	0x08006d04
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40001800 	.word	0x40001800

08004e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e0be      	b.n	800504c <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d03b      	beq.n	8004f4e <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a5e      	ldr	r2, [pc, #376]	; (8005054 <HAL_UART_Init+0x198>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d01d      	beq.n	8004f1c <HAL_UART_Init+0x60>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a5c      	ldr	r2, [pc, #368]	; (8005058 <HAL_UART_Init+0x19c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d018      	beq.n	8004f1c <HAL_UART_Init+0x60>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a5b      	ldr	r2, [pc, #364]	; (800505c <HAL_UART_Init+0x1a0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d013      	beq.n	8004f1c <HAL_UART_Init+0x60>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a59      	ldr	r2, [pc, #356]	; (8005060 <HAL_UART_Init+0x1a4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00e      	beq.n	8004f1c <HAL_UART_Init+0x60>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a58      	ldr	r2, [pc, #352]	; (8005064 <HAL_UART_Init+0x1a8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d009      	beq.n	8004f1c <HAL_UART_Init+0x60>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a56      	ldr	r2, [pc, #344]	; (8005068 <HAL_UART_Init+0x1ac>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d004      	beq.n	8004f1c <HAL_UART_Init+0x60>
 8004f12:	f240 1173 	movw	r1, #371	; 0x173
 8004f16:	4855      	ldr	r0, [pc, #340]	; (800506c <HAL_UART_Init+0x1b0>)
 8004f18:	f7fb fd59 	bl	80009ce <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d037      	beq.n	8004f94 <HAL_UART_Init+0xd8>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f2c:	d032      	beq.n	8004f94 <HAL_UART_Init+0xd8>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f36:	d02d      	beq.n	8004f94 <HAL_UART_Init+0xd8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f40:	d028      	beq.n	8004f94 <HAL_UART_Init+0xd8>
 8004f42:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8004f46:	4849      	ldr	r0, [pc, #292]	; (800506c <HAL_UART_Init+0x1b0>)
 8004f48:	f7fb fd41 	bl	80009ce <assert_failed>
 8004f4c:	e022      	b.n	8004f94 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a40      	ldr	r2, [pc, #256]	; (8005054 <HAL_UART_Init+0x198>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d01d      	beq.n	8004f94 <HAL_UART_Init+0xd8>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a3e      	ldr	r2, [pc, #248]	; (8005058 <HAL_UART_Init+0x19c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d018      	beq.n	8004f94 <HAL_UART_Init+0xd8>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a3d      	ldr	r2, [pc, #244]	; (800505c <HAL_UART_Init+0x1a0>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d013      	beq.n	8004f94 <HAL_UART_Init+0xd8>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a3b      	ldr	r2, [pc, #236]	; (8005060 <HAL_UART_Init+0x1a4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00e      	beq.n	8004f94 <HAL_UART_Init+0xd8>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a3a      	ldr	r2, [pc, #232]	; (8005064 <HAL_UART_Init+0x1a8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d009      	beq.n	8004f94 <HAL_UART_Init+0xd8>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a38      	ldr	r2, [pc, #224]	; (8005068 <HAL_UART_Init+0x1ac>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d004      	beq.n	8004f94 <HAL_UART_Init+0xd8>
 8004f8a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8004f8e:	4837      	ldr	r0, [pc, #220]	; (800506c <HAL_UART_Init+0x1b0>)
 8004f90:	f7fb fd1d 	bl	80009ce <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d009      	beq.n	8004fb0 <HAL_UART_Init+0xf4>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa4:	d004      	beq.n	8004fb0 <HAL_UART_Init+0xf4>
 8004fa6:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8004faa:	4830      	ldr	r0, [pc, #192]	; (800506c <HAL_UART_Init+0x1b0>)
 8004fac:	f7fb fd0f 	bl	80009ce <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d009      	beq.n	8004fcc <HAL_UART_Init+0x110>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc0:	d004      	beq.n	8004fcc <HAL_UART_Init+0x110>
 8004fc2:	f240 117b 	movw	r1, #379	; 0x17b
 8004fc6:	4829      	ldr	r0, [pc, #164]	; (800506c <HAL_UART_Init+0x1b0>)
 8004fc8:	f7fb fd01 	bl	80009ce <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d106      	bne.n	8004fe6 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7fb fdc3 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2224      	movs	r2, #36	; 0x24
 8004fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ffc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fd88 	bl	8005b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691a      	ldr	r2, [r3, #16]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005012:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695a      	ldr	r2, [r3, #20]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005022:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005032:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2220      	movs	r2, #32
 8005046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40011000 	.word	0x40011000
 8005058:	40004400 	.word	0x40004400
 800505c:	40004800 	.word	0x40004800
 8005060:	40004c00 	.word	0x40004c00
 8005064:	40005000 	.word	0x40005000
 8005068:	40011400 	.word	0x40011400
 800506c:	08006d78 	.word	0x08006d78

08005070 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08a      	sub	sp, #40	; 0x28
 8005074:	af02      	add	r7, sp, #8
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	4613      	mov	r3, r2
 800507e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b20      	cmp	r3, #32
 800508e:	d17c      	bne.n	800518a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_UART_Transmit+0x2c>
 8005096:	88fb      	ldrh	r3, [r7, #6]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e075      	b.n	800518c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d101      	bne.n	80050ae <HAL_UART_Transmit+0x3e>
 80050aa:	2302      	movs	r3, #2
 80050ac:	e06e      	b.n	800518c <HAL_UART_Transmit+0x11c>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2221      	movs	r2, #33	; 0x21
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050c4:	f7fb feb0 	bl	8000e28 <HAL_GetTick>
 80050c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	88fa      	ldrh	r2, [r7, #6]
 80050ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	88fa      	ldrh	r2, [r7, #6]
 80050d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050de:	d108      	bne.n	80050f2 <HAL_UART_Transmit+0x82>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d104      	bne.n	80050f2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	e003      	b.n	80050fa <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005102:	e02a      	b.n	800515a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2200      	movs	r2, #0
 800510c:	2180      	movs	r1, #128	; 0x80
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 faf8 	bl	8005704 <UART_WaitOnFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e036      	b.n	800518c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10b      	bne.n	800513c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005132:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	3302      	adds	r3, #2
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	e007      	b.n	800514c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	781a      	ldrb	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	3301      	adds	r3, #1
 800514a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1cf      	bne.n	8005104 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2200      	movs	r2, #0
 800516c:	2140      	movs	r1, #64	; 0x40
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 fac8 	bl	8005704 <UART_WaitOnFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e006      	b.n	800518c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	e000      	b.n	800518c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800518a:	2302      	movs	r3, #2
  }
}
 800518c:	4618      	mov	r0, r3
 800518e:	3720      	adds	r7, #32
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b0ba      	sub	sp, #232	; 0xe8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80051d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10f      	bne.n	80051fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051de:	f003 0320 	and.w	r3, r3, #32
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d009      	beq.n	80051fa <HAL_UART_IRQHandler+0x66>
 80051e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ea:	f003 0320 	and.w	r3, r3, #32
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fbd3 	bl	800599e <UART_Receive_IT>
      return;
 80051f8:	e256      	b.n	80056a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 80de 	beq.w	80053c0 <HAL_UART_IRQHandler+0x22c>
 8005204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d106      	bne.n	800521e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005214:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 80d1 	beq.w	80053c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800521e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00b      	beq.n	8005242 <HAL_UART_IRQHandler+0xae>
 800522a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800522e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005232:	2b00      	cmp	r3, #0
 8005234:	d005      	beq.n	8005242 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	f043 0201 	orr.w	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00b      	beq.n	8005266 <HAL_UART_IRQHandler+0xd2>
 800524e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	f043 0202 	orr.w	r2, r3, #2
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00b      	beq.n	800528a <HAL_UART_IRQHandler+0xf6>
 8005272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d005      	beq.n	800528a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f043 0204 	orr.w	r2, r3, #4
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800528a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d011      	beq.n	80052ba <HAL_UART_IRQHandler+0x126>
 8005296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800529a:	f003 0320 	and.w	r3, r3, #32
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d105      	bne.n	80052ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d005      	beq.n	80052ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f043 0208 	orr.w	r2, r3, #8
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 81ed 	beq.w	800569e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_UART_IRQHandler+0x14e>
 80052d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052d4:	f003 0320 	and.w	r3, r3, #32
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fb5e 	bl	800599e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ec:	2b40      	cmp	r3, #64	; 0x40
 80052ee:	bf0c      	ite	eq
 80052f0:	2301      	moveq	r3, #1
 80052f2:	2300      	movne	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d103      	bne.n	800530e <HAL_UART_IRQHandler+0x17a>
 8005306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800530a:	2b00      	cmp	r3, #0
 800530c:	d04f      	beq.n	80053ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fa66 	bl	80057e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531e:	2b40      	cmp	r3, #64	; 0x40
 8005320:	d141      	bne.n	80053a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3314      	adds	r3, #20
 8005328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005338:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800533c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3314      	adds	r3, #20
 800534a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800534e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005352:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005356:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800535a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1d9      	bne.n	8005322 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	2b00      	cmp	r3, #0
 8005374:	d013      	beq.n	800539e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537a:	4a7d      	ldr	r2, [pc, #500]	; (8005570 <HAL_UART_IRQHandler+0x3dc>)
 800537c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005382:	4618      	mov	r0, r3
 8005384:	f7fc fc95 	bl	8001cb2 <HAL_DMA_Abort_IT>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d016      	beq.n	80053bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005398:	4610      	mov	r0, r2
 800539a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800539c:	e00e      	b.n	80053bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f99a 	bl	80056d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a4:	e00a      	b.n	80053bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f996 	bl	80056d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ac:	e006      	b.n	80053bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f992 	bl	80056d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80053ba:	e170      	b.n	800569e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053bc:	bf00      	nop
    return;
 80053be:	e16e      	b.n	800569e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	f040 814a 	bne.w	800565e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ce:	f003 0310 	and.w	r3, r3, #16
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 8143 	beq.w	800565e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 813c 	beq.w	800565e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053e6:	2300      	movs	r3, #0
 80053e8:	60bb      	str	r3, [r7, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	60bb      	str	r3, [r7, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	60bb      	str	r3, [r7, #8]
 80053fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005406:	2b40      	cmp	r3, #64	; 0x40
 8005408:	f040 80b4 	bne.w	8005574 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005418:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 8140 	beq.w	80056a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005426:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800542a:	429a      	cmp	r2, r3
 800542c:	f080 8139 	bcs.w	80056a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005436:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005442:	f000 8088 	beq.w	8005556 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	330c      	adds	r3, #12
 800544c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005454:	e853 3f00 	ldrex	r3, [r3]
 8005458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800545c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005464:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	330c      	adds	r3, #12
 800546e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005472:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005476:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800547e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800548a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1d9      	bne.n	8005446 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3314      	adds	r3, #20
 8005498:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054a4:	f023 0301 	bic.w	r3, r3, #1
 80054a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3314      	adds	r3, #20
 80054b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e1      	bne.n	8005492 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3314      	adds	r3, #20
 80054d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3314      	adds	r3, #20
 80054ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054fa:	e841 2300 	strex	r3, r2, [r1]
 80054fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1e3      	bne.n	80054ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551e:	e853 3f00 	ldrex	r3, [r3]
 8005522:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005526:	f023 0310 	bic.w	r3, r3, #16
 800552a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	330c      	adds	r3, #12
 8005534:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005538:	65ba      	str	r2, [r7, #88]	; 0x58
 800553a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800553e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005540:	e841 2300 	strex	r3, r2, [r1]
 8005544:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1e3      	bne.n	8005514 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005550:	4618      	mov	r0, r3
 8005552:	f7fc fb3e 	bl	8001bd2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800555e:	b29b      	uxth	r3, r3
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	b29b      	uxth	r3, r3
 8005564:	4619      	mov	r1, r3
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f8c0 	bl	80056ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800556c:	e099      	b.n	80056a2 <HAL_UART_IRQHandler+0x50e>
 800556e:	bf00      	nop
 8005570:	080058a7 	.word	0x080058a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800557c:	b29b      	uxth	r3, r3
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005588:	b29b      	uxth	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 808b 	beq.w	80056a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005590:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 8086 	beq.w	80056a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	330c      	adds	r3, #12
 80055a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	330c      	adds	r3, #12
 80055ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80055be:	647a      	str	r2, [r7, #68]	; 0x44
 80055c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e3      	bne.n	800559a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3314      	adds	r3, #20
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	623b      	str	r3, [r7, #32]
   return(result);
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	f023 0301 	bic.w	r3, r3, #1
 80055e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3314      	adds	r3, #20
 80055f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055f6:	633a      	str	r2, [r7, #48]	; 0x30
 80055f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e3      	bne.n	80055d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	330c      	adds	r3, #12
 800561e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	60fb      	str	r3, [r7, #12]
   return(result);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0310 	bic.w	r3, r3, #16
 800562e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	330c      	adds	r3, #12
 8005638:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800563c:	61fa      	str	r2, [r7, #28]
 800563e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	69b9      	ldr	r1, [r7, #24]
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	617b      	str	r3, [r7, #20]
   return(result);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e3      	bne.n	8005618 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005654:	4619      	mov	r1, r3
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f848 	bl	80056ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800565c:	e023      	b.n	80056a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <HAL_UART_IRQHandler+0x4ea>
 800566a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800566e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f929 	bl	80058ce <UART_Transmit_IT>
    return;
 800567c:	e014      	b.n	80056a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800567e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00e      	beq.n	80056a8 <HAL_UART_IRQHandler+0x514>
 800568a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800568e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d008      	beq.n	80056a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f969 	bl	800596e <UART_EndTransmit_IT>
    return;
 800569c:	e004      	b.n	80056a8 <HAL_UART_IRQHandler+0x514>
    return;
 800569e:	bf00      	nop
 80056a0:	e002      	b.n	80056a8 <HAL_UART_IRQHandler+0x514>
      return;
 80056a2:	bf00      	nop
 80056a4:	e000      	b.n	80056a8 <HAL_UART_IRQHandler+0x514>
      return;
 80056a6:	bf00      	nop
  }
}
 80056a8:	37e8      	adds	r7, #232	; 0xe8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop

080056b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b090      	sub	sp, #64	; 0x40
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	4613      	mov	r3, r2
 8005712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005714:	e050      	b.n	80057b8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571c:	d04c      	beq.n	80057b8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800571e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005720:	2b00      	cmp	r3, #0
 8005722:	d007      	beq.n	8005734 <UART_WaitOnFlagUntilTimeout+0x30>
 8005724:	f7fb fb80 	bl	8000e28 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005730:	429a      	cmp	r2, r3
 8005732:	d241      	bcs.n	80057b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	330c      	adds	r3, #12
 800573a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	e853 3f00 	ldrex	r3, [r3]
 8005742:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800574a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	330c      	adds	r3, #12
 8005752:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005754:	637a      	str	r2, [r7, #52]	; 0x34
 8005756:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005758:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800575a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800575c:	e841 2300 	strex	r3, r2, [r1]
 8005760:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1e5      	bne.n	8005734 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3314      	adds	r3, #20
 800576e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	e853 3f00 	ldrex	r3, [r3]
 8005776:	613b      	str	r3, [r7, #16]
   return(result);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f023 0301 	bic.w	r3, r3, #1
 800577e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3314      	adds	r3, #20
 8005786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005788:	623a      	str	r2, [r7, #32]
 800578a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578c:	69f9      	ldr	r1, [r7, #28]
 800578e:	6a3a      	ldr	r2, [r7, #32]
 8005790:	e841 2300 	strex	r3, r2, [r1]
 8005794:	61bb      	str	r3, [r7, #24]
   return(result);
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1e5      	bne.n	8005768 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e00f      	b.n	80057d8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	4013      	ands	r3, r2
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	bf0c      	ite	eq
 80057c8:	2301      	moveq	r3, #1
 80057ca:	2300      	movne	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d09f      	beq.n	8005716 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3740      	adds	r7, #64	; 0x40
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b095      	sub	sp, #84	; 0x54
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	330c      	adds	r3, #12
 80057ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f2:	e853 3f00 	ldrex	r3, [r3]
 80057f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	330c      	adds	r3, #12
 8005806:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005808:	643a      	str	r2, [r7, #64]	; 0x40
 800580a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800580e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e5      	bne.n	80057e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3314      	adds	r3, #20
 8005822:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	61fb      	str	r3, [r7, #28]
   return(result);
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	f023 0301 	bic.w	r3, r3, #1
 8005832:	64bb      	str	r3, [r7, #72]	; 0x48
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3314      	adds	r3, #20
 800583a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800583c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800583e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e5      	bne.n	800581c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	2b01      	cmp	r3, #1
 8005856:	d119      	bne.n	800588c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	330c      	adds	r3, #12
 800585e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	60bb      	str	r3, [r7, #8]
   return(result);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f023 0310 	bic.w	r3, r3, #16
 800586e:	647b      	str	r3, [r7, #68]	; 0x44
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	330c      	adds	r3, #12
 8005876:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005878:	61ba      	str	r2, [r7, #24]
 800587a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6979      	ldr	r1, [r7, #20]
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	613b      	str	r3, [r7, #16]
   return(result);
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e5      	bne.n	8005858 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2220      	movs	r2, #32
 8005890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	631a      	str	r2, [r3, #48]	; 0x30
}
 800589a:	bf00      	nop
 800589c:	3754      	adds	r7, #84	; 0x54
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b084      	sub	sp, #16
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f7ff ff09 	bl	80056d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b085      	sub	sp, #20
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b21      	cmp	r3, #33	; 0x21
 80058e0:	d13e      	bne.n	8005960 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ea:	d114      	bne.n	8005916 <UART_Transmit_IT+0x48>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d110      	bne.n	8005916 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005908:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	1c9a      	adds	r2, r3, #2
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	621a      	str	r2, [r3, #32]
 8005914:	e008      	b.n	8005928 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	1c59      	adds	r1, r3, #1
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6211      	str	r1, [r2, #32]
 8005920:	781a      	ldrb	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	b29b      	uxth	r3, r3
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	4619      	mov	r1, r3
 8005936:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10f      	bne.n	800595c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800594a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800595a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	e000      	b.n	8005962 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005960:	2302      	movs	r3, #2
  }
}
 8005962:	4618      	mov	r0, r3
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b082      	sub	sp, #8
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005984:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2220      	movs	r2, #32
 800598a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7ff fe8e 	bl	80056b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b08c      	sub	sp, #48	; 0x30
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b22      	cmp	r3, #34	; 0x22
 80059b0:	f040 80ab 	bne.w	8005b0a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059bc:	d117      	bne.n	80059ee <UART_Receive_IT+0x50>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d113      	bne.n	80059ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059c6:	2300      	movs	r3, #0
 80059c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059dc:	b29a      	uxth	r2, r3
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	1c9a      	adds	r2, r3, #2
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	629a      	str	r2, [r3, #40]	; 0x28
 80059ec:	e026      	b.n	8005a3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80059f4:	2300      	movs	r3, #0
 80059f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a00:	d007      	beq.n	8005a12 <UART_Receive_IT+0x74>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10a      	bne.n	8005a20 <UART_Receive_IT+0x82>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d106      	bne.n	8005a20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1c:	701a      	strb	r2, [r3, #0]
 8005a1e:	e008      	b.n	8005a32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	4619      	mov	r1, r3
 8005a4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d15a      	bne.n	8005b06 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68da      	ldr	r2, [r3, #12]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0220 	bic.w	r2, r2, #32
 8005a5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695a      	ldr	r2, [r3, #20]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0201 	bic.w	r2, r2, #1
 8005a7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d135      	bne.n	8005afc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	330c      	adds	r3, #12
 8005a9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	e853 3f00 	ldrex	r3, [r3]
 8005aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f023 0310 	bic.w	r3, r3, #16
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	330c      	adds	r3, #12
 8005ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab6:	623a      	str	r2, [r7, #32]
 8005ab8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aba:	69f9      	ldr	r1, [r7, #28]
 8005abc:	6a3a      	ldr	r2, [r7, #32]
 8005abe:	e841 2300 	strex	r3, r2, [r1]
 8005ac2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1e5      	bne.n	8005a96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0310 	and.w	r3, r3, #16
 8005ad4:	2b10      	cmp	r3, #16
 8005ad6:	d10a      	bne.n	8005aee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ad8:	2300      	movs	r3, #0
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005af2:	4619      	mov	r1, r3
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7ff fdf9 	bl	80056ec <HAL_UARTEx_RxEventCallback>
 8005afa:	e002      	b.n	8005b02 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff fde1 	bl	80056c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	e002      	b.n	8005b0c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e000      	b.n	8005b0c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005b0a:	2302      	movs	r3, #2
  }
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3730      	adds	r7, #48	; 0x30
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b18:	b0c0      	sub	sp, #256	; 0x100
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	4bcf      	ldr	r3, [pc, #828]	; (8005e64 <UART_SetConfig+0x350>)
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d904      	bls.n	8005b36 <UART_SetConfig+0x22>
 8005b2c:	f640 6161 	movw	r1, #3681	; 0xe61
 8005b30:	48cd      	ldr	r0, [pc, #820]	; (8005e68 <UART_SetConfig+0x354>)
 8005b32:	f7fa ff4c 	bl	80009ce <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00a      	beq.n	8005b56 <UART_SetConfig+0x42>
 8005b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b4a:	d004      	beq.n	8005b56 <UART_SetConfig+0x42>
 8005b4c:	f640 6162 	movw	r1, #3682	; 0xe62
 8005b50:	48c5      	ldr	r0, [pc, #788]	; (8005e68 <UART_SetConfig+0x354>)
 8005b52:	f7fa ff3c 	bl	80009ce <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d010      	beq.n	8005b82 <UART_SetConfig+0x6e>
 8005b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b6a:	d00a      	beq.n	8005b82 <UART_SetConfig+0x6e>
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005b76:	d004      	beq.n	8005b82 <UART_SetConfig+0x6e>
 8005b78:	f640 6163 	movw	r1, #3683	; 0xe63
 8005b7c:	48ba      	ldr	r0, [pc, #744]	; (8005e68 <UART_SetConfig+0x354>)
 8005b7e:	f7fa ff26 	bl	80009ce <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b86:	695a      	ldr	r2, [r3, #20]
 8005b88:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d104      	bne.n	8005b9c <UART_SetConfig+0x88>
 8005b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d104      	bne.n	8005ba6 <UART_SetConfig+0x92>
 8005b9c:	f640 6164 	movw	r1, #3684	; 0xe64
 8005ba0:	48b1      	ldr	r0, [pc, #708]	; (8005e68 <UART_SetConfig+0x354>)
 8005ba2:	f7fa ff14 	bl	80009ce <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb6:	68d9      	ldr	r1, [r3, #12]
 8005bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	ea40 0301 	orr.w	r3, r0, r1
 8005bc2:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005bf2:	f021 010c 	bic.w	r1, r1, #12
 8005bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c00:	430b      	orrs	r3, r1
 8005c02:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c14:	6999      	ldr	r1, [r3, #24]
 8005c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	ea40 0301 	orr.w	r3, r0, r1
 8005c20:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	4b90      	ldr	r3, [pc, #576]	; (8005e6c <UART_SetConfig+0x358>)
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d005      	beq.n	8005c3a <UART_SetConfig+0x126>
 8005c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	4b8e      	ldr	r3, [pc, #568]	; (8005e70 <UART_SetConfig+0x35c>)
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d104      	bne.n	8005c44 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c3a:	f7fc fe2d 	bl	8002898 <HAL_RCC_GetPCLK2Freq>
 8005c3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c42:	e003      	b.n	8005c4c <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c44:	f7fc fe14 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 8005c48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c56:	f040 810f 	bne.w	8005e78 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c64:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c68:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c6c:	4622      	mov	r2, r4
 8005c6e:	462b      	mov	r3, r5
 8005c70:	1891      	adds	r1, r2, r2
 8005c72:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c74:	415b      	adcs	r3, r3
 8005c76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c7c:	4621      	mov	r1, r4
 8005c7e:	eb12 0801 	adds.w	r8, r2, r1
 8005c82:	4629      	mov	r1, r5
 8005c84:	eb43 0901 	adc.w	r9, r3, r1
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	f04f 0300 	mov.w	r3, #0
 8005c90:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c94:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c98:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c9c:	4690      	mov	r8, r2
 8005c9e:	4699      	mov	r9, r3
 8005ca0:	4623      	mov	r3, r4
 8005ca2:	eb18 0303 	adds.w	r3, r8, r3
 8005ca6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005caa:	462b      	mov	r3, r5
 8005cac:	eb49 0303 	adc.w	r3, r9, r3
 8005cb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005cc0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005cc4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005cc8:	460b      	mov	r3, r1
 8005cca:	18db      	adds	r3, r3, r3
 8005ccc:	653b      	str	r3, [r7, #80]	; 0x50
 8005cce:	4613      	mov	r3, r2
 8005cd0:	eb42 0303 	adc.w	r3, r2, r3
 8005cd4:	657b      	str	r3, [r7, #84]	; 0x54
 8005cd6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005cda:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005cde:	f7fa faef 	bl	80002c0 <__aeabi_uldivmod>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4b63      	ldr	r3, [pc, #396]	; (8005e74 <UART_SetConfig+0x360>)
 8005ce8:	fba3 2302 	umull	r2, r3, r3, r2
 8005cec:	095b      	lsrs	r3, r3, #5
 8005cee:	011c      	lsls	r4, r3, #4
 8005cf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cfa:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005cfe:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d02:	4642      	mov	r2, r8
 8005d04:	464b      	mov	r3, r9
 8005d06:	1891      	adds	r1, r2, r2
 8005d08:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d0a:	415b      	adcs	r3, r3
 8005d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d0e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d12:	4641      	mov	r1, r8
 8005d14:	eb12 0a01 	adds.w	sl, r2, r1
 8005d18:	4649      	mov	r1, r9
 8005d1a:	eb43 0b01 	adc.w	fp, r3, r1
 8005d1e:	f04f 0200 	mov.w	r2, #0
 8005d22:	f04f 0300 	mov.w	r3, #0
 8005d26:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d2a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d32:	4692      	mov	sl, r2
 8005d34:	469b      	mov	fp, r3
 8005d36:	4643      	mov	r3, r8
 8005d38:	eb1a 0303 	adds.w	r3, sl, r3
 8005d3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d40:	464b      	mov	r3, r9
 8005d42:	eb4b 0303 	adc.w	r3, fp, r3
 8005d46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d56:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d5a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	18db      	adds	r3, r3, r3
 8005d62:	643b      	str	r3, [r7, #64]	; 0x40
 8005d64:	4613      	mov	r3, r2
 8005d66:	eb42 0303 	adc.w	r3, r2, r3
 8005d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d70:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d74:	f7fa faa4 	bl	80002c0 <__aeabi_uldivmod>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4611      	mov	r1, r2
 8005d7e:	4b3d      	ldr	r3, [pc, #244]	; (8005e74 <UART_SetConfig+0x360>)
 8005d80:	fba3 2301 	umull	r2, r3, r3, r1
 8005d84:	095b      	lsrs	r3, r3, #5
 8005d86:	2264      	movs	r2, #100	; 0x64
 8005d88:	fb02 f303 	mul.w	r3, r2, r3
 8005d8c:	1acb      	subs	r3, r1, r3
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d94:	4b37      	ldr	r3, [pc, #220]	; (8005e74 <UART_SetConfig+0x360>)
 8005d96:	fba3 2302 	umull	r2, r3, r3, r2
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005da2:	441c      	add	r4, r3
 8005da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005da8:	2200      	movs	r2, #0
 8005daa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dae:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005db2:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005db6:	4642      	mov	r2, r8
 8005db8:	464b      	mov	r3, r9
 8005dba:	1891      	adds	r1, r2, r2
 8005dbc:	63b9      	str	r1, [r7, #56]	; 0x38
 8005dbe:	415b      	adcs	r3, r3
 8005dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dc2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005dc6:	4641      	mov	r1, r8
 8005dc8:	1851      	adds	r1, r2, r1
 8005dca:	6339      	str	r1, [r7, #48]	; 0x30
 8005dcc:	4649      	mov	r1, r9
 8005dce:	414b      	adcs	r3, r1
 8005dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	f04f 0300 	mov.w	r3, #0
 8005dda:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005dde:	4659      	mov	r1, fp
 8005de0:	00cb      	lsls	r3, r1, #3
 8005de2:	4651      	mov	r1, sl
 8005de4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005de8:	4651      	mov	r1, sl
 8005dea:	00ca      	lsls	r2, r1, #3
 8005dec:	4610      	mov	r0, r2
 8005dee:	4619      	mov	r1, r3
 8005df0:	4603      	mov	r3, r0
 8005df2:	4642      	mov	r2, r8
 8005df4:	189b      	adds	r3, r3, r2
 8005df6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005dfa:	464b      	mov	r3, r9
 8005dfc:	460a      	mov	r2, r1
 8005dfe:	eb42 0303 	adc.w	r3, r2, r3
 8005e02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e12:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e16:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	18db      	adds	r3, r3, r3
 8005e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e20:	4613      	mov	r3, r2
 8005e22:	eb42 0303 	adc.w	r3, r2, r3
 8005e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e2c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e30:	f7fa fa46 	bl	80002c0 <__aeabi_uldivmod>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4b0e      	ldr	r3, [pc, #56]	; (8005e74 <UART_SetConfig+0x360>)
 8005e3a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e3e:	095b      	lsrs	r3, r3, #5
 8005e40:	2164      	movs	r1, #100	; 0x64
 8005e42:	fb01 f303 	mul.w	r3, r1, r3
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	3332      	adds	r3, #50	; 0x32
 8005e4c:	4a09      	ldr	r2, [pc, #36]	; (8005e74 <UART_SetConfig+0x360>)
 8005e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	f003 0207 	and.w	r2, r3, #7
 8005e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4422      	add	r2, r4
 8005e60:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e62:	e108      	b.n	8006076 <UART_SetConfig+0x562>
 8005e64:	00a037a0 	.word	0x00a037a0
 8005e68:	08006d78 	.word	0x08006d78
 8005e6c:	40011000 	.word	0x40011000
 8005e70:	40011400 	.word	0x40011400
 8005e74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e8a:	4642      	mov	r2, r8
 8005e8c:	464b      	mov	r3, r9
 8005e8e:	1891      	adds	r1, r2, r2
 8005e90:	6239      	str	r1, [r7, #32]
 8005e92:	415b      	adcs	r3, r3
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
 8005e96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e9a:	4641      	mov	r1, r8
 8005e9c:	1854      	adds	r4, r2, r1
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	eb43 0501 	adc.w	r5, r3, r1
 8005ea4:	f04f 0200 	mov.w	r2, #0
 8005ea8:	f04f 0300 	mov.w	r3, #0
 8005eac:	00eb      	lsls	r3, r5, #3
 8005eae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005eb2:	00e2      	lsls	r2, r4, #3
 8005eb4:	4614      	mov	r4, r2
 8005eb6:	461d      	mov	r5, r3
 8005eb8:	4643      	mov	r3, r8
 8005eba:	18e3      	adds	r3, r4, r3
 8005ebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ec0:	464b      	mov	r3, r9
 8005ec2:	eb45 0303 	adc.w	r3, r5, r3
 8005ec6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ed6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005eda:	f04f 0200 	mov.w	r2, #0
 8005ede:	f04f 0300 	mov.w	r3, #0
 8005ee2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ee6:	4629      	mov	r1, r5
 8005ee8:	008b      	lsls	r3, r1, #2
 8005eea:	4621      	mov	r1, r4
 8005eec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	008a      	lsls	r2, r1, #2
 8005ef4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ef8:	f7fa f9e2 	bl	80002c0 <__aeabi_uldivmod>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4b60      	ldr	r3, [pc, #384]	; (8006084 <UART_SetConfig+0x570>)
 8005f02:	fba3 2302 	umull	r2, r3, r3, r2
 8005f06:	095b      	lsrs	r3, r3, #5
 8005f08:	011c      	lsls	r4, r3, #4
 8005f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f1c:	4642      	mov	r2, r8
 8005f1e:	464b      	mov	r3, r9
 8005f20:	1891      	adds	r1, r2, r2
 8005f22:	61b9      	str	r1, [r7, #24]
 8005f24:	415b      	adcs	r3, r3
 8005f26:	61fb      	str	r3, [r7, #28]
 8005f28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f2c:	4641      	mov	r1, r8
 8005f2e:	1851      	adds	r1, r2, r1
 8005f30:	6139      	str	r1, [r7, #16]
 8005f32:	4649      	mov	r1, r9
 8005f34:	414b      	adcs	r3, r1
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	f04f 0200 	mov.w	r2, #0
 8005f3c:	f04f 0300 	mov.w	r3, #0
 8005f40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f44:	4659      	mov	r1, fp
 8005f46:	00cb      	lsls	r3, r1, #3
 8005f48:	4651      	mov	r1, sl
 8005f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f4e:	4651      	mov	r1, sl
 8005f50:	00ca      	lsls	r2, r1, #3
 8005f52:	4610      	mov	r0, r2
 8005f54:	4619      	mov	r1, r3
 8005f56:	4603      	mov	r3, r0
 8005f58:	4642      	mov	r2, r8
 8005f5a:	189b      	adds	r3, r3, r2
 8005f5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f60:	464b      	mov	r3, r9
 8005f62:	460a      	mov	r2, r1
 8005f64:	eb42 0303 	adc.w	r3, r2, r3
 8005f68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	f04f 0300 	mov.w	r3, #0
 8005f80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f84:	4649      	mov	r1, r9
 8005f86:	008b      	lsls	r3, r1, #2
 8005f88:	4641      	mov	r1, r8
 8005f8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f8e:	4641      	mov	r1, r8
 8005f90:	008a      	lsls	r2, r1, #2
 8005f92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f96:	f7fa f993 	bl	80002c0 <__aeabi_uldivmod>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4b39      	ldr	r3, [pc, #228]	; (8006084 <UART_SetConfig+0x570>)
 8005fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa4:	095b      	lsrs	r3, r3, #5
 8005fa6:	2164      	movs	r1, #100	; 0x64
 8005fa8:	fb01 f303 	mul.w	r3, r1, r3
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	3332      	adds	r3, #50	; 0x32
 8005fb2:	4a34      	ldr	r2, [pc, #208]	; (8006084 <UART_SetConfig+0x570>)
 8005fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb8:	095b      	lsrs	r3, r3, #5
 8005fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fbe:	441c      	add	r4, r3
 8005fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	673b      	str	r3, [r7, #112]	; 0x70
 8005fc8:	677a      	str	r2, [r7, #116]	; 0x74
 8005fca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005fce:	4642      	mov	r2, r8
 8005fd0:	464b      	mov	r3, r9
 8005fd2:	1891      	adds	r1, r2, r2
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	415b      	adcs	r3, r3
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fde:	4641      	mov	r1, r8
 8005fe0:	1851      	adds	r1, r2, r1
 8005fe2:	6039      	str	r1, [r7, #0]
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	414b      	adcs	r3, r1
 8005fe8:	607b      	str	r3, [r7, #4]
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	f04f 0300 	mov.w	r3, #0
 8005ff2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ff6:	4659      	mov	r1, fp
 8005ff8:	00cb      	lsls	r3, r1, #3
 8005ffa:	4651      	mov	r1, sl
 8005ffc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006000:	4651      	mov	r1, sl
 8006002:	00ca      	lsls	r2, r1, #3
 8006004:	4610      	mov	r0, r2
 8006006:	4619      	mov	r1, r3
 8006008:	4603      	mov	r3, r0
 800600a:	4642      	mov	r2, r8
 800600c:	189b      	adds	r3, r3, r2
 800600e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006010:	464b      	mov	r3, r9
 8006012:	460a      	mov	r2, r1
 8006014:	eb42 0303 	adc.w	r3, r2, r3
 8006018:	66fb      	str	r3, [r7, #108]	; 0x6c
 800601a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	663b      	str	r3, [r7, #96]	; 0x60
 8006024:	667a      	str	r2, [r7, #100]	; 0x64
 8006026:	f04f 0200 	mov.w	r2, #0
 800602a:	f04f 0300 	mov.w	r3, #0
 800602e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006032:	4649      	mov	r1, r9
 8006034:	008b      	lsls	r3, r1, #2
 8006036:	4641      	mov	r1, r8
 8006038:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800603c:	4641      	mov	r1, r8
 800603e:	008a      	lsls	r2, r1, #2
 8006040:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006044:	f7fa f93c 	bl	80002c0 <__aeabi_uldivmod>
 8006048:	4602      	mov	r2, r0
 800604a:	460b      	mov	r3, r1
 800604c:	4b0d      	ldr	r3, [pc, #52]	; (8006084 <UART_SetConfig+0x570>)
 800604e:	fba3 1302 	umull	r1, r3, r3, r2
 8006052:	095b      	lsrs	r3, r3, #5
 8006054:	2164      	movs	r1, #100	; 0x64
 8006056:	fb01 f303 	mul.w	r3, r1, r3
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	011b      	lsls	r3, r3, #4
 800605e:	3332      	adds	r3, #50	; 0x32
 8006060:	4a08      	ldr	r2, [pc, #32]	; (8006084 <UART_SetConfig+0x570>)
 8006062:	fba2 2303 	umull	r2, r3, r2, r3
 8006066:	095b      	lsrs	r3, r3, #5
 8006068:	f003 020f 	and.w	r2, r3, #15
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4422      	add	r2, r4
 8006074:	609a      	str	r2, [r3, #8]
}
 8006076:	bf00      	nop
 8006078:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800607c:	46bd      	mov	sp, r7
 800607e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006082:	bf00      	nop
 8006084:	51eb851f 	.word	0x51eb851f

08006088 <__errno>:
 8006088:	4b01      	ldr	r3, [pc, #4]	; (8006090 <__errno+0x8>)
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	2000000c 	.word	0x2000000c

08006094 <__libc_init_array>:
 8006094:	b570      	push	{r4, r5, r6, lr}
 8006096:	4d0d      	ldr	r5, [pc, #52]	; (80060cc <__libc_init_array+0x38>)
 8006098:	4c0d      	ldr	r4, [pc, #52]	; (80060d0 <__libc_init_array+0x3c>)
 800609a:	1b64      	subs	r4, r4, r5
 800609c:	10a4      	asrs	r4, r4, #2
 800609e:	2600      	movs	r6, #0
 80060a0:	42a6      	cmp	r6, r4
 80060a2:	d109      	bne.n	80060b8 <__libc_init_array+0x24>
 80060a4:	4d0b      	ldr	r5, [pc, #44]	; (80060d4 <__libc_init_array+0x40>)
 80060a6:	4c0c      	ldr	r4, [pc, #48]	; (80060d8 <__libc_init_array+0x44>)
 80060a8:	f000 fcc2 	bl	8006a30 <_init>
 80060ac:	1b64      	subs	r4, r4, r5
 80060ae:	10a4      	asrs	r4, r4, #2
 80060b0:	2600      	movs	r6, #0
 80060b2:	42a6      	cmp	r6, r4
 80060b4:	d105      	bne.n	80060c2 <__libc_init_array+0x2e>
 80060b6:	bd70      	pop	{r4, r5, r6, pc}
 80060b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060bc:	4798      	blx	r3
 80060be:	3601      	adds	r6, #1
 80060c0:	e7ee      	b.n	80060a0 <__libc_init_array+0xc>
 80060c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c6:	4798      	blx	r3
 80060c8:	3601      	adds	r6, #1
 80060ca:	e7f2      	b.n	80060b2 <__libc_init_array+0x1e>
 80060cc:	08006e40 	.word	0x08006e40
 80060d0:	08006e40 	.word	0x08006e40
 80060d4:	08006e40 	.word	0x08006e40
 80060d8:	08006e44 	.word	0x08006e44

080060dc <memset>:
 80060dc:	4402      	add	r2, r0
 80060de:	4603      	mov	r3, r0
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d100      	bne.n	80060e6 <memset+0xa>
 80060e4:	4770      	bx	lr
 80060e6:	f803 1b01 	strb.w	r1, [r3], #1
 80060ea:	e7f9      	b.n	80060e0 <memset+0x4>

080060ec <siprintf>:
 80060ec:	b40e      	push	{r1, r2, r3}
 80060ee:	b500      	push	{lr}
 80060f0:	b09c      	sub	sp, #112	; 0x70
 80060f2:	ab1d      	add	r3, sp, #116	; 0x74
 80060f4:	9002      	str	r0, [sp, #8]
 80060f6:	9006      	str	r0, [sp, #24]
 80060f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060fc:	4809      	ldr	r0, [pc, #36]	; (8006124 <siprintf+0x38>)
 80060fe:	9107      	str	r1, [sp, #28]
 8006100:	9104      	str	r1, [sp, #16]
 8006102:	4909      	ldr	r1, [pc, #36]	; (8006128 <siprintf+0x3c>)
 8006104:	f853 2b04 	ldr.w	r2, [r3], #4
 8006108:	9105      	str	r1, [sp, #20]
 800610a:	6800      	ldr	r0, [r0, #0]
 800610c:	9301      	str	r3, [sp, #4]
 800610e:	a902      	add	r1, sp, #8
 8006110:	f000 f894 	bl	800623c <_svfiprintf_r>
 8006114:	9b02      	ldr	r3, [sp, #8]
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
 800611a:	b01c      	add	sp, #112	; 0x70
 800611c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006120:	b003      	add	sp, #12
 8006122:	4770      	bx	lr
 8006124:	2000000c 	.word	0x2000000c
 8006128:	ffff0208 	.word	0xffff0208

0800612c <time>:
 800612c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800612e:	4b0b      	ldr	r3, [pc, #44]	; (800615c <time+0x30>)
 8006130:	2200      	movs	r2, #0
 8006132:	4669      	mov	r1, sp
 8006134:	4604      	mov	r4, r0
 8006136:	6818      	ldr	r0, [r3, #0]
 8006138:	f000 f812 	bl	8006160 <_gettimeofday_r>
 800613c:	2800      	cmp	r0, #0
 800613e:	bfbe      	ittt	lt
 8006140:	f04f 32ff 	movlt.w	r2, #4294967295
 8006144:	f04f 33ff 	movlt.w	r3, #4294967295
 8006148:	e9cd 2300 	strdlt	r2, r3, [sp]
 800614c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006150:	b10c      	cbz	r4, 8006156 <time+0x2a>
 8006152:	e9c4 0100 	strd	r0, r1, [r4]
 8006156:	b004      	add	sp, #16
 8006158:	bd10      	pop	{r4, pc}
 800615a:	bf00      	nop
 800615c:	2000000c 	.word	0x2000000c

08006160 <_gettimeofday_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	4d07      	ldr	r5, [pc, #28]	; (8006180 <_gettimeofday_r+0x20>)
 8006164:	2300      	movs	r3, #0
 8006166:	4604      	mov	r4, r0
 8006168:	4608      	mov	r0, r1
 800616a:	4611      	mov	r1, r2
 800616c:	602b      	str	r3, [r5, #0]
 800616e:	f000 fc57 	bl	8006a20 <_gettimeofday>
 8006172:	1c43      	adds	r3, r0, #1
 8006174:	d102      	bne.n	800617c <_gettimeofday_r+0x1c>
 8006176:	682b      	ldr	r3, [r5, #0]
 8006178:	b103      	cbz	r3, 800617c <_gettimeofday_r+0x1c>
 800617a:	6023      	str	r3, [r4, #0]
 800617c:	bd38      	pop	{r3, r4, r5, pc}
 800617e:	bf00      	nop
 8006180:	200001d4 	.word	0x200001d4

08006184 <__ssputs_r>:
 8006184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006188:	688e      	ldr	r6, [r1, #8]
 800618a:	429e      	cmp	r6, r3
 800618c:	4682      	mov	sl, r0
 800618e:	460c      	mov	r4, r1
 8006190:	4690      	mov	r8, r2
 8006192:	461f      	mov	r7, r3
 8006194:	d838      	bhi.n	8006208 <__ssputs_r+0x84>
 8006196:	898a      	ldrh	r2, [r1, #12]
 8006198:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800619c:	d032      	beq.n	8006204 <__ssputs_r+0x80>
 800619e:	6825      	ldr	r5, [r4, #0]
 80061a0:	6909      	ldr	r1, [r1, #16]
 80061a2:	eba5 0901 	sub.w	r9, r5, r1
 80061a6:	6965      	ldr	r5, [r4, #20]
 80061a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061b0:	3301      	adds	r3, #1
 80061b2:	444b      	add	r3, r9
 80061b4:	106d      	asrs	r5, r5, #1
 80061b6:	429d      	cmp	r5, r3
 80061b8:	bf38      	it	cc
 80061ba:	461d      	movcc	r5, r3
 80061bc:	0553      	lsls	r3, r2, #21
 80061be:	d531      	bpl.n	8006224 <__ssputs_r+0xa0>
 80061c0:	4629      	mov	r1, r5
 80061c2:	f000 fb63 	bl	800688c <_malloc_r>
 80061c6:	4606      	mov	r6, r0
 80061c8:	b950      	cbnz	r0, 80061e0 <__ssputs_r+0x5c>
 80061ca:	230c      	movs	r3, #12
 80061cc:	f8ca 3000 	str.w	r3, [sl]
 80061d0:	89a3      	ldrh	r3, [r4, #12]
 80061d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061d6:	81a3      	strh	r3, [r4, #12]
 80061d8:	f04f 30ff 	mov.w	r0, #4294967295
 80061dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e0:	6921      	ldr	r1, [r4, #16]
 80061e2:	464a      	mov	r2, r9
 80061e4:	f000 fabe 	bl	8006764 <memcpy>
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f2:	81a3      	strh	r3, [r4, #12]
 80061f4:	6126      	str	r6, [r4, #16]
 80061f6:	6165      	str	r5, [r4, #20]
 80061f8:	444e      	add	r6, r9
 80061fa:	eba5 0509 	sub.w	r5, r5, r9
 80061fe:	6026      	str	r6, [r4, #0]
 8006200:	60a5      	str	r5, [r4, #8]
 8006202:	463e      	mov	r6, r7
 8006204:	42be      	cmp	r6, r7
 8006206:	d900      	bls.n	800620a <__ssputs_r+0x86>
 8006208:	463e      	mov	r6, r7
 800620a:	6820      	ldr	r0, [r4, #0]
 800620c:	4632      	mov	r2, r6
 800620e:	4641      	mov	r1, r8
 8006210:	f000 fab6 	bl	8006780 <memmove>
 8006214:	68a3      	ldr	r3, [r4, #8]
 8006216:	1b9b      	subs	r3, r3, r6
 8006218:	60a3      	str	r3, [r4, #8]
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	4433      	add	r3, r6
 800621e:	6023      	str	r3, [r4, #0]
 8006220:	2000      	movs	r0, #0
 8006222:	e7db      	b.n	80061dc <__ssputs_r+0x58>
 8006224:	462a      	mov	r2, r5
 8006226:	f000 fba5 	bl	8006974 <_realloc_r>
 800622a:	4606      	mov	r6, r0
 800622c:	2800      	cmp	r0, #0
 800622e:	d1e1      	bne.n	80061f4 <__ssputs_r+0x70>
 8006230:	6921      	ldr	r1, [r4, #16]
 8006232:	4650      	mov	r0, sl
 8006234:	f000 fabe 	bl	80067b4 <_free_r>
 8006238:	e7c7      	b.n	80061ca <__ssputs_r+0x46>
	...

0800623c <_svfiprintf_r>:
 800623c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006240:	4698      	mov	r8, r3
 8006242:	898b      	ldrh	r3, [r1, #12]
 8006244:	061b      	lsls	r3, r3, #24
 8006246:	b09d      	sub	sp, #116	; 0x74
 8006248:	4607      	mov	r7, r0
 800624a:	460d      	mov	r5, r1
 800624c:	4614      	mov	r4, r2
 800624e:	d50e      	bpl.n	800626e <_svfiprintf_r+0x32>
 8006250:	690b      	ldr	r3, [r1, #16]
 8006252:	b963      	cbnz	r3, 800626e <_svfiprintf_r+0x32>
 8006254:	2140      	movs	r1, #64	; 0x40
 8006256:	f000 fb19 	bl	800688c <_malloc_r>
 800625a:	6028      	str	r0, [r5, #0]
 800625c:	6128      	str	r0, [r5, #16]
 800625e:	b920      	cbnz	r0, 800626a <_svfiprintf_r+0x2e>
 8006260:	230c      	movs	r3, #12
 8006262:	603b      	str	r3, [r7, #0]
 8006264:	f04f 30ff 	mov.w	r0, #4294967295
 8006268:	e0d1      	b.n	800640e <_svfiprintf_r+0x1d2>
 800626a:	2340      	movs	r3, #64	; 0x40
 800626c:	616b      	str	r3, [r5, #20]
 800626e:	2300      	movs	r3, #0
 8006270:	9309      	str	r3, [sp, #36]	; 0x24
 8006272:	2320      	movs	r3, #32
 8006274:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006278:	f8cd 800c 	str.w	r8, [sp, #12]
 800627c:	2330      	movs	r3, #48	; 0x30
 800627e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006428 <_svfiprintf_r+0x1ec>
 8006282:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006286:	f04f 0901 	mov.w	r9, #1
 800628a:	4623      	mov	r3, r4
 800628c:	469a      	mov	sl, r3
 800628e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006292:	b10a      	cbz	r2, 8006298 <_svfiprintf_r+0x5c>
 8006294:	2a25      	cmp	r2, #37	; 0x25
 8006296:	d1f9      	bne.n	800628c <_svfiprintf_r+0x50>
 8006298:	ebba 0b04 	subs.w	fp, sl, r4
 800629c:	d00b      	beq.n	80062b6 <_svfiprintf_r+0x7a>
 800629e:	465b      	mov	r3, fp
 80062a0:	4622      	mov	r2, r4
 80062a2:	4629      	mov	r1, r5
 80062a4:	4638      	mov	r0, r7
 80062a6:	f7ff ff6d 	bl	8006184 <__ssputs_r>
 80062aa:	3001      	adds	r0, #1
 80062ac:	f000 80aa 	beq.w	8006404 <_svfiprintf_r+0x1c8>
 80062b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062b2:	445a      	add	r2, fp
 80062b4:	9209      	str	r2, [sp, #36]	; 0x24
 80062b6:	f89a 3000 	ldrb.w	r3, [sl]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 80a2 	beq.w	8006404 <_svfiprintf_r+0x1c8>
 80062c0:	2300      	movs	r3, #0
 80062c2:	f04f 32ff 	mov.w	r2, #4294967295
 80062c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062ca:	f10a 0a01 	add.w	sl, sl, #1
 80062ce:	9304      	str	r3, [sp, #16]
 80062d0:	9307      	str	r3, [sp, #28]
 80062d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062d6:	931a      	str	r3, [sp, #104]	; 0x68
 80062d8:	4654      	mov	r4, sl
 80062da:	2205      	movs	r2, #5
 80062dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062e0:	4851      	ldr	r0, [pc, #324]	; (8006428 <_svfiprintf_r+0x1ec>)
 80062e2:	f7f9 ff9d 	bl	8000220 <memchr>
 80062e6:	9a04      	ldr	r2, [sp, #16]
 80062e8:	b9d8      	cbnz	r0, 8006322 <_svfiprintf_r+0xe6>
 80062ea:	06d0      	lsls	r0, r2, #27
 80062ec:	bf44      	itt	mi
 80062ee:	2320      	movmi	r3, #32
 80062f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062f4:	0711      	lsls	r1, r2, #28
 80062f6:	bf44      	itt	mi
 80062f8:	232b      	movmi	r3, #43	; 0x2b
 80062fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006302:	2b2a      	cmp	r3, #42	; 0x2a
 8006304:	d015      	beq.n	8006332 <_svfiprintf_r+0xf6>
 8006306:	9a07      	ldr	r2, [sp, #28]
 8006308:	4654      	mov	r4, sl
 800630a:	2000      	movs	r0, #0
 800630c:	f04f 0c0a 	mov.w	ip, #10
 8006310:	4621      	mov	r1, r4
 8006312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006316:	3b30      	subs	r3, #48	; 0x30
 8006318:	2b09      	cmp	r3, #9
 800631a:	d94e      	bls.n	80063ba <_svfiprintf_r+0x17e>
 800631c:	b1b0      	cbz	r0, 800634c <_svfiprintf_r+0x110>
 800631e:	9207      	str	r2, [sp, #28]
 8006320:	e014      	b.n	800634c <_svfiprintf_r+0x110>
 8006322:	eba0 0308 	sub.w	r3, r0, r8
 8006326:	fa09 f303 	lsl.w	r3, r9, r3
 800632a:	4313      	orrs	r3, r2
 800632c:	9304      	str	r3, [sp, #16]
 800632e:	46a2      	mov	sl, r4
 8006330:	e7d2      	b.n	80062d8 <_svfiprintf_r+0x9c>
 8006332:	9b03      	ldr	r3, [sp, #12]
 8006334:	1d19      	adds	r1, r3, #4
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	9103      	str	r1, [sp, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	bfbb      	ittet	lt
 800633e:	425b      	neglt	r3, r3
 8006340:	f042 0202 	orrlt.w	r2, r2, #2
 8006344:	9307      	strge	r3, [sp, #28]
 8006346:	9307      	strlt	r3, [sp, #28]
 8006348:	bfb8      	it	lt
 800634a:	9204      	strlt	r2, [sp, #16]
 800634c:	7823      	ldrb	r3, [r4, #0]
 800634e:	2b2e      	cmp	r3, #46	; 0x2e
 8006350:	d10c      	bne.n	800636c <_svfiprintf_r+0x130>
 8006352:	7863      	ldrb	r3, [r4, #1]
 8006354:	2b2a      	cmp	r3, #42	; 0x2a
 8006356:	d135      	bne.n	80063c4 <_svfiprintf_r+0x188>
 8006358:	9b03      	ldr	r3, [sp, #12]
 800635a:	1d1a      	adds	r2, r3, #4
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	9203      	str	r2, [sp, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	bfb8      	it	lt
 8006364:	f04f 33ff 	movlt.w	r3, #4294967295
 8006368:	3402      	adds	r4, #2
 800636a:	9305      	str	r3, [sp, #20]
 800636c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006438 <_svfiprintf_r+0x1fc>
 8006370:	7821      	ldrb	r1, [r4, #0]
 8006372:	2203      	movs	r2, #3
 8006374:	4650      	mov	r0, sl
 8006376:	f7f9 ff53 	bl	8000220 <memchr>
 800637a:	b140      	cbz	r0, 800638e <_svfiprintf_r+0x152>
 800637c:	2340      	movs	r3, #64	; 0x40
 800637e:	eba0 000a 	sub.w	r0, r0, sl
 8006382:	fa03 f000 	lsl.w	r0, r3, r0
 8006386:	9b04      	ldr	r3, [sp, #16]
 8006388:	4303      	orrs	r3, r0
 800638a:	3401      	adds	r4, #1
 800638c:	9304      	str	r3, [sp, #16]
 800638e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006392:	4826      	ldr	r0, [pc, #152]	; (800642c <_svfiprintf_r+0x1f0>)
 8006394:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006398:	2206      	movs	r2, #6
 800639a:	f7f9 ff41 	bl	8000220 <memchr>
 800639e:	2800      	cmp	r0, #0
 80063a0:	d038      	beq.n	8006414 <_svfiprintf_r+0x1d8>
 80063a2:	4b23      	ldr	r3, [pc, #140]	; (8006430 <_svfiprintf_r+0x1f4>)
 80063a4:	bb1b      	cbnz	r3, 80063ee <_svfiprintf_r+0x1b2>
 80063a6:	9b03      	ldr	r3, [sp, #12]
 80063a8:	3307      	adds	r3, #7
 80063aa:	f023 0307 	bic.w	r3, r3, #7
 80063ae:	3308      	adds	r3, #8
 80063b0:	9303      	str	r3, [sp, #12]
 80063b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b4:	4433      	add	r3, r6
 80063b6:	9309      	str	r3, [sp, #36]	; 0x24
 80063b8:	e767      	b.n	800628a <_svfiprintf_r+0x4e>
 80063ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80063be:	460c      	mov	r4, r1
 80063c0:	2001      	movs	r0, #1
 80063c2:	e7a5      	b.n	8006310 <_svfiprintf_r+0xd4>
 80063c4:	2300      	movs	r3, #0
 80063c6:	3401      	adds	r4, #1
 80063c8:	9305      	str	r3, [sp, #20]
 80063ca:	4619      	mov	r1, r3
 80063cc:	f04f 0c0a 	mov.w	ip, #10
 80063d0:	4620      	mov	r0, r4
 80063d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063d6:	3a30      	subs	r2, #48	; 0x30
 80063d8:	2a09      	cmp	r2, #9
 80063da:	d903      	bls.n	80063e4 <_svfiprintf_r+0x1a8>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0c5      	beq.n	800636c <_svfiprintf_r+0x130>
 80063e0:	9105      	str	r1, [sp, #20]
 80063e2:	e7c3      	b.n	800636c <_svfiprintf_r+0x130>
 80063e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80063e8:	4604      	mov	r4, r0
 80063ea:	2301      	movs	r3, #1
 80063ec:	e7f0      	b.n	80063d0 <_svfiprintf_r+0x194>
 80063ee:	ab03      	add	r3, sp, #12
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	462a      	mov	r2, r5
 80063f4:	4b0f      	ldr	r3, [pc, #60]	; (8006434 <_svfiprintf_r+0x1f8>)
 80063f6:	a904      	add	r1, sp, #16
 80063f8:	4638      	mov	r0, r7
 80063fa:	f3af 8000 	nop.w
 80063fe:	1c42      	adds	r2, r0, #1
 8006400:	4606      	mov	r6, r0
 8006402:	d1d6      	bne.n	80063b2 <_svfiprintf_r+0x176>
 8006404:	89ab      	ldrh	r3, [r5, #12]
 8006406:	065b      	lsls	r3, r3, #25
 8006408:	f53f af2c 	bmi.w	8006264 <_svfiprintf_r+0x28>
 800640c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800640e:	b01d      	add	sp, #116	; 0x74
 8006410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006414:	ab03      	add	r3, sp, #12
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	462a      	mov	r2, r5
 800641a:	4b06      	ldr	r3, [pc, #24]	; (8006434 <_svfiprintf_r+0x1f8>)
 800641c:	a904      	add	r1, sp, #16
 800641e:	4638      	mov	r0, r7
 8006420:	f000 f87a 	bl	8006518 <_printf_i>
 8006424:	e7eb      	b.n	80063fe <_svfiprintf_r+0x1c2>
 8006426:	bf00      	nop
 8006428:	08006e04 	.word	0x08006e04
 800642c:	08006e0e 	.word	0x08006e0e
 8006430:	00000000 	.word	0x00000000
 8006434:	08006185 	.word	0x08006185
 8006438:	08006e0a 	.word	0x08006e0a

0800643c <_printf_common>:
 800643c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006440:	4616      	mov	r6, r2
 8006442:	4699      	mov	r9, r3
 8006444:	688a      	ldr	r2, [r1, #8]
 8006446:	690b      	ldr	r3, [r1, #16]
 8006448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800644c:	4293      	cmp	r3, r2
 800644e:	bfb8      	it	lt
 8006450:	4613      	movlt	r3, r2
 8006452:	6033      	str	r3, [r6, #0]
 8006454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006458:	4607      	mov	r7, r0
 800645a:	460c      	mov	r4, r1
 800645c:	b10a      	cbz	r2, 8006462 <_printf_common+0x26>
 800645e:	3301      	adds	r3, #1
 8006460:	6033      	str	r3, [r6, #0]
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	0699      	lsls	r1, r3, #26
 8006466:	bf42      	ittt	mi
 8006468:	6833      	ldrmi	r3, [r6, #0]
 800646a:	3302      	addmi	r3, #2
 800646c:	6033      	strmi	r3, [r6, #0]
 800646e:	6825      	ldr	r5, [r4, #0]
 8006470:	f015 0506 	ands.w	r5, r5, #6
 8006474:	d106      	bne.n	8006484 <_printf_common+0x48>
 8006476:	f104 0a19 	add.w	sl, r4, #25
 800647a:	68e3      	ldr	r3, [r4, #12]
 800647c:	6832      	ldr	r2, [r6, #0]
 800647e:	1a9b      	subs	r3, r3, r2
 8006480:	42ab      	cmp	r3, r5
 8006482:	dc26      	bgt.n	80064d2 <_printf_common+0x96>
 8006484:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006488:	1e13      	subs	r3, r2, #0
 800648a:	6822      	ldr	r2, [r4, #0]
 800648c:	bf18      	it	ne
 800648e:	2301      	movne	r3, #1
 8006490:	0692      	lsls	r2, r2, #26
 8006492:	d42b      	bmi.n	80064ec <_printf_common+0xb0>
 8006494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006498:	4649      	mov	r1, r9
 800649a:	4638      	mov	r0, r7
 800649c:	47c0      	blx	r8
 800649e:	3001      	adds	r0, #1
 80064a0:	d01e      	beq.n	80064e0 <_printf_common+0xa4>
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	68e5      	ldr	r5, [r4, #12]
 80064a6:	6832      	ldr	r2, [r6, #0]
 80064a8:	f003 0306 	and.w	r3, r3, #6
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	bf08      	it	eq
 80064b0:	1aad      	subeq	r5, r5, r2
 80064b2:	68a3      	ldr	r3, [r4, #8]
 80064b4:	6922      	ldr	r2, [r4, #16]
 80064b6:	bf0c      	ite	eq
 80064b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064bc:	2500      	movne	r5, #0
 80064be:	4293      	cmp	r3, r2
 80064c0:	bfc4      	itt	gt
 80064c2:	1a9b      	subgt	r3, r3, r2
 80064c4:	18ed      	addgt	r5, r5, r3
 80064c6:	2600      	movs	r6, #0
 80064c8:	341a      	adds	r4, #26
 80064ca:	42b5      	cmp	r5, r6
 80064cc:	d11a      	bne.n	8006504 <_printf_common+0xc8>
 80064ce:	2000      	movs	r0, #0
 80064d0:	e008      	b.n	80064e4 <_printf_common+0xa8>
 80064d2:	2301      	movs	r3, #1
 80064d4:	4652      	mov	r2, sl
 80064d6:	4649      	mov	r1, r9
 80064d8:	4638      	mov	r0, r7
 80064da:	47c0      	blx	r8
 80064dc:	3001      	adds	r0, #1
 80064de:	d103      	bne.n	80064e8 <_printf_common+0xac>
 80064e0:	f04f 30ff 	mov.w	r0, #4294967295
 80064e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e8:	3501      	adds	r5, #1
 80064ea:	e7c6      	b.n	800647a <_printf_common+0x3e>
 80064ec:	18e1      	adds	r1, r4, r3
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	2030      	movs	r0, #48	; 0x30
 80064f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064f6:	4422      	add	r2, r4
 80064f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006500:	3302      	adds	r3, #2
 8006502:	e7c7      	b.n	8006494 <_printf_common+0x58>
 8006504:	2301      	movs	r3, #1
 8006506:	4622      	mov	r2, r4
 8006508:	4649      	mov	r1, r9
 800650a:	4638      	mov	r0, r7
 800650c:	47c0      	blx	r8
 800650e:	3001      	adds	r0, #1
 8006510:	d0e6      	beq.n	80064e0 <_printf_common+0xa4>
 8006512:	3601      	adds	r6, #1
 8006514:	e7d9      	b.n	80064ca <_printf_common+0x8e>
	...

08006518 <_printf_i>:
 8006518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800651c:	7e0f      	ldrb	r7, [r1, #24]
 800651e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006520:	2f78      	cmp	r7, #120	; 0x78
 8006522:	4691      	mov	r9, r2
 8006524:	4680      	mov	r8, r0
 8006526:	460c      	mov	r4, r1
 8006528:	469a      	mov	sl, r3
 800652a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800652e:	d807      	bhi.n	8006540 <_printf_i+0x28>
 8006530:	2f62      	cmp	r7, #98	; 0x62
 8006532:	d80a      	bhi.n	800654a <_printf_i+0x32>
 8006534:	2f00      	cmp	r7, #0
 8006536:	f000 80d8 	beq.w	80066ea <_printf_i+0x1d2>
 800653a:	2f58      	cmp	r7, #88	; 0x58
 800653c:	f000 80a3 	beq.w	8006686 <_printf_i+0x16e>
 8006540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006544:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006548:	e03a      	b.n	80065c0 <_printf_i+0xa8>
 800654a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800654e:	2b15      	cmp	r3, #21
 8006550:	d8f6      	bhi.n	8006540 <_printf_i+0x28>
 8006552:	a101      	add	r1, pc, #4	; (adr r1, 8006558 <_printf_i+0x40>)
 8006554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006558:	080065b1 	.word	0x080065b1
 800655c:	080065c5 	.word	0x080065c5
 8006560:	08006541 	.word	0x08006541
 8006564:	08006541 	.word	0x08006541
 8006568:	08006541 	.word	0x08006541
 800656c:	08006541 	.word	0x08006541
 8006570:	080065c5 	.word	0x080065c5
 8006574:	08006541 	.word	0x08006541
 8006578:	08006541 	.word	0x08006541
 800657c:	08006541 	.word	0x08006541
 8006580:	08006541 	.word	0x08006541
 8006584:	080066d1 	.word	0x080066d1
 8006588:	080065f5 	.word	0x080065f5
 800658c:	080066b3 	.word	0x080066b3
 8006590:	08006541 	.word	0x08006541
 8006594:	08006541 	.word	0x08006541
 8006598:	080066f3 	.word	0x080066f3
 800659c:	08006541 	.word	0x08006541
 80065a0:	080065f5 	.word	0x080065f5
 80065a4:	08006541 	.word	0x08006541
 80065a8:	08006541 	.word	0x08006541
 80065ac:	080066bb 	.word	0x080066bb
 80065b0:	682b      	ldr	r3, [r5, #0]
 80065b2:	1d1a      	adds	r2, r3, #4
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	602a      	str	r2, [r5, #0]
 80065b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065c0:	2301      	movs	r3, #1
 80065c2:	e0a3      	b.n	800670c <_printf_i+0x1f4>
 80065c4:	6820      	ldr	r0, [r4, #0]
 80065c6:	6829      	ldr	r1, [r5, #0]
 80065c8:	0606      	lsls	r6, r0, #24
 80065ca:	f101 0304 	add.w	r3, r1, #4
 80065ce:	d50a      	bpl.n	80065e6 <_printf_i+0xce>
 80065d0:	680e      	ldr	r6, [r1, #0]
 80065d2:	602b      	str	r3, [r5, #0]
 80065d4:	2e00      	cmp	r6, #0
 80065d6:	da03      	bge.n	80065e0 <_printf_i+0xc8>
 80065d8:	232d      	movs	r3, #45	; 0x2d
 80065da:	4276      	negs	r6, r6
 80065dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065e0:	485e      	ldr	r0, [pc, #376]	; (800675c <_printf_i+0x244>)
 80065e2:	230a      	movs	r3, #10
 80065e4:	e019      	b.n	800661a <_printf_i+0x102>
 80065e6:	680e      	ldr	r6, [r1, #0]
 80065e8:	602b      	str	r3, [r5, #0]
 80065ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065ee:	bf18      	it	ne
 80065f0:	b236      	sxthne	r6, r6
 80065f2:	e7ef      	b.n	80065d4 <_printf_i+0xbc>
 80065f4:	682b      	ldr	r3, [r5, #0]
 80065f6:	6820      	ldr	r0, [r4, #0]
 80065f8:	1d19      	adds	r1, r3, #4
 80065fa:	6029      	str	r1, [r5, #0]
 80065fc:	0601      	lsls	r1, r0, #24
 80065fe:	d501      	bpl.n	8006604 <_printf_i+0xec>
 8006600:	681e      	ldr	r6, [r3, #0]
 8006602:	e002      	b.n	800660a <_printf_i+0xf2>
 8006604:	0646      	lsls	r6, r0, #25
 8006606:	d5fb      	bpl.n	8006600 <_printf_i+0xe8>
 8006608:	881e      	ldrh	r6, [r3, #0]
 800660a:	4854      	ldr	r0, [pc, #336]	; (800675c <_printf_i+0x244>)
 800660c:	2f6f      	cmp	r7, #111	; 0x6f
 800660e:	bf0c      	ite	eq
 8006610:	2308      	moveq	r3, #8
 8006612:	230a      	movne	r3, #10
 8006614:	2100      	movs	r1, #0
 8006616:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800661a:	6865      	ldr	r5, [r4, #4]
 800661c:	60a5      	str	r5, [r4, #8]
 800661e:	2d00      	cmp	r5, #0
 8006620:	bfa2      	ittt	ge
 8006622:	6821      	ldrge	r1, [r4, #0]
 8006624:	f021 0104 	bicge.w	r1, r1, #4
 8006628:	6021      	strge	r1, [r4, #0]
 800662a:	b90e      	cbnz	r6, 8006630 <_printf_i+0x118>
 800662c:	2d00      	cmp	r5, #0
 800662e:	d04d      	beq.n	80066cc <_printf_i+0x1b4>
 8006630:	4615      	mov	r5, r2
 8006632:	fbb6 f1f3 	udiv	r1, r6, r3
 8006636:	fb03 6711 	mls	r7, r3, r1, r6
 800663a:	5dc7      	ldrb	r7, [r0, r7]
 800663c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006640:	4637      	mov	r7, r6
 8006642:	42bb      	cmp	r3, r7
 8006644:	460e      	mov	r6, r1
 8006646:	d9f4      	bls.n	8006632 <_printf_i+0x11a>
 8006648:	2b08      	cmp	r3, #8
 800664a:	d10b      	bne.n	8006664 <_printf_i+0x14c>
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	07de      	lsls	r6, r3, #31
 8006650:	d508      	bpl.n	8006664 <_printf_i+0x14c>
 8006652:	6923      	ldr	r3, [r4, #16]
 8006654:	6861      	ldr	r1, [r4, #4]
 8006656:	4299      	cmp	r1, r3
 8006658:	bfde      	ittt	le
 800665a:	2330      	movle	r3, #48	; 0x30
 800665c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006660:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006664:	1b52      	subs	r2, r2, r5
 8006666:	6122      	str	r2, [r4, #16]
 8006668:	f8cd a000 	str.w	sl, [sp]
 800666c:	464b      	mov	r3, r9
 800666e:	aa03      	add	r2, sp, #12
 8006670:	4621      	mov	r1, r4
 8006672:	4640      	mov	r0, r8
 8006674:	f7ff fee2 	bl	800643c <_printf_common>
 8006678:	3001      	adds	r0, #1
 800667a:	d14c      	bne.n	8006716 <_printf_i+0x1fe>
 800667c:	f04f 30ff 	mov.w	r0, #4294967295
 8006680:	b004      	add	sp, #16
 8006682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006686:	4835      	ldr	r0, [pc, #212]	; (800675c <_printf_i+0x244>)
 8006688:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800668c:	6829      	ldr	r1, [r5, #0]
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	f851 6b04 	ldr.w	r6, [r1], #4
 8006694:	6029      	str	r1, [r5, #0]
 8006696:	061d      	lsls	r5, r3, #24
 8006698:	d514      	bpl.n	80066c4 <_printf_i+0x1ac>
 800669a:	07df      	lsls	r7, r3, #31
 800669c:	bf44      	itt	mi
 800669e:	f043 0320 	orrmi.w	r3, r3, #32
 80066a2:	6023      	strmi	r3, [r4, #0]
 80066a4:	b91e      	cbnz	r6, 80066ae <_printf_i+0x196>
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	f023 0320 	bic.w	r3, r3, #32
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	2310      	movs	r3, #16
 80066b0:	e7b0      	b.n	8006614 <_printf_i+0xfc>
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	f043 0320 	orr.w	r3, r3, #32
 80066b8:	6023      	str	r3, [r4, #0]
 80066ba:	2378      	movs	r3, #120	; 0x78
 80066bc:	4828      	ldr	r0, [pc, #160]	; (8006760 <_printf_i+0x248>)
 80066be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066c2:	e7e3      	b.n	800668c <_printf_i+0x174>
 80066c4:	0659      	lsls	r1, r3, #25
 80066c6:	bf48      	it	mi
 80066c8:	b2b6      	uxthmi	r6, r6
 80066ca:	e7e6      	b.n	800669a <_printf_i+0x182>
 80066cc:	4615      	mov	r5, r2
 80066ce:	e7bb      	b.n	8006648 <_printf_i+0x130>
 80066d0:	682b      	ldr	r3, [r5, #0]
 80066d2:	6826      	ldr	r6, [r4, #0]
 80066d4:	6961      	ldr	r1, [r4, #20]
 80066d6:	1d18      	adds	r0, r3, #4
 80066d8:	6028      	str	r0, [r5, #0]
 80066da:	0635      	lsls	r5, r6, #24
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	d501      	bpl.n	80066e4 <_printf_i+0x1cc>
 80066e0:	6019      	str	r1, [r3, #0]
 80066e2:	e002      	b.n	80066ea <_printf_i+0x1d2>
 80066e4:	0670      	lsls	r0, r6, #25
 80066e6:	d5fb      	bpl.n	80066e0 <_printf_i+0x1c8>
 80066e8:	8019      	strh	r1, [r3, #0]
 80066ea:	2300      	movs	r3, #0
 80066ec:	6123      	str	r3, [r4, #16]
 80066ee:	4615      	mov	r5, r2
 80066f0:	e7ba      	b.n	8006668 <_printf_i+0x150>
 80066f2:	682b      	ldr	r3, [r5, #0]
 80066f4:	1d1a      	adds	r2, r3, #4
 80066f6:	602a      	str	r2, [r5, #0]
 80066f8:	681d      	ldr	r5, [r3, #0]
 80066fa:	6862      	ldr	r2, [r4, #4]
 80066fc:	2100      	movs	r1, #0
 80066fe:	4628      	mov	r0, r5
 8006700:	f7f9 fd8e 	bl	8000220 <memchr>
 8006704:	b108      	cbz	r0, 800670a <_printf_i+0x1f2>
 8006706:	1b40      	subs	r0, r0, r5
 8006708:	6060      	str	r0, [r4, #4]
 800670a:	6863      	ldr	r3, [r4, #4]
 800670c:	6123      	str	r3, [r4, #16]
 800670e:	2300      	movs	r3, #0
 8006710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006714:	e7a8      	b.n	8006668 <_printf_i+0x150>
 8006716:	6923      	ldr	r3, [r4, #16]
 8006718:	462a      	mov	r2, r5
 800671a:	4649      	mov	r1, r9
 800671c:	4640      	mov	r0, r8
 800671e:	47d0      	blx	sl
 8006720:	3001      	adds	r0, #1
 8006722:	d0ab      	beq.n	800667c <_printf_i+0x164>
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	079b      	lsls	r3, r3, #30
 8006728:	d413      	bmi.n	8006752 <_printf_i+0x23a>
 800672a:	68e0      	ldr	r0, [r4, #12]
 800672c:	9b03      	ldr	r3, [sp, #12]
 800672e:	4298      	cmp	r0, r3
 8006730:	bfb8      	it	lt
 8006732:	4618      	movlt	r0, r3
 8006734:	e7a4      	b.n	8006680 <_printf_i+0x168>
 8006736:	2301      	movs	r3, #1
 8006738:	4632      	mov	r2, r6
 800673a:	4649      	mov	r1, r9
 800673c:	4640      	mov	r0, r8
 800673e:	47d0      	blx	sl
 8006740:	3001      	adds	r0, #1
 8006742:	d09b      	beq.n	800667c <_printf_i+0x164>
 8006744:	3501      	adds	r5, #1
 8006746:	68e3      	ldr	r3, [r4, #12]
 8006748:	9903      	ldr	r1, [sp, #12]
 800674a:	1a5b      	subs	r3, r3, r1
 800674c:	42ab      	cmp	r3, r5
 800674e:	dcf2      	bgt.n	8006736 <_printf_i+0x21e>
 8006750:	e7eb      	b.n	800672a <_printf_i+0x212>
 8006752:	2500      	movs	r5, #0
 8006754:	f104 0619 	add.w	r6, r4, #25
 8006758:	e7f5      	b.n	8006746 <_printf_i+0x22e>
 800675a:	bf00      	nop
 800675c:	08006e15 	.word	0x08006e15
 8006760:	08006e26 	.word	0x08006e26

08006764 <memcpy>:
 8006764:	440a      	add	r2, r1
 8006766:	4291      	cmp	r1, r2
 8006768:	f100 33ff 	add.w	r3, r0, #4294967295
 800676c:	d100      	bne.n	8006770 <memcpy+0xc>
 800676e:	4770      	bx	lr
 8006770:	b510      	push	{r4, lr}
 8006772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800677a:	4291      	cmp	r1, r2
 800677c:	d1f9      	bne.n	8006772 <memcpy+0xe>
 800677e:	bd10      	pop	{r4, pc}

08006780 <memmove>:
 8006780:	4288      	cmp	r0, r1
 8006782:	b510      	push	{r4, lr}
 8006784:	eb01 0402 	add.w	r4, r1, r2
 8006788:	d902      	bls.n	8006790 <memmove+0x10>
 800678a:	4284      	cmp	r4, r0
 800678c:	4623      	mov	r3, r4
 800678e:	d807      	bhi.n	80067a0 <memmove+0x20>
 8006790:	1e43      	subs	r3, r0, #1
 8006792:	42a1      	cmp	r1, r4
 8006794:	d008      	beq.n	80067a8 <memmove+0x28>
 8006796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800679a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800679e:	e7f8      	b.n	8006792 <memmove+0x12>
 80067a0:	4402      	add	r2, r0
 80067a2:	4601      	mov	r1, r0
 80067a4:	428a      	cmp	r2, r1
 80067a6:	d100      	bne.n	80067aa <memmove+0x2a>
 80067a8:	bd10      	pop	{r4, pc}
 80067aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067b2:	e7f7      	b.n	80067a4 <memmove+0x24>

080067b4 <_free_r>:
 80067b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067b6:	2900      	cmp	r1, #0
 80067b8:	d044      	beq.n	8006844 <_free_r+0x90>
 80067ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067be:	9001      	str	r0, [sp, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f1a1 0404 	sub.w	r4, r1, #4
 80067c6:	bfb8      	it	lt
 80067c8:	18e4      	addlt	r4, r4, r3
 80067ca:	f000 f913 	bl	80069f4 <__malloc_lock>
 80067ce:	4a1e      	ldr	r2, [pc, #120]	; (8006848 <_free_r+0x94>)
 80067d0:	9801      	ldr	r0, [sp, #4]
 80067d2:	6813      	ldr	r3, [r2, #0]
 80067d4:	b933      	cbnz	r3, 80067e4 <_free_r+0x30>
 80067d6:	6063      	str	r3, [r4, #4]
 80067d8:	6014      	str	r4, [r2, #0]
 80067da:	b003      	add	sp, #12
 80067dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067e0:	f000 b90e 	b.w	8006a00 <__malloc_unlock>
 80067e4:	42a3      	cmp	r3, r4
 80067e6:	d908      	bls.n	80067fa <_free_r+0x46>
 80067e8:	6825      	ldr	r5, [r4, #0]
 80067ea:	1961      	adds	r1, r4, r5
 80067ec:	428b      	cmp	r3, r1
 80067ee:	bf01      	itttt	eq
 80067f0:	6819      	ldreq	r1, [r3, #0]
 80067f2:	685b      	ldreq	r3, [r3, #4]
 80067f4:	1949      	addeq	r1, r1, r5
 80067f6:	6021      	streq	r1, [r4, #0]
 80067f8:	e7ed      	b.n	80067d6 <_free_r+0x22>
 80067fa:	461a      	mov	r2, r3
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	b10b      	cbz	r3, 8006804 <_free_r+0x50>
 8006800:	42a3      	cmp	r3, r4
 8006802:	d9fa      	bls.n	80067fa <_free_r+0x46>
 8006804:	6811      	ldr	r1, [r2, #0]
 8006806:	1855      	adds	r5, r2, r1
 8006808:	42a5      	cmp	r5, r4
 800680a:	d10b      	bne.n	8006824 <_free_r+0x70>
 800680c:	6824      	ldr	r4, [r4, #0]
 800680e:	4421      	add	r1, r4
 8006810:	1854      	adds	r4, r2, r1
 8006812:	42a3      	cmp	r3, r4
 8006814:	6011      	str	r1, [r2, #0]
 8006816:	d1e0      	bne.n	80067da <_free_r+0x26>
 8006818:	681c      	ldr	r4, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	6053      	str	r3, [r2, #4]
 800681e:	4421      	add	r1, r4
 8006820:	6011      	str	r1, [r2, #0]
 8006822:	e7da      	b.n	80067da <_free_r+0x26>
 8006824:	d902      	bls.n	800682c <_free_r+0x78>
 8006826:	230c      	movs	r3, #12
 8006828:	6003      	str	r3, [r0, #0]
 800682a:	e7d6      	b.n	80067da <_free_r+0x26>
 800682c:	6825      	ldr	r5, [r4, #0]
 800682e:	1961      	adds	r1, r4, r5
 8006830:	428b      	cmp	r3, r1
 8006832:	bf04      	itt	eq
 8006834:	6819      	ldreq	r1, [r3, #0]
 8006836:	685b      	ldreq	r3, [r3, #4]
 8006838:	6063      	str	r3, [r4, #4]
 800683a:	bf04      	itt	eq
 800683c:	1949      	addeq	r1, r1, r5
 800683e:	6021      	streq	r1, [r4, #0]
 8006840:	6054      	str	r4, [r2, #4]
 8006842:	e7ca      	b.n	80067da <_free_r+0x26>
 8006844:	b003      	add	sp, #12
 8006846:	bd30      	pop	{r4, r5, pc}
 8006848:	200001d8 	.word	0x200001d8

0800684c <sbrk_aligned>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	4e0e      	ldr	r6, [pc, #56]	; (8006888 <sbrk_aligned+0x3c>)
 8006850:	460c      	mov	r4, r1
 8006852:	6831      	ldr	r1, [r6, #0]
 8006854:	4605      	mov	r5, r0
 8006856:	b911      	cbnz	r1, 800685e <sbrk_aligned+0x12>
 8006858:	f000 f8bc 	bl	80069d4 <_sbrk_r>
 800685c:	6030      	str	r0, [r6, #0]
 800685e:	4621      	mov	r1, r4
 8006860:	4628      	mov	r0, r5
 8006862:	f000 f8b7 	bl	80069d4 <_sbrk_r>
 8006866:	1c43      	adds	r3, r0, #1
 8006868:	d00a      	beq.n	8006880 <sbrk_aligned+0x34>
 800686a:	1cc4      	adds	r4, r0, #3
 800686c:	f024 0403 	bic.w	r4, r4, #3
 8006870:	42a0      	cmp	r0, r4
 8006872:	d007      	beq.n	8006884 <sbrk_aligned+0x38>
 8006874:	1a21      	subs	r1, r4, r0
 8006876:	4628      	mov	r0, r5
 8006878:	f000 f8ac 	bl	80069d4 <_sbrk_r>
 800687c:	3001      	adds	r0, #1
 800687e:	d101      	bne.n	8006884 <sbrk_aligned+0x38>
 8006880:	f04f 34ff 	mov.w	r4, #4294967295
 8006884:	4620      	mov	r0, r4
 8006886:	bd70      	pop	{r4, r5, r6, pc}
 8006888:	200001dc 	.word	0x200001dc

0800688c <_malloc_r>:
 800688c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006890:	1ccd      	adds	r5, r1, #3
 8006892:	f025 0503 	bic.w	r5, r5, #3
 8006896:	3508      	adds	r5, #8
 8006898:	2d0c      	cmp	r5, #12
 800689a:	bf38      	it	cc
 800689c:	250c      	movcc	r5, #12
 800689e:	2d00      	cmp	r5, #0
 80068a0:	4607      	mov	r7, r0
 80068a2:	db01      	blt.n	80068a8 <_malloc_r+0x1c>
 80068a4:	42a9      	cmp	r1, r5
 80068a6:	d905      	bls.n	80068b4 <_malloc_r+0x28>
 80068a8:	230c      	movs	r3, #12
 80068aa:	603b      	str	r3, [r7, #0]
 80068ac:	2600      	movs	r6, #0
 80068ae:	4630      	mov	r0, r6
 80068b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068b4:	4e2e      	ldr	r6, [pc, #184]	; (8006970 <_malloc_r+0xe4>)
 80068b6:	f000 f89d 	bl	80069f4 <__malloc_lock>
 80068ba:	6833      	ldr	r3, [r6, #0]
 80068bc:	461c      	mov	r4, r3
 80068be:	bb34      	cbnz	r4, 800690e <_malloc_r+0x82>
 80068c0:	4629      	mov	r1, r5
 80068c2:	4638      	mov	r0, r7
 80068c4:	f7ff ffc2 	bl	800684c <sbrk_aligned>
 80068c8:	1c43      	adds	r3, r0, #1
 80068ca:	4604      	mov	r4, r0
 80068cc:	d14d      	bne.n	800696a <_malloc_r+0xde>
 80068ce:	6834      	ldr	r4, [r6, #0]
 80068d0:	4626      	mov	r6, r4
 80068d2:	2e00      	cmp	r6, #0
 80068d4:	d140      	bne.n	8006958 <_malloc_r+0xcc>
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	4631      	mov	r1, r6
 80068da:	4638      	mov	r0, r7
 80068dc:	eb04 0803 	add.w	r8, r4, r3
 80068e0:	f000 f878 	bl	80069d4 <_sbrk_r>
 80068e4:	4580      	cmp	r8, r0
 80068e6:	d13a      	bne.n	800695e <_malloc_r+0xd2>
 80068e8:	6821      	ldr	r1, [r4, #0]
 80068ea:	3503      	adds	r5, #3
 80068ec:	1a6d      	subs	r5, r5, r1
 80068ee:	f025 0503 	bic.w	r5, r5, #3
 80068f2:	3508      	adds	r5, #8
 80068f4:	2d0c      	cmp	r5, #12
 80068f6:	bf38      	it	cc
 80068f8:	250c      	movcc	r5, #12
 80068fa:	4629      	mov	r1, r5
 80068fc:	4638      	mov	r0, r7
 80068fe:	f7ff ffa5 	bl	800684c <sbrk_aligned>
 8006902:	3001      	adds	r0, #1
 8006904:	d02b      	beq.n	800695e <_malloc_r+0xd2>
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	442b      	add	r3, r5
 800690a:	6023      	str	r3, [r4, #0]
 800690c:	e00e      	b.n	800692c <_malloc_r+0xa0>
 800690e:	6822      	ldr	r2, [r4, #0]
 8006910:	1b52      	subs	r2, r2, r5
 8006912:	d41e      	bmi.n	8006952 <_malloc_r+0xc6>
 8006914:	2a0b      	cmp	r2, #11
 8006916:	d916      	bls.n	8006946 <_malloc_r+0xba>
 8006918:	1961      	adds	r1, r4, r5
 800691a:	42a3      	cmp	r3, r4
 800691c:	6025      	str	r5, [r4, #0]
 800691e:	bf18      	it	ne
 8006920:	6059      	strne	r1, [r3, #4]
 8006922:	6863      	ldr	r3, [r4, #4]
 8006924:	bf08      	it	eq
 8006926:	6031      	streq	r1, [r6, #0]
 8006928:	5162      	str	r2, [r4, r5]
 800692a:	604b      	str	r3, [r1, #4]
 800692c:	4638      	mov	r0, r7
 800692e:	f104 060b 	add.w	r6, r4, #11
 8006932:	f000 f865 	bl	8006a00 <__malloc_unlock>
 8006936:	f026 0607 	bic.w	r6, r6, #7
 800693a:	1d23      	adds	r3, r4, #4
 800693c:	1af2      	subs	r2, r6, r3
 800693e:	d0b6      	beq.n	80068ae <_malloc_r+0x22>
 8006940:	1b9b      	subs	r3, r3, r6
 8006942:	50a3      	str	r3, [r4, r2]
 8006944:	e7b3      	b.n	80068ae <_malloc_r+0x22>
 8006946:	6862      	ldr	r2, [r4, #4]
 8006948:	42a3      	cmp	r3, r4
 800694a:	bf0c      	ite	eq
 800694c:	6032      	streq	r2, [r6, #0]
 800694e:	605a      	strne	r2, [r3, #4]
 8006950:	e7ec      	b.n	800692c <_malloc_r+0xa0>
 8006952:	4623      	mov	r3, r4
 8006954:	6864      	ldr	r4, [r4, #4]
 8006956:	e7b2      	b.n	80068be <_malloc_r+0x32>
 8006958:	4634      	mov	r4, r6
 800695a:	6876      	ldr	r6, [r6, #4]
 800695c:	e7b9      	b.n	80068d2 <_malloc_r+0x46>
 800695e:	230c      	movs	r3, #12
 8006960:	603b      	str	r3, [r7, #0]
 8006962:	4638      	mov	r0, r7
 8006964:	f000 f84c 	bl	8006a00 <__malloc_unlock>
 8006968:	e7a1      	b.n	80068ae <_malloc_r+0x22>
 800696a:	6025      	str	r5, [r4, #0]
 800696c:	e7de      	b.n	800692c <_malloc_r+0xa0>
 800696e:	bf00      	nop
 8006970:	200001d8 	.word	0x200001d8

08006974 <_realloc_r>:
 8006974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006978:	4680      	mov	r8, r0
 800697a:	4614      	mov	r4, r2
 800697c:	460e      	mov	r6, r1
 800697e:	b921      	cbnz	r1, 800698a <_realloc_r+0x16>
 8006980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006984:	4611      	mov	r1, r2
 8006986:	f7ff bf81 	b.w	800688c <_malloc_r>
 800698a:	b92a      	cbnz	r2, 8006998 <_realloc_r+0x24>
 800698c:	f7ff ff12 	bl	80067b4 <_free_r>
 8006990:	4625      	mov	r5, r4
 8006992:	4628      	mov	r0, r5
 8006994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006998:	f000 f838 	bl	8006a0c <_malloc_usable_size_r>
 800699c:	4284      	cmp	r4, r0
 800699e:	4607      	mov	r7, r0
 80069a0:	d802      	bhi.n	80069a8 <_realloc_r+0x34>
 80069a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80069a6:	d812      	bhi.n	80069ce <_realloc_r+0x5a>
 80069a8:	4621      	mov	r1, r4
 80069aa:	4640      	mov	r0, r8
 80069ac:	f7ff ff6e 	bl	800688c <_malloc_r>
 80069b0:	4605      	mov	r5, r0
 80069b2:	2800      	cmp	r0, #0
 80069b4:	d0ed      	beq.n	8006992 <_realloc_r+0x1e>
 80069b6:	42bc      	cmp	r4, r7
 80069b8:	4622      	mov	r2, r4
 80069ba:	4631      	mov	r1, r6
 80069bc:	bf28      	it	cs
 80069be:	463a      	movcs	r2, r7
 80069c0:	f7ff fed0 	bl	8006764 <memcpy>
 80069c4:	4631      	mov	r1, r6
 80069c6:	4640      	mov	r0, r8
 80069c8:	f7ff fef4 	bl	80067b4 <_free_r>
 80069cc:	e7e1      	b.n	8006992 <_realloc_r+0x1e>
 80069ce:	4635      	mov	r5, r6
 80069d0:	e7df      	b.n	8006992 <_realloc_r+0x1e>
	...

080069d4 <_sbrk_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	4d06      	ldr	r5, [pc, #24]	; (80069f0 <_sbrk_r+0x1c>)
 80069d8:	2300      	movs	r3, #0
 80069da:	4604      	mov	r4, r0
 80069dc:	4608      	mov	r0, r1
 80069de:	602b      	str	r3, [r5, #0]
 80069e0:	f7fa f94a 	bl	8000c78 <_sbrk>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d102      	bne.n	80069ee <_sbrk_r+0x1a>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	b103      	cbz	r3, 80069ee <_sbrk_r+0x1a>
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	200001d4 	.word	0x200001d4

080069f4 <__malloc_lock>:
 80069f4:	4801      	ldr	r0, [pc, #4]	; (80069fc <__malloc_lock+0x8>)
 80069f6:	f000 b811 	b.w	8006a1c <__retarget_lock_acquire_recursive>
 80069fa:	bf00      	nop
 80069fc:	200001e0 	.word	0x200001e0

08006a00 <__malloc_unlock>:
 8006a00:	4801      	ldr	r0, [pc, #4]	; (8006a08 <__malloc_unlock+0x8>)
 8006a02:	f000 b80c 	b.w	8006a1e <__retarget_lock_release_recursive>
 8006a06:	bf00      	nop
 8006a08:	200001e0 	.word	0x200001e0

08006a0c <_malloc_usable_size_r>:
 8006a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a10:	1f18      	subs	r0, r3, #4
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	bfbc      	itt	lt
 8006a16:	580b      	ldrlt	r3, [r1, r0]
 8006a18:	18c0      	addlt	r0, r0, r3
 8006a1a:	4770      	bx	lr

08006a1c <__retarget_lock_acquire_recursive>:
 8006a1c:	4770      	bx	lr

08006a1e <__retarget_lock_release_recursive>:
 8006a1e:	4770      	bx	lr

08006a20 <_gettimeofday>:
 8006a20:	4b02      	ldr	r3, [pc, #8]	; (8006a2c <_gettimeofday+0xc>)
 8006a22:	2258      	movs	r2, #88	; 0x58
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	f04f 30ff 	mov.w	r0, #4294967295
 8006a2a:	4770      	bx	lr
 8006a2c:	200001d4 	.word	0x200001d4

08006a30 <_init>:
 8006a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a32:	bf00      	nop
 8006a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a36:	bc08      	pop	{r3}
 8006a38:	469e      	mov	lr, r3
 8006a3a:	4770      	bx	lr

08006a3c <_fini>:
 8006a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3e:	bf00      	nop
 8006a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a42:	bc08      	pop	{r3}
 8006a44:	469e      	mov	lr, r3
 8006a46:	4770      	bx	lr
