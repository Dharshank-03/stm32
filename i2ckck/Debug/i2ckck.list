
i2ckck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080011cc  080011cc  000111cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001244  08001244  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001244  08001244  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001244  08001244  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001244  08001244  00011244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001248  08001248  00011248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800124c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000068  080012b4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  080012b4  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001716  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007d1  00000000  00000000  000217a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002d0  00000000  00000000  00021f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000268  00000000  00000000  00022248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002dfa  00000000  00000000  000224b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002cb4  00000000  00000000  000252aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e1c3  00000000  00000000  00027f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a6121  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001010  00000000  00000000  000a6174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080011b4 	.word	0x080011b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080011b4 	.word	0x080011b4

0800014c <trobleshoot>:

#include<stdio.h>
#include<stdint.h>

#include"gpio.h"
void trobleshoot(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	uint32_t *rcc = 0x40023800;
 8000152:	4b0e      	ldr	r3, [pc, #56]	; (800018c <trobleshoot+0x40>)
 8000154:	607b      	str	r3, [r7, #4]
	*(rcc+0x40) = 1<<21;
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800015c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000160:	601a      	str	r2, [r3, #0]
	*(rcc+0x30) = 1<<3;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	33c0      	adds	r3, #192	; 0xc0
 8000166:	2208      	movs	r2, #8
 8000168:	601a      	str	r2, [r3, #0]
	uint32_t *p= 0x40020C00;
 800016a:	4b09      	ldr	r3, [pc, #36]	; (8000190 <trobleshoot+0x44>)
 800016c:	603b      	str	r3, [r7, #0]
	*p = 10<<28;
 800016e:	683b      	ldr	r3, [r7, #0]
 8000170:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000174:	601a      	str	r2, [r3, #0]
	*(p+0x24) =  4<<24|4<<28;
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	3390      	adds	r3, #144	; 0x90
 800017a:	f04f 4288 	mov.w	r2, #1140850688	; 0x44000000
 800017e:	601a      	str	r2, [r3, #0]
}
 8000180:	bf00      	nop
 8000182:	370c      	adds	r7, #12
 8000184:	46bd      	mov	sp, r7
 8000186:	bc80      	pop	{r7}
 8000188:	4770      	bx	lr
 800018a:	bf00      	nop
 800018c:	40023800 	.word	0x40023800
 8000190:	40020c00 	.word	0x40020c00

08000194 <init>:
			uint32_t I2C_TRISE;
		}i2c_baseaddr;

#define i2c_base  ((i2c_baseaddr*)0x40005400)

void init(uint32_t addr){
 8000194:	b480      	push	{r7}
 8000196:	b085      	sub	sp, #20
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]




	i2c_base->I2C_CR1 |= 1<<15;
 800019c:	4b16      	ldr	r3, [pc, #88]	; (80001f8 <init+0x64>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a15      	ldr	r2, [pc, #84]	; (80001f8 <init+0x64>)
 80001a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80001a6:	6013      	str	r3, [r2, #0]
		i2c_base->I2C_CR1 &= ~(1<<15);
 80001a8:	4b13      	ldr	r3, [pc, #76]	; (80001f8 <init+0x64>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a12      	ldr	r2, [pc, #72]	; (80001f8 <init+0x64>)
 80001ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80001b2:	6013      	str	r3, [r2, #0]


	i2c_base->I2C_CR2 = 0x08;
 80001b4:	4b10      	ldr	r3, [pc, #64]	; (80001f8 <init+0x64>)
 80001b6:	2208      	movs	r2, #8
 80001b8:	605a      	str	r2, [r3, #4]

	uint16_t ccrvalue= 0xA0;
 80001ba:	23a0      	movs	r3, #160	; 0xa0
 80001bc:	81fb      	strh	r3, [r7, #14]

	i2c_base->I2C_OAR1 = addr<<1;
 80001be:	4a0e      	ldr	r2, [pc, #56]	; (80001f8 <init+0x64>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	005b      	lsls	r3, r3, #1
 80001c4:	6093      	str	r3, [r2, #8]
	i2c_base->I2C_OAR1 &= ~(1);
 80001c6:	4b0c      	ldr	r3, [pc, #48]	; (80001f8 <init+0x64>)
 80001c8:	689b      	ldr	r3, [r3, #8]
 80001ca:	4a0b      	ldr	r2, [pc, #44]	; (80001f8 <init+0x64>)
 80001cc:	f023 0301 	bic.w	r3, r3, #1
 80001d0:	6093      	str	r3, [r2, #8]
	i2c_base->I2C_OAR1 = 1<<14;
 80001d2:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <init+0x64>)
 80001d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80001d8:	609a      	str	r2, [r3, #8]
	i2c_base->I2C_CCR = 1<<15;
 80001da:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <init+0x64>)
 80001dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80001e0:	61da      	str	r2, [r3, #28]
	i2c_base->I2C_CCR = 0x1b;
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <init+0x64>)
 80001e4:	221b      	movs	r2, #27
 80001e6:	61da      	str	r2, [r3, #28]
	i2c_base->I2C_TRISE = 8+1;
 80001e8:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <init+0x64>)
 80001ea:	2209      	movs	r2, #9
 80001ec:	621a      	str	r2, [r3, #32]

}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	40005400 	.word	0x40005400

080001fc <ack>:
void ack(){
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0

	i2c_base->I2C_CR1 |= 1<<10;
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <ack+0x18>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a03      	ldr	r2, [pc, #12]	; (8000214 <ack+0x18>)
 8000206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800020a:	6013      	str	r3, [r2, #0]
}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	40005400 	.word	0x40005400

08000218 <pe_enable>:
void pe_enable(){
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0

	i2c_base->I2C_CR1 |= 1<<0;
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <pe_enable+0x18>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a03      	ldr	r2, [pc, #12]	; (8000230 <pe_enable+0x18>)
 8000222:	f043 0301 	orr.w	r3, r3, #1
 8000226:	6013      	str	r3, [r2, #0]

}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr
 8000230:	40005400 	.word	0x40005400

08000234 <start>:
void start(){
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0

	i2c_base->I2C_CR1 |= 1<<8;
 8000238:	4b08      	ldr	r3, [pc, #32]	; (800025c <start+0x28>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a07      	ldr	r2, [pc, #28]	; (800025c <start+0x28>)
 800023e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000242:	6013      	str	r3, [r2, #0]
   //  i2c_base->I2C_SR1 = 1<<0;
	while (!(i2c_base->I2C_SR1 & (1<<0)));
 8000244:	bf00      	nop
 8000246:	4b05      	ldr	r3, [pc, #20]	; (800025c <start+0x28>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0301 	and.w	r3, r3, #1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d0f9      	beq.n	8000246 <start+0x12>
}
 8000252:	bf00      	nop
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	40005400 	.word	0x40005400

08000260 <addr>:
void addr(uint8_t slave){
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	i2c_base->I2C_DR = slave<<1;
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	005a      	lsls	r2, r3, #1
 800026e:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <addr+0x38>)
 8000270:	611a      	str	r2, [r3, #16]
	while (!(i2c_base->I2C_SR1 & 1<<1 ));
 8000272:	bf00      	nop
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <addr+0x38>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	f003 0302 	and.w	r3, r3, #2
 800027c:	2b00      	cmp	r3, #0
 800027e:	d0f9      	beq.n	8000274 <addr+0x14>

		int dummyread = i2c_base->I2C_SR1;
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <addr+0x38>)
 8000282:	695b      	ldr	r3, [r3, #20]
 8000284:	60fb      	str	r3, [r7, #12]
		 dummyread = i2c_base->I2C_SR2;
 8000286:	4b04      	ldr	r3, [pc, #16]	; (8000298 <addr+0x38>)
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	60fb      	str	r3, [r7, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	40005400 	.word	0x40005400

0800029c <recaddr>:
void recaddr(uint8_t slave,uint8_t *a,uint8_t len){
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	6039      	str	r1, [r7, #0]
 80002a6:	71fb      	strb	r3, [r7, #7]
 80002a8:	4613      	mov	r3, r2
 80002aa:	71bb      	strb	r3, [r7, #6]
	//ack();
	i2c_base->I2C_DR = slave<<1|1;
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	f043 0201 	orr.w	r2, r3, #1
 80002b4:	4b37      	ldr	r3, [pc, #220]	; (8000394 <recaddr+0xf8>)
 80002b6:	611a      	str	r2, [r3, #16]

	//i2c_base->I2C_CR1 &= ~(1<<10);

	while (!(i2c_base->I2C_SR1 & 1<<1 ));
 80002b8:	bf00      	nop
 80002ba:	4b36      	ldr	r3, [pc, #216]	; (8000394 <recaddr+0xf8>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f003 0302 	and.w	r3, r3, #2
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0f9      	beq.n	80002ba <recaddr+0x1e>
	int dummyread = i2c_base->I2C_SR1;
 80002c6:	4b33      	ldr	r3, [pc, #204]	; (8000394 <recaddr+0xf8>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	60bb      	str	r3, [r7, #8]
	 dummyread = i2c_base->I2C_SR2;
 80002cc:	4b31      	ldr	r3, [pc, #196]	; (8000394 <recaddr+0xf8>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	60bb      	str	r3, [r7, #8]
	 if(len==1){
 80002d2:	79bb      	ldrb	r3, [r7, #6]
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d110      	bne.n	80002fa <recaddr+0x5e>
	 nack();
 80002d8:	f000 f89a 	bl	8000410 <nack>
	 stop();
 80002dc:	f000 f882 	bl	80003e4 <stop>
	 while (!(i2c_base->I2C_SR1 & 1<<6 ));
 80002e0:	bf00      	nop
 80002e2:	4b2c      	ldr	r3, [pc, #176]	; (8000394 <recaddr+0xf8>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d0f9      	beq.n	80002e2 <recaddr+0x46>

	 *a=i2c_base->I2C_DR;
 80002ee:	4b29      	ldr	r3, [pc, #164]	; (8000394 <recaddr+0xf8>)
 80002f0:	691b      	ldr	r3, [r3, #16]
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	701a      	strb	r2, [r3, #0]
		 temp++;
		 while (!(i2c_base->I2C_SR1 & 1<<6 ));
		 stop();
		 *(a+temp)=i2c_base->I2C_DR;
	 }
}
 80002f8:	e048      	b.n	800038c <recaddr+0xf0>
		 ack();
 80002fa:	f7ff ff7f 	bl	80001fc <ack>
		 int temp=0;
 80002fe:	2300      	movs	r3, #0
 8000300:	60fb      	str	r3, [r7, #12]
		 while(len>3){
 8000302:	e013      	b.n	800032c <recaddr+0x90>
			 while (!(i2c_base->I2C_SR1 & 1<<6 ));
 8000304:	bf00      	nop
 8000306:	4b23      	ldr	r3, [pc, #140]	; (8000394 <recaddr+0xf8>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0f9      	beq.n	8000306 <recaddr+0x6a>
				 *(a+temp)=i2c_base->I2C_DR;
 8000312:	4b20      	ldr	r3, [pc, #128]	; (8000394 <recaddr+0xf8>)
 8000314:	6919      	ldr	r1, [r3, #16]
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	683a      	ldr	r2, [r7, #0]
 800031a:	4413      	add	r3, r2
 800031c:	b2ca      	uxtb	r2, r1
 800031e:	701a      	strb	r2, [r3, #0]
				 len--;
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	3b01      	subs	r3, #1
 8000324:	71bb      	strb	r3, [r7, #6]
				 temp++;
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	3301      	adds	r3, #1
 800032a:	60fb      	str	r3, [r7, #12]
		 while(len>3){
 800032c:	79bb      	ldrb	r3, [r7, #6]
 800032e:	2b03      	cmp	r3, #3
 8000330:	d8e8      	bhi.n	8000304 <recaddr+0x68>
		 while(!(i2c_base->I2C_SR1 & 1<<2 ));
 8000332:	bf00      	nop
 8000334:	4b17      	ldr	r3, [pc, #92]	; (8000394 <recaddr+0xf8>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	f003 0304 	and.w	r3, r3, #4
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0f9      	beq.n	8000334 <recaddr+0x98>
		 *(a+temp)=i2c_base->I2C_DR;
 8000340:	4b14      	ldr	r3, [pc, #80]	; (8000394 <recaddr+0xf8>)
 8000342:	6919      	ldr	r1, [r3, #16]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	683a      	ldr	r2, [r7, #0]
 8000348:	4413      	add	r3, r2
 800034a:	b2ca      	uxtb	r2, r1
 800034c:	701a      	strb	r2, [r3, #0]
		 temp++;
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	3301      	adds	r3, #1
 8000352:	60fb      	str	r3, [r7, #12]
		 nack();
 8000354:	f000 f85c 	bl	8000410 <nack>
		 *(a+temp)=i2c_base->I2C_DR;
 8000358:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <recaddr+0xf8>)
 800035a:	6919      	ldr	r1, [r3, #16]
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	683a      	ldr	r2, [r7, #0]
 8000360:	4413      	add	r3, r2
 8000362:	b2ca      	uxtb	r2, r1
 8000364:	701a      	strb	r2, [r3, #0]
		 temp++;
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	3301      	adds	r3, #1
 800036a:	60fb      	str	r3, [r7, #12]
		 while (!(i2c_base->I2C_SR1 & 1<<6 ));
 800036c:	bf00      	nop
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <recaddr+0xf8>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000376:	2b00      	cmp	r3, #0
 8000378:	d0f9      	beq.n	800036e <recaddr+0xd2>
		 stop();
 800037a:	f000 f833 	bl	80003e4 <stop>
		 *(a+temp)=i2c_base->I2C_DR;
 800037e:	4b05      	ldr	r3, [pc, #20]	; (8000394 <recaddr+0xf8>)
 8000380:	6919      	ldr	r1, [r3, #16]
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	683a      	ldr	r2, [r7, #0]
 8000386:	4413      	add	r3, r2
 8000388:	b2ca      	uxtb	r2, r1
 800038a:	701a      	strb	r2, [r3, #0]
}
 800038c:	bf00      	nop
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	40005400 	.word	0x40005400

08000398 <write>:

void write(uint8_t *data,int len){
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	6039      	str	r1, [r7, #0]

	while(len>0){
 80003a2:	e013      	b.n	80003cc <write+0x34>
		i2c_base->I2C_DR = *data;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	781a      	ldrb	r2, [r3, #0]
 80003a8:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <write+0x48>)
 80003aa:	611a      	str	r2, [r3, #16]
		while (!(i2c_base->I2C_SR1 &= 1<<7));
 80003ac:	bf00      	nop
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <write+0x48>)
 80003b0:	695a      	ldr	r2, [r3, #20]
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <write+0x48>)
 80003b4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80003b8:	615a      	str	r2, [r3, #20]
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d0f6      	beq.n	80003ae <write+0x16>
     data++;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3301      	adds	r3, #1
 80003c4:	607b      	str	r3, [r7, #4]
		len--;
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	3b01      	subs	r3, #1
 80003ca:	603b      	str	r3, [r7, #0]
	while(len>0){
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	dce8      	bgt.n	80003a4 <write+0xc>
	}
	}
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40005400 	.word	0x40005400

080003e4 <stop>:
void stop(){
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0


	while (!(i2c_base->I2C_SR1 &= 132));
 80003e8:	bf00      	nop
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <stop+0x28>)
 80003ec:	695a      	ldr	r2, [r3, #20]
 80003ee:	4b07      	ldr	r3, [pc, #28]	; (800040c <stop+0x28>)
 80003f0:	f002 0284 	and.w	r2, r2, #132	; 0x84
 80003f4:	615a      	str	r2, [r3, #20]
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d0f6      	beq.n	80003ea <stop+0x6>
			i2c_base->I2C_CR1 = 1<<9;
 80003fc:	4b03      	ldr	r3, [pc, #12]	; (800040c <stop+0x28>)
 80003fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000402:	601a      	str	r2, [r3, #0]
	}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40005400 	.word	0x40005400

08000410 <nack>:


void nack(){
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
	i2c_base->I2C_CR1 &= ~(1<<10);
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <nack+0x18>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a03      	ldr	r2, [pc, #12]	; (8000428 <nack+0x18>)
 800041a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800041e:	6013      	str	r3, [r2, #0]
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	40005400 	.word	0x40005400

0800042c <main>:

int main(void)
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	b089      	sub	sp, #36	; 0x24
 8000430:	af00      	add	r7, sp, #0
	char a[] = "kannan kck 3";
 8000432:	4b33      	ldr	r3, [pc, #204]	; (8000500 <main+0xd4>)
 8000434:	f107 040c 	add.w	r4, r7, #12
 8000438:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800043a:	c407      	stmia	r4!, {r0, r1, r2}
 800043c:	7023      	strb	r3, [r4, #0]
int  k = 0x51;
 800043e:	2351      	movs	r3, #81	; 0x51
 8000440:	61fb      	str	r3, [r7, #28]
uint8_t c = 0x6b;
 8000442:	236b      	movs	r3, #107	; 0x6b
 8000444:	72fb      	strb	r3, [r7, #11]
uint8_t r=0;
 8000446:	2300      	movs	r3, #0
 8000448:	72bb      	strb	r3, [r7, #10]

	uint8_t c1 = 0x6b;
 800044a:	236b      	movs	r3, #107	; 0x6b
 800044c:	76fb      	strb	r3, [r7, #27]
	uint8_t kck;
	trobleshoot();
 800044e:	f7ff fe7d 	bl	800014c <trobleshoot>
//	pe_enable();
	init(0x62);
 8000452:	2062      	movs	r0, #98	; 0x62
 8000454:	f7ff fe9e 	bl	8000194 <init>
printf("kck\n");
 8000458:	482a      	ldr	r0, [pc, #168]	; (8000504 <main+0xd8>)
 800045a:	f000 fa23 	bl	80008a4 <puts>
uint8_t p=0x3b;
 800045e:	233b      	movs	r3, #59	; 0x3b
 8000460:	727b      	strb	r3, [r7, #9]
uint8_t p1=0x42;
 8000462:	2342      	movs	r3, #66	; 0x42
 8000464:	76bb      	strb	r3, [r7, #26]
i2c_base->I2C_CR2 = 1<<9;
 8000466:	4b28      	ldr	r3, [pc, #160]	; (8000508 <main+0xdc>)
 8000468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800046c:	605a      	str	r2, [r3, #4]
uint8_t h=0x1c;
 800046e:	231c      	movs	r3, #28
 8000470:	723b      	strb	r3, [r7, #8]
uint8_t j[6];
//printf("%d\n",h);

	// start();
	// I2C_Read(0x68, &r, 1);
pe_enable();
 8000472:	f7ff fed1 	bl	8000218 <pe_enable>
start();
 8000476:	f7ff fedd 	bl	8000234 <start>

		addr(0x68);
 800047a:	2068      	movs	r0, #104	; 0x68
 800047c:	f7ff fef0 	bl	8000260 <addr>
			write(&c,1);
 8000480:	f107 030b 	add.w	r3, r7, #11
 8000484:	2101      	movs	r1, #1
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ff86 	bl	8000398 <write>
			write(&r,1);
 800048c:	f107 030a 	add.w	r3, r7, #10
 8000490:	2101      	movs	r1, #1
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ff80 	bl	8000398 <write>
		stop();
 8000498:	f7ff ffa4 	bl	80003e4 <stop>
		pe_enable();
 800049c:	f7ff febc 	bl	8000218 <pe_enable>
		start();
 80004a0:	f7ff fec8 	bl	8000234 <start>
				addr(0x68);
 80004a4:	2068      	movs	r0, #104	; 0x68
 80004a6:	f7ff fedb 	bl	8000260 <addr>
				write(&h,1);
 80004aa:	f107 0308 	add.w	r3, r7, #8
 80004ae:	2101      	movs	r1, #1
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff ff71 	bl	8000398 <write>
				write(&r,1);
 80004b6:	f107 030a 	add.w	r3, r7, #10
 80004ba:	2101      	movs	r1, #1
 80004bc:	4618      	mov	r0, r3
 80004be:	f7ff ff6b 	bl	8000398 <write>
			stop();
 80004c2:	f7ff ff8f 	bl	80003e4 <stop>
			while(1){
		pe_enable();
 80004c6:	f7ff fea7 	bl	8000218 <pe_enable>
		ack();
 80004ca:	f7ff fe97 	bl	80001fc <ack>
		start();
 80004ce:	f7ff feb1 	bl	8000234 <start>
				addr(0x68);
 80004d2:	2068      	movs	r0, #104	; 0x68
 80004d4:	f7ff fec4 	bl	8000260 <addr>
				write(&p, 1);
 80004d8:	f107 0309 	add.w	r3, r7, #9
 80004dc:	2101      	movs	r1, #1
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ff5a 	bl	8000398 <write>
stop();
 80004e4:	f7ff ff7e 	bl	80003e4 <stop>
pe_enable();
 80004e8:	f7ff fe96 	bl	8000218 <pe_enable>
start();
 80004ec:	f7ff fea2 	bl	8000234 <start>
        recaddr(0x68,&j,6);
 80004f0:	463b      	mov	r3, r7
 80004f2:	2206      	movs	r2, #6
 80004f4:	4619      	mov	r1, r3
 80004f6:	2068      	movs	r0, #104	; 0x68
 80004f8:	f7ff fed0 	bl	800029c <recaddr>
		pe_enable();
 80004fc:	e7e3      	b.n	80004c6 <main+0x9a>
 80004fe:	bf00      	nop
 8000500:	080011d0 	.word	0x080011d0
 8000504:	080011cc 	.word	0x080011cc
 8000508:	40005400 	.word	0x40005400

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <NMI_Handler+0x4>

08000512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <HardFault_Handler+0x4>

08000518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <MemManage_Handler+0x4>

0800051e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <BusFault_Handler+0x4>

08000524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <UsageFault_Handler+0x4>

0800052a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr

08000536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr

08000542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000552:	f000 f8f5 	bl	8000740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <ITM_SendChar+0x44>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a0d      	ldr	r2, [pc, #52]	; (80005a0 <ITM_SendChar+0x44>)
 800056c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000570:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <ITM_SendChar+0x48>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <ITM_SendChar+0x48>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800057e:	bf00      	nop
 8000580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	2b00      	cmp	r3, #0
 800058c:	d0f8      	beq.n	8000580 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800058e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	6013      	str	r3, [r2, #0]
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	e000edfc 	.word	0xe000edfc
 80005a4:	e0000e00 	.word	0xe0000e00

080005a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
 80005b8:	e00a      	b.n	80005d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005ba:	f3af 8000 	nop.w
 80005be:	4601      	mov	r1, r0
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	1c5a      	adds	r2, r3, #1
 80005c4:	60ba      	str	r2, [r7, #8]
 80005c6:	b2ca      	uxtb	r2, r1
 80005c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	3301      	adds	r3, #1
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	697a      	ldr	r2, [r7, #20]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	dbf0      	blt.n	80005ba <_read+0x12>
	}

return len;
 80005d8:	687b      	ldr	r3, [r7, #4]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b086      	sub	sp, #24
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	60f8      	str	r0, [r7, #12]
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
 80005f2:	e009      	b.n	8000608 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	1c5a      	adds	r2, r3, #1
 80005f8:	60ba      	str	r2, [r7, #8]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ffad 	bl	800055c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	3301      	adds	r3, #1
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	697a      	ldr	r2, [r7, #20]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	429a      	cmp	r2, r3
 800060e:	dbf1      	blt.n	80005f4 <_write+0x12>
	}
	return len;
 8000610:	687b      	ldr	r3, [r7, #4]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <_close>:

int _close(int file)
{
 800061a:	b480      	push	{r7}
 800061c:	b083      	sub	sp, #12
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
	return -1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000640:	605a      	str	r2, [r3, #4]
	return 0;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr

0800064e <_isatty>:

int _isatty(int file)
{
 800064e:	b480      	push	{r7}
 8000650:	b083      	sub	sp, #12
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
	return 1;
 8000656:	2301      	movs	r3, #1
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr

08000662 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000662:	b480      	push	{r7}
 8000664:	b085      	sub	sp, #20
 8000666:	af00      	add	r7, sp, #0
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	607a      	str	r2, [r7, #4]
	return 0;
 800066e:	2300      	movs	r3, #0
}
 8000670:	4618      	mov	r0, r3
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
	...

0800067c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000684:	4a14      	ldr	r2, [pc, #80]	; (80006d8 <_sbrk+0x5c>)
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <_sbrk+0x60>)
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <_sbrk+0x64>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d102      	bne.n	800069e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <_sbrk+0x64>)
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <_sbrk+0x68>)
 800069c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <_sbrk+0x64>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	693a      	ldr	r2, [r7, #16]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d207      	bcs.n	80006bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006ac:	f000 f85a 	bl	8000764 <__errno>
 80006b0:	4603      	mov	r3, r0
 80006b2:	220c      	movs	r2, #12
 80006b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	e009      	b.n	80006d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <_sbrk+0x64>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006c2:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <_sbrk+0x64>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4413      	add	r3, r2
 80006ca:	4a05      	ldr	r2, [pc, #20]	; (80006e0 <_sbrk+0x64>)
 80006cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ce:	68fb      	ldr	r3, [r7, #12]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20002800 	.word	0x20002800
 80006dc:	00000400 	.word	0x00000400
 80006e0:	20000084 	.word	0x20000084
 80006e4:	200000a0 	.word	0x200000a0

080006e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr

080006f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f4:	480c      	ldr	r0, [pc, #48]	; (8000728 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006f6:	490d      	ldr	r1, [pc, #52]	; (800072c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006f8:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006fc:	e002      	b.n	8000704 <LoopCopyDataInit>

080006fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000702:	3304      	adds	r3, #4

08000704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000708:	d3f9      	bcc.n	80006fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800070c:	4c0a      	ldr	r4, [pc, #40]	; (8000738 <LoopFillZerobss+0x22>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000710:	e001      	b.n	8000716 <LoopFillZerobss>

08000712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000714:	3204      	adds	r2, #4

08000716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000718:	d3fb      	bcc.n	8000712 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800071a:	f7ff ffe5 	bl	80006e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800071e:	f000 f827 	bl	8000770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000722:	f7ff fe83 	bl	800042c <main>
  bx lr
 8000726:	4770      	bx	lr
  ldr r0, =_sdata
 8000728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800072c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000730:	0800124c 	.word	0x0800124c
  ldr r2, =_sbss
 8000734:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000738:	2000009c 	.word	0x2000009c

0800073c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800073c:	e7fe      	b.n	800073c <ADC1_2_IRQHandler>
	...

08000740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <HAL_IncTick+0x1c>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <HAL_IncTick+0x20>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	4a03      	ldr	r2, [pc, #12]	; (8000760 <HAL_IncTick+0x20>)
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	20000000 	.word	0x20000000
 8000760:	20000088 	.word	0x20000088

08000764 <__errno>:
 8000764:	4b01      	ldr	r3, [pc, #4]	; (800076c <__errno+0x8>)
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000004 	.word	0x20000004

08000770 <__libc_init_array>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	2600      	movs	r6, #0
 8000774:	4d0c      	ldr	r5, [pc, #48]	; (80007a8 <__libc_init_array+0x38>)
 8000776:	4c0d      	ldr	r4, [pc, #52]	; (80007ac <__libc_init_array+0x3c>)
 8000778:	1b64      	subs	r4, r4, r5
 800077a:	10a4      	asrs	r4, r4, #2
 800077c:	42a6      	cmp	r6, r4
 800077e:	d109      	bne.n	8000794 <__libc_init_array+0x24>
 8000780:	f000 fd18 	bl	80011b4 <_init>
 8000784:	2600      	movs	r6, #0
 8000786:	4d0a      	ldr	r5, [pc, #40]	; (80007b0 <__libc_init_array+0x40>)
 8000788:	4c0a      	ldr	r4, [pc, #40]	; (80007b4 <__libc_init_array+0x44>)
 800078a:	1b64      	subs	r4, r4, r5
 800078c:	10a4      	asrs	r4, r4, #2
 800078e:	42a6      	cmp	r6, r4
 8000790:	d105      	bne.n	800079e <__libc_init_array+0x2e>
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f855 3b04 	ldr.w	r3, [r5], #4
 8000798:	4798      	blx	r3
 800079a:	3601      	adds	r6, #1
 800079c:	e7ee      	b.n	800077c <__libc_init_array+0xc>
 800079e:	f855 3b04 	ldr.w	r3, [r5], #4
 80007a2:	4798      	blx	r3
 80007a4:	3601      	adds	r6, #1
 80007a6:	e7f2      	b.n	800078e <__libc_init_array+0x1e>
 80007a8:	08001244 	.word	0x08001244
 80007ac:	08001244 	.word	0x08001244
 80007b0:	08001244 	.word	0x08001244
 80007b4:	08001248 	.word	0x08001248

080007b8 <memset>:
 80007b8:	4603      	mov	r3, r0
 80007ba:	4402      	add	r2, r0
 80007bc:	4293      	cmp	r3, r2
 80007be:	d100      	bne.n	80007c2 <memset+0xa>
 80007c0:	4770      	bx	lr
 80007c2:	f803 1b01 	strb.w	r1, [r3], #1
 80007c6:	e7f9      	b.n	80007bc <memset+0x4>

080007c8 <_puts_r>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	460e      	mov	r6, r1
 80007cc:	4605      	mov	r5, r0
 80007ce:	b118      	cbz	r0, 80007d8 <_puts_r+0x10>
 80007d0:	6983      	ldr	r3, [r0, #24]
 80007d2:	b90b      	cbnz	r3, 80007d8 <_puts_r+0x10>
 80007d4:	f000 fa44 	bl	8000c60 <__sinit>
 80007d8:	69ab      	ldr	r3, [r5, #24]
 80007da:	68ac      	ldr	r4, [r5, #8]
 80007dc:	b913      	cbnz	r3, 80007e4 <_puts_r+0x1c>
 80007de:	4628      	mov	r0, r5
 80007e0:	f000 fa3e 	bl	8000c60 <__sinit>
 80007e4:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <_puts_r+0xd0>)
 80007e6:	429c      	cmp	r4, r3
 80007e8:	d120      	bne.n	800082c <_puts_r+0x64>
 80007ea:	686c      	ldr	r4, [r5, #4]
 80007ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007ee:	07db      	lsls	r3, r3, #31
 80007f0:	d405      	bmi.n	80007fe <_puts_r+0x36>
 80007f2:	89a3      	ldrh	r3, [r4, #12]
 80007f4:	0598      	lsls	r0, r3, #22
 80007f6:	d402      	bmi.n	80007fe <_puts_r+0x36>
 80007f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007fa:	f000 facf 	bl	8000d9c <__retarget_lock_acquire_recursive>
 80007fe:	89a3      	ldrh	r3, [r4, #12]
 8000800:	0719      	lsls	r1, r3, #28
 8000802:	d51d      	bpl.n	8000840 <_puts_r+0x78>
 8000804:	6923      	ldr	r3, [r4, #16]
 8000806:	b1db      	cbz	r3, 8000840 <_puts_r+0x78>
 8000808:	3e01      	subs	r6, #1
 800080a:	68a3      	ldr	r3, [r4, #8]
 800080c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000810:	3b01      	subs	r3, #1
 8000812:	60a3      	str	r3, [r4, #8]
 8000814:	bb39      	cbnz	r1, 8000866 <_puts_r+0x9e>
 8000816:	2b00      	cmp	r3, #0
 8000818:	da38      	bge.n	800088c <_puts_r+0xc4>
 800081a:	4622      	mov	r2, r4
 800081c:	210a      	movs	r1, #10
 800081e:	4628      	mov	r0, r5
 8000820:	f000 f848 	bl	80008b4 <__swbuf_r>
 8000824:	3001      	adds	r0, #1
 8000826:	d011      	beq.n	800084c <_puts_r+0x84>
 8000828:	250a      	movs	r5, #10
 800082a:	e011      	b.n	8000850 <_puts_r+0x88>
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <_puts_r+0xd4>)
 800082e:	429c      	cmp	r4, r3
 8000830:	d101      	bne.n	8000836 <_puts_r+0x6e>
 8000832:	68ac      	ldr	r4, [r5, #8]
 8000834:	e7da      	b.n	80007ec <_puts_r+0x24>
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <_puts_r+0xd8>)
 8000838:	429c      	cmp	r4, r3
 800083a:	bf08      	it	eq
 800083c:	68ec      	ldreq	r4, [r5, #12]
 800083e:	e7d5      	b.n	80007ec <_puts_r+0x24>
 8000840:	4621      	mov	r1, r4
 8000842:	4628      	mov	r0, r5
 8000844:	f000 f888 	bl	8000958 <__swsetup_r>
 8000848:	2800      	cmp	r0, #0
 800084a:	d0dd      	beq.n	8000808 <_puts_r+0x40>
 800084c:	f04f 35ff 	mov.w	r5, #4294967295
 8000850:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000852:	07da      	lsls	r2, r3, #31
 8000854:	d405      	bmi.n	8000862 <_puts_r+0x9a>
 8000856:	89a3      	ldrh	r3, [r4, #12]
 8000858:	059b      	lsls	r3, r3, #22
 800085a:	d402      	bmi.n	8000862 <_puts_r+0x9a>
 800085c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800085e:	f000 fa9e 	bl	8000d9e <__retarget_lock_release_recursive>
 8000862:	4628      	mov	r0, r5
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	2b00      	cmp	r3, #0
 8000868:	da04      	bge.n	8000874 <_puts_r+0xac>
 800086a:	69a2      	ldr	r2, [r4, #24]
 800086c:	429a      	cmp	r2, r3
 800086e:	dc06      	bgt.n	800087e <_puts_r+0xb6>
 8000870:	290a      	cmp	r1, #10
 8000872:	d004      	beq.n	800087e <_puts_r+0xb6>
 8000874:	6823      	ldr	r3, [r4, #0]
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	6022      	str	r2, [r4, #0]
 800087a:	7019      	strb	r1, [r3, #0]
 800087c:	e7c5      	b.n	800080a <_puts_r+0x42>
 800087e:	4622      	mov	r2, r4
 8000880:	4628      	mov	r0, r5
 8000882:	f000 f817 	bl	80008b4 <__swbuf_r>
 8000886:	3001      	adds	r0, #1
 8000888:	d1bf      	bne.n	800080a <_puts_r+0x42>
 800088a:	e7df      	b.n	800084c <_puts_r+0x84>
 800088c:	250a      	movs	r5, #10
 800088e:	6823      	ldr	r3, [r4, #0]
 8000890:	1c5a      	adds	r2, r3, #1
 8000892:	6022      	str	r2, [r4, #0]
 8000894:	701d      	strb	r5, [r3, #0]
 8000896:	e7db      	b.n	8000850 <_puts_r+0x88>
 8000898:	08001204 	.word	0x08001204
 800089c:	08001224 	.word	0x08001224
 80008a0:	080011e4 	.word	0x080011e4

080008a4 <puts>:
 80008a4:	4b02      	ldr	r3, [pc, #8]	; (80008b0 <puts+0xc>)
 80008a6:	4601      	mov	r1, r0
 80008a8:	6818      	ldr	r0, [r3, #0]
 80008aa:	f7ff bf8d 	b.w	80007c8 <_puts_r>
 80008ae:	bf00      	nop
 80008b0:	20000004 	.word	0x20000004

080008b4 <__swbuf_r>:
 80008b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b6:	460e      	mov	r6, r1
 80008b8:	4614      	mov	r4, r2
 80008ba:	4605      	mov	r5, r0
 80008bc:	b118      	cbz	r0, 80008c6 <__swbuf_r+0x12>
 80008be:	6983      	ldr	r3, [r0, #24]
 80008c0:	b90b      	cbnz	r3, 80008c6 <__swbuf_r+0x12>
 80008c2:	f000 f9cd 	bl	8000c60 <__sinit>
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <__swbuf_r+0x98>)
 80008c8:	429c      	cmp	r4, r3
 80008ca:	d12b      	bne.n	8000924 <__swbuf_r+0x70>
 80008cc:	686c      	ldr	r4, [r5, #4]
 80008ce:	69a3      	ldr	r3, [r4, #24]
 80008d0:	60a3      	str	r3, [r4, #8]
 80008d2:	89a3      	ldrh	r3, [r4, #12]
 80008d4:	071a      	lsls	r2, r3, #28
 80008d6:	d52f      	bpl.n	8000938 <__swbuf_r+0x84>
 80008d8:	6923      	ldr	r3, [r4, #16]
 80008da:	b36b      	cbz	r3, 8000938 <__swbuf_r+0x84>
 80008dc:	6923      	ldr	r3, [r4, #16]
 80008de:	6820      	ldr	r0, [r4, #0]
 80008e0:	b2f6      	uxtb	r6, r6
 80008e2:	1ac0      	subs	r0, r0, r3
 80008e4:	6963      	ldr	r3, [r4, #20]
 80008e6:	4637      	mov	r7, r6
 80008e8:	4283      	cmp	r3, r0
 80008ea:	dc04      	bgt.n	80008f6 <__swbuf_r+0x42>
 80008ec:	4621      	mov	r1, r4
 80008ee:	4628      	mov	r0, r5
 80008f0:	f000 f922 	bl	8000b38 <_fflush_r>
 80008f4:	bb30      	cbnz	r0, 8000944 <__swbuf_r+0x90>
 80008f6:	68a3      	ldr	r3, [r4, #8]
 80008f8:	3001      	adds	r0, #1
 80008fa:	3b01      	subs	r3, #1
 80008fc:	60a3      	str	r3, [r4, #8]
 80008fe:	6823      	ldr	r3, [r4, #0]
 8000900:	1c5a      	adds	r2, r3, #1
 8000902:	6022      	str	r2, [r4, #0]
 8000904:	701e      	strb	r6, [r3, #0]
 8000906:	6963      	ldr	r3, [r4, #20]
 8000908:	4283      	cmp	r3, r0
 800090a:	d004      	beq.n	8000916 <__swbuf_r+0x62>
 800090c:	89a3      	ldrh	r3, [r4, #12]
 800090e:	07db      	lsls	r3, r3, #31
 8000910:	d506      	bpl.n	8000920 <__swbuf_r+0x6c>
 8000912:	2e0a      	cmp	r6, #10
 8000914:	d104      	bne.n	8000920 <__swbuf_r+0x6c>
 8000916:	4621      	mov	r1, r4
 8000918:	4628      	mov	r0, r5
 800091a:	f000 f90d 	bl	8000b38 <_fflush_r>
 800091e:	b988      	cbnz	r0, 8000944 <__swbuf_r+0x90>
 8000920:	4638      	mov	r0, r7
 8000922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <__swbuf_r+0x9c>)
 8000926:	429c      	cmp	r4, r3
 8000928:	d101      	bne.n	800092e <__swbuf_r+0x7a>
 800092a:	68ac      	ldr	r4, [r5, #8]
 800092c:	e7cf      	b.n	80008ce <__swbuf_r+0x1a>
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <__swbuf_r+0xa0>)
 8000930:	429c      	cmp	r4, r3
 8000932:	bf08      	it	eq
 8000934:	68ec      	ldreq	r4, [r5, #12]
 8000936:	e7ca      	b.n	80008ce <__swbuf_r+0x1a>
 8000938:	4621      	mov	r1, r4
 800093a:	4628      	mov	r0, r5
 800093c:	f000 f80c 	bl	8000958 <__swsetup_r>
 8000940:	2800      	cmp	r0, #0
 8000942:	d0cb      	beq.n	80008dc <__swbuf_r+0x28>
 8000944:	f04f 37ff 	mov.w	r7, #4294967295
 8000948:	e7ea      	b.n	8000920 <__swbuf_r+0x6c>
 800094a:	bf00      	nop
 800094c:	08001204 	.word	0x08001204
 8000950:	08001224 	.word	0x08001224
 8000954:	080011e4 	.word	0x080011e4

08000958 <__swsetup_r>:
 8000958:	4b32      	ldr	r3, [pc, #200]	; (8000a24 <__swsetup_r+0xcc>)
 800095a:	b570      	push	{r4, r5, r6, lr}
 800095c:	681d      	ldr	r5, [r3, #0]
 800095e:	4606      	mov	r6, r0
 8000960:	460c      	mov	r4, r1
 8000962:	b125      	cbz	r5, 800096e <__swsetup_r+0x16>
 8000964:	69ab      	ldr	r3, [r5, #24]
 8000966:	b913      	cbnz	r3, 800096e <__swsetup_r+0x16>
 8000968:	4628      	mov	r0, r5
 800096a:	f000 f979 	bl	8000c60 <__sinit>
 800096e:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <__swsetup_r+0xd0>)
 8000970:	429c      	cmp	r4, r3
 8000972:	d10f      	bne.n	8000994 <__swsetup_r+0x3c>
 8000974:	686c      	ldr	r4, [r5, #4]
 8000976:	89a3      	ldrh	r3, [r4, #12]
 8000978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800097c:	0719      	lsls	r1, r3, #28
 800097e:	d42c      	bmi.n	80009da <__swsetup_r+0x82>
 8000980:	06dd      	lsls	r5, r3, #27
 8000982:	d411      	bmi.n	80009a8 <__swsetup_r+0x50>
 8000984:	2309      	movs	r3, #9
 8000986:	6033      	str	r3, [r6, #0]
 8000988:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	81a3      	strh	r3, [r4, #12]
 8000992:	e03e      	b.n	8000a12 <__swsetup_r+0xba>
 8000994:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <__swsetup_r+0xd4>)
 8000996:	429c      	cmp	r4, r3
 8000998:	d101      	bne.n	800099e <__swsetup_r+0x46>
 800099a:	68ac      	ldr	r4, [r5, #8]
 800099c:	e7eb      	b.n	8000976 <__swsetup_r+0x1e>
 800099e:	4b24      	ldr	r3, [pc, #144]	; (8000a30 <__swsetup_r+0xd8>)
 80009a0:	429c      	cmp	r4, r3
 80009a2:	bf08      	it	eq
 80009a4:	68ec      	ldreq	r4, [r5, #12]
 80009a6:	e7e6      	b.n	8000976 <__swsetup_r+0x1e>
 80009a8:	0758      	lsls	r0, r3, #29
 80009aa:	d512      	bpl.n	80009d2 <__swsetup_r+0x7a>
 80009ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009ae:	b141      	cbz	r1, 80009c2 <__swsetup_r+0x6a>
 80009b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009b4:	4299      	cmp	r1, r3
 80009b6:	d002      	beq.n	80009be <__swsetup_r+0x66>
 80009b8:	4630      	mov	r0, r6
 80009ba:	f000 fa57 	bl	8000e6c <_free_r>
 80009be:	2300      	movs	r3, #0
 80009c0:	6363      	str	r3, [r4, #52]	; 0x34
 80009c2:	89a3      	ldrh	r3, [r4, #12]
 80009c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80009c8:	81a3      	strh	r3, [r4, #12]
 80009ca:	2300      	movs	r3, #0
 80009cc:	6063      	str	r3, [r4, #4]
 80009ce:	6923      	ldr	r3, [r4, #16]
 80009d0:	6023      	str	r3, [r4, #0]
 80009d2:	89a3      	ldrh	r3, [r4, #12]
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	81a3      	strh	r3, [r4, #12]
 80009da:	6923      	ldr	r3, [r4, #16]
 80009dc:	b94b      	cbnz	r3, 80009f2 <__swsetup_r+0x9a>
 80009de:	89a3      	ldrh	r3, [r4, #12]
 80009e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80009e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009e8:	d003      	beq.n	80009f2 <__swsetup_r+0x9a>
 80009ea:	4621      	mov	r1, r4
 80009ec:	4630      	mov	r0, r6
 80009ee:	f000 f9fd 	bl	8000dec <__smakebuf_r>
 80009f2:	89a0      	ldrh	r0, [r4, #12]
 80009f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009f8:	f010 0301 	ands.w	r3, r0, #1
 80009fc:	d00a      	beq.n	8000a14 <__swsetup_r+0xbc>
 80009fe:	2300      	movs	r3, #0
 8000a00:	60a3      	str	r3, [r4, #8]
 8000a02:	6963      	ldr	r3, [r4, #20]
 8000a04:	425b      	negs	r3, r3
 8000a06:	61a3      	str	r3, [r4, #24]
 8000a08:	6923      	ldr	r3, [r4, #16]
 8000a0a:	b943      	cbnz	r3, 8000a1e <__swsetup_r+0xc6>
 8000a0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000a10:	d1ba      	bne.n	8000988 <__swsetup_r+0x30>
 8000a12:	bd70      	pop	{r4, r5, r6, pc}
 8000a14:	0781      	lsls	r1, r0, #30
 8000a16:	bf58      	it	pl
 8000a18:	6963      	ldrpl	r3, [r4, #20]
 8000a1a:	60a3      	str	r3, [r4, #8]
 8000a1c:	e7f4      	b.n	8000a08 <__swsetup_r+0xb0>
 8000a1e:	2000      	movs	r0, #0
 8000a20:	e7f7      	b.n	8000a12 <__swsetup_r+0xba>
 8000a22:	bf00      	nop
 8000a24:	20000004 	.word	0x20000004
 8000a28:	08001204 	.word	0x08001204
 8000a2c:	08001224 	.word	0x08001224
 8000a30:	080011e4 	.word	0x080011e4

08000a34 <__sflush_r>:
 8000a34:	898a      	ldrh	r2, [r1, #12]
 8000a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a38:	4605      	mov	r5, r0
 8000a3a:	0710      	lsls	r0, r2, #28
 8000a3c:	460c      	mov	r4, r1
 8000a3e:	d457      	bmi.n	8000af0 <__sflush_r+0xbc>
 8000a40:	684b      	ldr	r3, [r1, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	dc04      	bgt.n	8000a50 <__sflush_r+0x1c>
 8000a46:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	dc01      	bgt.n	8000a50 <__sflush_r+0x1c>
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a52:	2e00      	cmp	r6, #0
 8000a54:	d0fa      	beq.n	8000a4c <__sflush_r+0x18>
 8000a56:	2300      	movs	r3, #0
 8000a58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000a5c:	682f      	ldr	r7, [r5, #0]
 8000a5e:	602b      	str	r3, [r5, #0]
 8000a60:	d032      	beq.n	8000ac8 <__sflush_r+0x94>
 8000a62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000a64:	89a3      	ldrh	r3, [r4, #12]
 8000a66:	075a      	lsls	r2, r3, #29
 8000a68:	d505      	bpl.n	8000a76 <__sflush_r+0x42>
 8000a6a:	6863      	ldr	r3, [r4, #4]
 8000a6c:	1ac0      	subs	r0, r0, r3
 8000a6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a70:	b10b      	cbz	r3, 8000a76 <__sflush_r+0x42>
 8000a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a74:	1ac0      	subs	r0, r0, r3
 8000a76:	2300      	movs	r3, #0
 8000a78:	4602      	mov	r2, r0
 8000a7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a7c:	4628      	mov	r0, r5
 8000a7e:	6a21      	ldr	r1, [r4, #32]
 8000a80:	47b0      	blx	r6
 8000a82:	1c43      	adds	r3, r0, #1
 8000a84:	89a3      	ldrh	r3, [r4, #12]
 8000a86:	d106      	bne.n	8000a96 <__sflush_r+0x62>
 8000a88:	6829      	ldr	r1, [r5, #0]
 8000a8a:	291d      	cmp	r1, #29
 8000a8c:	d82c      	bhi.n	8000ae8 <__sflush_r+0xb4>
 8000a8e:	4a29      	ldr	r2, [pc, #164]	; (8000b34 <__sflush_r+0x100>)
 8000a90:	40ca      	lsrs	r2, r1
 8000a92:	07d6      	lsls	r6, r2, #31
 8000a94:	d528      	bpl.n	8000ae8 <__sflush_r+0xb4>
 8000a96:	2200      	movs	r2, #0
 8000a98:	6062      	str	r2, [r4, #4]
 8000a9a:	6922      	ldr	r2, [r4, #16]
 8000a9c:	04d9      	lsls	r1, r3, #19
 8000a9e:	6022      	str	r2, [r4, #0]
 8000aa0:	d504      	bpl.n	8000aac <__sflush_r+0x78>
 8000aa2:	1c42      	adds	r2, r0, #1
 8000aa4:	d101      	bne.n	8000aaa <__sflush_r+0x76>
 8000aa6:	682b      	ldr	r3, [r5, #0]
 8000aa8:	b903      	cbnz	r3, 8000aac <__sflush_r+0x78>
 8000aaa:	6560      	str	r0, [r4, #84]	; 0x54
 8000aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000aae:	602f      	str	r7, [r5, #0]
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	d0cb      	beq.n	8000a4c <__sflush_r+0x18>
 8000ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ab8:	4299      	cmp	r1, r3
 8000aba:	d002      	beq.n	8000ac2 <__sflush_r+0x8e>
 8000abc:	4628      	mov	r0, r5
 8000abe:	f000 f9d5 	bl	8000e6c <_free_r>
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	6360      	str	r0, [r4, #52]	; 0x34
 8000ac6:	e7c2      	b.n	8000a4e <__sflush_r+0x1a>
 8000ac8:	6a21      	ldr	r1, [r4, #32]
 8000aca:	2301      	movs	r3, #1
 8000acc:	4628      	mov	r0, r5
 8000ace:	47b0      	blx	r6
 8000ad0:	1c41      	adds	r1, r0, #1
 8000ad2:	d1c7      	bne.n	8000a64 <__sflush_r+0x30>
 8000ad4:	682b      	ldr	r3, [r5, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d0c4      	beq.n	8000a64 <__sflush_r+0x30>
 8000ada:	2b1d      	cmp	r3, #29
 8000adc:	d001      	beq.n	8000ae2 <__sflush_r+0xae>
 8000ade:	2b16      	cmp	r3, #22
 8000ae0:	d101      	bne.n	8000ae6 <__sflush_r+0xb2>
 8000ae2:	602f      	str	r7, [r5, #0]
 8000ae4:	e7b2      	b.n	8000a4c <__sflush_r+0x18>
 8000ae6:	89a3      	ldrh	r3, [r4, #12]
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aec:	81a3      	strh	r3, [r4, #12]
 8000aee:	e7ae      	b.n	8000a4e <__sflush_r+0x1a>
 8000af0:	690f      	ldr	r7, [r1, #16]
 8000af2:	2f00      	cmp	r7, #0
 8000af4:	d0aa      	beq.n	8000a4c <__sflush_r+0x18>
 8000af6:	0793      	lsls	r3, r2, #30
 8000af8:	bf18      	it	ne
 8000afa:	2300      	movne	r3, #0
 8000afc:	680e      	ldr	r6, [r1, #0]
 8000afe:	bf08      	it	eq
 8000b00:	694b      	ldreq	r3, [r1, #20]
 8000b02:	1bf6      	subs	r6, r6, r7
 8000b04:	600f      	str	r7, [r1, #0]
 8000b06:	608b      	str	r3, [r1, #8]
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	dd9f      	ble.n	8000a4c <__sflush_r+0x18>
 8000b0c:	4633      	mov	r3, r6
 8000b0e:	463a      	mov	r2, r7
 8000b10:	4628      	mov	r0, r5
 8000b12:	6a21      	ldr	r1, [r4, #32]
 8000b14:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000b18:	47e0      	blx	ip
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	dc06      	bgt.n	8000b2c <__sflush_r+0xf8>
 8000b1e:	89a3      	ldrh	r3, [r4, #12]
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b28:	81a3      	strh	r3, [r4, #12]
 8000b2a:	e790      	b.n	8000a4e <__sflush_r+0x1a>
 8000b2c:	4407      	add	r7, r0
 8000b2e:	1a36      	subs	r6, r6, r0
 8000b30:	e7ea      	b.n	8000b08 <__sflush_r+0xd4>
 8000b32:	bf00      	nop
 8000b34:	20400001 	.word	0x20400001

08000b38 <_fflush_r>:
 8000b38:	b538      	push	{r3, r4, r5, lr}
 8000b3a:	690b      	ldr	r3, [r1, #16]
 8000b3c:	4605      	mov	r5, r0
 8000b3e:	460c      	mov	r4, r1
 8000b40:	b913      	cbnz	r3, 8000b48 <_fflush_r+0x10>
 8000b42:	2500      	movs	r5, #0
 8000b44:	4628      	mov	r0, r5
 8000b46:	bd38      	pop	{r3, r4, r5, pc}
 8000b48:	b118      	cbz	r0, 8000b52 <_fflush_r+0x1a>
 8000b4a:	6983      	ldr	r3, [r0, #24]
 8000b4c:	b90b      	cbnz	r3, 8000b52 <_fflush_r+0x1a>
 8000b4e:	f000 f887 	bl	8000c60 <__sinit>
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <_fflush_r+0x6c>)
 8000b54:	429c      	cmp	r4, r3
 8000b56:	d11b      	bne.n	8000b90 <_fflush_r+0x58>
 8000b58:	686c      	ldr	r4, [r5, #4]
 8000b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d0ef      	beq.n	8000b42 <_fflush_r+0xa>
 8000b62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000b64:	07d0      	lsls	r0, r2, #31
 8000b66:	d404      	bmi.n	8000b72 <_fflush_r+0x3a>
 8000b68:	0599      	lsls	r1, r3, #22
 8000b6a:	d402      	bmi.n	8000b72 <_fflush_r+0x3a>
 8000b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b6e:	f000 f915 	bl	8000d9c <__retarget_lock_acquire_recursive>
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff5d 	bl	8000a34 <__sflush_r>
 8000b7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b7c:	4605      	mov	r5, r0
 8000b7e:	07da      	lsls	r2, r3, #31
 8000b80:	d4e0      	bmi.n	8000b44 <_fflush_r+0xc>
 8000b82:	89a3      	ldrh	r3, [r4, #12]
 8000b84:	059b      	lsls	r3, r3, #22
 8000b86:	d4dd      	bmi.n	8000b44 <_fflush_r+0xc>
 8000b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b8a:	f000 f908 	bl	8000d9e <__retarget_lock_release_recursive>
 8000b8e:	e7d9      	b.n	8000b44 <_fflush_r+0xc>
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <_fflush_r+0x70>)
 8000b92:	429c      	cmp	r4, r3
 8000b94:	d101      	bne.n	8000b9a <_fflush_r+0x62>
 8000b96:	68ac      	ldr	r4, [r5, #8]
 8000b98:	e7df      	b.n	8000b5a <_fflush_r+0x22>
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <_fflush_r+0x74>)
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	bf08      	it	eq
 8000ba0:	68ec      	ldreq	r4, [r5, #12]
 8000ba2:	e7da      	b.n	8000b5a <_fflush_r+0x22>
 8000ba4:	08001204 	.word	0x08001204
 8000ba8:	08001224 	.word	0x08001224
 8000bac:	080011e4 	.word	0x080011e4

08000bb0 <std>:
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	b510      	push	{r4, lr}
 8000bb4:	4604      	mov	r4, r0
 8000bb6:	e9c0 3300 	strd	r3, r3, [r0]
 8000bba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000bbe:	6083      	str	r3, [r0, #8]
 8000bc0:	8181      	strh	r1, [r0, #12]
 8000bc2:	6643      	str	r3, [r0, #100]	; 0x64
 8000bc4:	81c2      	strh	r2, [r0, #14]
 8000bc6:	6183      	str	r3, [r0, #24]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	2208      	movs	r2, #8
 8000bcc:	305c      	adds	r0, #92	; 0x5c
 8000bce:	f7ff fdf3 	bl	80007b8 <memset>
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <std+0x38>)
 8000bd4:	6224      	str	r4, [r4, #32]
 8000bd6:	6263      	str	r3, [r4, #36]	; 0x24
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <std+0x3c>)
 8000bda:	62a3      	str	r3, [r4, #40]	; 0x28
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <std+0x40>)
 8000bde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <std+0x44>)
 8000be2:	6323      	str	r3, [r4, #48]	; 0x30
 8000be4:	bd10      	pop	{r4, pc}
 8000be6:	bf00      	nop
 8000be8:	08001045 	.word	0x08001045
 8000bec:	08001067 	.word	0x08001067
 8000bf0:	0800109f 	.word	0x0800109f
 8000bf4:	080010c3 	.word	0x080010c3

08000bf8 <_cleanup_r>:
 8000bf8:	4901      	ldr	r1, [pc, #4]	; (8000c00 <_cleanup_r+0x8>)
 8000bfa:	f000 b8af 	b.w	8000d5c <_fwalk_reent>
 8000bfe:	bf00      	nop
 8000c00:	08000b39 	.word	0x08000b39

08000c04 <__sfmoreglue>:
 8000c04:	2268      	movs	r2, #104	; 0x68
 8000c06:	b570      	push	{r4, r5, r6, lr}
 8000c08:	1e4d      	subs	r5, r1, #1
 8000c0a:	4355      	muls	r5, r2
 8000c0c:	460e      	mov	r6, r1
 8000c0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000c12:	f000 f993 	bl	8000f3c <_malloc_r>
 8000c16:	4604      	mov	r4, r0
 8000c18:	b140      	cbz	r0, 8000c2c <__sfmoreglue+0x28>
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	e9c0 1600 	strd	r1, r6, [r0]
 8000c20:	300c      	adds	r0, #12
 8000c22:	60a0      	str	r0, [r4, #8]
 8000c24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000c28:	f7ff fdc6 	bl	80007b8 <memset>
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	bd70      	pop	{r4, r5, r6, pc}

08000c30 <__sfp_lock_acquire>:
 8000c30:	4801      	ldr	r0, [pc, #4]	; (8000c38 <__sfp_lock_acquire+0x8>)
 8000c32:	f000 b8b3 	b.w	8000d9c <__retarget_lock_acquire_recursive>
 8000c36:	bf00      	nop
 8000c38:	2000008d 	.word	0x2000008d

08000c3c <__sfp_lock_release>:
 8000c3c:	4801      	ldr	r0, [pc, #4]	; (8000c44 <__sfp_lock_release+0x8>)
 8000c3e:	f000 b8ae 	b.w	8000d9e <__retarget_lock_release_recursive>
 8000c42:	bf00      	nop
 8000c44:	2000008d 	.word	0x2000008d

08000c48 <__sinit_lock_acquire>:
 8000c48:	4801      	ldr	r0, [pc, #4]	; (8000c50 <__sinit_lock_acquire+0x8>)
 8000c4a:	f000 b8a7 	b.w	8000d9c <__retarget_lock_acquire_recursive>
 8000c4e:	bf00      	nop
 8000c50:	2000008e 	.word	0x2000008e

08000c54 <__sinit_lock_release>:
 8000c54:	4801      	ldr	r0, [pc, #4]	; (8000c5c <__sinit_lock_release+0x8>)
 8000c56:	f000 b8a2 	b.w	8000d9e <__retarget_lock_release_recursive>
 8000c5a:	bf00      	nop
 8000c5c:	2000008e 	.word	0x2000008e

08000c60 <__sinit>:
 8000c60:	b510      	push	{r4, lr}
 8000c62:	4604      	mov	r4, r0
 8000c64:	f7ff fff0 	bl	8000c48 <__sinit_lock_acquire>
 8000c68:	69a3      	ldr	r3, [r4, #24]
 8000c6a:	b11b      	cbz	r3, 8000c74 <__sinit+0x14>
 8000c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c70:	f7ff bff0 	b.w	8000c54 <__sinit_lock_release>
 8000c74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000c78:	6523      	str	r3, [r4, #80]	; 0x50
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <__sinit+0x68>)
 8000c7c:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <__sinit+0x6c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	62a2      	str	r2, [r4, #40]	; 0x28
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	bf08      	it	eq
 8000c86:	2301      	moveq	r3, #1
 8000c88:	4620      	mov	r0, r4
 8000c8a:	bf08      	it	eq
 8000c8c:	61a3      	streq	r3, [r4, #24]
 8000c8e:	f000 f81f 	bl	8000cd0 <__sfp>
 8000c92:	6060      	str	r0, [r4, #4]
 8000c94:	4620      	mov	r0, r4
 8000c96:	f000 f81b 	bl	8000cd0 <__sfp>
 8000c9a:	60a0      	str	r0, [r4, #8]
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f000 f817 	bl	8000cd0 <__sfp>
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2104      	movs	r1, #4
 8000ca6:	60e0      	str	r0, [r4, #12]
 8000ca8:	6860      	ldr	r0, [r4, #4]
 8000caa:	f7ff ff81 	bl	8000bb0 <std>
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2109      	movs	r1, #9
 8000cb2:	68a0      	ldr	r0, [r4, #8]
 8000cb4:	f7ff ff7c 	bl	8000bb0 <std>
 8000cb8:	2202      	movs	r2, #2
 8000cba:	2112      	movs	r1, #18
 8000cbc:	68e0      	ldr	r0, [r4, #12]
 8000cbe:	f7ff ff77 	bl	8000bb0 <std>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61a3      	str	r3, [r4, #24]
 8000cc6:	e7d1      	b.n	8000c6c <__sinit+0xc>
 8000cc8:	080011e0 	.word	0x080011e0
 8000ccc:	08000bf9 	.word	0x08000bf9

08000cd0 <__sfp>:
 8000cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd2:	4607      	mov	r7, r0
 8000cd4:	f7ff ffac 	bl	8000c30 <__sfp_lock_acquire>
 8000cd8:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <__sfp+0x84>)
 8000cda:	681e      	ldr	r6, [r3, #0]
 8000cdc:	69b3      	ldr	r3, [r6, #24]
 8000cde:	b913      	cbnz	r3, 8000ce6 <__sfp+0x16>
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	f7ff ffbd 	bl	8000c60 <__sinit>
 8000ce6:	3648      	adds	r6, #72	; 0x48
 8000ce8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	d503      	bpl.n	8000cf8 <__sfp+0x28>
 8000cf0:	6833      	ldr	r3, [r6, #0]
 8000cf2:	b30b      	cbz	r3, 8000d38 <__sfp+0x68>
 8000cf4:	6836      	ldr	r6, [r6, #0]
 8000cf6:	e7f7      	b.n	8000ce8 <__sfp+0x18>
 8000cf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000cfc:	b9d5      	cbnz	r5, 8000d34 <__sfp+0x64>
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <__sfp+0x88>)
 8000d00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000d04:	60e3      	str	r3, [r4, #12]
 8000d06:	6665      	str	r5, [r4, #100]	; 0x64
 8000d08:	f000 f847 	bl	8000d9a <__retarget_lock_init_recursive>
 8000d0c:	f7ff ff96 	bl	8000c3c <__sfp_lock_release>
 8000d10:	2208      	movs	r2, #8
 8000d12:	4629      	mov	r1, r5
 8000d14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000d18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000d1c:	6025      	str	r5, [r4, #0]
 8000d1e:	61a5      	str	r5, [r4, #24]
 8000d20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000d24:	f7ff fd48 	bl	80007b8 <memset>
 8000d28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000d2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000d30:	4620      	mov	r0, r4
 8000d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d34:	3468      	adds	r4, #104	; 0x68
 8000d36:	e7d9      	b.n	8000cec <__sfp+0x1c>
 8000d38:	2104      	movs	r1, #4
 8000d3a:	4638      	mov	r0, r7
 8000d3c:	f7ff ff62 	bl	8000c04 <__sfmoreglue>
 8000d40:	4604      	mov	r4, r0
 8000d42:	6030      	str	r0, [r6, #0]
 8000d44:	2800      	cmp	r0, #0
 8000d46:	d1d5      	bne.n	8000cf4 <__sfp+0x24>
 8000d48:	f7ff ff78 	bl	8000c3c <__sfp_lock_release>
 8000d4c:	230c      	movs	r3, #12
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	e7ee      	b.n	8000d30 <__sfp+0x60>
 8000d52:	bf00      	nop
 8000d54:	080011e0 	.word	0x080011e0
 8000d58:	ffff0001 	.word	0xffff0001

08000d5c <_fwalk_reent>:
 8000d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d60:	4606      	mov	r6, r0
 8000d62:	4688      	mov	r8, r1
 8000d64:	2700      	movs	r7, #0
 8000d66:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000d6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000d6e:	f1b9 0901 	subs.w	r9, r9, #1
 8000d72:	d505      	bpl.n	8000d80 <_fwalk_reent+0x24>
 8000d74:	6824      	ldr	r4, [r4, #0]
 8000d76:	2c00      	cmp	r4, #0
 8000d78:	d1f7      	bne.n	8000d6a <_fwalk_reent+0xe>
 8000d7a:	4638      	mov	r0, r7
 8000d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d80:	89ab      	ldrh	r3, [r5, #12]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d907      	bls.n	8000d96 <_fwalk_reent+0x3a>
 8000d86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	d003      	beq.n	8000d96 <_fwalk_reent+0x3a>
 8000d8e:	4629      	mov	r1, r5
 8000d90:	4630      	mov	r0, r6
 8000d92:	47c0      	blx	r8
 8000d94:	4307      	orrs	r7, r0
 8000d96:	3568      	adds	r5, #104	; 0x68
 8000d98:	e7e9      	b.n	8000d6e <_fwalk_reent+0x12>

08000d9a <__retarget_lock_init_recursive>:
 8000d9a:	4770      	bx	lr

08000d9c <__retarget_lock_acquire_recursive>:
 8000d9c:	4770      	bx	lr

08000d9e <__retarget_lock_release_recursive>:
 8000d9e:	4770      	bx	lr

08000da0 <__swhatbuf_r>:
 8000da0:	b570      	push	{r4, r5, r6, lr}
 8000da2:	460e      	mov	r6, r1
 8000da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000da8:	4614      	mov	r4, r2
 8000daa:	2900      	cmp	r1, #0
 8000dac:	461d      	mov	r5, r3
 8000dae:	b096      	sub	sp, #88	; 0x58
 8000db0:	da08      	bge.n	8000dc4 <__swhatbuf_r+0x24>
 8000db2:	2200      	movs	r2, #0
 8000db4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000db8:	602a      	str	r2, [r5, #0]
 8000dba:	061a      	lsls	r2, r3, #24
 8000dbc:	d410      	bmi.n	8000de0 <__swhatbuf_r+0x40>
 8000dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc2:	e00e      	b.n	8000de2 <__swhatbuf_r+0x42>
 8000dc4:	466a      	mov	r2, sp
 8000dc6:	f000 f9a3 	bl	8001110 <_fstat_r>
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	dbf1      	blt.n	8000db2 <__swhatbuf_r+0x12>
 8000dce:	9a01      	ldr	r2, [sp, #4]
 8000dd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000dd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000dd8:	425a      	negs	r2, r3
 8000dda:	415a      	adcs	r2, r3
 8000ddc:	602a      	str	r2, [r5, #0]
 8000dde:	e7ee      	b.n	8000dbe <__swhatbuf_r+0x1e>
 8000de0:	2340      	movs	r3, #64	; 0x40
 8000de2:	2000      	movs	r0, #0
 8000de4:	6023      	str	r3, [r4, #0]
 8000de6:	b016      	add	sp, #88	; 0x58
 8000de8:	bd70      	pop	{r4, r5, r6, pc}
	...

08000dec <__smakebuf_r>:
 8000dec:	898b      	ldrh	r3, [r1, #12]
 8000dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000df0:	079d      	lsls	r5, r3, #30
 8000df2:	4606      	mov	r6, r0
 8000df4:	460c      	mov	r4, r1
 8000df6:	d507      	bpl.n	8000e08 <__smakebuf_r+0x1c>
 8000df8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000dfc:	6023      	str	r3, [r4, #0]
 8000dfe:	6123      	str	r3, [r4, #16]
 8000e00:	2301      	movs	r3, #1
 8000e02:	6163      	str	r3, [r4, #20]
 8000e04:	b002      	add	sp, #8
 8000e06:	bd70      	pop	{r4, r5, r6, pc}
 8000e08:	466a      	mov	r2, sp
 8000e0a:	ab01      	add	r3, sp, #4
 8000e0c:	f7ff ffc8 	bl	8000da0 <__swhatbuf_r>
 8000e10:	9900      	ldr	r1, [sp, #0]
 8000e12:	4605      	mov	r5, r0
 8000e14:	4630      	mov	r0, r6
 8000e16:	f000 f891 	bl	8000f3c <_malloc_r>
 8000e1a:	b948      	cbnz	r0, 8000e30 <__smakebuf_r+0x44>
 8000e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e20:	059a      	lsls	r2, r3, #22
 8000e22:	d4ef      	bmi.n	8000e04 <__smakebuf_r+0x18>
 8000e24:	f023 0303 	bic.w	r3, r3, #3
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	81a3      	strh	r3, [r4, #12]
 8000e2e:	e7e3      	b.n	8000df8 <__smakebuf_r+0xc>
 8000e30:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <__smakebuf_r+0x7c>)
 8000e32:	62b3      	str	r3, [r6, #40]	; 0x28
 8000e34:	89a3      	ldrh	r3, [r4, #12]
 8000e36:	6020      	str	r0, [r4, #0]
 8000e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e3c:	81a3      	strh	r3, [r4, #12]
 8000e3e:	9b00      	ldr	r3, [sp, #0]
 8000e40:	6120      	str	r0, [r4, #16]
 8000e42:	6163      	str	r3, [r4, #20]
 8000e44:	9b01      	ldr	r3, [sp, #4]
 8000e46:	b15b      	cbz	r3, 8000e60 <__smakebuf_r+0x74>
 8000e48:	4630      	mov	r0, r6
 8000e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e4e:	f000 f971 	bl	8001134 <_isatty_r>
 8000e52:	b128      	cbz	r0, 8000e60 <__smakebuf_r+0x74>
 8000e54:	89a3      	ldrh	r3, [r4, #12]
 8000e56:	f023 0303 	bic.w	r3, r3, #3
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	81a3      	strh	r3, [r4, #12]
 8000e60:	89a0      	ldrh	r0, [r4, #12]
 8000e62:	4305      	orrs	r5, r0
 8000e64:	81a5      	strh	r5, [r4, #12]
 8000e66:	e7cd      	b.n	8000e04 <__smakebuf_r+0x18>
 8000e68:	08000bf9 	.word	0x08000bf9

08000e6c <_free_r>:
 8000e6c:	b538      	push	{r3, r4, r5, lr}
 8000e6e:	4605      	mov	r5, r0
 8000e70:	2900      	cmp	r1, #0
 8000e72:	d040      	beq.n	8000ef6 <_free_r+0x8a>
 8000e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e78:	1f0c      	subs	r4, r1, #4
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	bfb8      	it	lt
 8000e7e:	18e4      	addlt	r4, r4, r3
 8000e80:	f000 f97a 	bl	8001178 <__malloc_lock>
 8000e84:	4a1c      	ldr	r2, [pc, #112]	; (8000ef8 <_free_r+0x8c>)
 8000e86:	6813      	ldr	r3, [r2, #0]
 8000e88:	b933      	cbnz	r3, 8000e98 <_free_r+0x2c>
 8000e8a:	6063      	str	r3, [r4, #4]
 8000e8c:	6014      	str	r4, [r2, #0]
 8000e8e:	4628      	mov	r0, r5
 8000e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e94:	f000 b976 	b.w	8001184 <__malloc_unlock>
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <_free_r+0x42>
 8000e9c:	6820      	ldr	r0, [r4, #0]
 8000e9e:	1821      	adds	r1, r4, r0
 8000ea0:	428b      	cmp	r3, r1
 8000ea2:	bf01      	itttt	eq
 8000ea4:	6819      	ldreq	r1, [r3, #0]
 8000ea6:	685b      	ldreq	r3, [r3, #4]
 8000ea8:	1809      	addeq	r1, r1, r0
 8000eaa:	6021      	streq	r1, [r4, #0]
 8000eac:	e7ed      	b.n	8000e8a <_free_r+0x1e>
 8000eae:	461a      	mov	r2, r3
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	b10b      	cbz	r3, 8000eb8 <_free_r+0x4c>
 8000eb4:	42a3      	cmp	r3, r4
 8000eb6:	d9fa      	bls.n	8000eae <_free_r+0x42>
 8000eb8:	6811      	ldr	r1, [r2, #0]
 8000eba:	1850      	adds	r0, r2, r1
 8000ebc:	42a0      	cmp	r0, r4
 8000ebe:	d10b      	bne.n	8000ed8 <_free_r+0x6c>
 8000ec0:	6820      	ldr	r0, [r4, #0]
 8000ec2:	4401      	add	r1, r0
 8000ec4:	1850      	adds	r0, r2, r1
 8000ec6:	4283      	cmp	r3, r0
 8000ec8:	6011      	str	r1, [r2, #0]
 8000eca:	d1e0      	bne.n	8000e8e <_free_r+0x22>
 8000ecc:	6818      	ldr	r0, [r3, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	4401      	add	r1, r0
 8000ed2:	6011      	str	r1, [r2, #0]
 8000ed4:	6053      	str	r3, [r2, #4]
 8000ed6:	e7da      	b.n	8000e8e <_free_r+0x22>
 8000ed8:	d902      	bls.n	8000ee0 <_free_r+0x74>
 8000eda:	230c      	movs	r3, #12
 8000edc:	602b      	str	r3, [r5, #0]
 8000ede:	e7d6      	b.n	8000e8e <_free_r+0x22>
 8000ee0:	6820      	ldr	r0, [r4, #0]
 8000ee2:	1821      	adds	r1, r4, r0
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf01      	itttt	eq
 8000ee8:	6819      	ldreq	r1, [r3, #0]
 8000eea:	685b      	ldreq	r3, [r3, #4]
 8000eec:	1809      	addeq	r1, r1, r0
 8000eee:	6021      	streq	r1, [r4, #0]
 8000ef0:	6063      	str	r3, [r4, #4]
 8000ef2:	6054      	str	r4, [r2, #4]
 8000ef4:	e7cb      	b.n	8000e8e <_free_r+0x22>
 8000ef6:	bd38      	pop	{r3, r4, r5, pc}
 8000ef8:	20000090 	.word	0x20000090

08000efc <sbrk_aligned>:
 8000efc:	b570      	push	{r4, r5, r6, lr}
 8000efe:	4e0e      	ldr	r6, [pc, #56]	; (8000f38 <sbrk_aligned+0x3c>)
 8000f00:	460c      	mov	r4, r1
 8000f02:	6831      	ldr	r1, [r6, #0]
 8000f04:	4605      	mov	r5, r0
 8000f06:	b911      	cbnz	r1, 8000f0e <sbrk_aligned+0x12>
 8000f08:	f000 f88c 	bl	8001024 <_sbrk_r>
 8000f0c:	6030      	str	r0, [r6, #0]
 8000f0e:	4621      	mov	r1, r4
 8000f10:	4628      	mov	r0, r5
 8000f12:	f000 f887 	bl	8001024 <_sbrk_r>
 8000f16:	1c43      	adds	r3, r0, #1
 8000f18:	d00a      	beq.n	8000f30 <sbrk_aligned+0x34>
 8000f1a:	1cc4      	adds	r4, r0, #3
 8000f1c:	f024 0403 	bic.w	r4, r4, #3
 8000f20:	42a0      	cmp	r0, r4
 8000f22:	d007      	beq.n	8000f34 <sbrk_aligned+0x38>
 8000f24:	1a21      	subs	r1, r4, r0
 8000f26:	4628      	mov	r0, r5
 8000f28:	f000 f87c 	bl	8001024 <_sbrk_r>
 8000f2c:	3001      	adds	r0, #1
 8000f2e:	d101      	bne.n	8000f34 <sbrk_aligned+0x38>
 8000f30:	f04f 34ff 	mov.w	r4, #4294967295
 8000f34:	4620      	mov	r0, r4
 8000f36:	bd70      	pop	{r4, r5, r6, pc}
 8000f38:	20000094 	.word	0x20000094

08000f3c <_malloc_r>:
 8000f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f40:	1ccd      	adds	r5, r1, #3
 8000f42:	f025 0503 	bic.w	r5, r5, #3
 8000f46:	3508      	adds	r5, #8
 8000f48:	2d0c      	cmp	r5, #12
 8000f4a:	bf38      	it	cc
 8000f4c:	250c      	movcc	r5, #12
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	4607      	mov	r7, r0
 8000f52:	db01      	blt.n	8000f58 <_malloc_r+0x1c>
 8000f54:	42a9      	cmp	r1, r5
 8000f56:	d905      	bls.n	8000f64 <_malloc_r+0x28>
 8000f58:	230c      	movs	r3, #12
 8000f5a:	2600      	movs	r6, #0
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f64:	4e2e      	ldr	r6, [pc, #184]	; (8001020 <_malloc_r+0xe4>)
 8000f66:	f000 f907 	bl	8001178 <__malloc_lock>
 8000f6a:	6833      	ldr	r3, [r6, #0]
 8000f6c:	461c      	mov	r4, r3
 8000f6e:	bb34      	cbnz	r4, 8000fbe <_malloc_r+0x82>
 8000f70:	4629      	mov	r1, r5
 8000f72:	4638      	mov	r0, r7
 8000f74:	f7ff ffc2 	bl	8000efc <sbrk_aligned>
 8000f78:	1c43      	adds	r3, r0, #1
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	d14d      	bne.n	800101a <_malloc_r+0xde>
 8000f7e:	6834      	ldr	r4, [r6, #0]
 8000f80:	4626      	mov	r6, r4
 8000f82:	2e00      	cmp	r6, #0
 8000f84:	d140      	bne.n	8001008 <_malloc_r+0xcc>
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	4631      	mov	r1, r6
 8000f8a:	4638      	mov	r0, r7
 8000f8c:	eb04 0803 	add.w	r8, r4, r3
 8000f90:	f000 f848 	bl	8001024 <_sbrk_r>
 8000f94:	4580      	cmp	r8, r0
 8000f96:	d13a      	bne.n	800100e <_malloc_r+0xd2>
 8000f98:	6821      	ldr	r1, [r4, #0]
 8000f9a:	3503      	adds	r5, #3
 8000f9c:	1a6d      	subs	r5, r5, r1
 8000f9e:	f025 0503 	bic.w	r5, r5, #3
 8000fa2:	3508      	adds	r5, #8
 8000fa4:	2d0c      	cmp	r5, #12
 8000fa6:	bf38      	it	cc
 8000fa8:	250c      	movcc	r5, #12
 8000faa:	4638      	mov	r0, r7
 8000fac:	4629      	mov	r1, r5
 8000fae:	f7ff ffa5 	bl	8000efc <sbrk_aligned>
 8000fb2:	3001      	adds	r0, #1
 8000fb4:	d02b      	beq.n	800100e <_malloc_r+0xd2>
 8000fb6:	6823      	ldr	r3, [r4, #0]
 8000fb8:	442b      	add	r3, r5
 8000fba:	6023      	str	r3, [r4, #0]
 8000fbc:	e00e      	b.n	8000fdc <_malloc_r+0xa0>
 8000fbe:	6822      	ldr	r2, [r4, #0]
 8000fc0:	1b52      	subs	r2, r2, r5
 8000fc2:	d41e      	bmi.n	8001002 <_malloc_r+0xc6>
 8000fc4:	2a0b      	cmp	r2, #11
 8000fc6:	d916      	bls.n	8000ff6 <_malloc_r+0xba>
 8000fc8:	1961      	adds	r1, r4, r5
 8000fca:	42a3      	cmp	r3, r4
 8000fcc:	6025      	str	r5, [r4, #0]
 8000fce:	bf18      	it	ne
 8000fd0:	6059      	strne	r1, [r3, #4]
 8000fd2:	6863      	ldr	r3, [r4, #4]
 8000fd4:	bf08      	it	eq
 8000fd6:	6031      	streq	r1, [r6, #0]
 8000fd8:	5162      	str	r2, [r4, r5]
 8000fda:	604b      	str	r3, [r1, #4]
 8000fdc:	4638      	mov	r0, r7
 8000fde:	f104 060b 	add.w	r6, r4, #11
 8000fe2:	f000 f8cf 	bl	8001184 <__malloc_unlock>
 8000fe6:	f026 0607 	bic.w	r6, r6, #7
 8000fea:	1d23      	adds	r3, r4, #4
 8000fec:	1af2      	subs	r2, r6, r3
 8000fee:	d0b6      	beq.n	8000f5e <_malloc_r+0x22>
 8000ff0:	1b9b      	subs	r3, r3, r6
 8000ff2:	50a3      	str	r3, [r4, r2]
 8000ff4:	e7b3      	b.n	8000f5e <_malloc_r+0x22>
 8000ff6:	6862      	ldr	r2, [r4, #4]
 8000ff8:	42a3      	cmp	r3, r4
 8000ffa:	bf0c      	ite	eq
 8000ffc:	6032      	streq	r2, [r6, #0]
 8000ffe:	605a      	strne	r2, [r3, #4]
 8001000:	e7ec      	b.n	8000fdc <_malloc_r+0xa0>
 8001002:	4623      	mov	r3, r4
 8001004:	6864      	ldr	r4, [r4, #4]
 8001006:	e7b2      	b.n	8000f6e <_malloc_r+0x32>
 8001008:	4634      	mov	r4, r6
 800100a:	6876      	ldr	r6, [r6, #4]
 800100c:	e7b9      	b.n	8000f82 <_malloc_r+0x46>
 800100e:	230c      	movs	r3, #12
 8001010:	4638      	mov	r0, r7
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	f000 f8b6 	bl	8001184 <__malloc_unlock>
 8001018:	e7a1      	b.n	8000f5e <_malloc_r+0x22>
 800101a:	6025      	str	r5, [r4, #0]
 800101c:	e7de      	b.n	8000fdc <_malloc_r+0xa0>
 800101e:	bf00      	nop
 8001020:	20000090 	.word	0x20000090

08001024 <_sbrk_r>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2300      	movs	r3, #0
 8001028:	4d05      	ldr	r5, [pc, #20]	; (8001040 <_sbrk_r+0x1c>)
 800102a:	4604      	mov	r4, r0
 800102c:	4608      	mov	r0, r1
 800102e:	602b      	str	r3, [r5, #0]
 8001030:	f7ff fb24 	bl	800067c <_sbrk>
 8001034:	1c43      	adds	r3, r0, #1
 8001036:	d102      	bne.n	800103e <_sbrk_r+0x1a>
 8001038:	682b      	ldr	r3, [r5, #0]
 800103a:	b103      	cbz	r3, 800103e <_sbrk_r+0x1a>
 800103c:	6023      	str	r3, [r4, #0]
 800103e:	bd38      	pop	{r3, r4, r5, pc}
 8001040:	20000098 	.word	0x20000098

08001044 <__sread>:
 8001044:	b510      	push	{r4, lr}
 8001046:	460c      	mov	r4, r1
 8001048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800104c:	f000 f8a0 	bl	8001190 <_read_r>
 8001050:	2800      	cmp	r0, #0
 8001052:	bfab      	itete	ge
 8001054:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001056:	89a3      	ldrhlt	r3, [r4, #12]
 8001058:	181b      	addge	r3, r3, r0
 800105a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800105e:	bfac      	ite	ge
 8001060:	6563      	strge	r3, [r4, #84]	; 0x54
 8001062:	81a3      	strhlt	r3, [r4, #12]
 8001064:	bd10      	pop	{r4, pc}

08001066 <__swrite>:
 8001066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800106a:	461f      	mov	r7, r3
 800106c:	898b      	ldrh	r3, [r1, #12]
 800106e:	4605      	mov	r5, r0
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	460c      	mov	r4, r1
 8001074:	4616      	mov	r6, r2
 8001076:	d505      	bpl.n	8001084 <__swrite+0x1e>
 8001078:	2302      	movs	r3, #2
 800107a:	2200      	movs	r2, #0
 800107c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001080:	f000 f868 	bl	8001154 <_lseek_r>
 8001084:	89a3      	ldrh	r3, [r4, #12]
 8001086:	4632      	mov	r2, r6
 8001088:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800108c:	81a3      	strh	r3, [r4, #12]
 800108e:	4628      	mov	r0, r5
 8001090:	463b      	mov	r3, r7
 8001092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800109a:	f000 b817 	b.w	80010cc <_write_r>

0800109e <__sseek>:
 800109e:	b510      	push	{r4, lr}
 80010a0:	460c      	mov	r4, r1
 80010a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010a6:	f000 f855 	bl	8001154 <_lseek_r>
 80010aa:	1c43      	adds	r3, r0, #1
 80010ac:	89a3      	ldrh	r3, [r4, #12]
 80010ae:	bf15      	itete	ne
 80010b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80010b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80010b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80010ba:	81a3      	strheq	r3, [r4, #12]
 80010bc:	bf18      	it	ne
 80010be:	81a3      	strhne	r3, [r4, #12]
 80010c0:	bd10      	pop	{r4, pc}

080010c2 <__sclose>:
 80010c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010c6:	f000 b813 	b.w	80010f0 <_close_r>
	...

080010cc <_write_r>:
 80010cc:	b538      	push	{r3, r4, r5, lr}
 80010ce:	4604      	mov	r4, r0
 80010d0:	4608      	mov	r0, r1
 80010d2:	4611      	mov	r1, r2
 80010d4:	2200      	movs	r2, #0
 80010d6:	4d05      	ldr	r5, [pc, #20]	; (80010ec <_write_r+0x20>)
 80010d8:	602a      	str	r2, [r5, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	f7ff fa81 	bl	80005e2 <_write>
 80010e0:	1c43      	adds	r3, r0, #1
 80010e2:	d102      	bne.n	80010ea <_write_r+0x1e>
 80010e4:	682b      	ldr	r3, [r5, #0]
 80010e6:	b103      	cbz	r3, 80010ea <_write_r+0x1e>
 80010e8:	6023      	str	r3, [r4, #0]
 80010ea:	bd38      	pop	{r3, r4, r5, pc}
 80010ec:	20000098 	.word	0x20000098

080010f0 <_close_r>:
 80010f0:	b538      	push	{r3, r4, r5, lr}
 80010f2:	2300      	movs	r3, #0
 80010f4:	4d05      	ldr	r5, [pc, #20]	; (800110c <_close_r+0x1c>)
 80010f6:	4604      	mov	r4, r0
 80010f8:	4608      	mov	r0, r1
 80010fa:	602b      	str	r3, [r5, #0]
 80010fc:	f7ff fa8d 	bl	800061a <_close>
 8001100:	1c43      	adds	r3, r0, #1
 8001102:	d102      	bne.n	800110a <_close_r+0x1a>
 8001104:	682b      	ldr	r3, [r5, #0]
 8001106:	b103      	cbz	r3, 800110a <_close_r+0x1a>
 8001108:	6023      	str	r3, [r4, #0]
 800110a:	bd38      	pop	{r3, r4, r5, pc}
 800110c:	20000098 	.word	0x20000098

08001110 <_fstat_r>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2300      	movs	r3, #0
 8001114:	4d06      	ldr	r5, [pc, #24]	; (8001130 <_fstat_r+0x20>)
 8001116:	4604      	mov	r4, r0
 8001118:	4608      	mov	r0, r1
 800111a:	4611      	mov	r1, r2
 800111c:	602b      	str	r3, [r5, #0]
 800111e:	f7ff fa87 	bl	8000630 <_fstat>
 8001122:	1c43      	adds	r3, r0, #1
 8001124:	d102      	bne.n	800112c <_fstat_r+0x1c>
 8001126:	682b      	ldr	r3, [r5, #0]
 8001128:	b103      	cbz	r3, 800112c <_fstat_r+0x1c>
 800112a:	6023      	str	r3, [r4, #0]
 800112c:	bd38      	pop	{r3, r4, r5, pc}
 800112e:	bf00      	nop
 8001130:	20000098 	.word	0x20000098

08001134 <_isatty_r>:
 8001134:	b538      	push	{r3, r4, r5, lr}
 8001136:	2300      	movs	r3, #0
 8001138:	4d05      	ldr	r5, [pc, #20]	; (8001150 <_isatty_r+0x1c>)
 800113a:	4604      	mov	r4, r0
 800113c:	4608      	mov	r0, r1
 800113e:	602b      	str	r3, [r5, #0]
 8001140:	f7ff fa85 	bl	800064e <_isatty>
 8001144:	1c43      	adds	r3, r0, #1
 8001146:	d102      	bne.n	800114e <_isatty_r+0x1a>
 8001148:	682b      	ldr	r3, [r5, #0]
 800114a:	b103      	cbz	r3, 800114e <_isatty_r+0x1a>
 800114c:	6023      	str	r3, [r4, #0]
 800114e:	bd38      	pop	{r3, r4, r5, pc}
 8001150:	20000098 	.word	0x20000098

08001154 <_lseek_r>:
 8001154:	b538      	push	{r3, r4, r5, lr}
 8001156:	4604      	mov	r4, r0
 8001158:	4608      	mov	r0, r1
 800115a:	4611      	mov	r1, r2
 800115c:	2200      	movs	r2, #0
 800115e:	4d05      	ldr	r5, [pc, #20]	; (8001174 <_lseek_r+0x20>)
 8001160:	602a      	str	r2, [r5, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	f7ff fa7d 	bl	8000662 <_lseek>
 8001168:	1c43      	adds	r3, r0, #1
 800116a:	d102      	bne.n	8001172 <_lseek_r+0x1e>
 800116c:	682b      	ldr	r3, [r5, #0]
 800116e:	b103      	cbz	r3, 8001172 <_lseek_r+0x1e>
 8001170:	6023      	str	r3, [r4, #0]
 8001172:	bd38      	pop	{r3, r4, r5, pc}
 8001174:	20000098 	.word	0x20000098

08001178 <__malloc_lock>:
 8001178:	4801      	ldr	r0, [pc, #4]	; (8001180 <__malloc_lock+0x8>)
 800117a:	f7ff be0f 	b.w	8000d9c <__retarget_lock_acquire_recursive>
 800117e:	bf00      	nop
 8001180:	2000008c 	.word	0x2000008c

08001184 <__malloc_unlock>:
 8001184:	4801      	ldr	r0, [pc, #4]	; (800118c <__malloc_unlock+0x8>)
 8001186:	f7ff be0a 	b.w	8000d9e <__retarget_lock_release_recursive>
 800118a:	bf00      	nop
 800118c:	2000008c 	.word	0x2000008c

08001190 <_read_r>:
 8001190:	b538      	push	{r3, r4, r5, lr}
 8001192:	4604      	mov	r4, r0
 8001194:	4608      	mov	r0, r1
 8001196:	4611      	mov	r1, r2
 8001198:	2200      	movs	r2, #0
 800119a:	4d05      	ldr	r5, [pc, #20]	; (80011b0 <_read_r+0x20>)
 800119c:	602a      	str	r2, [r5, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	f7ff fa02 	bl	80005a8 <_read>
 80011a4:	1c43      	adds	r3, r0, #1
 80011a6:	d102      	bne.n	80011ae <_read_r+0x1e>
 80011a8:	682b      	ldr	r3, [r5, #0]
 80011aa:	b103      	cbz	r3, 80011ae <_read_r+0x1e>
 80011ac:	6023      	str	r3, [r4, #0]
 80011ae:	bd38      	pop	{r3, r4, r5, pc}
 80011b0:	20000098 	.word	0x20000098

080011b4 <_init>:
 80011b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011b6:	bf00      	nop
 80011b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ba:	bc08      	pop	{r3}
 80011bc:	469e      	mov	lr, r3
 80011be:	4770      	bx	lr

080011c0 <_fini>:
 80011c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011c2:	bf00      	nop
 80011c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011c6:	bc08      	pop	{r3}
 80011c8:	469e      	mov	lr, r3
 80011ca:	4770      	bx	lr
