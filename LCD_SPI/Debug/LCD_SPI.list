
LCD_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aacc  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a9ac  0800ad00  0800ad00  0001ad00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080156ac  080156ac  000256ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080156b4  080156b4  000256b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080156b8  080156b8  000256b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000025  20000000  080156bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000010c8  20000028  080156e1  00030028  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200010f0  080156e1  000310f0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00030025  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e013  00000000  00000000  0003005b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035f2  00000000  00000000  0004e06e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001630  00000000  00000000  00051660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000375aa  00000000  00000000  00052c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001d2a8  00000000  00000000  0008a23a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00160021  00000000  00000000  000a74e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00207503  2**0
                  CONTENTS, READONLY
 17 .debug_ranges 000014e0  00000000  00000000  00207558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005f2c  00000000  00000000  00208a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000028 	.word	0x20000028
 8000250:	00000000 	.word	0x00000000
 8000254:	0800ace8 	.word	0x0800ace8

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	2000002c 	.word	0x2000002c
 8000270:	0800ace8 	.word	0x0800ace8

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <LL_AHB2_GRP1_EnableClock+0x34>)
 800059e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005a2:	4909      	ldr	r1, [pc, #36]	; (80005c8 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4313      	orrs	r3, r2
 80005a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005ae:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4013      	ands	r3, r2
 80005b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b8:	68fb      	ldr	r3, [r7, #12]
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	46020c00 	.word	0x46020c00

080005cc <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <LL_APB1_GRP2_EnableClock+0x34>)
 80005d6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80005da:	4909      	ldr	r1, [pc, #36]	; (8000600 <LL_APB1_GRP2_EnableClock+0x34>)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4313      	orrs	r3, r2
 80005e0:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <LL_APB1_GRP2_EnableClock+0x34>)
 80005e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4013      	ands	r3, r2
 80005ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f0:	68fb      	ldr	r3, [r7, #12]
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	46020c00 	.word	0x46020c00

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08e      	sub	sp, #56	; 0x38
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
char s[50] = "DOG";
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <main+0x4c>)
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	222e      	movs	r2, #46	; 0x2e
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f00a fb5e 	bl	800acd8 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f001 ff3a 	bl	8002494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f818 	bl	8000654 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000624:	f000 f87a 	bl	800071c <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 fa5a 	bl	8000ae0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800062c:	f000 f884 	bl	8000738 <MX_ADC1_Init>
  MX_UCPD1_Init();
 8000630:	f000 f9a8 	bl	8000984 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8000634:	f000 f9dc 	bl	80009f0 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000638:	f000 fa26 	bl	8000a88 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 800063c:	f000 f8c0 	bl	80007c0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000640:	f000 f930 	bl	80008a4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
 // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
ST7789_Init();
 8000644:	f000 fc40 	bl	8000ec8 <ST7789_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 ST7789_Test();
 8000648:	f001 fa88 	bl	8001b5c <ST7789_Test>
 800064c:	e7fc      	b.n	8000648 <main+0x44>
 800064e:	bf00      	nop
 8000650:	00474f44 	.word	0x00474f44

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b09e      	sub	sp, #120	; 0x78
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0318 	add.w	r3, r7, #24
 800065e:	2260      	movs	r2, #96	; 0x60
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f00a fb38 	bl	800acd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	463b      	mov	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
 8000676:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000678:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800067c:	f004 f85e 	bl	800473c <HAL_PWREx_ControlVoltageScaling>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000686:	f000 faf1 	bl	8000c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800068a:	2332      	movs	r3, #50	; 0x32
 800068c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069a:	2310      	movs	r3, #16
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800069e:	2301      	movs	r3, #1
 80006a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006a2:	2310      	movs	r3, #16
 80006a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80006a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b0:	2301      	movs	r3, #1
 80006b2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006bc:	2350      	movs	r3, #80	; 0x50
 80006be:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0318 	add.w	r3, r7, #24
 80006d8:	4618      	mov	r0, r3
 80006da:	f004 f921 	bl	8004920 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e4:	f000 fac2 	bl	8000c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	231f      	movs	r3, #31
 80006ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ec:	2303      	movs	r3, #3
 80006ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	2104      	movs	r1, #4
 8000704:	4618      	mov	r0, r3
 8000706:	f004 ffe1 	bl	80056cc <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000710:	f000 faac 	bl	8000c6c <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3778      	adds	r7, #120	; 0x78
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000720:	f004 f8ee 	bl	8004900 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000724:	2002      	movs	r0, #2
 8000726:	f004 f88b 	bl	8004840 <HAL_PWREx_ConfigSupply>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000730:	f000 fa9c 	bl	8000c6c <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800073c:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <MX_ADC1_Init+0x80>)
 800073e:	4a1f      	ldr	r2, [pc, #124]	; (80007bc <MX_ADC1_Init+0x84>)
 8000740:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_ADC1_Init+0x80>)
 8000744:	2200      	movs	r2, #0
 8000746:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_ADC1_Init+0x80>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_ADC1_Init+0x80>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_ADC1_Init+0x80>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_ADC1_Init+0x80>)
 800075c:	2204      	movs	r2, #4
 800075e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_ADC1_Init+0x80>)
 8000762:	2200      	movs	r2, #0
 8000764:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_ADC1_Init+0x80>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_ADC1_Init+0x80>)
 8000770:	2201      	movs	r2, #1
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000774:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_ADC1_Init+0x80>)
 8000776:	2200      	movs	r2, #0
 8000778:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_ADC1_Init+0x80>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_ADC1_Init+0x80>)
 8000786:	2200      	movs	r2, #0
 8000788:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_ADC1_Init+0x80>)
 800078c:	2200      	movs	r2, #0
 800078e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_ADC1_Init+0x80>)
 8000792:	2200      	movs	r2, #0
 8000794:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_ADC1_Init+0x80>)
 8000798:	2200      	movs	r2, #0
 800079a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_ADC1_Init+0x80>)
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_ADC1_Init+0x80>)
 80007a6:	f001 fff9 	bl	800279c <HAL_ADC_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80007b0:	f000 fa5c 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000044 	.word	0x20000044
 80007bc:	42028000 	.word	0x42028000

080007c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d0:	4b32      	ldr	r3, [pc, #200]	; (800089c <MX_SPI1_Init+0xdc>)
 80007d2:	4a33      	ldr	r2, [pc, #204]	; (80008a0 <MX_SPI1_Init+0xe0>)
 80007d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007d6:	4b31      	ldr	r3, [pc, #196]	; (800089c <MX_SPI1_Init+0xdc>)
 80007d8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80007de:	4b2f      	ldr	r3, [pc, #188]	; (800089c <MX_SPI1_Init+0xdc>)
 80007e0:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80007e4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e6:	4b2d      	ldr	r3, [pc, #180]	; (800089c <MX_SPI1_Init+0xdc>)
 80007e8:	2207      	movs	r2, #7
 80007ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007ec:	4b2b      	ldr	r3, [pc, #172]	; (800089c <MX_SPI1_Init+0xdc>)
 80007ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80007f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f4:	4b29      	ldr	r3, [pc, #164]	; (800089c <MX_SPI1_Init+0xdc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007fa:	4b28      	ldr	r3, [pc, #160]	; (800089c <MX_SPI1_Init+0xdc>)
 80007fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000800:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000802:	4b26      	ldr	r3, [pc, #152]	; (800089c <MX_SPI1_Init+0xdc>)
 8000804:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000808:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800080a:	4b24      	ldr	r3, [pc, #144]	; (800089c <MX_SPI1_Init+0xdc>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000810:	4b22      	ldr	r3, [pc, #136]	; (800089c <MX_SPI1_Init+0xdc>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000816:	4b21      	ldr	r3, [pc, #132]	; (800089c <MX_SPI1_Init+0xdc>)
 8000818:	2200      	movs	r2, #0
 800081a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <MX_SPI1_Init+0xdc>)
 800081e:	2207      	movs	r2, #7
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000822:	4b1e      	ldr	r3, [pc, #120]	; (800089c <MX_SPI1_Init+0xdc>)
 8000824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000828:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <MX_SPI1_Init+0xdc>)
 800082c:	2200      	movs	r2, #0
 800082e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_SPI1_Init+0xdc>)
 8000832:	2200      	movs	r2, #0
 8000834:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000836:	4b19      	ldr	r3, [pc, #100]	; (800089c <MX_SPI1_Init+0xdc>)
 8000838:	2200      	movs	r2, #0
 800083a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_SPI1_Init+0xdc>)
 800083e:	2200      	movs	r2, #0
 8000840:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000842:	4b16      	ldr	r3, [pc, #88]	; (800089c <MX_SPI1_Init+0xdc>)
 8000844:	2200      	movs	r2, #0
 8000846:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_SPI1_Init+0xdc>)
 800084a:	2200      	movs	r2, #0
 800084c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_SPI1_Init+0xdc>)
 8000850:	2200      	movs	r2, #0
 8000852:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_SPI1_Init+0xdc>)
 8000856:	2200      	movs	r2, #0
 8000858:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_SPI1_Init+0xdc>)
 800085c:	2200      	movs	r2, #0
 800085e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000860:	480e      	ldr	r0, [pc, #56]	; (800089c <MX_SPI1_Init+0xdc>)
 8000862:	f007 ff53 	bl	800870c <HAL_SPI_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_SPI1_Init+0xb0>
  {
    Error_Handler();
 800086c:	f000 f9fe 	bl	8000c6c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000874:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000878:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	4619      	mov	r1, r3
 8000882:	4806      	ldr	r0, [pc, #24]	; (800089c <MX_SPI1_Init+0xdc>)
 8000884:	f008 fd73 	bl	800936e <HAL_SPIEx_SetConfigAutonomousMode>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_SPI1_Init+0xd2>
  {
    Error_Handler();
 800088e:	f000 f9ed 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200000d0 	.word	0x200000d0
 80008a0:	40013000 	.word	0x40013000

080008a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008b4:	4b31      	ldr	r3, [pc, #196]	; (800097c <MX_SPI2_Init+0xd8>)
 80008b6:	4a32      	ldr	r2, [pc, #200]	; (8000980 <MX_SPI2_Init+0xdc>)
 80008b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <MX_SPI2_Init+0xd8>)
 80008bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80008c2:	4b2e      	ldr	r3, [pc, #184]	; (800097c <MX_SPI2_Init+0xd8>)
 80008c4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80008c8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80008ca:	4b2c      	ldr	r3, [pc, #176]	; (800097c <MX_SPI2_Init+0xd8>)
 80008cc:	2203      	movs	r2, #3
 80008ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d0:	4b2a      	ldr	r3, [pc, #168]	; (800097c <MX_SPI2_Init+0xd8>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <MX_SPI2_Init+0xd8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008dc:	4b27      	ldr	r3, [pc, #156]	; (800097c <MX_SPI2_Init+0xd8>)
 80008de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80008e2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80008e4:	4b25      	ldr	r3, [pc, #148]	; (800097c <MX_SPI2_Init+0xd8>)
 80008e6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80008ea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <MX_SPI2_Init+0xd8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f2:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_SPI2_Init+0xd8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f8:	4b20      	ldr	r3, [pc, #128]	; (800097c <MX_SPI2_Init+0xd8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <MX_SPI2_Init+0xd8>)
 8000900:	2207      	movs	r2, #7
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <MX_SPI2_Init+0xd8>)
 8000906:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800090a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_SPI2_Init+0xd8>)
 800090e:	2200      	movs	r2, #0
 8000910:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_SPI2_Init+0xd8>)
 8000914:	2200      	movs	r2, #0
 8000916:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <MX_SPI2_Init+0xd8>)
 800091a:	2200      	movs	r2, #0
 800091c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_SPI2_Init+0xd8>)
 8000920:	2200      	movs	r2, #0
 8000922:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_SPI2_Init+0xd8>)
 8000926:	2200      	movs	r2, #0
 8000928:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_SPI2_Init+0xd8>)
 800092c:	2200      	movs	r2, #0
 800092e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_SPI2_Init+0xd8>)
 8000932:	2200      	movs	r2, #0
 8000934:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_SPI2_Init+0xd8>)
 8000938:	2200      	movs	r2, #0
 800093a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_SPI2_Init+0xd8>)
 800093e:	2200      	movs	r2, #0
 8000940:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000942:	480e      	ldr	r0, [pc, #56]	; (800097c <MX_SPI2_Init+0xd8>)
 8000944:	f007 fee2 	bl	800870c <HAL_SPI_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_SPI2_Init+0xae>
  {
    Error_Handler();
 800094e:	f000 f98d 	bl	8000c6c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000956:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800095a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_SPI2_Init+0xd8>)
 8000966:	f008 fd02 	bl	800936e <HAL_SPIEx_SetConfigAutonomousMode>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_SPI2_Init+0xd0>
  {
    Error_Handler();
 8000970:	f000 f97c 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000160 	.word	0x20000160
 8000980:	40003800 	.word	0x40003800

08000984 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	463b      	mov	r3, r7
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
 8000998:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800099a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800099e:	f7ff fe15 	bl	80005cc <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80009a2:	2002      	movs	r0, #2
 80009a4:	f7ff fdf6 	bl	8000594 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff fdf3 	bl	8000594 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80009ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009b2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009b4:	2303      	movs	r3, #3
 80009b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009b8:	2300      	movs	r3, #0
 80009ba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	463b      	mov	r3, r7
 80009be:	4619      	mov	r1, r3
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <MX_UCPD1_Init+0x64>)
 80009c2:	f009 fb0a 	bl	8009fda <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80009c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009cc:	2303      	movs	r3, #3
 80009ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	463b      	mov	r3, r7
 80009d6:	4619      	mov	r1, r3
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_UCPD1_Init+0x68>)
 80009da:	f009 fafe 	bl	8009fda <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	42020400 	.word	0x42020400
 80009ec:	42020000 	.word	0x42020000

080009f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f4:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <MX_USART1_UART_Init+0x90>)
 80009f6:	4a23      	ldr	r2, [pc, #140]	; (8000a84 <MX_USART1_UART_Init+0x94>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <MX_USART1_UART_Init+0x90>)
 80009fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a38:	4811      	ldr	r0, [pc, #68]	; (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a3a:	f008 fcd9 	bl	80093f0 <HAL_UART_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a44:	f000 f912 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a48:	2100      	movs	r1, #0
 8000a4a:	480d      	ldr	r0, [pc, #52]	; (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a4c:	f009 f8b0 	bl	8009bb0 <HAL_UARTEx_SetTxFifoThreshold>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a56:	f000 f909 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4808      	ldr	r0, [pc, #32]	; (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a5e:	f009 f8e5 	bl	8009c2c <HAL_UARTEx_SetRxFifoThreshold>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a68:	f000 f900 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a6e:	f009 f866 	bl	8009b3e <HAL_UARTEx_DisableFifoMode>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a78:	f000 f8f8 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200001f0 	.word	0x200001f0
 8000a84:	40013800 	.word	0x40013800

08000a88 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a8e:	4a13      	ldr	r2, [pc, #76]	; (8000adc <MX_USB_OTG_FS_PCD_Init+0x54>)
 8000a90:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a94:	2206      	movs	r2, #6
 8000a96:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ac4:	f002 fdb8 	bl	8003638 <HAL_PCD_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 8000ace:	f000 f8cd 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000280 	.word	0x20000280
 8000adc:	42040000 	.word	0x42040000

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	4b58      	ldr	r3, [pc, #352]	; (8000c58 <MX_GPIO_Init+0x178>)
 8000af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000afc:	4a56      	ldr	r2, [pc, #344]	; (8000c58 <MX_GPIO_Init+0x178>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b06:	4b54      	ldr	r3, [pc, #336]	; (8000c58 <MX_GPIO_Init+0x178>)
 8000b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	4b50      	ldr	r3, [pc, #320]	; (8000c58 <MX_GPIO_Init+0x178>)
 8000b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b1a:	4a4f      	ldr	r2, [pc, #316]	; (8000c58 <MX_GPIO_Init+0x178>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b24:	4b4c      	ldr	r3, [pc, #304]	; (8000c58 <MX_GPIO_Init+0x178>)
 8000b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	4b49      	ldr	r3, [pc, #292]	; (8000c58 <MX_GPIO_Init+0x178>)
 8000b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b38:	4a47      	ldr	r2, [pc, #284]	; (8000c58 <MX_GPIO_Init+0x178>)
 8000b3a:	f043 0302 	orr.w	r3, r3, #2
 8000b3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b42:	4b45      	ldr	r3, [pc, #276]	; (8000c58 <MX_GPIO_Init+0x178>)
 8000b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b50:	4b41      	ldr	r3, [pc, #260]	; (8000c58 <MX_GPIO_Init+0x178>)
 8000b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b56:	4a40      	ldr	r2, [pc, #256]	; (8000c58 <MX_GPIO_Init+0x178>)
 8000b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b5c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b60:	4b3d      	ldr	r3, [pc, #244]	; (8000c58 <MX_GPIO_Init+0x178>)
 8000b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2104      	movs	r1, #4
 8000b72:	483a      	ldr	r0, [pc, #232]	; (8000c5c <MX_GPIO_Init+0x17c>)
 8000b74:	f002 fd48 	bl	8003608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8000b7e:	4838      	ldr	r0, [pc, #224]	; (8000c60 <MX_GPIO_Init+0x180>)
 8000b80:	f002 fd42 	bl	8003608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	21a0      	movs	r1, #160	; 0xa0
 8000b88:	4836      	ldr	r0, [pc, #216]	; (8000c64 <MX_GPIO_Init+0x184>)
 8000b8a:	f002 fd3d 	bl	8003608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000b8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b94:	4b34      	ldr	r3, [pc, #208]	; (8000c68 <MX_GPIO_Init+0x188>)
 8000b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	482f      	ldr	r0, [pc, #188]	; (8000c60 <MX_GPIO_Init+0x180>)
 8000ba4:	f002 fb58 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000ba8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4829      	ldr	r0, [pc, #164]	; (8000c64 <MX_GPIO_Init+0x184>)
 8000bbe:	f002 fb4b 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4820      	ldr	r0, [pc, #128]	; (8000c5c <MX_GPIO_Init+0x17c>)
 8000bda:	f002 fb3d 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000bde:	2380      	movs	r3, #128	; 0x80
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	481a      	ldr	r0, [pc, #104]	; (8000c60 <MX_GPIO_Init+0x180>)
 8000bf6:	f002 fb2f 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000bfa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	4813      	ldr	r0, [pc, #76]	; (8000c60 <MX_GPIO_Init+0x180>)
 8000c14:	f002 fb20 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000c18:	2320      	movs	r3, #32
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480d      	ldr	r0, [pc, #52]	; (8000c64 <MX_GPIO_Init+0x184>)
 8000c30:	f002 fb12 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c40:	2302      	movs	r3, #2
 8000c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4806      	ldr	r0, [pc, #24]	; (8000c64 <MX_GPIO_Init+0x184>)
 8000c4c:	f002 fb04 	bl	8003258 <HAL_GPIO_Init>

}
 8000c50:	bf00      	nop
 8000c52:	3728      	adds	r7, #40	; 0x28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	46020c00 	.word	0x46020c00
 8000c5c:	42021800 	.word	0x42021800
 8000c60:	42020800 	.word	0x42020800
 8000c64:	42020400 	.word	0x42020400
 8000c68:	10210000 	.word	0x10210000

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <Error_Handler+0x8>
	...

08000c78 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <ST7789_WriteCommand+0x44>)
 8000c8a:	f002 fcbd 	bl	8003608 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c94:	4809      	ldr	r0, [pc, #36]	; (8000cbc <ST7789_WriteCommand+0x44>)
 8000c96:	f002 fcb7 	bl	8003608 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000c9a:	1df9      	adds	r1, r7, #7
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <ST7789_WriteCommand+0x48>)
 8000ca4:	f007 fe2a 	bl	80088fc <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cae:	4803      	ldr	r0, [pc, #12]	; (8000cbc <ST7789_WriteCommand+0x44>)
 8000cb0:	f002 fcaa 	bl	8003608 <HAL_GPIO_WritePin>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	42020800 	.word	0x42020800
 8000cc0:	200000d0 	.word	0x200000d0

08000cc4 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd4:	4821      	ldr	r0, [pc, #132]	; (8000d5c <ST7789_WriteData+0x98>)
 8000cd6:	f002 fc97 	bl	8003608 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce0:	481e      	ldr	r0, [pc, #120]	; (8000d5c <ST7789_WriteData+0x98>)
 8000ce2:	f002 fc91 	bl	8003608 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8000ce6:	e02b      	b.n	8000d40 <ST7789_WriteData+0x7c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	bf28      	it	cs
 8000cf2:	4613      	movcs	r3, r2
 8000cf4:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <ST7789_WriteData+0x9c>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d30f      	bcc.n	8000d22 <ST7789_WriteData+0x5e>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 8000d02:	89fb      	ldrh	r3, [r7, #14]
 8000d04:	461a      	mov	r2, r3
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	4816      	ldr	r0, [pc, #88]	; (8000d64 <ST7789_WriteData+0xa0>)
 8000d0a:	f008 f809 	bl	8008d20 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8000d0e:	bf00      	nop
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <ST7789_WriteData+0xa0>)
 8000d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d16:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d1f7      	bne.n	8000d10 <ST7789_WriteData+0x4c>
 8000d20:	e006      	b.n	8000d30 <ST7789_WriteData+0x6c>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000d22:	89fa      	ldrh	r2, [r7, #14]
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	480e      	ldr	r0, [pc, #56]	; (8000d64 <ST7789_WriteData+0xa0>)
 8000d2c:	f007 fde6 	bl	80088fc <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 8000d30:	89fb      	ldrh	r3, [r7, #14]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8000d38:	89fb      	ldrh	r3, [r7, #14]
 8000d3a:	683a      	ldr	r2, [r7, #0]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1d0      	bne.n	8000ce8 <ST7789_WriteData+0x24>
	}

	ST7789_UnSelect();
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <ST7789_WriteData+0x98>)
 8000d4e:	f002 fc5b 	bl	8003608 <HAL_GPIO_WritePin>
}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	42020800 	.word	0x42020800
 8000d60:	20000018 	.word	0x20000018
 8000d64:	200000d0 	.word	0x200000d0

08000d68 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <ST7789_WriteSmallData+0x44>)
 8000d7a:	f002 fc45 	bl	8003608 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <ST7789_WriteSmallData+0x44>)
 8000d86:	f002 fc3f 	bl	8003608 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000d8a:	1df9      	adds	r1, r7, #7
 8000d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d90:	2201      	movs	r2, #1
 8000d92:	4807      	ldr	r0, [pc, #28]	; (8000db0 <ST7789_WriteSmallData+0x48>)
 8000d94:	f007 fdb2 	bl	80088fc <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d9e:	4803      	ldr	r0, [pc, #12]	; (8000dac <ST7789_WriteSmallData+0x44>)
 8000da0:	f002 fc32 	bl	8003608 <HAL_GPIO_WritePin>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	42020800 	.word	0x42020800
 8000db0:	200000d0 	.word	0x200000d0

08000db4 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8000dbe:	2036      	movs	r0, #54	; 0x36
 8000dc0:	f7ff ff5a 	bl	8000c78 <ST7789_WriteCommand>
	switch (m) {
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d81a      	bhi.n	8000e00 <ST7789_SetRotation+0x4c>
 8000dca:	a201      	add	r2, pc, #4	; (adr r2, 8000dd0 <ST7789_SetRotation+0x1c>)
 8000dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd0:	08000de1 	.word	0x08000de1
 8000dd4:	08000de9 	.word	0x08000de9
 8000dd8:	08000df1 	.word	0x08000df1
 8000ddc:	08000df9 	.word	0x08000df9
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8000de0:	20c0      	movs	r0, #192	; 0xc0
 8000de2:	f7ff ffc1 	bl	8000d68 <ST7789_WriteSmallData>
		break;
 8000de6:	e00c      	b.n	8000e02 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000de8:	20a0      	movs	r0, #160	; 0xa0
 8000dea:	f7ff ffbd 	bl	8000d68 <ST7789_WriteSmallData>
		break;
 8000dee:	e008      	b.n	8000e02 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff ffb9 	bl	8000d68 <ST7789_WriteSmallData>
		break;
 8000df6:	e004      	b.n	8000e02 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000df8:	2060      	movs	r0, #96	; 0x60
 8000dfa:	f7ff ffb5 	bl	8000d68 <ST7789_WriteSmallData>
		break;
 8000dfe:	e000      	b.n	8000e02 <ST7789_SetRotation+0x4e>
	default:
		break;
 8000e00:	bf00      	nop
	}
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop

08000e0c <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4604      	mov	r4, r0
 8000e14:	4608      	mov	r0, r1
 8000e16:	4611      	mov	r1, r2
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	80fb      	strh	r3, [r7, #6]
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80bb      	strh	r3, [r7, #4]
 8000e22:	460b      	mov	r3, r1
 8000e24:	807b      	strh	r3, [r7, #2]
 8000e26:	4613      	mov	r3, r2
 8000e28:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e30:	4824      	ldr	r0, [pc, #144]	; (8000ec4 <ST7789_SetAddressWindow+0xb8>)
 8000e32:	f002 fbe9 	bl	8003608 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	82fb      	strh	r3, [r7, #22]
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8000e3e:	88bb      	ldrh	r3, [r7, #4]
 8000e40:	827b      	strh	r3, [r7, #18]
 8000e42:	883b      	ldrh	r3, [r7, #0]
 8000e44:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8000e46:	202a      	movs	r0, #42	; 0x2a
 8000e48:	f7ff ff16 	bl	8000c78 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8000e4c:	8afb      	ldrh	r3, [r7, #22]
 8000e4e:	0a1b      	lsrs	r3, r3, #8
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	733b      	strb	r3, [r7, #12]
 8000e56:	8afb      	ldrh	r3, [r7, #22]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	737b      	strb	r3, [r7, #13]
 8000e5c:	8abb      	ldrh	r3, [r7, #20]
 8000e5e:	0a1b      	lsrs	r3, r3, #8
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	73bb      	strb	r3, [r7, #14]
 8000e66:	8abb      	ldrh	r3, [r7, #20]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	2104      	movs	r1, #4
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff26 	bl	8000cc4 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000e78:	202b      	movs	r0, #43	; 0x2b
 8000e7a:	f7ff fefd 	bl	8000c78 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8000e7e:	8a7b      	ldrh	r3, [r7, #18]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	723b      	strb	r3, [r7, #8]
 8000e88:	8a7b      	ldrh	r3, [r7, #18]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	727b      	strb	r3, [r7, #9]
 8000e8e:	8a3b      	ldrh	r3, [r7, #16]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	72bb      	strb	r3, [r7, #10]
 8000e98:	8a3b      	ldrh	r3, [r7, #16]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	2104      	movs	r1, #4
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff0d 	bl	8000cc4 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000eaa:	202c      	movs	r0, #44	; 0x2c
 8000eac:	f7ff fee4 	bl	8000c78 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb6:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <ST7789_SetAddressWindow+0xb8>)
 8000eb8:	f002 fba6 	bl	8003608 <HAL_GPIO_WritePin>
}
 8000ebc:	bf00      	nop
 8000ebe:	371c      	adds	r7, #28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd90      	pop	{r4, r7, pc}
 8000ec4:	42020800 	.word	0x42020800

08000ec8 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b08b      	sub	sp, #44	; 0x2c
 8000ecc:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 8000ece:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	484b      	ldr	r0, [pc, #300]	; (8001004 <ST7789_Init+0x13c>)
 8000ed6:	f009 feff 	bl	800acd8 <memset>
	#endif
	HAL_Delay(10);
 8000eda:	200a      	movs	r0, #10
 8000edc:	f001 fb5e 	bl	800259c <HAL_Delay>
    ST7789_RST_Clr();
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee6:	4848      	ldr	r0, [pc, #288]	; (8001008 <ST7789_Init+0x140>)
 8000ee8:	f002 fb8e 	bl	8003608 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000eec:	200a      	movs	r0, #10
 8000eee:	f001 fb55 	bl	800259c <HAL_Delay>
    ST7789_RST_Set();
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef8:	4843      	ldr	r0, [pc, #268]	; (8001008 <ST7789_Init+0x140>)
 8000efa:	f002 fb85 	bl	8003608 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000efe:	2014      	movs	r0, #20
 8000f00:	f001 fb4c 	bl	800259c <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);
 8000f04:	203a      	movs	r0, #58	; 0x3a
 8000f06:	f7ff feb7 	bl	8000c78 <ST7789_WriteCommand>
    //	Set color mode
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8000f0a:	2055      	movs	r0, #85	; 0x55
 8000f0c:	f7ff ff2c 	bl	8000d68 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8000f10:	20b2      	movs	r0, #178	; 0xb2
 8000f12:	f7ff feb1 	bl	8000c78 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8000f16:	4a3d      	ldr	r2, [pc, #244]	; (800100c <ST7789_Init+0x144>)
 8000f18:	f107 0320 	add.w	r3, r7, #32
 8000f1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f20:	6018      	str	r0, [r3, #0]
 8000f22:	3304      	adds	r3, #4
 8000f24:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8000f26:	f107 0320 	add.w	r3, r7, #32
 8000f2a:	2105      	movs	r1, #5
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fec9 	bl	8000cc4 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8000f32:	2002      	movs	r0, #2
 8000f34:	f7ff ff3e 	bl	8000db4 <ST7789_SetRotation>
	
	// Internal LCD Voltage generator settings
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8000f38:	20b7      	movs	r0, #183	; 0xb7
 8000f3a:	f7ff fe9d 	bl	8000c78 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8000f3e:	2035      	movs	r0, #53	; 0x35
 8000f40:	f7ff ff12 	bl	8000d68 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8000f44:	20bb      	movs	r0, #187	; 0xbb
 8000f46:	f7ff fe97 	bl	8000c78 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8000f4a:	2019      	movs	r0, #25
 8000f4c:	f7ff ff0c 	bl	8000d68 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8000f50:	20c0      	movs	r0, #192	; 0xc0
 8000f52:	f7ff fe91 	bl	8000c78 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8000f56:	202c      	movs	r0, #44	; 0x2c
 8000f58:	f7ff ff06 	bl	8000d68 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8000f5c:	20c2      	movs	r0, #194	; 0xc2
 8000f5e:	f7ff fe8b 	bl	8000c78 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8000f62:	2001      	movs	r0, #1
 8000f64:	f7ff ff00 	bl	8000d68 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8000f68:	20c3      	movs	r0, #195	; 0xc3
 8000f6a:	f7ff fe85 	bl	8000c78 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8000f6e:	2012      	movs	r0, #18
 8000f70:	f7ff fefa 	bl	8000d68 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000f74:	20c4      	movs	r0, #196	; 0xc4
 8000f76:	f7ff fe7f 	bl	8000c78 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8000f7a:	2020      	movs	r0, #32
 8000f7c:	f7ff fef4 	bl	8000d68 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8000f80:	20c6      	movs	r0, #198	; 0xc6
 8000f82:	f7ff fe79 	bl	8000c78 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000f86:	200f      	movs	r0, #15
 8000f88:	f7ff feee 	bl	8000d68 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8000f8c:	20d0      	movs	r0, #208	; 0xd0
 8000f8e:	f7ff fe73 	bl	8000c78 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8000f92:	20a4      	movs	r0, #164	; 0xa4
 8000f94:	f7ff fee8 	bl	8000d68 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000f98:	20a1      	movs	r0, #161	; 0xa1
 8000f9a:	f7ff fee5 	bl	8000d68 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8000f9e:	20e0      	movs	r0, #224	; 0xe0
 8000fa0:	f7ff fe6a 	bl	8000c78 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <ST7789_Init+0x148>)
 8000fa6:	f107 0410 	add.w	r4, r7, #16
 8000faa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fac:	c407      	stmia	r4!, {r0, r1, r2}
 8000fae:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	210e      	movs	r1, #14
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fe84 	bl	8000cc4 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8000fbc:	20e1      	movs	r0, #225	; 0xe1
 8000fbe:	f7ff fe5b 	bl	8000c78 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <ST7789_Init+0x14c>)
 8000fc4:	463c      	mov	r4, r7
 8000fc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fc8:	c407      	stmia	r4!, {r0, r1, r2}
 8000fca:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000fcc:	463b      	mov	r3, r7
 8000fce:	210e      	movs	r1, #14
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fe77 	bl	8000cc4 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8000fd6:	2021      	movs	r0, #33	; 0x21
 8000fd8:	f7ff fe4e 	bl	8000c78 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000fdc:	2011      	movs	r0, #17
 8000fde:	f7ff fe4b 	bl	8000c78 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8000fe2:	2013      	movs	r0, #19
 8000fe4:	f7ff fe48 	bl	8000c78 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8000fe8:	2029      	movs	r0, #41	; 0x29
 8000fea:	f7ff fe45 	bl	8000c78 <ST7789_WriteCommand>

	HAL_Delay(50);
 8000fee:	2032      	movs	r0, #50	; 0x32
 8000ff0:	f001 fad4 	bl	800259c <HAL_Delay>
	ST7789_Fill_Color(WHITE);
 8000ff4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ff8:	f000 f80e 	bl	8001018 <ST7789_Fill_Color>
	//	Fill with Black.
}
 8000ffc:	bf00      	nop
 8000ffe:	372c      	adds	r7, #44	; 0x2c
 8001000:	46bd      	mov	sp, r7
 8001002:	bd90      	pop	{r4, r7, pc}
 8001004:	2000078c 	.word	0x2000078c
 8001008:	42020800 	.word	0x42020800
 800100c:	0800ad00 	.word	0x0800ad00
 8001010:	0800ad08 	.word	0x0800ad08
 8001014:	0800ad18 	.word	0x0800ad18

08001018 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint16_t j;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001022:	23ef      	movs	r3, #239	; 0xef
 8001024:	22ef      	movs	r2, #239	; 0xef
 8001026:	2100      	movs	r1, #0
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff feef 	bl	8000e0c <ST7789_SetAddressWindow>
	ST7789_Select();
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001034:	4816      	ldr	r0, [pc, #88]	; (8001090 <ST7789_Fill_Color+0x78>)
 8001036:	f002 fae7 	bl	8003608 <HAL_GPIO_WritePin>

		for (i = 0; i < ST7789_WIDTH; i++)
 800103a:	2300      	movs	r3, #0
 800103c:	81fb      	strh	r3, [r7, #14]
 800103e:	e019      	b.n	8001074 <ST7789_Fill_Color+0x5c>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8001040:	2300      	movs	r3, #0
 8001042:	81bb      	strh	r3, [r7, #12]
 8001044:	e010      	b.n	8001068 <ST7789_Fill_Color+0x50>
					uint8_t data[] = {color >> 8, color & 0xFF};
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	b29b      	uxth	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	723b      	strb	r3, [r7, #8]
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	2102      	movs	r1, #2
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fe31 	bl	8000cc4 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8001062:	89bb      	ldrh	r3, [r7, #12]
 8001064:	3301      	adds	r3, #1
 8001066:	81bb      	strh	r3, [r7, #12]
 8001068:	89bb      	ldrh	r3, [r7, #12]
 800106a:	2bef      	cmp	r3, #239	; 0xef
 800106c:	d9eb      	bls.n	8001046 <ST7789_Fill_Color+0x2e>
		for (i = 0; i < ST7789_WIDTH; i++)
 800106e:	89fb      	ldrh	r3, [r7, #14]
 8001070:	3301      	adds	r3, #1
 8001072:	81fb      	strh	r3, [r7, #14]
 8001074:	89fb      	ldrh	r3, [r7, #14]
 8001076:	2bef      	cmp	r3, #239	; 0xef
 8001078:	d9e2      	bls.n	8001040 <ST7789_Fill_Color+0x28>
				}

	ST7789_UnSelect();
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <ST7789_Fill_Color+0x78>)
 8001082:	f002 fac1 	bl	8003608 <HAL_GPIO_WritePin>
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	42020800 	.word	0x42020800

08001094 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
 800109e:	460b      	mov	r3, r1
 80010a0:	80bb      	strh	r3, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	2bef      	cmp	r3, #239	; 0xef
 80010aa:	d823      	bhi.n	80010f4 <ST7789_DrawPixel+0x60>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80010ac:	88bb      	ldrh	r3, [r7, #4]
 80010ae:	2bef      	cmp	r3, #239	; 0xef
 80010b0:	d820      	bhi.n	80010f4 <ST7789_DrawPixel+0x60>
	
	ST7789_SetAddressWindow(x, y, x, y);
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	88fa      	ldrh	r2, [r7, #6]
 80010b6:	88b9      	ldrh	r1, [r7, #4]
 80010b8:	88f8      	ldrh	r0, [r7, #6]
 80010ba:	f7ff fea7 	bl	8000e0c <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	733b      	strb	r3, [r7, #12]
 80010c8:	887b      	ldrh	r3, [r7, #2]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d4:	4809      	ldr	r0, [pc, #36]	; (80010fc <ST7789_DrawPixel+0x68>)
 80010d6:	f002 fa97 	bl	8003608 <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	2102      	movs	r1, #2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fdef 	bl	8000cc4 <ST7789_WriteData>
	ST7789_UnSelect();
 80010e6:	2201      	movs	r2, #1
 80010e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ec:	4803      	ldr	r0, [pc, #12]	; (80010fc <ST7789_DrawPixel+0x68>)
 80010ee:	f002 fa8b 	bl	8003608 <HAL_GPIO_WritePin>
 80010f2:	e000      	b.n	80010f6 <ST7789_DrawPixel+0x62>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80010f4:	bf00      	nop
}
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	42020800 	.word	0x42020800

08001100 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b087      	sub	sp, #28
 8001104:	af00      	add	r7, sp, #0
 8001106:	4604      	mov	r4, r0
 8001108:	4608      	mov	r0, r1
 800110a:	4611      	mov	r1, r2
 800110c:	461a      	mov	r2, r3
 800110e:	4623      	mov	r3, r4
 8001110:	80fb      	strh	r3, [r7, #6]
 8001112:	4603      	mov	r3, r0
 8001114:	80bb      	strh	r3, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	807b      	strh	r3, [r7, #2]
 800111a:	4613      	mov	r3, r2
 800111c:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 800111e:	883a      	ldrh	r2, [r7, #0]
 8001120:	88bb      	ldrh	r3, [r7, #4]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001128:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800112c:	8879      	ldrh	r1, [r7, #2]
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	1acb      	subs	r3, r1, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	bfb8      	it	lt
 8001136:	425b      	neglt	r3, r3
 8001138:	429a      	cmp	r2, r3
 800113a:	bfcc      	ite	gt
 800113c:	2301      	movgt	r3, #1
 800113e:	2300      	movle	r3, #0
 8001140:	b2db      	uxtb	r3, r3
 8001142:	827b      	strh	r3, [r7, #18]
    if (steep) {
 8001144:	8a7b      	ldrh	r3, [r7, #18]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00b      	beq.n	8001162 <ST7789_DrawLine+0x62>
		swap = x0;
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 800114e:	88bb      	ldrh	r3, [r7, #4]
 8001150:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 8001152:	8a3b      	ldrh	r3, [r7, #16]
 8001154:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 8001156:	887b      	ldrh	r3, [r7, #2]
 8001158:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 800115a:	883b      	ldrh	r3, [r7, #0]
 800115c:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 800115e:	8a3b      	ldrh	r3, [r7, #16]
 8001160:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 8001162:	88fa      	ldrh	r2, [r7, #6]
 8001164:	887b      	ldrh	r3, [r7, #2]
 8001166:	429a      	cmp	r2, r3
 8001168:	d90b      	bls.n	8001182 <ST7789_DrawLine+0x82>
		swap = x0;
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 8001172:	8a3b      	ldrh	r3, [r7, #16]
 8001174:	807b      	strh	r3, [r7, #2]

		swap = y0;
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 800117a:	883b      	ldrh	r3, [r7, #0]
 800117c:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 800117e:	8a3b      	ldrh	r3, [r7, #16]
 8001180:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	b29b      	uxth	r3, r3
 800118a:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 800118c:	883a      	ldrh	r2, [r7, #0]
 800118e:	88bb      	ldrh	r3, [r7, #4]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	bfb8      	it	lt
 8001196:	425b      	neglt	r3, r3
 8001198:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 800119a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800119e:	0fda      	lsrs	r2, r3, #31
 80011a0:	4413      	add	r3, r2
 80011a2:	105b      	asrs	r3, r3, #1
 80011a4:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 80011a6:	88ba      	ldrh	r2, [r7, #4]
 80011a8:	883b      	ldrh	r3, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d202      	bcs.n	80011b4 <ST7789_DrawLine+0xb4>
        ystep = 1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	82bb      	strh	r3, [r7, #20]
 80011b2:	e028      	b.n	8001206 <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 80011b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b8:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 80011ba:	e024      	b.n	8001206 <ST7789_DrawLine+0x106>
        if (steep) {
 80011bc:	8a7b      	ldrh	r3, [r7, #18]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d006      	beq.n	80011d0 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 80011c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80011c4:	88f9      	ldrh	r1, [r7, #6]
 80011c6:	88bb      	ldrh	r3, [r7, #4]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff63 	bl	8001094 <ST7789_DrawPixel>
 80011ce:	e005      	b.n	80011dc <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 80011d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80011d2:	88b9      	ldrh	r1, [r7, #4]
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff5c 	bl	8001094 <ST7789_DrawPixel>
        }
        err -= dy;
 80011dc:	8afa      	ldrh	r2, [r7, #22]
 80011de:	89bb      	ldrh	r3, [r7, #12]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 80011e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	da08      	bge.n	8001200 <ST7789_DrawLine+0x100>
            y0 += ystep;
 80011ee:	8aba      	ldrh	r2, [r7, #20]
 80011f0:	88bb      	ldrh	r3, [r7, #4]
 80011f2:	4413      	add	r3, r2
 80011f4:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80011f6:	8afa      	ldrh	r2, [r7, #22]
 80011f8:	89fb      	ldrh	r3, [r7, #14]
 80011fa:	4413      	add	r3, r2
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	3301      	adds	r3, #1
 8001204:	80fb      	strh	r3, [r7, #6]
 8001206:	88fa      	ldrh	r2, [r7, #6]
 8001208:	887b      	ldrh	r3, [r7, #2]
 800120a:	429a      	cmp	r2, r3
 800120c:	d9d6      	bls.n	80011bc <ST7789_DrawLine+0xbc>
        }
    }
}
 800120e:	bf00      	nop
 8001210:	bf00      	nop
 8001212:	371c      	adds	r7, #28
 8001214:	46bd      	mov	sp, r7
 8001216:	bd90      	pop	{r4, r7, pc}

08001218 <ST7789_DrawRectangle>:
 * @param xi&yi -> 2 coordinates of 2 top points.
 * @param color -> color of the Rectangle line
 * @return none
 */
void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b085      	sub	sp, #20
 800121c:	af02      	add	r7, sp, #8
 800121e:	4604      	mov	r4, r0
 8001220:	4608      	mov	r0, r1
 8001222:	4611      	mov	r1, r2
 8001224:	461a      	mov	r2, r3
 8001226:	4623      	mov	r3, r4
 8001228:	80fb      	strh	r3, [r7, #6]
 800122a:	4603      	mov	r3, r0
 800122c:	80bb      	strh	r3, [r7, #4]
 800122e:	460b      	mov	r3, r1
 8001230:	807b      	strh	r3, [r7, #2]
 8001232:	4613      	mov	r3, r2
 8001234:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001236:	2200      	movs	r2, #0
 8001238:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800123c:	4818      	ldr	r0, [pc, #96]	; (80012a0 <ST7789_DrawRectangle+0x88>)
 800123e:	f002 f9e3 	bl	8003608 <HAL_GPIO_WritePin>
	ST7789_DrawLine(x1, y1, x2, y1, color);
 8001242:	88bc      	ldrh	r4, [r7, #4]
 8001244:	887a      	ldrh	r2, [r7, #2]
 8001246:	88b9      	ldrh	r1, [r7, #4]
 8001248:	88f8      	ldrh	r0, [r7, #6]
 800124a:	8b3b      	ldrh	r3, [r7, #24]
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	4623      	mov	r3, r4
 8001250:	f7ff ff56 	bl	8001100 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y1, x1, y2, color);
 8001254:	883c      	ldrh	r4, [r7, #0]
 8001256:	88fa      	ldrh	r2, [r7, #6]
 8001258:	88b9      	ldrh	r1, [r7, #4]
 800125a:	88f8      	ldrh	r0, [r7, #6]
 800125c:	8b3b      	ldrh	r3, [r7, #24]
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	4623      	mov	r3, r4
 8001262:	f7ff ff4d 	bl	8001100 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y2, x2, y2, color);
 8001266:	883c      	ldrh	r4, [r7, #0]
 8001268:	887a      	ldrh	r2, [r7, #2]
 800126a:	8839      	ldrh	r1, [r7, #0]
 800126c:	88f8      	ldrh	r0, [r7, #6]
 800126e:	8b3b      	ldrh	r3, [r7, #24]
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	4623      	mov	r3, r4
 8001274:	f7ff ff44 	bl	8001100 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y1, x2, y2, color);
 8001278:	883c      	ldrh	r4, [r7, #0]
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	88b9      	ldrh	r1, [r7, #4]
 800127e:	8878      	ldrh	r0, [r7, #2]
 8001280:	8b3b      	ldrh	r3, [r7, #24]
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	4623      	mov	r3, r4
 8001286:	f7ff ff3b 	bl	8001100 <ST7789_DrawLine>
	ST7789_UnSelect();
 800128a:	2201      	movs	r2, #1
 800128c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <ST7789_DrawRectangle+0x88>)
 8001292:	f002 f9b9 	bl	8003608 <HAL_GPIO_WritePin>
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bd90      	pop	{r4, r7, pc}
 800129e:	bf00      	nop
 80012a0:	42020800 	.word	0x42020800

080012a4 <ST7789_DrawCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle line
 * @return  none
 */
void ST7789_DrawCircle(uint16_t x0, uint16_t y0, uint8_t r, uint16_t color)
{
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4604      	mov	r4, r0
 80012ac:	4608      	mov	r0, r1
 80012ae:	4611      	mov	r1, r2
 80012b0:	461a      	mov	r2, r3
 80012b2:	4623      	mov	r3, r4
 80012b4:	80fb      	strh	r3, [r7, #6]
 80012b6:	4603      	mov	r3, r0
 80012b8:	80bb      	strh	r3, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	70fb      	strb	r3, [r7, #3]
 80012be:	4613      	mov	r3, r2
 80012c0:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	f1c3 0301 	rsb	r3, r3, #1
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80012ce:	2301      	movs	r3, #1
 80012d0:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	03d2      	lsls	r2, r2, #15
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	b29b      	uxth	r3, r3
 80012e0:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	81fb      	strh	r3, [r7, #14]

	ST7789_Select();
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012f0:	485f      	ldr	r0, [pc, #380]	; (8001470 <ST7789_DrawCircle+0x1cc>)
 80012f2:	f002 f989 	bl	8003608 <HAL_GPIO_WritePin>
	ST7789_DrawPixel(x0, y0 + r, color);
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	88bb      	ldrh	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	b299      	uxth	r1, r3
 8001300:	883a      	ldrh	r2, [r7, #0]
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fec5 	bl	8001094 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 800130a:	78fb      	ldrb	r3, [r7, #3]
 800130c:	b29b      	uxth	r3, r3
 800130e:	88ba      	ldrh	r2, [r7, #4]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	b299      	uxth	r1, r3
 8001314:	883a      	ldrh	r2, [r7, #0]
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff febb 	bl	8001094 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	b29a      	uxth	r2, r3
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	4413      	add	r3, r2
 8001326:	b29b      	uxth	r3, r3
 8001328:	883a      	ldrh	r2, [r7, #0]
 800132a:	88b9      	ldrh	r1, [r7, #4]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff feb1 	bl	8001094 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	b29b      	uxth	r3, r3
 8001336:	88fa      	ldrh	r2, [r7, #6]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	b29b      	uxth	r3, r3
 800133c:	883a      	ldrh	r2, [r7, #0]
 800133e:	88b9      	ldrh	r1, [r7, #4]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fea7 	bl	8001094 <ST7789_DrawPixel>

	while (x < y) {
 8001346:	e081      	b.n	800144c <ST7789_DrawCircle+0x1a8>
		if (f >= 0) {
 8001348:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0e      	blt.n	800136e <ST7789_DrawCircle+0xca>
			y--;
 8001350:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001354:	b29b      	uxth	r3, r3
 8001356:	3b01      	subs	r3, #1
 8001358:	b29b      	uxth	r3, r3
 800135a:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 800135c:	8a7b      	ldrh	r3, [r7, #18]
 800135e:	3302      	adds	r3, #2
 8001360:	b29b      	uxth	r3, r3
 8001362:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8001364:	8afa      	ldrh	r2, [r7, #22]
 8001366:	8a7b      	ldrh	r3, [r7, #18]
 8001368:	4413      	add	r3, r2
 800136a:	b29b      	uxth	r3, r3
 800136c:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 800136e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001372:	b29b      	uxth	r3, r3
 8001374:	3301      	adds	r3, #1
 8001376:	b29b      	uxth	r3, r3
 8001378:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 800137a:	8abb      	ldrh	r3, [r7, #20]
 800137c:	3302      	adds	r3, #2
 800137e:	b29b      	uxth	r3, r3
 8001380:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8001382:	8afa      	ldrh	r2, [r7, #22]
 8001384:	8abb      	ldrh	r3, [r7, #20]
 8001386:	4413      	add	r3, r2
 8001388:	b29b      	uxth	r3, r3
 800138a:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawPixel(x0 + x, y0 + y, color);
 800138c:	8a3a      	ldrh	r2, [r7, #16]
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	4413      	add	r3, r2
 8001392:	b298      	uxth	r0, r3
 8001394:	89fa      	ldrh	r2, [r7, #14]
 8001396:	88bb      	ldrh	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	b29b      	uxth	r3, r3
 800139c:	883a      	ldrh	r2, [r7, #0]
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fe78 	bl	8001094 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 + y, color);
 80013a4:	8a3b      	ldrh	r3, [r7, #16]
 80013a6:	88fa      	ldrh	r2, [r7, #6]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	b298      	uxth	r0, r3
 80013ac:	89fa      	ldrh	r2, [r7, #14]
 80013ae:	88bb      	ldrh	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	883a      	ldrh	r2, [r7, #0]
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fe6c 	bl	8001094 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + x, y0 - y, color);
 80013bc:	8a3a      	ldrh	r2, [r7, #16]
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	4413      	add	r3, r2
 80013c2:	b298      	uxth	r0, r3
 80013c4:	89fb      	ldrh	r3, [r7, #14]
 80013c6:	88ba      	ldrh	r2, [r7, #4]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	883a      	ldrh	r2, [r7, #0]
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff fe60 	bl	8001094 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 - y, color);
 80013d4:	8a3b      	ldrh	r3, [r7, #16]
 80013d6:	88fa      	ldrh	r2, [r7, #6]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	b298      	uxth	r0, r3
 80013dc:	89fb      	ldrh	r3, [r7, #14]
 80013de:	88ba      	ldrh	r2, [r7, #4]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	883a      	ldrh	r2, [r7, #0]
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fe54 	bl	8001094 <ST7789_DrawPixel>

		ST7789_DrawPixel(x0 + y, y0 + x, color);
 80013ec:	89fa      	ldrh	r2, [r7, #14]
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	4413      	add	r3, r2
 80013f2:	b298      	uxth	r0, r3
 80013f4:	8a3a      	ldrh	r2, [r7, #16]
 80013f6:	88bb      	ldrh	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	883a      	ldrh	r2, [r7, #0]
 80013fe:	4619      	mov	r1, r3
 8001400:	f7ff fe48 	bl	8001094 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 + x, color);
 8001404:	89fb      	ldrh	r3, [r7, #14]
 8001406:	88fa      	ldrh	r2, [r7, #6]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	b298      	uxth	r0, r3
 800140c:	8a3a      	ldrh	r2, [r7, #16]
 800140e:	88bb      	ldrh	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	b29b      	uxth	r3, r3
 8001414:	883a      	ldrh	r2, [r7, #0]
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fe3c 	bl	8001094 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + y, y0 - x, color);
 800141c:	89fa      	ldrh	r2, [r7, #14]
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	4413      	add	r3, r2
 8001422:	b298      	uxth	r0, r3
 8001424:	8a3b      	ldrh	r3, [r7, #16]
 8001426:	88ba      	ldrh	r2, [r7, #4]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	b29b      	uxth	r3, r3
 800142c:	883a      	ldrh	r2, [r7, #0]
 800142e:	4619      	mov	r1, r3
 8001430:	f7ff fe30 	bl	8001094 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 - x, color);
 8001434:	89fb      	ldrh	r3, [r7, #14]
 8001436:	88fa      	ldrh	r2, [r7, #6]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	b298      	uxth	r0, r3
 800143c:	8a3b      	ldrh	r3, [r7, #16]
 800143e:	88ba      	ldrh	r2, [r7, #4]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	b29b      	uxth	r3, r3
 8001444:	883a      	ldrh	r2, [r7, #0]
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff fe24 	bl	8001094 <ST7789_DrawPixel>
	while (x < y) {
 800144c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001450:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001454:	429a      	cmp	r2, r3
 8001456:	f6ff af77 	blt.w	8001348 <ST7789_DrawCircle+0xa4>
	}
	ST7789_UnSelect();
 800145a:	2201      	movs	r2, #1
 800145c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001460:	4803      	ldr	r0, [pc, #12]	; (8001470 <ST7789_DrawCircle+0x1cc>)
 8001462:	f002 f8d1 	bl	8003608 <HAL_GPIO_WritePin>
}
 8001466:	bf00      	nop
 8001468:	371c      	adds	r7, #28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd90      	pop	{r4, r7, pc}
 800146e:	bf00      	nop
 8001470:	42020800 	.word	0x42020800

08001474 <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4604      	mov	r4, r0
 800147c:	4608      	mov	r0, r1
 800147e:	4611      	mov	r1, r2
 8001480:	461a      	mov	r2, r3
 8001482:	4623      	mov	r3, r4
 8001484:	80fb      	strh	r3, [r7, #6]
 8001486:	4603      	mov	r3, r0
 8001488:	80bb      	strh	r3, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	807b      	strh	r3, [r7, #2]
 800148e:	4613      	mov	r3, r2
 8001490:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	2bef      	cmp	r3, #239	; 0xef
 8001496:	d833      	bhi.n	8001500 <ST7789_DrawImage+0x8c>
 8001498:	88bb      	ldrh	r3, [r7, #4]
 800149a:	2bef      	cmp	r3, #239	; 0xef
 800149c:	d830      	bhi.n	8001500 <ST7789_DrawImage+0x8c>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 800149e:	88fa      	ldrh	r2, [r7, #6]
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	4413      	add	r3, r2
 80014a4:	2bf0      	cmp	r3, #240	; 0xf0
 80014a6:	dc2d      	bgt.n	8001504 <ST7789_DrawImage+0x90>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 80014a8:	88ba      	ldrh	r2, [r7, #4]
 80014aa:	883b      	ldrh	r3, [r7, #0]
 80014ac:	4413      	add	r3, r2
 80014ae:	2bf0      	cmp	r3, #240	; 0xf0
 80014b0:	dc2a      	bgt.n	8001508 <ST7789_DrawImage+0x94>
		return;

	ST7789_Select();
 80014b2:	2200      	movs	r2, #0
 80014b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b8:	4815      	ldr	r0, [pc, #84]	; (8001510 <ST7789_DrawImage+0x9c>)
 80014ba:	f002 f8a5 	bl	8003608 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80014be:	88fa      	ldrh	r2, [r7, #6]
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	4413      	add	r3, r2
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3b01      	subs	r3, #1
 80014c8:	b29c      	uxth	r4, r3
 80014ca:	88ba      	ldrh	r2, [r7, #4]
 80014cc:	883b      	ldrh	r3, [r7, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	3b01      	subs	r3, #1
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	88b9      	ldrh	r1, [r7, #4]
 80014d8:	88f8      	ldrh	r0, [r7, #6]
 80014da:	4622      	mov	r2, r4
 80014dc:	f7ff fc96 	bl	8000e0c <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 80014e0:	887b      	ldrh	r3, [r7, #2]
 80014e2:	883a      	ldrh	r2, [r7, #0]
 80014e4:	fb02 f303 	mul.w	r3, r2, r3
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4619      	mov	r1, r3
 80014ec:	69b8      	ldr	r0, [r7, #24]
 80014ee:	f7ff fbe9 	bl	8000cc4 <ST7789_WriteData>
	ST7789_UnSelect();
 80014f2:	2201      	movs	r2, #1
 80014f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014f8:	4805      	ldr	r0, [pc, #20]	; (8001510 <ST7789_DrawImage+0x9c>)
 80014fa:	f002 f885 	bl	8003608 <HAL_GPIO_WritePin>
 80014fe:	e004      	b.n	800150a <ST7789_DrawImage+0x96>
		return;
 8001500:	bf00      	nop
 8001502:	e002      	b.n	800150a <ST7789_DrawImage+0x96>
		return;
 8001504:	bf00      	nop
 8001506:	e000      	b.n	800150a <ST7789_DrawImage+0x96>
		return;
 8001508:	bf00      	nop
}
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bd90      	pop	{r4, r7, pc}
 8001510:	42020800 	.word	0x42020800

08001514 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001514:	b082      	sub	sp, #8
 8001516:	b590      	push	{r4, r7, lr}
 8001518:	b089      	sub	sp, #36	; 0x24
 800151a:	af00      	add	r7, sp, #0
 800151c:	637b      	str	r3, [r7, #52]	; 0x34
 800151e:	4603      	mov	r3, r0
 8001520:	80fb      	strh	r3, [r7, #6]
 8001522:	460b      	mov	r3, r1
 8001524:	80bb      	strh	r3, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001530:	4838      	ldr	r0, [pc, #224]	; (8001614 <ST7789_WriteChar+0x100>)
 8001532:	f002 f869 	bl	8003608 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8001536:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800153a:	b29a      	uxth	r2, r3
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	4413      	add	r3, r2
 8001540:	b29b      	uxth	r3, r3
 8001542:	3b01      	subs	r3, #1
 8001544:	b29c      	uxth	r4, r3
 8001546:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800154a:	b29a      	uxth	r2, r3
 800154c:	88bb      	ldrh	r3, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	b29b      	uxth	r3, r3
 8001552:	3b01      	subs	r3, #1
 8001554:	b29b      	uxth	r3, r3
 8001556:	88b9      	ldrh	r1, [r7, #4]
 8001558:	88f8      	ldrh	r0, [r7, #6]
 800155a:	4622      	mov	r2, r4
 800155c:	f7ff fc56 	bl	8000e0c <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
 8001564:	e043      	b.n	80015ee <ST7789_WriteChar+0xda>
		b = font.data[(ch - 32) * font.height + i];
 8001566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	3b20      	subs	r3, #32
 800156c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001570:	fb01 f303 	mul.w	r3, r1, r3
 8001574:	4619      	mov	r1, r3
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	440b      	add	r3, r1
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
 8001586:	e029      	b.n	80015dc <ST7789_WriteChar+0xc8>
			if ((b << j) & 0x8000) {
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00e      	beq.n	80015b6 <ST7789_WriteChar+0xa2>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8001598:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800159a:	0a1b      	lsrs	r3, r3, #8
 800159c:	b29b      	uxth	r3, r3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	743b      	strb	r3, [r7, #16]
 80015a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	2102      	movs	r1, #2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fb88 	bl	8000cc4 <ST7789_WriteData>
 80015b4:	e00f      	b.n	80015d6 <ST7789_WriteChar+0xc2>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 80015b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	b29b      	uxth	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	733b      	strb	r3, [r7, #12]
 80015c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2102      	movs	r1, #2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fb77 	bl	8000cc4 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	3301      	adds	r3, #1
 80015da:	61bb      	str	r3, [r7, #24]
 80015dc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80015e0:	461a      	mov	r2, r3
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d3cf      	bcc.n	8001588 <ST7789_WriteChar+0x74>
	for (i = 0; i < font.height; i++) {
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	3301      	adds	r3, #1
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80015f2:	461a      	mov	r2, r3
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d3b5      	bcc.n	8001566 <ST7789_WriteChar+0x52>
			}
		}
	}
	ST7789_UnSelect();
 80015fa:	2201      	movs	r2, #1
 80015fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001600:	4804      	ldr	r0, [pc, #16]	; (8001614 <ST7789_WriteChar+0x100>)
 8001602:	f002 f801 	bl	8003608 <HAL_GPIO_WritePin>
}
 8001606:	bf00      	nop
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001610:	b002      	add	sp, #8
 8001612:	4770      	bx	lr
 8001614:	42020800 	.word	0x42020800

08001618 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001618:	b082      	sub	sp, #8
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af04      	add	r7, sp, #16
 8001620:	603a      	str	r2, [r7, #0]
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	4603      	mov	r3, r0
 8001626:	80fb      	strh	r3, [r7, #6]
 8001628:	460b      	mov	r3, r1
 800162a:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 800162c:	2200      	movs	r2, #0
 800162e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001632:	4822      	ldr	r0, [pc, #136]	; (80016bc <ST7789_WriteString+0xa4>)
 8001634:	f001 ffe8 	bl	8003608 <HAL_GPIO_WritePin>
	while (*str) {
 8001638:	e02d      	b.n	8001696 <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	7d3a      	ldrb	r2, [r7, #20]
 800163e:	4413      	add	r3, r2
 8001640:	2bef      	cmp	r3, #239	; 0xef
 8001642:	dd13      	ble.n	800166c <ST7789_WriteString+0x54>
			x = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8001648:	7d7b      	ldrb	r3, [r7, #21]
 800164a:	b29a      	uxth	r2, r3
 800164c:	88bb      	ldrh	r3, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8001652:	88bb      	ldrh	r3, [r7, #4]
 8001654:	7d7a      	ldrb	r2, [r7, #21]
 8001656:	4413      	add	r3, r2
 8001658:	2bef      	cmp	r3, #239	; 0xef
 800165a:	dc21      	bgt.n	80016a0 <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b20      	cmp	r3, #32
 8001662:	d103      	bne.n	800166c <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	3301      	adds	r3, #1
 8001668:	603b      	str	r3, [r7, #0]
				continue;
 800166a:	e014      	b.n	8001696 <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	781a      	ldrb	r2, [r3, #0]
 8001670:	88b9      	ldrh	r1, [r7, #4]
 8001672:	88f8      	ldrh	r0, [r7, #6]
 8001674:	8c3b      	ldrh	r3, [r7, #32]
 8001676:	9302      	str	r3, [sp, #8]
 8001678:	8bbb      	ldrh	r3, [r7, #28]
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f7ff ff47 	bl	8001514 <ST7789_WriteChar>
		x += font.width;
 8001686:	7d3b      	ldrb	r3, [r7, #20]
 8001688:	b29a      	uxth	r2, r3
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	4413      	add	r3, r2
 800168e:	80fb      	strh	r3, [r7, #6]
		str++;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	3301      	adds	r3, #1
 8001694:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1cd      	bne.n	800163a <ST7789_WriteString+0x22>
 800169e:	e000      	b.n	80016a2 <ST7789_WriteString+0x8a>
				break;
 80016a0:	bf00      	nop
	}
	ST7789_UnSelect();
 80016a2:	2201      	movs	r2, #1
 80016a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016a8:	4804      	ldr	r0, [pc, #16]	; (80016bc <ST7789_WriteString+0xa4>)
 80016aa:	f001 ffad 	bl	8003608 <HAL_GPIO_WritePin>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016b8:	b002      	add	sp, #8
 80016ba:	4770      	bx	lr
 80016bc:	42020800 	.word	0x42020800

080016c0 <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	4604      	mov	r4, r0
 80016c8:	4608      	mov	r0, r1
 80016ca:	4611      	mov	r1, r2
 80016cc:	461a      	mov	r2, r3
 80016ce:	4623      	mov	r3, r4
 80016d0:	80fb      	strh	r3, [r7, #6]
 80016d2:	4603      	mov	r3, r0
 80016d4:	80bb      	strh	r3, [r7, #4]
 80016d6:	460b      	mov	r3, r1
 80016d8:	807b      	strh	r3, [r7, #2]
 80016da:	4613      	mov	r3, r2
 80016dc:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80016de:	2200      	movs	r2, #0
 80016e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016e4:	4822      	ldr	r0, [pc, #136]	; (8001770 <ST7789_DrawFilledRectangle+0xb0>)
 80016e6:	f001 ff8f 	bl	8003608 <HAL_GPIO_WritePin>
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	2bef      	cmp	r3, #239	; 0xef
 80016ee:	d83b      	bhi.n	8001768 <ST7789_DrawFilledRectangle+0xa8>
 80016f0:	88bb      	ldrh	r3, [r7, #4]
 80016f2:	2bef      	cmp	r3, #239	; 0xef
 80016f4:	d838      	bhi.n	8001768 <ST7789_DrawFilledRectangle+0xa8>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 80016f6:	88fa      	ldrh	r2, [r7, #6]
 80016f8:	887b      	ldrh	r3, [r7, #2]
 80016fa:	4413      	add	r3, r2
 80016fc:	2bef      	cmp	r3, #239	; 0xef
 80016fe:	dd03      	ble.n	8001708 <ST7789_DrawFilledRectangle+0x48>
		w = ST7789_WIDTH - x;
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001706:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 8001708:	88ba      	ldrh	r2, [r7, #4]
 800170a:	883b      	ldrh	r3, [r7, #0]
 800170c:	4413      	add	r3, r2
 800170e:	2bef      	cmp	r3, #239	; 0xef
 8001710:	dd03      	ble.n	800171a <ST7789_DrawFilledRectangle+0x5a>
		h = ST7789_HEIGHT - y;
 8001712:	88bb      	ldrh	r3, [r7, #4]
 8001714:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001718:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
 800171e:	e017      	b.n	8001750 <ST7789_DrawFilledRectangle+0x90>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	b29a      	uxth	r2, r3
 8001724:	88bb      	ldrh	r3, [r7, #4]
 8001726:	4413      	add	r3, r2
 8001728:	b299      	uxth	r1, r3
 800172a:	88fa      	ldrh	r2, [r7, #6]
 800172c:	887b      	ldrh	r3, [r7, #2]
 800172e:	4413      	add	r3, r2
 8001730:	b29c      	uxth	r4, r3
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	b29a      	uxth	r2, r3
 8001736:	88bb      	ldrh	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	b29a      	uxth	r2, r3
 800173c:	88f8      	ldrh	r0, [r7, #6]
 800173e:	8c3b      	ldrh	r3, [r7, #32]
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	4613      	mov	r3, r2
 8001744:	4622      	mov	r2, r4
 8001746:	f7ff fcdb 	bl	8001100 <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	3301      	adds	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	b29b      	uxth	r3, r3
 8001754:	883a      	ldrh	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d2e2      	bcs.n	8001720 <ST7789_DrawFilledRectangle+0x60>
	}
	ST7789_UnSelect();
 800175a:	2201      	movs	r2, #1
 800175c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001760:	4803      	ldr	r0, [pc, #12]	; (8001770 <ST7789_DrawFilledRectangle+0xb0>)
 8001762:	f001 ff51 	bl	8003608 <HAL_GPIO_WritePin>
 8001766:	e000      	b.n	800176a <ST7789_DrawFilledRectangle+0xaa>
		return;
 8001768:	bf00      	nop
}
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	bd90      	pop	{r4, r7, pc}
 8001770:	42020800 	.word	0x42020800

08001774 <ST7789_DrawTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the lines
 * @return  none
 */
void ST7789_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b085      	sub	sp, #20
 8001778:	af02      	add	r7, sp, #8
 800177a:	4604      	mov	r4, r0
 800177c:	4608      	mov	r0, r1
 800177e:	4611      	mov	r1, r2
 8001780:	461a      	mov	r2, r3
 8001782:	4623      	mov	r3, r4
 8001784:	80fb      	strh	r3, [r7, #6]
 8001786:	4603      	mov	r3, r0
 8001788:	80bb      	strh	r3, [r7, #4]
 800178a:	460b      	mov	r3, r1
 800178c:	807b      	strh	r3, [r7, #2]
 800178e:	4613      	mov	r3, r2
 8001790:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001798:	4813      	ldr	r0, [pc, #76]	; (80017e8 <ST7789_DrawTriangle+0x74>)
 800179a:	f001 ff35 	bl	8003608 <HAL_GPIO_WritePin>
	/* Draw lines */
	ST7789_DrawLine(x1, y1, x2, y2, color);
 800179e:	883c      	ldrh	r4, [r7, #0]
 80017a0:	887a      	ldrh	r2, [r7, #2]
 80017a2:	88b9      	ldrh	r1, [r7, #4]
 80017a4:	88f8      	ldrh	r0, [r7, #6]
 80017a6:	8c3b      	ldrh	r3, [r7, #32]
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	4623      	mov	r3, r4
 80017ac:	f7ff fca8 	bl	8001100 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y2, x3, y3, color);
 80017b0:	8bbc      	ldrh	r4, [r7, #28]
 80017b2:	8b3a      	ldrh	r2, [r7, #24]
 80017b4:	8839      	ldrh	r1, [r7, #0]
 80017b6:	8878      	ldrh	r0, [r7, #2]
 80017b8:	8c3b      	ldrh	r3, [r7, #32]
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	4623      	mov	r3, r4
 80017be:	f7ff fc9f 	bl	8001100 <ST7789_DrawLine>
	ST7789_DrawLine(x3, y3, x1, y1, color);
 80017c2:	88bc      	ldrh	r4, [r7, #4]
 80017c4:	88fa      	ldrh	r2, [r7, #6]
 80017c6:	8bb9      	ldrh	r1, [r7, #28]
 80017c8:	8b38      	ldrh	r0, [r7, #24]
 80017ca:	8c3b      	ldrh	r3, [r7, #32]
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	4623      	mov	r3, r4
 80017d0:	f7ff fc96 	bl	8001100 <ST7789_DrawLine>
	ST7789_UnSelect();
 80017d4:	2201      	movs	r2, #1
 80017d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017da:	4803      	ldr	r0, [pc, #12]	; (80017e8 <ST7789_DrawTriangle+0x74>)
 80017dc:	f001 ff14 	bl	8003608 <HAL_GPIO_WritePin>
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd90      	pop	{r4, r7, pc}
 80017e8:	42020800 	.word	0x42020800

080017ec <ST7789_DrawFilledTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the triangle
 * @return  none
 */
void ST7789_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b08d      	sub	sp, #52	; 0x34
 80017f0:	af02      	add	r7, sp, #8
 80017f2:	4604      	mov	r4, r0
 80017f4:	4608      	mov	r0, r1
 80017f6:	4611      	mov	r1, r2
 80017f8:	461a      	mov	r2, r3
 80017fa:	4623      	mov	r3, r4
 80017fc:	80fb      	strh	r3, [r7, #6]
 80017fe:	4603      	mov	r3, r0
 8001800:	80bb      	strh	r3, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	807b      	strh	r3, [r7, #2]
 8001806:	4613      	mov	r3, r2
 8001808:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001810:	485d      	ldr	r0, [pc, #372]	; (8001988 <ST7789_DrawFilledTriangle+0x19c>)
 8001812:	f001 fef9 	bl	8003608 <HAL_GPIO_WritePin>
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8001816:	2300      	movs	r3, #0
 8001818:	823b      	strh	r3, [r7, #16]
 800181a:	2300      	movs	r3, #0
 800181c:	81fb      	strh	r3, [r7, #14]
 800181e:	2300      	movs	r3, #0
 8001820:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001822:	2300      	movs	r3, #0
 8001824:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001826:	2300      	movs	r3, #0
 8001828:	847b      	strh	r3, [r7, #34]	; 0x22
 800182a:	2300      	movs	r3, #0
 800182c:	843b      	strh	r3, [r7, #32]
			yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 800182e:	2300      	movs	r3, #0
 8001830:	83fb      	strh	r3, [r7, #30]
 8001832:	2300      	movs	r3, #0
 8001834:	83bb      	strh	r3, [r7, #28]
 8001836:	2300      	movs	r3, #0
 8001838:	837b      	strh	r3, [r7, #26]
 800183a:	2300      	movs	r3, #0
 800183c:	833b      	strh	r3, [r7, #24]
 800183e:	2300      	movs	r3, #0
 8001840:	82fb      	strh	r3, [r7, #22]
 8001842:	2300      	movs	r3, #0
 8001844:	82bb      	strh	r3, [r7, #20]
			curpixel = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	bfb8      	it	lt
 8001854:	425b      	neglt	r3, r3
 8001856:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8001858:	883a      	ldrh	r2, [r7, #0]
 800185a:	88bb      	ldrh	r3, [r7, #4]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	bfb8      	it	lt
 8001862:	425b      	neglt	r3, r3
 8001864:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 800186a:	88bb      	ldrh	r3, [r7, #4]
 800186c:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 800186e:	887a      	ldrh	r2, [r7, #2]
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	429a      	cmp	r2, r3
 8001874:	d304      	bcc.n	8001880 <ST7789_DrawFilledTriangle+0x94>
		xinc1 = 1;
 8001876:	2301      	movs	r3, #1
 8001878:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 800187a:	2301      	movs	r3, #1
 800187c:	843b      	strh	r3, [r7, #32]
 800187e:	e005      	b.n	800188c <ST7789_DrawFilledTriangle+0xa0>
	}
	else {
		xinc1 = -1;
 8001880:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001884:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8001886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800188a:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 800188c:	883a      	ldrh	r2, [r7, #0]
 800188e:	88bb      	ldrh	r3, [r7, #4]
 8001890:	429a      	cmp	r2, r3
 8001892:	d304      	bcc.n	800189e <ST7789_DrawFilledTriangle+0xb2>
		yinc1 = 1;
 8001894:	2301      	movs	r3, #1
 8001896:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8001898:	2301      	movs	r3, #1
 800189a:	83bb      	strh	r3, [r7, #28]
 800189c:	e005      	b.n	80018aa <ST7789_DrawFilledTriangle+0xbe>
	}
	else {
		yinc1 = -1;
 800189e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a2:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 80018a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a8:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay) {
 80018aa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80018ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	db10      	blt.n	80018d8 <ST7789_DrawFilledTriangle+0xec>
		xinc1 = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 80018be:	8a3b      	ldrh	r3, [r7, #16]
 80018c0:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 80018c2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80018c6:	0fda      	lsrs	r2, r3, #31
 80018c8:	4413      	add	r3, r2
 80018ca:	105b      	asrs	r3, r3, #1
 80018cc:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 80018ce:	89fb      	ldrh	r3, [r7, #14]
 80018d0:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 80018d2:	8a3b      	ldrh	r3, [r7, #16]
 80018d4:	82bb      	strh	r3, [r7, #20]
 80018d6:	e00f      	b.n	80018f8 <ST7789_DrawFilledTriangle+0x10c>
	}
	else {
		xinc2 = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 80018e0:	89fb      	ldrh	r3, [r7, #14]
 80018e2:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 80018e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018e8:	0fda      	lsrs	r2, r3, #31
 80018ea:	4413      	add	r3, r2
 80018ec:	105b      	asrs	r3, r3, #1
 80018ee:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 80018f0:	8a3b      	ldrh	r3, [r7, #16]
 80018f2:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 80018f4:	89fb      	ldrh	r3, [r7, #14]
 80018f6:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 80018f8:	2300      	movs	r3, #0
 80018fa:	827b      	strh	r3, [r7, #18]
 80018fc:	e033      	b.n	8001966 <ST7789_DrawFilledTriangle+0x17a>
		ST7789_DrawLine(x, y, x3, y3, color);
 80018fe:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001900:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001902:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8001904:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001906:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	4623      	mov	r3, r4
 800190e:	f7ff fbf7 	bl	8001100 <ST7789_DrawLine>

		num += numadd;
 8001912:	8b3a      	ldrh	r2, [r7, #24]
 8001914:	8afb      	ldrh	r3, [r7, #22]
 8001916:	4413      	add	r3, r2
 8001918:	b29b      	uxth	r3, r3
 800191a:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 800191c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001920:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001924:	429a      	cmp	r2, r3
 8001926:	db0e      	blt.n	8001946 <ST7789_DrawFilledTriangle+0x15a>
			num -= den;
 8001928:	8b3a      	ldrh	r2, [r7, #24]
 800192a:	8b7b      	ldrh	r3, [r7, #26]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	b29b      	uxth	r3, r3
 8001930:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8001932:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001934:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001936:	4413      	add	r3, r2
 8001938:	b29b      	uxth	r3, r3
 800193a:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 800193c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800193e:	8bfb      	ldrh	r3, [r7, #30]
 8001940:	4413      	add	r3, r2
 8001942:	b29b      	uxth	r3, r3
 8001944:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 8001946:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001948:	8c3b      	ldrh	r3, [r7, #32]
 800194a:	4413      	add	r3, r2
 800194c:	b29b      	uxth	r3, r3
 800194e:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 8001950:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001952:	8bbb      	ldrh	r3, [r7, #28]
 8001954:	4413      	add	r3, r2
 8001956:	b29b      	uxth	r3, r3
 8001958:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 800195a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800195e:	b29b      	uxth	r3, r3
 8001960:	3301      	adds	r3, #1
 8001962:	b29b      	uxth	r3, r3
 8001964:	827b      	strh	r3, [r7, #18]
 8001966:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800196a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800196e:	429a      	cmp	r2, r3
 8001970:	ddc5      	ble.n	80018fe <ST7789_DrawFilledTriangle+0x112>
	}
	ST7789_UnSelect();
 8001972:	2201      	movs	r2, #1
 8001974:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001978:	4803      	ldr	r0, [pc, #12]	; (8001988 <ST7789_DrawFilledTriangle+0x19c>)
 800197a:	f001 fe45 	bl	8003608 <HAL_GPIO_WritePin>
}
 800197e:	bf00      	nop
 8001980:	372c      	adds	r7, #44	; 0x2c
 8001982:	46bd      	mov	sp, r7
 8001984:	bd90      	pop	{r4, r7, pc}
 8001986:	bf00      	nop
 8001988:	42020800 	.word	0x42020800

0800198c <ST7789_DrawFilledCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle
 * @return  none
 */
void ST7789_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af02      	add	r7, sp, #8
 8001992:	4604      	mov	r4, r0
 8001994:	4608      	mov	r0, r1
 8001996:	4611      	mov	r1, r2
 8001998:	461a      	mov	r2, r3
 800199a:	4623      	mov	r3, r4
 800199c:	80fb      	strh	r3, [r7, #6]
 800199e:	4603      	mov	r3, r0
 80019a0:	80bb      	strh	r3, [r7, #4]
 80019a2:	460b      	mov	r3, r1
 80019a4:	807b      	strh	r3, [r7, #2]
 80019a6:	4613      	mov	r3, r2
 80019a8:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80019aa:	2200      	movs	r2, #0
 80019ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019b0:	4869      	ldr	r0, [pc, #420]	; (8001b58 <ST7789_DrawFilledCircle+0x1cc>)
 80019b2:	f001 fe29 	bl	8003608 <HAL_GPIO_WritePin>
	int16_t f = 1 - r;
 80019b6:	887b      	ldrh	r3, [r7, #2]
 80019b8:	f1c3 0301 	rsb	r3, r3, #1
 80019bc:	b29b      	uxth	r3, r3
 80019be:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80019c0:	2301      	movs	r3, #1
 80019c2:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80019c4:	887b      	ldrh	r3, [r7, #2]
 80019c6:	461a      	mov	r2, r3
 80019c8:	03d2      	lsls	r2, r2, #15
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80019d6:	887b      	ldrh	r3, [r7, #2]
 80019d8:	81fb      	strh	r3, [r7, #14]

	ST7789_DrawPixel(x0, y0 + r, color);
 80019da:	88f8      	ldrh	r0, [r7, #6]
 80019dc:	88ba      	ldrh	r2, [r7, #4]
 80019de:	887b      	ldrh	r3, [r7, #2]
 80019e0:	4413      	add	r3, r2
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	883a      	ldrh	r2, [r7, #0]
 80019e6:	4619      	mov	r1, r3
 80019e8:	f7ff fb54 	bl	8001094 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 80019ec:	88f8      	ldrh	r0, [r7, #6]
 80019ee:	88ba      	ldrh	r2, [r7, #4]
 80019f0:	887b      	ldrh	r3, [r7, #2]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	883a      	ldrh	r2, [r7, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	f7ff fb4b 	bl	8001094 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 80019fe:	88fa      	ldrh	r2, [r7, #6]
 8001a00:	887b      	ldrh	r3, [r7, #2]
 8001a02:	4413      	add	r3, r2
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	88b9      	ldrh	r1, [r7, #4]
 8001a08:	883a      	ldrh	r2, [r7, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fb42 	bl	8001094 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8001a10:	88fa      	ldrh	r2, [r7, #6]
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	88b9      	ldrh	r1, [r7, #4]
 8001a1a:	883a      	ldrh	r2, [r7, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fb39 	bl	8001094 <ST7789_DrawPixel>
	ST7789_DrawLine(x0 - r, y0, x0 + r, y0, color);
 8001a22:	88fa      	ldrh	r2, [r7, #6]
 8001a24:	887b      	ldrh	r3, [r7, #2]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	b298      	uxth	r0, r3
 8001a2a:	88b9      	ldrh	r1, [r7, #4]
 8001a2c:	88fa      	ldrh	r2, [r7, #6]
 8001a2e:	887b      	ldrh	r3, [r7, #2]
 8001a30:	4413      	add	r3, r2
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	88bc      	ldrh	r4, [r7, #4]
 8001a36:	883b      	ldrh	r3, [r7, #0]
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	f7ff fb60 	bl	8001100 <ST7789_DrawLine>

	while (x < y) {
 8001a40:	e079      	b.n	8001b36 <ST7789_DrawFilledCircle+0x1aa>
		if (f >= 0) {
 8001a42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	db0e      	blt.n	8001a68 <ST7789_DrawFilledCircle+0xdc>
			y--;
 8001a4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	3b01      	subs	r3, #1
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8001a56:	8a7b      	ldrh	r3, [r7, #18]
 8001a58:	3302      	adds	r3, #2
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8001a5e:	8afa      	ldrh	r2, [r7, #22]
 8001a60:	8a7b      	ldrh	r3, [r7, #18]
 8001a62:	4413      	add	r3, r2
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8001a68:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	3301      	adds	r3, #1
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8001a74:	8abb      	ldrh	r3, [r7, #20]
 8001a76:	3302      	adds	r3, #2
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8001a7c:	8afa      	ldrh	r2, [r7, #22]
 8001a7e:	8abb      	ldrh	r3, [r7, #20]
 8001a80:	4413      	add	r3, r2
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 8001a86:	88fa      	ldrh	r2, [r7, #6]
 8001a88:	8a3b      	ldrh	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	b298      	uxth	r0, r3
 8001a8e:	88ba      	ldrh	r2, [r7, #4]
 8001a90:	89fb      	ldrh	r3, [r7, #14]
 8001a92:	4413      	add	r3, r2
 8001a94:	b299      	uxth	r1, r3
 8001a96:	88fa      	ldrh	r2, [r7, #6]
 8001a98:	8a3b      	ldrh	r3, [r7, #16]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	b29c      	uxth	r4, r3
 8001a9e:	88ba      	ldrh	r2, [r7, #4]
 8001aa0:	89fb      	ldrh	r3, [r7, #14]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	883b      	ldrh	r3, [r7, #0]
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	4622      	mov	r2, r4
 8001aae:	f7ff fb27 	bl	8001100 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 8001ab2:	88fa      	ldrh	r2, [r7, #6]
 8001ab4:	8a3b      	ldrh	r3, [r7, #16]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b298      	uxth	r0, r3
 8001aba:	88ba      	ldrh	r2, [r7, #4]
 8001abc:	89fb      	ldrh	r3, [r7, #14]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	b299      	uxth	r1, r3
 8001ac2:	88fa      	ldrh	r2, [r7, #6]
 8001ac4:	8a3b      	ldrh	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	b29c      	uxth	r4, r3
 8001aca:	88ba      	ldrh	r2, [r7, #4]
 8001acc:	89fb      	ldrh	r3, [r7, #14]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	883b      	ldrh	r3, [r7, #0]
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	4622      	mov	r2, r4
 8001ada:	f7ff fb11 	bl	8001100 <ST7789_DrawLine>

		ST7789_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 8001ade:	88fa      	ldrh	r2, [r7, #6]
 8001ae0:	89fb      	ldrh	r3, [r7, #14]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b298      	uxth	r0, r3
 8001ae6:	88ba      	ldrh	r2, [r7, #4]
 8001ae8:	8a3b      	ldrh	r3, [r7, #16]
 8001aea:	4413      	add	r3, r2
 8001aec:	b299      	uxth	r1, r3
 8001aee:	88fa      	ldrh	r2, [r7, #6]
 8001af0:	89fb      	ldrh	r3, [r7, #14]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	b29c      	uxth	r4, r3
 8001af6:	88ba      	ldrh	r2, [r7, #4]
 8001af8:	8a3b      	ldrh	r3, [r7, #16]
 8001afa:	4413      	add	r3, r2
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	883b      	ldrh	r3, [r7, #0]
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	4613      	mov	r3, r2
 8001b04:	4622      	mov	r2, r4
 8001b06:	f7ff fafb 	bl	8001100 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 8001b0a:	88fa      	ldrh	r2, [r7, #6]
 8001b0c:	89fb      	ldrh	r3, [r7, #14]
 8001b0e:	4413      	add	r3, r2
 8001b10:	b298      	uxth	r0, r3
 8001b12:	88ba      	ldrh	r2, [r7, #4]
 8001b14:	8a3b      	ldrh	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	b299      	uxth	r1, r3
 8001b1a:	88fa      	ldrh	r2, [r7, #6]
 8001b1c:	89fb      	ldrh	r3, [r7, #14]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	b29c      	uxth	r4, r3
 8001b22:	88ba      	ldrh	r2, [r7, #4]
 8001b24:	8a3b      	ldrh	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	883b      	ldrh	r3, [r7, #0]
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	4622      	mov	r2, r4
 8001b32:	f7ff fae5 	bl	8001100 <ST7789_DrawLine>
	while (x < y) {
 8001b36:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001b3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	f6ff af7f 	blt.w	8001a42 <ST7789_DrawFilledCircle+0xb6>
	}
	ST7789_UnSelect();
 8001b44:	2201      	movs	r2, #1
 8001b46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b4a:	4803      	ldr	r0, [pc, #12]	; (8001b58 <ST7789_DrawFilledCircle+0x1cc>)
 8001b4c:	f001 fd5c 	bl	8003608 <HAL_GPIO_WritePin>
}
 8001b50:	bf00      	nop
 8001b52:	371c      	adds	r7, #28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd90      	pop	{r4, r7, pc}
 8001b58:	42020800 	.word	0x42020800

08001b5c <ST7789_Test>:
 * @brief A Simple test function for ST7789
 * @param  none
 * @return  none
 */
void ST7789_Test(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af04      	add	r7, sp, #16
	ST7789_Fill_Color(WHITE);
 8001b62:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b66:	f7ff fa57 	bl	8001018 <ST7789_Fill_Color>
	HAL_Delay(1000);
 8001b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b6e:	f000 fd15 	bl	800259c <HAL_Delay>
	ST7789_WriteString(10, 20, "Speed Test", Font_11x18, RED, WHITE);
 8001b72:	4bc1      	ldr	r3, [pc, #772]	; (8001e78 <ST7789_Test+0x31c>)
 8001b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b78:	9202      	str	r2, [sp, #8]
 8001b7a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001b7e:	9201      	str	r2, [sp, #4]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	9200      	str	r2, [sp, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4abd      	ldr	r2, [pc, #756]	; (8001e7c <ST7789_Test+0x320>)
 8001b88:	2114      	movs	r1, #20
 8001b8a:	200a      	movs	r0, #10
 8001b8c:	f7ff fd44 	bl	8001618 <ST7789_WriteString>
	HAL_Delay(1000);
 8001b90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b94:	f000 fd02 	bl	800259c <HAL_Delay>
	ST7789_Fill_Color(CYAN);
 8001b98:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8001b9c:	f7ff fa3c 	bl	8001018 <ST7789_Fill_Color>
    HAL_Delay(500);
 8001ba0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ba4:	f000 fcfa 	bl	800259c <HAL_Delay>
	ST7789_Fill_Color(RED);
 8001ba8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001bac:	f7ff fa34 	bl	8001018 <ST7789_Fill_Color>
    HAL_Delay(500);
 8001bb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bb4:	f000 fcf2 	bl	800259c <HAL_Delay>
	ST7789_Fill_Color(BLUE);
 8001bb8:	201f      	movs	r0, #31
 8001bba:	f7ff fa2d 	bl	8001018 <ST7789_Fill_Color>
    HAL_Delay(500);
 8001bbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bc2:	f000 fceb 	bl	800259c <HAL_Delay>
	ST7789_Fill_Color(GREEN);
 8001bc6:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001bca:	f7ff fa25 	bl	8001018 <ST7789_Fill_Color>
    HAL_Delay(500);
 8001bce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bd2:	f000 fce3 	bl	800259c <HAL_Delay>
	ST7789_Fill_Color(YELLOW);
 8001bd6:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001bda:	f7ff fa1d 	bl	8001018 <ST7789_Fill_Color>
    HAL_Delay(500);
 8001bde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001be2:	f000 fcdb 	bl	800259c <HAL_Delay>
	ST7789_Fill_Color(BROWN);
 8001be6:	f64b 4040 	movw	r0, #48192	; 0xbc40
 8001bea:	f7ff fa15 	bl	8001018 <ST7789_Fill_Color>
    HAL_Delay(500);
 8001bee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bf2:	f000 fcd3 	bl	800259c <HAL_Delay>
	ST7789_Fill_Color(DARKBLUE);
 8001bf6:	f240 10cf 	movw	r0, #463	; 0x1cf
 8001bfa:	f7ff fa0d 	bl	8001018 <ST7789_Fill_Color>
    HAL_Delay(500);
 8001bfe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c02:	f000 fccb 	bl	800259c <HAL_Delay>
	ST7789_Fill_Color(MAGENTA);
 8001c06:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8001c0a:	f7ff fa05 	bl	8001018 <ST7789_Fill_Color>
    HAL_Delay(500);
 8001c0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c12:	f000 fcc3 	bl	800259c <HAL_Delay>
	ST7789_Fill_Color(LIGHTGREEN);
 8001c16:	f248 401f 	movw	r0, #33823	; 0x841f
 8001c1a:	f7ff f9fd 	bl	8001018 <ST7789_Fill_Color>
    HAL_Delay(500);
 8001c1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c22:	f000 fcbb 	bl	800259c <HAL_Delay>
	ST7789_Fill_Color(LGRAY);
 8001c26:	f24c 6018 	movw	r0, #50712	; 0xc618
 8001c2a:	f7ff f9f5 	bl	8001018 <ST7789_Fill_Color>
    HAL_Delay(500);
 8001c2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c32:	f000 fcb3 	bl	800259c <HAL_Delay>
	ST7789_Fill_Color(LBBLUE);
 8001c36:	f642 3012 	movw	r0, #11026	; 0x2b12
 8001c3a:	f7ff f9ed 	bl	8001018 <ST7789_Fill_Color>
    HAL_Delay(500);
 8001c3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c42:	f000 fcab 	bl	800259c <HAL_Delay>
	ST7789_Fill_Color(WHITE);
 8001c46:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c4a:	f7ff f9e5 	bl	8001018 <ST7789_Fill_Color>
	HAL_Delay(500);
 8001c4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c52:	f000 fca3 	bl	800259c <HAL_Delay>

	ST7789_WriteString(10, 10, "Font test.", Font_16x26, GBLUE, WHITE);
 8001c56:	4b8a      	ldr	r3, [pc, #552]	; (8001e80 <ST7789_Test+0x324>)
 8001c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c5c:	9202      	str	r2, [sp, #8]
 8001c5e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001c62:	9201      	str	r2, [sp, #4]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	9200      	str	r2, [sp, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a86      	ldr	r2, [pc, #536]	; (8001e84 <ST7789_Test+0x328>)
 8001c6c:	210a      	movs	r1, #10
 8001c6e:	200a      	movs	r0, #10
 8001c70:	f7ff fcd2 	bl	8001618 <ST7789_WriteString>
	ST7789_WriteString(10, 50, "Hello Steve!", Font_7x10, RED, WHITE);
 8001c74:	4b84      	ldr	r3, [pc, #528]	; (8001e88 <ST7789_Test+0x32c>)
 8001c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c7a:	9202      	str	r2, [sp, #8]
 8001c7c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001c80:	9201      	str	r2, [sp, #4]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	9200      	str	r2, [sp, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a80      	ldr	r2, [pc, #512]	; (8001e8c <ST7789_Test+0x330>)
 8001c8a:	2132      	movs	r1, #50	; 0x32
 8001c8c:	200a      	movs	r0, #10
 8001c8e:	f7ff fcc3 	bl	8001618 <ST7789_WriteString>
	ST7789_WriteString(10, 75, "Hello Steve!", Font_11x18, YELLOW, WHITE);
 8001c92:	4b79      	ldr	r3, [pc, #484]	; (8001e78 <ST7789_Test+0x31c>)
 8001c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c98:	9202      	str	r2, [sp, #8]
 8001c9a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001c9e:	9201      	str	r2, [sp, #4]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	9200      	str	r2, [sp, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a79      	ldr	r2, [pc, #484]	; (8001e8c <ST7789_Test+0x330>)
 8001ca8:	214b      	movs	r1, #75	; 0x4b
 8001caa:	200a      	movs	r0, #10
 8001cac:	f7ff fcb4 	bl	8001618 <ST7789_WriteString>
	ST7789_WriteString(10, 100, "Hello Steve!", Font_16x26, MAGENTA, WHITE);
 8001cb0:	4b73      	ldr	r3, [pc, #460]	; (8001e80 <ST7789_Test+0x324>)
 8001cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb6:	9202      	str	r2, [sp, #8]
 8001cb8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001cbc:	9201      	str	r2, [sp, #4]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	9200      	str	r2, [sp, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a71      	ldr	r2, [pc, #452]	; (8001e8c <ST7789_Test+0x330>)
 8001cc6:	2164      	movs	r1, #100	; 0x64
 8001cc8:	200a      	movs	r0, #10
 8001cca:	f7ff fca5 	bl	8001618 <ST7789_WriteString>
	HAL_Delay(1000);
 8001cce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cd2:	f000 fc63 	bl	800259c <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001cd6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001cda:	f7ff f99d 	bl	8001018 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Rect./Line.", Font_11x18, YELLOW, BLACK);
 8001cde:	4b66      	ldr	r3, [pc, #408]	; (8001e78 <ST7789_Test+0x31c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	9202      	str	r2, [sp, #8]
 8001ce4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001ce8:	9201      	str	r2, [sp, #4]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	9200      	str	r2, [sp, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a67      	ldr	r2, [pc, #412]	; (8001e90 <ST7789_Test+0x334>)
 8001cf2:	210a      	movs	r1, #10
 8001cf4:	200a      	movs	r0, #10
 8001cf6:	f7ff fc8f 	bl	8001618 <ST7789_WriteString>
	ST7789_DrawRectangle(30, 30, 100, 100, WHITE);
 8001cfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2364      	movs	r3, #100	; 0x64
 8001d02:	2264      	movs	r2, #100	; 0x64
 8001d04:	211e      	movs	r1, #30
 8001d06:	201e      	movs	r0, #30
 8001d08:	f7ff fa86 	bl	8001218 <ST7789_DrawRectangle>
	HAL_Delay(1000);
 8001d0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d10:	f000 fc44 	bl	800259c <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001d14:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001d18:	f7ff f97e 	bl	8001018 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Rect.", Font_11x18, YELLOW, BLACK);
 8001d1c:	4b56      	ldr	r3, [pc, #344]	; (8001e78 <ST7789_Test+0x31c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	9202      	str	r2, [sp, #8]
 8001d22:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001d26:	9201      	str	r2, [sp, #4]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	9200      	str	r2, [sp, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a59      	ldr	r2, [pc, #356]	; (8001e94 <ST7789_Test+0x338>)
 8001d30:	210a      	movs	r1, #10
 8001d32:	200a      	movs	r0, #10
 8001d34:	f7ff fc70 	bl	8001618 <ST7789_WriteString>
	ST7789_DrawFilledRectangle(30, 30, 50, 50, WHITE);
 8001d38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2332      	movs	r3, #50	; 0x32
 8001d40:	2232      	movs	r2, #50	; 0x32
 8001d42:	211e      	movs	r1, #30
 8001d44:	201e      	movs	r0, #30
 8001d46:	f7ff fcbb 	bl	80016c0 <ST7789_DrawFilledRectangle>
	HAL_Delay(1000);
 8001d4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d4e:	f000 fc25 	bl	800259c <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001d52:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001d56:	f7ff f95f 	bl	8001018 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Circle.", Font_11x18, YELLOW, BLACK);
 8001d5a:	4b47      	ldr	r3, [pc, #284]	; (8001e78 <ST7789_Test+0x31c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	9202      	str	r2, [sp, #8]
 8001d60:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001d64:	9201      	str	r2, [sp, #4]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	9200      	str	r2, [sp, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a4a      	ldr	r2, [pc, #296]	; (8001e98 <ST7789_Test+0x33c>)
 8001d6e:	210a      	movs	r1, #10
 8001d70:	200a      	movs	r0, #10
 8001d72:	f7ff fc51 	bl	8001618 <ST7789_WriteString>
	ST7789_DrawCircle(60, 60, 25, WHITE);
 8001d76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d7a:	2219      	movs	r2, #25
 8001d7c:	213c      	movs	r1, #60	; 0x3c
 8001d7e:	203c      	movs	r0, #60	; 0x3c
 8001d80:	f7ff fa90 	bl	80012a4 <ST7789_DrawCircle>
	HAL_Delay(1000);
 8001d84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d88:	f000 fc08 	bl	800259c <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001d8c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001d90:	f7ff f942 	bl	8001018 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Cir.", Font_11x18, YELLOW, BLACK);
 8001d94:	4b38      	ldr	r3, [pc, #224]	; (8001e78 <ST7789_Test+0x31c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	9202      	str	r2, [sp, #8]
 8001d9a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001d9e:	9201      	str	r2, [sp, #4]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	9200      	str	r2, [sp, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a3d      	ldr	r2, [pc, #244]	; (8001e9c <ST7789_Test+0x340>)
 8001da8:	210a      	movs	r1, #10
 8001daa:	200a      	movs	r0, #10
 8001dac:	f7ff fc34 	bl	8001618 <ST7789_WriteString>
	ST7789_DrawFilledCircle(60, 60, 25, WHITE);
 8001db0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001db4:	2219      	movs	r2, #25
 8001db6:	213c      	movs	r1, #60	; 0x3c
 8001db8:	203c      	movs	r0, #60	; 0x3c
 8001dba:	f7ff fde7 	bl	800198c <ST7789_DrawFilledCircle>
	HAL_Delay(1000);
 8001dbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dc2:	f000 fbeb 	bl	800259c <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001dc6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001dca:	f7ff f925 	bl	8001018 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Triangle", Font_11x18, YELLOW, BLACK);
 8001dce:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <ST7789_Test+0x31c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	9202      	str	r2, [sp, #8]
 8001dd4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001dd8:	9201      	str	r2, [sp, #4]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	9200      	str	r2, [sp, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a2f      	ldr	r2, [pc, #188]	; (8001ea0 <ST7789_Test+0x344>)
 8001de2:	210a      	movs	r1, #10
 8001de4:	200a      	movs	r0, #10
 8001de6:	f7ff fc17 	bl	8001618 <ST7789_WriteString>
	ST7789_DrawTriangle(30, 30, 30, 70, 60, 40, WHITE);
 8001dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dee:	9302      	str	r3, [sp, #8]
 8001df0:	2328      	movs	r3, #40	; 0x28
 8001df2:	9301      	str	r3, [sp, #4]
 8001df4:	233c      	movs	r3, #60	; 0x3c
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2346      	movs	r3, #70	; 0x46
 8001dfa:	221e      	movs	r2, #30
 8001dfc:	211e      	movs	r1, #30
 8001dfe:	201e      	movs	r0, #30
 8001e00:	f7ff fcb8 	bl	8001774 <ST7789_DrawTriangle>
	HAL_Delay(1000);
 8001e04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e08:	f000 fbc8 	bl	800259c <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001e0c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001e10:	f7ff f902 	bl	8001018 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Tri", Font_11x18, YELLOW, BLACK);
 8001e14:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <ST7789_Test+0x31c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	9202      	str	r2, [sp, #8]
 8001e1a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001e1e:	9201      	str	r2, [sp, #4]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	9200      	str	r2, [sp, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1f      	ldr	r2, [pc, #124]	; (8001ea4 <ST7789_Test+0x348>)
 8001e28:	210a      	movs	r1, #10
 8001e2a:	200a      	movs	r0, #10
 8001e2c:	f7ff fbf4 	bl	8001618 <ST7789_WriteString>
	ST7789_DrawFilledTriangle(30, 30, 30, 70, 60, 40, WHITE);
 8001e30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e34:	9302      	str	r3, [sp, #8]
 8001e36:	2328      	movs	r3, #40	; 0x28
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	233c      	movs	r3, #60	; 0x3c
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2346      	movs	r3, #70	; 0x46
 8001e40:	221e      	movs	r2, #30
 8001e42:	211e      	movs	r1, #30
 8001e44:	201e      	movs	r0, #30
 8001e46:	f7ff fcd1 	bl	80017ec <ST7789_DrawFilledTriangle>
	HAL_Delay(1000);
 8001e4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e4e:	f000 fba5 	bl	800259c <HAL_Delay>

	//	If FLASH cannot storage anymore datas, please delete codes below.
	ST7789_Fill_Color(WHITE);
 8001e52:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e56:	f7ff f8df 	bl	8001018 <ST7789_Fill_Color>
	ST7789_DrawImage(0, 0, 128, 128, (uint16_t *)saber);
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <ST7789_Test+0x34c>)
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	2280      	movs	r2, #128	; 0x80
 8001e62:	2100      	movs	r1, #0
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7ff fb05 	bl	8001474 <ST7789_DrawImage>
	HAL_Delay(3000);
 8001e6a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001e6e:	f000 fb95 	bl	800259c <HAL_Delay>
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000008 	.word	0x20000008
 8001e7c:	0800ad28 	.word	0x0800ad28
 8001e80:	20000010 	.word	0x20000010
 8001e84:	0800ad34 	.word	0x0800ad34
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	0800ad40 	.word	0x0800ad40
 8001e90:	0800ad50 	.word	0x0800ad50
 8001e94:	0800ad5c 	.word	0x0800ad5c
 8001e98:	0800ad6c 	.word	0x0800ad6c
 8001e9c:	0800ad74 	.word	0x0800ad74
 8001ea0:	0800ad80 	.word	0x0800ad80
 8001ea4:	0800ad8c 	.word	0x0800ad8c
 8001ea8:	0800d5ac 	.word	0x0800d5ac

08001eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_MspInit+0x34>)
 8001eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb8:	4a09      	ldr	r2, [pc, #36]	; (8001ee0 <HAL_MspInit+0x34>)
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ec2:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <HAL_MspInit+0x34>)
 8001ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001ed0:	2004      	movs	r0, #4
 8001ed2:	f001 f82d 	bl	8002f30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	46020c00 	.word	0x46020c00

08001ee4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b0bc      	sub	sp, #240	; 0xf0
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	22c8      	movs	r2, #200	; 0xc8
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f008 fee7 	bl	800acd8 <memset>
  if(hadc->Instance==ADC1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a24      	ldr	r2, [pc, #144]	; (8001fa0 <HAL_ADC_MspInit+0xbc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d140      	bne.n	8001f96 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001f14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001f20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f28:	f107 0310 	add.w	r3, r7, #16
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f003 ffa3 	bl	8005e78 <HAL_RCCEx_PeriphCLKConfig>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001f38:	f7fe fe98 	bl	8000c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_ADC_MspInit+0xc0>)
 8001f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f42:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <HAL_ADC_MspInit+0xc0>)
 8001f44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f48:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <HAL_ADC_MspInit+0xc0>)
 8001f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5a:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_ADC_MspInit+0xc0>)
 8001f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f60:	4a10      	ldr	r2, [pc, #64]	; (8001fa4 <HAL_ADC_MspInit+0xc0>)
 8001f62:	f043 0304 	orr.w	r3, r3, #4
 8001f66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <HAL_ADC_MspInit+0xc0>)
 8001f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001f78:	2304      	movs	r3, #4
 8001f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001f8a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <HAL_ADC_MspInit+0xc4>)
 8001f92:	f001 f961 	bl	8003258 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f96:	bf00      	nop
 8001f98:	37f0      	adds	r7, #240	; 0xf0
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	42028000 	.word	0x42028000
 8001fa4:	46020c00 	.word	0x46020c00
 8001fa8:	42020800 	.word	0x42020800

08001fac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b0c0      	sub	sp, #256	; 0x100
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fc4:	f107 0320 	add.w	r3, r7, #32
 8001fc8:	22c8      	movs	r2, #200	; 0xc8
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f008 fe83 	bl	800acd8 <memset>
  if(hspi->Instance==SPI1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a60      	ldr	r2, [pc, #384]	; (8002158 <HAL_SPI_MspInit+0x1ac>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d147      	bne.n	800206c <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001fdc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001fe0:	f04f 0300 	mov.w	r3, #0
 8001fe4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001fe8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff0:	f107 0320 	add.w	r3, r7, #32
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 ff3f 	bl	8005e78 <HAL_RCCEx_PeriphCLKConfig>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8002000:	f7fe fe34 	bl	8000c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002004:	4b55      	ldr	r3, [pc, #340]	; (800215c <HAL_SPI_MspInit+0x1b0>)
 8002006:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800200a:	4a54      	ldr	r2, [pc, #336]	; (800215c <HAL_SPI_MspInit+0x1b0>)
 800200c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002010:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002014:	4b51      	ldr	r3, [pc, #324]	; (800215c <HAL_SPI_MspInit+0x1b0>)
 8002016:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800201a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	4b4e      	ldr	r3, [pc, #312]	; (800215c <HAL_SPI_MspInit+0x1b0>)
 8002024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002028:	4a4c      	ldr	r2, [pc, #304]	; (800215c <HAL_SPI_MspInit+0x1b0>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002032:	4b4a      	ldr	r3, [pc, #296]	; (800215c <HAL_SPI_MspInit+0x1b0>)
 8002034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8002040:	2382      	movs	r3, #130	; 0x82
 8002042:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002058:	2305      	movs	r3, #5
 800205a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002062:	4619      	mov	r1, r3
 8002064:	483e      	ldr	r0, [pc, #248]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8002066:	f001 f8f7 	bl	8003258 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800206a:	e070      	b.n	800214e <HAL_SPI_MspInit+0x1a2>
  else if(hspi->Instance==SPI2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a3c      	ldr	r2, [pc, #240]	; (8002164 <HAL_SPI_MspInit+0x1b8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d16b      	bne.n	800214e <HAL_SPI_MspInit+0x1a2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002076:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8002082:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800208a:	f107 0320 	add.w	r3, r7, #32
 800208e:	4618      	mov	r0, r3
 8002090:	f003 fef2 	bl	8005e78 <HAL_RCCEx_PeriphCLKConfig>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_SPI_MspInit+0xf2>
      Error_Handler();
 800209a:	f7fe fde7 	bl	8000c6c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800209e:	4b2f      	ldr	r3, [pc, #188]	; (800215c <HAL_SPI_MspInit+0x1b0>)
 80020a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020a4:	4a2d      	ldr	r2, [pc, #180]	; (800215c <HAL_SPI_MspInit+0x1b0>)
 80020a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020aa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80020ae:	4b2b      	ldr	r3, [pc, #172]	; (800215c <HAL_SPI_MspInit+0x1b0>)
 80020b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_SPI_MspInit+0x1b0>)
 80020be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020c2:	4a26      	ldr	r2, [pc, #152]	; (800215c <HAL_SPI_MspInit+0x1b0>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020cc:	4b23      	ldr	r3, [pc, #140]	; (800215c <HAL_SPI_MspInit+0x1b0>)
 80020ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_SPI_MspInit+0x1b0>)
 80020dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020e0:	4a1e      	ldr	r2, [pc, #120]	; (800215c <HAL_SPI_MspInit+0x1b0>)
 80020e2:	f043 0302 	orr.w	r3, r3, #2
 80020e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <HAL_SPI_MspInit+0x1b0>)
 80020ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020f8:	2302      	movs	r3, #2
 80020fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8002110:	2303      	movs	r3, #3
 8002112:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002116:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800211a:	4619      	mov	r1, r3
 800211c:	4812      	ldr	r0, [pc, #72]	; (8002168 <HAL_SPI_MspInit+0x1bc>)
 800211e:	f001 f89b 	bl	8003258 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002126:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800213c:	2305      	movs	r3, #5
 800213e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002142:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002146:	4619      	mov	r1, r3
 8002148:	4808      	ldr	r0, [pc, #32]	; (800216c <HAL_SPI_MspInit+0x1c0>)
 800214a:	f001 f885 	bl	8003258 <HAL_GPIO_Init>
}
 800214e:	bf00      	nop
 8002150:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40013000 	.word	0x40013000
 800215c:	46020c00 	.word	0x46020c00
 8002160:	42020000 	.word	0x42020000
 8002164:	40003800 	.word	0x40003800
 8002168:	42020800 	.word	0x42020800
 800216c:	42020400 	.word	0x42020400

08002170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b0bc      	sub	sp, #240	; 0xf0
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	22c8      	movs	r2, #200	; 0xc8
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f008 fda1 	bl	800acd8 <memset>
  if(huart->Instance==USART1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a26      	ldr	r2, [pc, #152]	; (8002234 <HAL_UART_MspInit+0xc4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d145      	bne.n	800222c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021a0:	f04f 0201 	mov.w	r2, #1
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021ac:	2300      	movs	r3, #0
 80021ae:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021b0:	f107 0310 	add.w	r3, r7, #16
 80021b4:	4618      	mov	r0, r3
 80021b6:	f003 fe5f 	bl	8005e78 <HAL_RCCEx_PeriphCLKConfig>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80021c0:	f7fe fd54 	bl	8000c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021c4:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <HAL_UART_MspInit+0xc8>)
 80021c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80021ca:	4a1b      	ldr	r2, [pc, #108]	; (8002238 <HAL_UART_MspInit+0xc8>)
 80021cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80021d4:	4b18      	ldr	r3, [pc, #96]	; (8002238 <HAL_UART_MspInit+0xc8>)
 80021d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80021da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <HAL_UART_MspInit+0xc8>)
 80021e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021e8:	4a13      	ldr	r2, [pc, #76]	; (8002238 <HAL_UART_MspInit+0xc8>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021f2:	4b11      	ldr	r3, [pc, #68]	; (8002238 <HAL_UART_MspInit+0xc8>)
 80021f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8002200:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002204:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800220e:	2302      	movs	r3, #2
 8002210:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002214:	2303      	movs	r3, #3
 8002216:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800221a:	2307      	movs	r3, #7
 800221c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002220:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002224:	4619      	mov	r1, r3
 8002226:	4805      	ldr	r0, [pc, #20]	; (800223c <HAL_UART_MspInit+0xcc>)
 8002228:	f001 f816 	bl	8003258 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800222c:	bf00      	nop
 800222e:	37f0      	adds	r7, #240	; 0xf0
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40013800 	.word	0x40013800
 8002238:	46020c00 	.word	0x46020c00
 800223c:	42020000 	.word	0x42020000

08002240 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b0be      	sub	sp, #248	; 0xf8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002248:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002258:	f107 0318 	add.w	r3, r7, #24
 800225c:	22c8      	movs	r2, #200	; 0xc8
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f008 fd39 	bl	800acd8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a3c      	ldr	r2, [pc, #240]	; (800235c <HAL_PCD_MspInit+0x11c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d171      	bne.n	8002354 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002270:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 800227c:	2300      	movs	r3, #0
 800227e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002282:	f107 0318 	add.w	r3, r7, #24
 8002286:	4618      	mov	r0, r3
 8002288:	f003 fdf6 	bl	8005e78 <HAL_RCCEx_PeriphCLKConfig>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8002292:	f7fe fceb 	bl	8000c6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	4b32      	ldr	r3, [pc, #200]	; (8002360 <HAL_PCD_MspInit+0x120>)
 8002298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800229c:	4a30      	ldr	r2, [pc, #192]	; (8002360 <HAL_PCD_MspInit+0x120>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022a6:	4b2e      	ldr	r3, [pc, #184]	; (8002360 <HAL_PCD_MspInit+0x120>)
 80022a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80022b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80022b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	2302      	movs	r3, #2
 80022be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c8:	2303      	movs	r3, #3
 80022ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80022ce:	230a      	movs	r3, #10
 80022d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022d8:	4619      	mov	r1, r3
 80022da:	4822      	ldr	r0, [pc, #136]	; (8002364 <HAL_PCD_MspInit+0x124>)
 80022dc:	f000 ffbc 	bl	8003258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80022e0:	4b1f      	ldr	r3, [pc, #124]	; (8002360 <HAL_PCD_MspInit+0x120>)
 80022e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022e6:	4a1e      	ldr	r2, [pc, #120]	; (8002360 <HAL_PCD_MspInit+0x120>)
 80022e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_PCD_MspInit+0x120>)
 80022f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fe:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HAL_PCD_MspInit+0x120>)
 8002300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d119      	bne.n	8002340 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230c:	4b14      	ldr	r3, [pc, #80]	; (8002360 <HAL_PCD_MspInit+0x120>)
 800230e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002312:	4a13      	ldr	r2, [pc, #76]	; (8002360 <HAL_PCD_MspInit+0x120>)
 8002314:	f043 0304 	orr.w	r3, r3, #4
 8002318:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800231c:	4b10      	ldr	r3, [pc, #64]	; (8002360 <HAL_PCD_MspInit+0x120>)
 800231e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800232a:	f002 fad9 	bl	80048e0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800232e:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <HAL_PCD_MspInit+0x120>)
 8002330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002334:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <HAL_PCD_MspInit+0x120>)
 8002336:	f023 0304 	bic.w	r3, r3, #4
 800233a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800233e:	e001      	b.n	8002344 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8002340:	f002 face 	bl	80048e0 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8002344:	2200      	movs	r2, #0
 8002346:	2100      	movs	r1, #0
 8002348:	2049      	movs	r0, #73	; 0x49
 800234a:	f000 fdfc 	bl	8002f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800234e:	2049      	movs	r0, #73	; 0x49
 8002350:	f000 fe13 	bl	8002f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002354:	bf00      	nop
 8002356:	37f8      	adds	r7, #248	; 0xf8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	42040000 	.word	0x42040000
 8002360:	46020c00 	.word	0x46020c00
 8002364:	42020000 	.word	0x42020000

08002368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800236c:	e7fe      	b.n	800236c <NMI_Handler+0x4>

0800236e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002372:	e7fe      	b.n	8002372 <HardFault_Handler+0x4>

08002374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002378:	e7fe      	b.n	8002378 <MemManage_Handler+0x4>

0800237a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800237e:	e7fe      	b.n	800237e <BusFault_Handler+0x4>

08002380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002384:	e7fe      	b.n	8002384 <UsageFault_Handler+0x4>

08002386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b4:	f000 f8d2 	bl	800255c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}

080023bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80023c0:	4802      	ldr	r0, [pc, #8]	; (80023cc <OTG_FS_IRQHandler+0x10>)
 80023c2:	f001 fa5d 	bl	8003880 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000280 	.word	0x20000280

080023d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023d4:	4b18      	ldr	r3, [pc, #96]	; (8002438 <SystemInit+0x68>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	4a17      	ldr	r2, [pc, #92]	; (8002438 <SystemInit+0x68>)
 80023dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80023e4:	4b15      	ldr	r3, [pc, #84]	; (800243c <SystemInit+0x6c>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80023ea:	4b14      	ldr	r3, [pc, #80]	; (800243c <SystemInit+0x6c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <SystemInit+0x6c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <SystemInit+0x6c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80023fc:	4b0f      	ldr	r3, [pc, #60]	; (800243c <SystemInit+0x6c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0e      	ldr	r2, [pc, #56]	; (800243c <SystemInit+0x6c>)
 8002402:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002406:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800240a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <SystemInit+0x6c>)
 800240e:	2200      	movs	r2, #0
 8002410:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <SystemInit+0x6c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a09      	ldr	r2, [pc, #36]	; (800243c <SystemInit+0x6c>)
 8002418:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800241e:	4b07      	ldr	r3, [pc, #28]	; (800243c <SystemInit+0x6c>)
 8002420:	2200      	movs	r2, #0
 8002422:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <SystemInit+0x68>)
 8002426:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800242a:	609a      	str	r2, [r3, #8]
  #endif
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000ed00 	.word	0xe000ed00
 800243c:	46020c00 	.word	0x46020c00

08002440 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002478 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002444:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002446:	e003      	b.n	8002450 <LoopCopyDataInit>

08002448 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800244a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800244c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800244e:	3104      	adds	r1, #4

08002450 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002450:	480b      	ldr	r0, [pc, #44]	; (8002480 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002454:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002456:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002458:	d3f6      	bcc.n	8002448 <CopyDataInit>
	ldr	r2, =_sbss
 800245a:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <LoopForever+0x12>)
	b	LoopFillZerobss
 800245c:	e002      	b.n	8002464 <LoopFillZerobss>

0800245e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800245e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002460:	f842 3b04 	str.w	r3, [r2], #4

08002464 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <LoopForever+0x16>)
	cmp	r2, r3
 8002466:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002468:	d3f9      	bcc.n	800245e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800246a:	f7ff ffb1 	bl	80023d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800246e:	f008 fc0f 	bl	800ac90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002472:	f7fe f8c7 	bl	8000604 <main>

08002476 <LoopForever>:

LoopForever:
    b LoopForever
 8002476:	e7fe      	b.n	8002476 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002478:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800247c:	080156bc 	.word	0x080156bc
	ldr	r0, =_sdata
 8002480:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002484:	20000025 	.word	0x20000025
	ldr	r2, =_sbss
 8002488:	20000028 	.word	0x20000028
	ldr	r3, = _ebss
 800248c:	200010f0 	.word	0x200010f0

08002490 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002490:	e7fe      	b.n	8002490 <ADC1_IRQHandler>
	...

08002494 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002498:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <HAL_Init+0x4c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a10      	ldr	r2, [pc, #64]	; (80024e0 <HAL_Init+0x4c>)
 800249e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a4:	2003      	movs	r0, #3
 80024a6:	f000 fd43 	bl	8002f30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80024aa:	f003 fb01 	bl	8005ab0 <HAL_RCC_GetSysClockFreq>
 80024ae:	4602      	mov	r2, r0
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_Init+0x50>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	490b      	ldr	r1, [pc, #44]	; (80024e8 <HAL_Init+0x54>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
 80024c0:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <HAL_Init+0x58>)
 80024c2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024c4:	2000      	movs	r0, #0
 80024c6:	f000 f813 	bl	80024f0 <HAL_InitTick>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e002      	b.n	80024da <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024d4:	f7ff fcea 	bl	8001eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40022000 	.word	0x40022000
 80024e4:	46020c00 	.word	0x46020c00
 80024e8:	080155ac 	.word	0x080155ac
 80024ec:	2000001c 	.word	0x2000001c

080024f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80024f8:	4b15      	ldr	r3, [pc, #84]	; (8002550 <HAL_InitTick+0x60>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e021      	b.n	8002548 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002504:	4b13      	ldr	r3, [pc, #76]	; (8002554 <HAL_InitTick+0x64>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HAL_InitTick+0x60>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4619      	mov	r1, r3
 800250e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002512:	fbb3 f3f1 	udiv	r3, r3, r1
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fd3b 	bl	8002f96 <HAL_SYSTICK_Config>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e00e      	b.n	8002548 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b0f      	cmp	r3, #15
 800252e:	d80a      	bhi.n	8002546 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002530:	2200      	movs	r2, #0
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
 8002538:	f000 fd05 	bl	8002f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800253c:	4a06      	ldr	r2, [pc, #24]	; (8002558 <HAL_InitTick+0x68>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e000      	b.n	8002548 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000024 	.word	0x20000024
 8002554:	2000001c 	.word	0x2000001c
 8002558:	20000020 	.word	0x20000020

0800255c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_IncTick+0x20>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_IncTick+0x24>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4413      	add	r3, r2
 800256c:	4a04      	ldr	r2, [pc, #16]	; (8002580 <HAL_IncTick+0x24>)
 800256e:	6013      	str	r3, [r2, #0]
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000024 	.word	0x20000024
 8002580:	200010ec 	.word	0x200010ec

08002584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return uwTick;
 8002588:	4b03      	ldr	r3, [pc, #12]	; (8002598 <HAL_GetTick+0x14>)
 800258a:	681b      	ldr	r3, [r3, #0]
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	200010ec 	.word	0x200010ec

0800259c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025a4:	f7ff ffee 	bl	8002584 <HAL_GetTick>
 80025a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d005      	beq.n	80025c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <HAL_Delay+0x44>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4413      	add	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025c2:	bf00      	nop
 80025c4:	f7ff ffde 	bl	8002584 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d8f7      	bhi.n	80025c4 <HAL_Delay+0x28>
  {
  }
}
 80025d4:	bf00      	nop
 80025d6:	bf00      	nop
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000024 	.word	0x20000024

080025e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	601a      	str	r2, [r3, #0]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800261c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	2a00      	cmp	r2, #0
 8002634:	d002      	beq.n	800263c <LL_ADC_SetGainCompensation+0x32>
 8002636:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800263a:	e000      	b.n	800263e <LL_ADC_SetGainCompensation+0x34>
 800263c:	2200      	movs	r2, #0
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	671a      	str	r2, [r3, #112]	; 0x70
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	695a      	ldr	r2, [r3, #20]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2107      	movs	r1, #7
 8002668:	fa01 f303 	lsl.w	r3, r1, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	401a      	ands	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	431a      	orrs	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800269e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6093      	str	r3, [r2, #8]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026c6:	d101      	bne.n	80026cc <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026ee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	609a      	str	r2, [r3, #8]
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002716:	d101      	bne.n	800271c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <LL_ADC_IsEnabled+0x18>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <LL_ADC_IsEnabled+0x1a>
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b04      	cmp	r3, #4
 8002762:	d101      	bne.n	8002768 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b08      	cmp	r3, #8
 8002788:	d101      	bne.n	800278e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	; 0x28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e2e3      	b.n	8002d84 <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a92      	ldr	r2, [pc, #584]	; (8002a14 <HAL_ADC_Init+0x278>)
 80027ca:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d109      	bne.n	80027e8 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff fb85 	bl	8001ee4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff60 	bl	80026b2 <LL_ADC_IsDeepPowerDownEnabled>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d004      	beq.n	8002802 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff46 	bl	800268e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff ff7b 	bl	8002702 <LL_ADC_IsInternalRegulatorEnabled>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d115      	bne.n	800283e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff ff5f 	bl	80026da <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800281c:	4b7e      	ldr	r3, [pc, #504]	; (8002a18 <HAL_ADC_Init+0x27c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	099b      	lsrs	r3, r3, #6
 8002822:	4a7e      	ldr	r2, [pc, #504]	; (8002a1c <HAL_ADC_Init+0x280>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	099b      	lsrs	r3, r3, #6
 800282a:	3301      	adds	r3, #1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002830:	e002      	b.n	8002838 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	3b01      	subs	r3, #1
 8002836:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f9      	bne.n	8002832 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ff5d 	bl	8002702 <LL_ADC_IsInternalRegulatorEnabled>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10e      	bne.n	800286c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002852:	f043 0210 	orr.w	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800285e:	f043 0201 	orr.w	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff6d 	bl	8002750 <LL_ADC_REG_IsConversionOngoing>
 8002876:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b00      	cmp	r3, #0
 8002882:	f040 8274 	bne.w	8002d6e <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b00      	cmp	r3, #0
 800288a:	f040 8270 	bne.w	8002d6e <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002892:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002896:	f043 0202 	orr.w	r2, r3, #2
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff ff41 	bl	800272a <LL_ADC_IsEnabled>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d14e      	bne.n	800294c <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a58      	ldr	r2, [pc, #352]	; (8002a14 <HAL_ADC_Init+0x278>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d028      	beq.n	800290a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a58      	ldr	r2, [pc, #352]	; (8002a20 <HAL_ADC_Init+0x284>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d109      	bne.n	80028d6 <HAL_ADC_Init+0x13a>
 80028c2:	4857      	ldr	r0, [pc, #348]	; (8002a20 <HAL_ADC_Init+0x284>)
 80028c4:	f7ff ff31 	bl	800272a <LL_ADC_IsEnabled>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	bf0c      	ite	eq
 80028ce:	2301      	moveq	r3, #1
 80028d0:	2300      	movne	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	e008      	b.n	80028e8 <HAL_ADC_Init+0x14c>
 80028d6:	484f      	ldr	r0, [pc, #316]	; (8002a14 <HAL_ADC_Init+0x278>)
 80028d8:	f7ff ff27 	bl	800272a <LL_ADC_IsEnabled>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bf0c      	ite	eq
 80028e2:	2301      	moveq	r3, #1
 80028e4:	2300      	movne	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d02f      	beq.n	800294c <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a4b      	ldr	r2, [pc, #300]	; (8002a20 <HAL_ADC_Init+0x284>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d101      	bne.n	80028fa <HAL_ADC_Init+0x15e>
 80028f6:	4a4b      	ldr	r2, [pc, #300]	; (8002a24 <HAL_ADC_Init+0x288>)
 80028f8:	e000      	b.n	80028fc <HAL_ADC_Init+0x160>
 80028fa:	4a4b      	ldr	r2, [pc, #300]	; (8002a28 <HAL_ADC_Init+0x28c>)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4619      	mov	r1, r3
 8002902:	4610      	mov	r0, r2
 8002904:	f7ff fe6e 	bl	80025e4 <LL_ADC_SetCommonClock>
 8002908:	e020      	b.n	800294c <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f023 010c 	bic.w	r1, r3, #12
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800291c:	4293      	cmp	r3, r2
 800291e:	d005      	beq.n	800292c <HAL_ADC_Init+0x190>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	3b01      	subs	r3, #1
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	e000      	b.n	800292e <HAL_ADC_Init+0x192>
 800292c:	230c      	movs	r3, #12
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	430b      	orrs	r3, r1
 8002934:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8002936:	4b3c      	ldr	r3, [pc, #240]	; (8002a28 <HAL_ADC_Init+0x28c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002946:	4938      	ldr	r1, [pc, #224]	; (8002a28 <HAL_ADC_Init+0x28c>)
 8002948:	4313      	orrs	r3, r2
 800294a:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a30      	ldr	r2, [pc, #192]	; (8002a14 <HAL_ADC_Init+0x278>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d010      	beq.n	8002978 <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800295c:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002962:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8002968:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002970:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002972:	4313      	orrs	r3, r2
 8002974:	623b      	str	r3, [r7, #32]
 8002976:	e030      	b.n	80029da <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7f1b      	ldrb	r3, [r3, #28]
 800297c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002984:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002986:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800298c:	2a00      	cmp	r2, #0
 800298e:	d002      	beq.n	8002996 <HAL_ADC_Init+0x1fa>
 8002990:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002994:	e000      	b.n	8002998 <HAL_ADC_Init+0x1fc>
 8002996:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002998:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800299e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	da04      	bge.n	80029b2 <HAL_ADC_Init+0x216>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029b0:	e001      	b.n	80029b6 <HAL_ADC_Init+0x21a>
 80029b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 80029b6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4918      	ldr	r1, [pc, #96]	; (8002a20 <HAL_ADC_Init+0x284>)
 80029be:	428b      	cmp	r3, r1
 80029c0:	d103      	bne.n	80029ca <HAL_ADC_Init+0x22e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029c8:	e003      	b.n	80029d2 <HAL_ADC_Init+0x236>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80029d2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029d4:	6a3a      	ldr	r2, [r7, #32]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d12f      	bne.n	8002a44 <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <HAL_ADC_Init+0x278>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d007      	beq.n	80029fe <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	3b01      	subs	r3, #1
 80029f4:	045b      	lsls	r3, r3, #17
 80029f6:	6a3a      	ldr	r2, [r7, #32]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	623b      	str	r3, [r7, #32]
 80029fc:	e022      	b.n	8002a44 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d111      	bne.n	8002a2c <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0e:	623b      	str	r3, [r7, #32]
 8002a10:	e018      	b.n	8002a44 <HAL_ADC_Init+0x2a8>
 8002a12:	bf00      	nop
 8002a14:	46021000 	.word	0x46021000
 8002a18:	2000001c 	.word	0x2000001c
 8002a1c:	053e2d63 	.word	0x053e2d63
 8002a20:	42028000 	.word	0x42028000
 8002a24:	42028308 	.word	0x42028308
 8002a28:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a30:	f043 0220 	orr.w	r2, r3, #32
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a3c:	f043 0201 	orr.w	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a93      	ldr	r2, [pc, #588]	; (8002c98 <HAL_ADC_Init+0x4fc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d018      	beq.n	8002a80 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	4313      	orrs	r3, r2
 8002a64:	6a3a      	ldr	r2, [r7, #32]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	4b8a      	ldr	r3, [pc, #552]	; (8002c9c <HAL_ADC_Init+0x500>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	6a39      	ldr	r1, [r7, #32]
 8002a7a:	430b      	orrs	r3, r1
 8002a7c:	60d3      	str	r3, [r2, #12]
 8002a7e:	e033      	b.n	8002ae8 <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d009      	beq.n	8002a9c <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a94:	4313      	orrs	r3, r2
 8002a96:	6a3a      	ldr	r2, [r7, #32]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 8002aa6:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	6a39      	ldr	r1, [r7, #32]
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1a      	ldr	r2, [r3, #32]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d008      	beq.n	8002ae8 <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a6a      	ldr	r2, [pc, #424]	; (8002c98 <HAL_ADC_Init+0x4fc>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	f000 8093 	beq.w	8002c1a <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fe29 	bl	8002750 <LL_ADC_REG_IsConversionOngoing>
 8002afe:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fe36 	bl	8002776 <LL_ADC_INJ_IsConversionOngoing>
 8002b0a:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d161      	bne.n	8002bd6 <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d15e      	bne.n	8002bd6 <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7f1b      	ldrb	r3, [r3, #28]
 8002b1c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	495f      	ldr	r1, [pc, #380]	; (8002ca0 <HAL_ADC_Init+0x504>)
 8002b24:	428b      	cmp	r3, r1
 8002b26:	d102      	bne.n	8002b2e <HAL_ADC_Init+0x392>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2c:	e002      	b.n	8002b34 <HAL_ADC_Init+0x398>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b32:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b34:	4313      	orrs	r3, r2
 8002b36:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b42:	f023 0303 	bic.w	r3, r3, #3
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6812      	ldr	r2, [r2, #0]
 8002b4a:	6a39      	ldr	r1, [r7, #32]
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d007      	beq.n	8002b68 <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4619      	mov	r1, r3
 8002b62:	4610      	mov	r0, r2
 8002b64:	f7ff fd51 	bl	800260a <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d11e      	bne.n	8002bb0 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b76:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	4b49      	ldr	r3, [pc, #292]	; (8002ca4 <HAL_ADC_Init+0x508>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002b86:	0411      	lsls	r1, r2, #16
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b8c:	4311      	orrs	r1, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002b92:	4311      	orrs	r1, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002b98:	4311      	orrs	r1, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b9e:	0892      	lsrs	r2, r2, #2
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0201 	orr.w	r2, r2, #1
 8002bac:	611a      	str	r2, [r3, #16]
 8002bae:	e007      	b.n	8002bc0 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	f023 010f 	bic.w	r1, r3, #15
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	1e5a      	subs	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf6:	e007      	b.n	8002c08 <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 020f 	bic.w	r2, r2, #15
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c0c:	f023 0303 	bic.w	r3, r3, #3
 8002c10:	f043 0201 	orr.w	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002c18:	e0b2      	b.n	8002d80 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002c22:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 8002c28:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 8002c2e:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d103      	bne.n	8002c48 <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <HAL_ADC_Init+0x50c>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	69f9      	ldr	r1, [r7, #28]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6818      	ldr	r0, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c64:	461a      	mov	r2, r3
 8002c66:	2100      	movs	r1, #0
 8002c68:	f7ff fcf2 	bl	8002650 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c74:	461a      	mov	r2, r3
 8002c76:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8002c7a:	f7ff fce9 	bl	8002650 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d112      	bne.n	8002cac <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f062 020f 	orn	r2, r2, #15
 8002c94:	629a      	str	r2, [r3, #40]	; 0x28
 8002c96:	e044      	b.n	8002d22 <HAL_ADC_Init+0x586>
 8002c98:	46021000 	.word	0x46021000
 8002c9c:	fff0c013 	.word	0xfff0c013
 8002ca0:	42028000 	.word	0x42028000
 8002ca4:	fc00f81e 	.word	0xfc00f81e
 8002ca8:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cb4:	d135      	bne.n	8002d22 <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	e00d      	b.n	8002cd8 <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	2b0f      	cmp	r3, #15
 8002cd0:	d006      	beq.n	8002ce0 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2b07      	cmp	r3, #7
 8002cdc:	d9ee      	bls.n	8002cbc <HAL_ADC_Init+0x520>
 8002cde:	e000      	b.n	8002ce2 <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 8002ce0:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d108      	bne.n	8002cfa <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f062 020f 	orn	r2, r2, #15
 8002cf6:	629a      	str	r2, [r3, #40]	; 0x28
 8002cf8:	e013      	b.n	8002d22 <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	3b01      	subs	r3, #1
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	f003 031c 	and.w	r3, r3, #28
 8002d0c:	f06f 020f 	mvn.w	r2, #15
 8002d10:	fa02 f103 	lsl.w	r1, r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	4b18      	ldr	r3, [pc, #96]	; (8002d8c <HAL_ADC_Init+0x5f0>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	6a3a      	ldr	r2, [r7, #32]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d10b      	bne.n	8002d4a <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d3c:	f023 0303 	bic.w	r3, r3, #3
 8002d40:	f043 0201 	orr.w	r2, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002d48:	e01a      	b.n	8002d80 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d4e:	f023 0312 	bic.w	r3, r3, #18
 8002d52:	f043 0210 	orr.w	r2, r3, #16
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d5e:	f043 0201 	orr.w	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002d6c:	e008      	b.n	8002d80 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d72:	f043 0210 	orr.w	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8002d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3728      	adds	r7, #40	; 0x28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	833ffff3 	.word	0x833ffff3

08002d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da0:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dac:	4013      	ands	r3, r2
 8002dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc2:	4a04      	ldr	r2, [pc, #16]	; (8002dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	60d3      	str	r3, [r2, #12]
}
 8002dc8:	bf00      	nop
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	0a1b      	lsrs	r3, r3, #8
 8002de2:	f003 0307 	and.w	r3, r3, #7
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	db0b      	blt.n	8002e1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	f003 021f 	and.w	r2, r3, #31
 8002e0c:	4907      	ldr	r1, [pc, #28]	; (8002e2c <__NVIC_EnableIRQ+0x38>)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	2001      	movs	r0, #1
 8002e16:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	e000e100 	.word	0xe000e100

08002e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	db0a      	blt.n	8002e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	490c      	ldr	r1, [pc, #48]	; (8002e7c <__NVIC_SetPriority+0x4c>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	0112      	lsls	r2, r2, #4
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	440b      	add	r3, r1
 8002e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e58:	e00a      	b.n	8002e70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4908      	ldr	r1, [pc, #32]	; (8002e80 <__NVIC_SetPriority+0x50>)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	3b04      	subs	r3, #4
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	761a      	strb	r2, [r3, #24]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000e100 	.word	0xe000e100
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	; 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f1c3 0307 	rsb	r3, r3, #7
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	bf28      	it	cs
 8002ea2:	2304      	movcs	r3, #4
 8002ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	2b06      	cmp	r3, #6
 8002eac:	d902      	bls.n	8002eb4 <NVIC_EncodePriority+0x30>
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3b03      	subs	r3, #3
 8002eb2:	e000      	b.n	8002eb6 <NVIC_EncodePriority+0x32>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43d9      	mvns	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	4313      	orrs	r3, r2
         );
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3724      	adds	r7, #36	; 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002efc:	d301      	bcc.n	8002f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002efe:	2301      	movs	r3, #1
 8002f00:	e00f      	b.n	8002f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f02:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <SysTick_Config+0x40>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f0a:	210f      	movs	r1, #15
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f10:	f7ff ff8e 	bl	8002e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <SysTick_Config+0x40>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f1a:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <SysTick_Config+0x40>)
 8002f1c:	2207      	movs	r2, #7
 8002f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	e000e010 	.word	0xe000e010

08002f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ff29 	bl	8002d90 <__NVIC_SetPriorityGrouping>
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b086      	sub	sp, #24
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f54:	f7ff ff40 	bl	8002dd8 <__NVIC_GetPriorityGrouping>
 8002f58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	6978      	ldr	r0, [r7, #20]
 8002f60:	f7ff ff90 	bl	8002e84 <NVIC_EncodePriority>
 8002f64:	4602      	mov	r2, r0
 8002f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff5f 	bl	8002e30 <__NVIC_SetPriority>
}
 8002f72:	bf00      	nop
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff33 	bl	8002df4 <__NVIC_EnableIRQ>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ffa4 	bl	8002eec <SysTick_Config>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e04f      	b.n	8003066 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_DMA_Start_IT+0x26>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e048      	b.n	8003066 <HAL_DMA_Start_IT+0xb8>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d136      	bne.n	8003056 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	68b9      	ldr	r1, [r7, #8]
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f842 	bl	8003086 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8003010:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003016:	2b00      	cmp	r3, #0
 8003018:	d007      	beq.n	800302a <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003028:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003040:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 0201 	orr.w	r2, r2, #1
 8003050:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	e007      	b.n	8003066 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2240      	movs	r2, #64	; 0x40
 800305a:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8003086:	b480      	push	{r7}
 8003088:	b085      	sub	sp, #20
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800309a:	0c1b      	lsrs	r3, r3, #16
 800309c:	041b      	lsls	r3, r3, #16
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	b291      	uxth	r1, r2
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	430b      	orrs	r3, r1
 80030a8:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80030b2:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_DMAEx_List_Start_IT+0x16>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e082      	b.n	80031f0 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80030f0:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fc:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d005      	beq.n	8003110 <HAL_DMAEx_List_Start_IT+0x40>
 8003104:	7dfb      	ldrb	r3, [r7, #23]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d16a      	bne.n	80031e0 <HAL_DMAEx_List_Start_IT+0x110>
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d067      	beq.n	80031e0 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d157      	bne.n	80031cc <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_DMAEx_List_Start_IT+0x5a>
 8003126:	2302      	movs	r3, #2
 8003128:	e062      	b.n	80031f0 <HAL_DMAEx_List_Start_IT+0x120>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2202      	movs	r2, #2
 8003136:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313e:	2202      	movs	r2, #2
 8003140:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314c:	2200      	movs	r2, #0
 800314e:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 800315e:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003164:	2b00      	cmp	r3, #0
 8003166:	d007      	beq.n	8003178 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003176:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	2b00      	cmp	r3, #0
 800317e:	d007      	beq.n	8003190 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800318e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f107 010c 	add.w	r1, r7, #12
 800319a:	2200      	movs	r2, #0
 800319c:	4618      	mov	r0, r3
 800319e:	f000 f82b 	bl	80031f8 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4619      	mov	r1, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	0c0b      	lsrs	r3, r1, #16
 80031b0:	041b      	lsls	r3, r3, #16
 80031b2:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80031c0:	4013      	ands	r3, r2
 80031c2:	68f9      	ldr	r1, [r7, #12]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	430b      	orrs	r3, r1
 80031ca:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695a      	ldr	r2, [r3, #20]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	e007      	b.n	80031f0 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2240      	movs	r2, #64	; 0x40
 80031e4:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00c      	beq.n	800322a <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	4a0d      	ldr	r2, [pc, #52]	; (8003250 <DMA_List_GetCLLRNodeInfo+0x58>)
 800321a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00f      	beq.n	8003242 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2207      	movs	r2, #7
 8003226:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8003228:	e00b      	b.n	8003242 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4a08      	ldr	r2, [pc, #32]	; (8003254 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8003234:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2205      	movs	r2, #5
 8003240:	601a      	str	r2, [r3, #0]
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	fe010000 	.word	0xfe010000
 8003254:	f8010000 	.word	0xf8010000

08003258 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003258:	b480      	push	{r7}
 800325a:	b089      	sub	sp, #36	; 0x24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800326a:	e1ba      	b.n	80035e2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2101      	movs	r1, #1
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	fa01 f303 	lsl.w	r3, r1, r3
 8003278:	4013      	ands	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 81aa 	beq.w	80035dc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a55      	ldr	r2, [pc, #340]	; (80033e0 <HAL_GPIO_Init+0x188>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d15d      	bne.n	800334c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003296:	2201      	movs	r2, #1
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 0201 	and.w	r2, r3, #1
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80032c0:	4a48      	ldr	r2, [pc, #288]	; (80033e4 <HAL_GPIO_Init+0x18c>)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032c8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80032ca:	4a46      	ldr	r2, [pc, #280]	; (80033e4 <HAL_GPIO_Init+0x18c>)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	4413      	add	r3, r2
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	08da      	lsrs	r2, r3, #3
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	3208      	adds	r2, #8
 80032de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	220f      	movs	r2, #15
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	4013      	ands	r3, r2
 80032f8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	220b      	movs	r2, #11
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	4313      	orrs	r3, r2
 800330c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	08da      	lsrs	r2, r3, #3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	3208      	adds	r2, #8
 8003316:	69f9      	ldr	r1, [r7, #28]
 8003318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	2203      	movs	r2, #3
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	4013      	ands	r3, r2
 8003332:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	2202      	movs	r2, #2
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	69fa      	ldr	r2, [r7, #28]
 8003340:	4313      	orrs	r3, r2
 8003342:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	69fa      	ldr	r2, [r7, #28]
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	e067      	b.n	800341c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d003      	beq.n	800335c <HAL_GPIO_Init+0x104>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b12      	cmp	r3, #18
 800335a:	d145      	bne.n	80033e8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	08da      	lsrs	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3208      	adds	r2, #8
 8003364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003368:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	220f      	movs	r2, #15
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	4013      	ands	r3, r2
 800337e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f003 020f 	and.w	r2, r3, #15
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	4313      	orrs	r3, r2
 8003398:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	08da      	lsrs	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3208      	adds	r2, #8
 80033a2:	69f9      	ldr	r1, [r7, #28]
 80033a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	2203      	movs	r2, #3
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69fa      	ldr	r2, [r7, #28]
 80033bc:	4013      	ands	r3, r2
 80033be:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 0203 	and.w	r2, r3, #3
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	e01e      	b.n	800341c <HAL_GPIO_Init+0x1c4>
 80033de:	bf00      	nop
 80033e0:	46020000 	.word	0x46020000
 80033e4:	08015604 	.word	0x08015604
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	2203      	movs	r2, #3
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 0203 	and.w	r2, r3, #3
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69fa      	ldr	r2, [r7, #28]
 8003412:	4313      	orrs	r3, r2
 8003414:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d00b      	beq.n	800343c <HAL_GPIO_Init+0x1e4>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d007      	beq.n	800343c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003430:	2b11      	cmp	r3, #17
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b12      	cmp	r3, #18
 800343a:	d130      	bne.n	800349e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2203      	movs	r2, #3
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	4013      	ands	r3, r2
 8003452:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	69fa      	ldr	r2, [r7, #28]
 8003462:	4313      	orrs	r3, r2
 8003464:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003472:	2201      	movs	r2, #1
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	4013      	ands	r3, r2
 8003480:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	091b      	lsrs	r3, r3, #4
 8003488:	f003 0201 	and.w	r2, r3, #1
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	4313      	orrs	r3, r2
 8003496:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d017      	beq.n	80034d6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	2203      	movs	r2, #3
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	4013      	ands	r3, r2
 80034bc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d07c      	beq.n	80035dc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80034e2:	4a47      	ldr	r2, [pc, #284]	; (8003600 <HAL_GPIO_Init+0x3a8>)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	089b      	lsrs	r3, r3, #2
 80034e8:	3318      	adds	r3, #24
 80034ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ee:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	220f      	movs	r2, #15
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43db      	mvns	r3, r3
 8003500:	69fa      	ldr	r2, [r7, #28]
 8003502:	4013      	ands	r3, r2
 8003504:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	0a9a      	lsrs	r2, r3, #10
 800350a:	4b3e      	ldr	r3, [pc, #248]	; (8003604 <HAL_GPIO_Init+0x3ac>)
 800350c:	4013      	ands	r3, r2
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	f002 0203 	and.w	r2, r2, #3
 8003514:	00d2      	lsls	r2, r2, #3
 8003516:	4093      	lsls	r3, r2
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	4313      	orrs	r3, r2
 800351c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800351e:	4938      	ldr	r1, [pc, #224]	; (8003600 <HAL_GPIO_Init+0x3a8>)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	3318      	adds	r3, #24
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800352c:	4b34      	ldr	r3, [pc, #208]	; (8003600 <HAL_GPIO_Init+0x3a8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	43db      	mvns	r3, r3
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	4013      	ands	r3, r2
 800353a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003548:	69fa      	ldr	r2, [r7, #28]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003550:	4a2b      	ldr	r2, [pc, #172]	; (8003600 <HAL_GPIO_Init+0x3a8>)
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003556:	4b2a      	ldr	r3, [pc, #168]	; (8003600 <HAL_GPIO_Init+0x3a8>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	43db      	mvns	r3, r3
 8003560:	69fa      	ldr	r2, [r7, #28]
 8003562:	4013      	ands	r3, r2
 8003564:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800357a:	4a21      	ldr	r2, [pc, #132]	; (8003600 <HAL_GPIO_Init+0x3a8>)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003580:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <HAL_GPIO_Init+0x3a8>)
 8003582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003586:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	43db      	mvns	r3, r3
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	4013      	ands	r3, r2
 8003590:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80035a6:	4a16      	ldr	r2, [pc, #88]	; (8003600 <HAL_GPIO_Init+0x3a8>)
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80035ae:	4b14      	ldr	r3, [pc, #80]	; (8003600 <HAL_GPIO_Init+0x3a8>)
 80035b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	4013      	ands	r3, r2
 80035be:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80035d4:	4a0a      	ldr	r2, [pc, #40]	; (8003600 <HAL_GPIO_Init+0x3a8>)
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	3301      	adds	r3, #1
 80035e0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f47f ae3d 	bne.w	800326c <HAL_GPIO_Init+0x14>
  }
}
 80035f2:	bf00      	nop
 80035f4:	bf00      	nop
 80035f6:	3724      	adds	r7, #36	; 0x24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	46022000 	.word	0x46022000
 8003604:	002f7f7f 	.word	0x002f7f7f

08003608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	807b      	strh	r3, [r7, #2]
 8003614:	4613      	mov	r3, r2
 8003616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003618:	787b      	ldrb	r3, [r7, #1]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800361e:	887a      	ldrh	r2, [r7, #2]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003624:	e002      	b.n	800362c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003626:	887a      	ldrh	r2, [r7, #2]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363a:	b08f      	sub	sp, #60	; 0x3c
 800363c:	af0a      	add	r7, sp, #40	; 0x28
 800363e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e116      	b.n	8003878 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d106      	bne.n	800366a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7fe fdeb 	bl	8002240 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2203      	movs	r2, #3
 800366e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d102      	bne.n	8003684 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f006 fdfb 	bl	800a284 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	687e      	ldr	r6, [r7, #4]
 8003696:	466d      	mov	r5, sp
 8003698:	f106 0410 	add.w	r4, r6, #16
 800369c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800369e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80036ac:	1d33      	adds	r3, r6, #4
 80036ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036b0:	6838      	ldr	r0, [r7, #0]
 80036b2:	f006 fd18 	bl	800a0e6 <USB_CoreInit>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0d7      	b.n	8003878 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2100      	movs	r1, #0
 80036ce:	4618      	mov	r0, r3
 80036d0:	f006 fde9 	bl	800a2a6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d4:	2300      	movs	r3, #0
 80036d6:	73fb      	strb	r3, [r7, #15]
 80036d8:	e04a      	b.n	8003770 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4413      	add	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	333d      	adds	r3, #61	; 0x3d
 80036ea:	2201      	movs	r2, #1
 80036ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036ee:	7bfa      	ldrb	r2, [r7, #15]
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	333c      	adds	r3, #60	; 0x3c
 80036fe:	7bfa      	ldrb	r2, [r7, #15]
 8003700:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003702:	7bfa      	ldrb	r2, [r7, #15]
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	b298      	uxth	r0, r3
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	3344      	adds	r3, #68	; 0x44
 8003716:	4602      	mov	r2, r0
 8003718:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800371a:	7bfa      	ldrb	r2, [r7, #15]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	3340      	adds	r3, #64	; 0x40
 800372a:	2200      	movs	r2, #0
 800372c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800372e:	7bfa      	ldrb	r2, [r7, #15]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	3348      	adds	r3, #72	; 0x48
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4413      	add	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	334c      	adds	r3, #76	; 0x4c
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003756:	7bfa      	ldrb	r2, [r7, #15]
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	4413      	add	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	3354      	adds	r3, #84	; 0x54
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	3301      	adds	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
 8003770:	7bfa      	ldrb	r2, [r7, #15]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	429a      	cmp	r2, r3
 8003778:	d3af      	bcc.n	80036da <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800377a:	2300      	movs	r3, #0
 800377c:	73fb      	strb	r3, [r7, #15]
 800377e:	e044      	b.n	800380a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003780:	7bfa      	ldrb	r2, [r7, #15]
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003792:	2200      	movs	r2, #0
 8003794:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003796:	7bfa      	ldrb	r2, [r7, #15]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80037a8:	7bfa      	ldrb	r2, [r7, #15]
 80037aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037ac:	7bfa      	ldrb	r2, [r7, #15]
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80037be:	2200      	movs	r2, #0
 80037c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037c2:	7bfa      	ldrb	r2, [r7, #15]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	4413      	add	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037d8:	7bfa      	ldrb	r2, [r7, #15]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037ee:	7bfa      	ldrb	r2, [r7, #15]
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	3301      	adds	r3, #1
 8003808:	73fb      	strb	r3, [r7, #15]
 800380a:	7bfa      	ldrb	r2, [r7, #15]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	429a      	cmp	r2, r3
 8003812:	d3b5      	bcc.n	8003780 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	603b      	str	r3, [r7, #0]
 800381a:	687e      	ldr	r6, [r7, #4]
 800381c:	466d      	mov	r5, sp
 800381e:	f106 0410 	add.w	r4, r6, #16
 8003822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003824:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800382a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800382e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003832:	1d33      	adds	r3, r6, #4
 8003834:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003836:	6838      	ldr	r0, [r7, #0]
 8003838:	f006 fd82 	bl	800a340 <USB_DevInit>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2202      	movs	r2, #2
 8003846:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e014      	b.n	8003878 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	2b01      	cmp	r3, #1
 8003864:	d102      	bne.n	800386c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 ff38 	bl	80046dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f007 f895 	bl	800a9a0 <USB_DevDisconnect>

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003880 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b08d      	sub	sp, #52	; 0x34
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f007 f936 	bl	800ab08 <USB_GetMode>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f040 84b7 	bne.w	8004212 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f007 f89a 	bl	800a9e2 <USB_ReadInterrupts>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 84ad 	beq.w	8004210 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	0a1b      	lsrs	r3, r3, #8
 80038c0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f007 f887 	bl	800a9e2 <USB_ReadInterrupts>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d107      	bne.n	80038ee <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f002 0202 	and.w	r2, r2, #2
 80038ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f007 f875 	bl	800a9e2 <USB_ReadInterrupts>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b10      	cmp	r3, #16
 8003900:	d161      	bne.n	80039c6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699a      	ldr	r2, [r3, #24]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0210 	bic.w	r2, r2, #16
 8003910:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	f003 020f 	and.w	r2, r3, #15
 800391e:	4613      	mov	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4413      	add	r3, r2
 800392e:	3304      	adds	r3, #4
 8003930:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	0c5b      	lsrs	r3, r3, #17
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	2b02      	cmp	r3, #2
 800393c:	d124      	bne.n	8003988 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003944:	4013      	ands	r3, r2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d035      	beq.n	80039b6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003954:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003958:	b29b      	uxth	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	6a38      	ldr	r0, [r7, #32]
 800395e:	f006 ffc7 	bl	800a8f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	691a      	ldr	r2, [r3, #16]
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800396e:	441a      	add	r2, r3
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	091b      	lsrs	r3, r3, #4
 800397c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003980:	441a      	add	r2, r3
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	621a      	str	r2, [r3, #32]
 8003986:	e016      	b.n	80039b6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	0c5b      	lsrs	r3, r3, #17
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	2b06      	cmp	r3, #6
 8003992:	d110      	bne.n	80039b6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800399a:	2208      	movs	r2, #8
 800399c:	4619      	mov	r1, r3
 800399e:	6a38      	ldr	r0, [r7, #32]
 80039a0:	f006 ffa6 	bl	800a8f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	6a1a      	ldr	r2, [r3, #32]
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039b0:	441a      	add	r2, r3
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699a      	ldr	r2, [r3, #24]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 0210 	orr.w	r2, r2, #16
 80039c4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f007 f809 	bl	800a9e2 <USB_ReadInterrupts>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039da:	f040 80a7 	bne.w	8003b2c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f007 f80e 	bl	800aa08 <USB_ReadDevAllOutEpInterrupt>
 80039ec:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80039ee:	e099      	b.n	8003b24 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80039f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 808e 	beq.w	8003b18 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	4611      	mov	r1, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f007 f832 	bl	800aa70 <USB_ReadDevOutEPInterrupt>
 8003a0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00c      	beq.n	8003a32 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a24:	461a      	mov	r2, r3
 8003a26:	2301      	movs	r3, #1
 8003a28:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fd27 	bl	8004480 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00c      	beq.n	8003a56 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2308      	movs	r3, #8
 8003a4c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fdfd 	bl	8004650 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	2310      	movs	r3, #16
 8003a70:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d030      	beq.n	8003ade <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a84:	2b80      	cmp	r3, #128	; 0x80
 8003a86:	d109      	bne.n	8003a9c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a9a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	3304      	adds	r3, #4
 8003ab0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	78db      	ldrb	r3, [r3, #3]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d108      	bne.n	8003acc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2200      	movs	r2, #0
 8003abe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fbf0 	bl	80042ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2302      	movs	r3, #2
 8003adc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af4:	461a      	mov	r2, r3
 8003af6:	2320      	movs	r3, #32
 8003af8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d009      	beq.n	8003b18 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b10:	461a      	mov	r2, r3
 8003b12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b16:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b20:	085b      	lsrs	r3, r3, #1
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f47f af62 	bne.w	80039f0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f006 ff56 	bl	800a9e2 <USB_ReadInterrupts>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b40:	f040 80db 	bne.w	8003cfa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f006 ff77 	bl	800aa3c <USB_ReadDevAllInEpInterrupt>
 8003b4e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b54:	e0cd      	b.n	8003cf2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80c2 	beq.w	8003ce6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f006 ff9d 	bl	800aaac <USB_ReadDevInEPInterrupt>
 8003b72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d057      	beq.n	8003c2e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	2201      	movs	r2, #1
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	43db      	mvns	r3, r3
 8003b98:	69f9      	ldr	r1, [r7, #28]
 8003b9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bae:	461a      	mov	r2, r3
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d132      	bne.n	8003c22 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	334c      	adds	r3, #76	; 0x4c
 8003bcc:	6819      	ldr	r1, [r3, #0]
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4403      	add	r3, r0
 8003bdc:	3348      	adds	r3, #72	; 0x48
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4419      	add	r1, r3
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be6:	4613      	mov	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4403      	add	r3, r0
 8003bf0:	334c      	adds	r3, #76	; 0x4c
 8003bf2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d113      	bne.n	8003c22 <HAL_PCD_IRQHandler+0x3a2>
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfe:	4613      	mov	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	4413      	add	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	3354      	adds	r3, #84	; 0x54
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d108      	bne.n	8003c22 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	f006 ffa5 	bl	800ab6c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	4619      	mov	r1, r3
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fb01 	bl	8004230 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f003 0308 	and.w	r3, r3, #8
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c44:	461a      	mov	r2, r3
 8003c46:	2308      	movs	r3, #8
 8003c48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f003 0310 	and.w	r3, r3, #16
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c60:	461a      	mov	r2, r3
 8003c62:	2310      	movs	r3, #16
 8003c64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	2340      	movs	r3, #64	; 0x40
 8003c80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d023      	beq.n	8003cd4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003c8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c8e:	6a38      	ldr	r0, [r7, #32]
 8003c90:	f006 fca4 	bl	800a5dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	3338      	adds	r3, #56	; 0x38
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	78db      	ldrb	r3, [r3, #3]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d108      	bne.n	8003cc2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	4619      	mov	r1, r3
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fb01 	bl	80042c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cce:	461a      	mov	r2, r3
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003cde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fb40 	bl	8004366 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	3301      	adds	r3, #1
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cee:	085b      	lsrs	r3, r3, #1
 8003cf0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f47f af2e 	bne.w	8003b56 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f006 fe6f 	bl	800a9e2 <USB_ReadInterrupts>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d0e:	d122      	bne.n	8003d56 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d1e:	f023 0301 	bic.w	r3, r3, #1
 8003d22:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d108      	bne.n	8003d40 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d36:	2100      	movs	r1, #0
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fcf3 	bl	8004724 <HAL_PCDEx_LPM_Callback>
 8003d3e:	e002      	b.n	8003d46 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 faa9 	bl	8004298 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f006 fe41 	bl	800a9e2 <USB_ReadInterrupts>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d6a:	d112      	bne.n	8003d92 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d102      	bne.n	8003d82 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fa81 	bl	8004284 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695a      	ldr	r2, [r3, #20]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003d90:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f006 fe23 	bl	800a9e2 <USB_ReadInterrupts>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003da2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003da6:	d121      	bne.n	8003dec <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695a      	ldr	r2, [r3, #20]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003db6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d111      	bne.n	8003de6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd0:	089b      	lsrs	r3, r3, #2
 8003dd2:	f003 020f 	and.w	r2, r3, #15
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003ddc:	2101      	movs	r1, #1
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fca0 	bl	8004724 <HAL_PCDEx_LPM_Callback>
 8003de4:	e002      	b.n	8003dec <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fa4c 	bl	8004284 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f006 fdf6 	bl	800a9e2 <USB_ReadInterrupts>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e00:	f040 80b7 	bne.w	8003f72 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e12:	f023 0301 	bic.w	r3, r3, #1
 8003e16:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2110      	movs	r1, #16
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f006 fbdc 	bl	800a5dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e24:	2300      	movs	r3, #0
 8003e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e28:	e046      	b.n	8003eb8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e36:	461a      	mov	r2, r3
 8003e38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e3c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e4e:	0151      	lsls	r1, r2, #5
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	440a      	add	r2, r1
 8003e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e70:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e82:	0151      	lsls	r1, r2, #5
 8003e84:	69fa      	ldr	r2, [r7, #28]
 8003e86:	440a      	add	r2, r1
 8003e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea2:	0151      	lsls	r1, r2, #5
 8003ea4:	69fa      	ldr	r2, [r7, #28]
 8003ea6:	440a      	add	r2, r1
 8003ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003eb0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d3b3      	bcc.n	8003e2a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ed0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003ed4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d016      	beq.n	8003f0c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee8:	69fa      	ldr	r2, [r7, #28]
 8003eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eee:	f043 030b 	orr.w	r3, r3, #11
 8003ef2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f04:	f043 030b 	orr.w	r3, r3, #11
 8003f08:	6453      	str	r3, [r2, #68]	; 0x44
 8003f0a:	e015      	b.n	8003f38 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f1e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003f22:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	69fa      	ldr	r2, [r7, #28]
 8003f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f32:	f043 030b 	orr.w	r3, r3, #11
 8003f36:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f46:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f4a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	f006 fe05 	bl	800ab6c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695a      	ldr	r2, [r3, #20]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003f70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f006 fd33 	bl	800a9e2 <USB_ReadInterrupts>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f86:	d124      	bne.n	8003fd2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f006 fdc9 	bl	800ab24 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f006 fb9d 	bl	800a6d6 <USB_GetDevSpeed>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681c      	ldr	r4, [r3, #0]
 8003fa8:	f001 fe8a 	bl	8005cc0 <HAL_RCC_GetHCLKFreq>
 8003fac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	f006 f8c2 	bl	800a140 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f957 	bl	8004270 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695a      	ldr	r2, [r3, #20]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003fd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f006 fd03 	bl	800a9e2 <USB_ReadInterrupts>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d10a      	bne.n	8003ffc <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f938 	bl	800425c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695a      	ldr	r2, [r3, #20]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f002 0208 	and.w	r2, r2, #8
 8003ffa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f006 fcee 	bl	800a9e2 <USB_ReadInterrupts>
 8004006:	4603      	mov	r3, r0
 8004008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400c:	2b80      	cmp	r3, #128	; 0x80
 800400e:	d122      	bne.n	8004056 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800401c:	2301      	movs	r3, #1
 800401e:	627b      	str	r3, [r7, #36]	; 0x24
 8004020:	e014      	b.n	800404c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004026:	4613      	mov	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d105      	bne.n	8004046 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	b2db      	uxtb	r3, r3
 800403e:	4619      	mov	r1, r3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f95f 	bl	8004304 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	3301      	adds	r3, #1
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004052:	429a      	cmp	r2, r3
 8004054:	d3e5      	bcc.n	8004022 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f006 fcc1 	bl	800a9e2 <USB_ReadInterrupts>
 8004060:	4603      	mov	r3, r0
 8004062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800406a:	d13b      	bne.n	80040e4 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800406c:	2301      	movs	r3, #1
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
 8004070:	e02b      	b.n	80040ca <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	3340      	adds	r3, #64	; 0x40
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d115      	bne.n	80040c4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004098:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800409a:	2b00      	cmp	r3, #0
 800409c:	da12      	bge.n	80040c4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a2:	4613      	mov	r3, r2
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4413      	add	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	333f      	adds	r3, #63	; 0x3f
 80040ae:	2201      	movs	r2, #1
 80040b0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	4619      	mov	r1, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f920 	bl	8004304 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	3301      	adds	r3, #1
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d3ce      	bcc.n	8004072 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695a      	ldr	r2, [r3, #20]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80040e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f006 fc7a 	bl	800a9e2 <USB_ReadInterrupts>
 80040ee:	4603      	mov	r3, r0
 80040f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040f8:	d155      	bne.n	80041a6 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040fa:	2301      	movs	r3, #1
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
 80040fe:	e045      	b.n	800418c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004114:	4613      	mov	r3, r2
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d12e      	bne.n	8004186 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004128:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800412a:	2b00      	cmp	r3, #0
 800412c:	da2b      	bge.n	8004186 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800413a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800413e:	429a      	cmp	r2, r3
 8004140:	d121      	bne.n	8004186 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004146:	4613      	mov	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	4413      	add	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004154:	2201      	movs	r2, #1
 8004156:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	69fa      	ldr	r2, [r7, #28]
 800417a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800417e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004182:	6053      	str	r3, [r2, #4]
            break;
 8004184:	e007      	b.n	8004196 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	3301      	adds	r3, #1
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004192:	429a      	cmp	r2, r3
 8004194:	d3b4      	bcc.n	8004100 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695a      	ldr	r2, [r3, #20]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80041a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f006 fc19 	bl	800a9e2 <USB_ReadInterrupts>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ba:	d10a      	bne.n	80041d2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f88d 	bl	80042dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695a      	ldr	r2, [r3, #20]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80041d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f006 fc03 	bl	800a9e2 <USB_ReadInterrupts>
 80041dc:	4603      	mov	r3, r0
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d115      	bne.n	8004212 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f879 	bl	80042f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6859      	ldr	r1, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	430a      	orrs	r2, r1
 800420c:	605a      	str	r2, [r3, #4]
 800420e:	e000      	b.n	8004212 <HAL_PCD_IRQHandler+0x992>
      return;
 8004210:	bf00      	nop
    }
  }
}
 8004212:	3734      	adds	r7, #52	; 0x34
 8004214:	46bd      	mov	sp, r7
 8004216:	bd90      	pop	{r4, r7, pc}

08004218 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004314:	2b00      	cmp	r3, #0
 8004316:	da0c      	bge.n	8004332 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	f003 020f 	and.w	r2, r3, #15
 800431e:	4613      	mov	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	3338      	adds	r3, #56	; 0x38
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	4413      	add	r3, r2
 800432c:	3304      	adds	r3, #4
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	e00c      	b.n	800434c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	f003 020f 	and.w	r2, r3, #15
 8004338:	4613      	mov	r3, r2
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	4413      	add	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	4413      	add	r3, r2
 8004348:	3304      	adds	r3, #4
 800434a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68f9      	ldr	r1, [r7, #12]
 8004352:	4618      	mov	r0, r3
 8004354:	f006 f9e4 	bl	800a720 <USB_EPStopXfer>
 8004358:	4603      	mov	r3, r0
 800435a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800435c:	7afb      	ldrb	r3, [r7, #11]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b08a      	sub	sp, #40	; 0x28
 800436a:	af02      	add	r7, sp, #8
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	4613      	mov	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	3338      	adds	r3, #56	; 0x38
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	4413      	add	r3, r2
 800438a:	3304      	adds	r3, #4
 800438c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a1a      	ldr	r2, [r3, #32]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	429a      	cmp	r2, r3
 8004398:	d901      	bls.n	800439e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e06c      	b.n	8004478 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	69fa      	ldr	r2, [r7, #28]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d902      	bls.n	80043ba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	3303      	adds	r3, #3
 80043be:	089b      	lsrs	r3, r3, #2
 80043c0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043c2:	e02b      	b.n	800441c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	699a      	ldr	r2, [r3, #24]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	69fa      	ldr	r2, [r7, #28]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d902      	bls.n	80043e0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	3303      	adds	r3, #3
 80043e4:	089b      	lsrs	r3, r3, #2
 80043e6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6919      	ldr	r1, [r3, #16]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	4603      	mov	r3, r0
 80043fe:	6978      	ldr	r0, [r7, #20]
 8004400:	f006 fa38 	bl	800a874 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	441a      	add	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a1a      	ldr	r2, [r3, #32]
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	441a      	add	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	b29b      	uxth	r3, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	429a      	cmp	r2, r3
 8004430:	d809      	bhi.n	8004446 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a1a      	ldr	r2, [r3, #32]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800443a:	429a      	cmp	r2, r3
 800443c:	d203      	bcs.n	8004446 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1be      	bne.n	80043c4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	699a      	ldr	r2, [r3, #24]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	429a      	cmp	r2, r3
 8004450:	d811      	bhi.n	8004476 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	f003 030f 	and.w	r3, r3, #15
 8004458:	2201      	movs	r2, #1
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	43db      	mvns	r3, r3
 800446c:	6939      	ldr	r1, [r7, #16]
 800446e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004472:	4013      	ands	r3, r2
 8004474:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3720      	adds	r7, #32
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	333c      	adds	r3, #60	; 0x3c
 8004498:	3304      	adds	r3, #4
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d17b      	bne.n	80045ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d015      	beq.n	80044ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	4a61      	ldr	r2, [pc, #388]	; (8004648 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	f240 80b9 	bls.w	800463c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80b3 	beq.w	800463c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	015a      	lsls	r2, r3, #5
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	4413      	add	r3, r2
 80044de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e2:	461a      	mov	r2, r3
 80044e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e8:	6093      	str	r3, [r2, #8]
 80044ea:	e0a7      	b.n	800463c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d009      	beq.n	800450a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004502:	461a      	mov	r2, r3
 8004504:	2320      	movs	r3, #32
 8004506:	6093      	str	r3, [r2, #8]
 8004508:	e098      	b.n	800463c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004510:	2b00      	cmp	r3, #0
 8004512:	f040 8093 	bne.w	800463c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	4a4b      	ldr	r2, [pc, #300]	; (8004648 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d90f      	bls.n	800453e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004534:	461a      	mov	r2, r3
 8004536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800453a:	6093      	str	r3, [r2, #8]
 800453c:	e07e      	b.n	800463c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	4613      	mov	r3, r2
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	4413      	add	r3, r2
 8004550:	3304      	adds	r3, #4
 8004552:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	69da      	ldr	r2, [r3, #28]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	0159      	lsls	r1, r3, #5
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	440b      	add	r3, r1
 8004560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800456a:	1ad2      	subs	r2, r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d114      	bne.n	80045a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d109      	bne.n	8004592 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004588:	461a      	mov	r2, r3
 800458a:	2101      	movs	r1, #1
 800458c:	f006 faee 	bl	800ab6c <USB_EP0_OutStart>
 8004590:	e006      	b.n	80045a0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	441a      	add	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	4619      	mov	r1, r3
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7ff fe36 	bl	8004218 <HAL_PCD_DataOutStageCallback>
 80045ac:	e046      	b.n	800463c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	4a26      	ldr	r2, [pc, #152]	; (800464c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d124      	bne.n	8004600 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045cc:	461a      	mov	r2, r3
 80045ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045d2:	6093      	str	r3, [r2, #8]
 80045d4:	e032      	b.n	800463c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f003 0320 	and.w	r3, r3, #32
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ec:	461a      	mov	r2, r3
 80045ee:	2320      	movs	r3, #32
 80045f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	4619      	mov	r1, r3
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7ff fe0d 	bl	8004218 <HAL_PCD_DataOutStageCallback>
 80045fe:	e01d      	b.n	800463c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d114      	bne.n	8004630 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d108      	bne.n	8004630 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6818      	ldr	r0, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004628:	461a      	mov	r2, r3
 800462a:	2100      	movs	r1, #0
 800462c:	f006 fa9e 	bl	800ab6c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	4619      	mov	r1, r3
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7ff fdee 	bl	8004218 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3720      	adds	r7, #32
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	4f54300a 	.word	0x4f54300a
 800464c:	4f54310a 	.word	0x4f54310a

08004650 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	333c      	adds	r3, #60	; 0x3c
 8004668:	3304      	adds	r3, #4
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4a15      	ldr	r2, [pc, #84]	; (80046d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d90e      	bls.n	80046a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800468c:	2b00      	cmp	r3, #0
 800468e:	d009      	beq.n	80046a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469c:	461a      	mov	r2, r3
 800469e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff fdcf 	bl	8004248 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4a0a      	ldr	r2, [pc, #40]	; (80046d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d90c      	bls.n	80046cc <PCD_EP_OutSetupPacket_int+0x7c>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d108      	bne.n	80046cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046c4:	461a      	mov	r2, r3
 80046c6:	2101      	movs	r1, #1
 80046c8:	f006 fa50 	bl	800ab6c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	4f54300a 	.word	0x4f54300a

080046dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470e:	f043 0303 	orr.w	r3, r3, #3
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004744:	4b34      	ldr	r3, [pc, #208]	; (8004818 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004748:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800474c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	429a      	cmp	r2, r3
 8004754:	d101      	bne.n	800475a <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	e057      	b.n	800480a <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004760:	d90a      	bls.n	8004778 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004762:	4b2d      	ldr	r3, [pc, #180]	; (8004818 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4313      	orrs	r3, r2
 800476e:	4a2a      	ldr	r2, [pc, #168]	; (8004818 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004774:	60d3      	str	r3, [r2, #12]
 8004776:	e007      	b.n	8004788 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004778:	4b27      	ldr	r3, [pc, #156]	; (8004818 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004780:	4925      	ldr	r1, [pc, #148]	; (8004818 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4313      	orrs	r3, r2
 8004786:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004788:	4b24      	ldr	r3, [pc, #144]	; (800481c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a24      	ldr	r2, [pc, #144]	; (8004820 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800478e:	fba2 2303 	umull	r2, r3, r2, r3
 8004792:	099b      	lsrs	r3, r3, #6
 8004794:	2232      	movs	r2, #50	; 0x32
 8004796:	fb02 f303 	mul.w	r3, r2, r3
 800479a:	4a21      	ldr	r2, [pc, #132]	; (8004820 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800479c:	fba2 2303 	umull	r2, r3, r2, r3
 80047a0:	099b      	lsrs	r3, r3, #6
 80047a2:	3301      	adds	r3, #1
 80047a4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80047a6:	e002      	b.n	80047ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80047ae:	4b1a      	ldr	r3, [pc, #104]	; (8004818 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d102      	bne.n	80047c0 <HAL_PWREx_ControlVoltageScaling+0x84>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1f3      	bne.n	80047a8 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d01b      	beq.n	80047fe <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80047c6:	4b15      	ldr	r3, [pc, #84]	; (800481c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a15      	ldr	r2, [pc, #84]	; (8004820 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80047cc:	fba2 2303 	umull	r2, r3, r2, r3
 80047d0:	099b      	lsrs	r3, r3, #6
 80047d2:	2232      	movs	r2, #50	; 0x32
 80047d4:	fb02 f303 	mul.w	r3, r2, r3
 80047d8:	4a11      	ldr	r2, [pc, #68]	; (8004820 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80047da:	fba2 2303 	umull	r2, r3, r2, r3
 80047de:	099b      	lsrs	r3, r3, #6
 80047e0:	3301      	adds	r3, #1
 80047e2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80047e4:	e002      	b.n	80047ec <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	3b01      	subs	r3, #1
 80047ea:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80047ec:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80047ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d102      	bne.n	80047fe <HAL_PWREx_ControlVoltageScaling+0xc2>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f3      	bne.n	80047e6 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e000      	b.n	800480a <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	46020800 	.word	0x46020800
 800481c:	2000001c 	.word	0x2000001c
 8004820:	10624dd3 	.word	0x10624dd3

08004824 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <HAL_PWREx_GetVoltageRange+0x18>)
 800482a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	46020800 	.word	0x46020800

08004840 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004848:	4b22      	ldr	r3, [pc, #136]	; (80048d4 <HAL_PWREx_ConfigSupply+0x94>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a22      	ldr	r2, [pc, #136]	; (80048d8 <HAL_PWREx_ConfigSupply+0x98>)
 800484e:	fba2 2303 	umull	r2, r3, r2, r3
 8004852:	099b      	lsrs	r3, r3, #6
 8004854:	2232      	movs	r2, #50	; 0x32
 8004856:	fb02 f303 	mul.w	r3, r2, r3
 800485a:	4a1f      	ldr	r2, [pc, #124]	; (80048d8 <HAL_PWREx_ConfigSupply+0x98>)
 800485c:	fba2 2303 	umull	r2, r3, r2, r3
 8004860:	099b      	lsrs	r3, r3, #6
 8004862:	3301      	adds	r3, #1
 8004864:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d113      	bne.n	8004894 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800486c:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <HAL_PWREx_ConfigSupply+0x9c>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	4a1a      	ldr	r2, [pc, #104]	; (80048dc <HAL_PWREx_ConfigSupply+0x9c>)
 8004872:	f023 0302 	bic.w	r3, r3, #2
 8004876:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004878:	e002      	b.n	8004880 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3b01      	subs	r3, #1
 800487e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004880:	4b16      	ldr	r3, [pc, #88]	; (80048dc <HAL_PWREx_ConfigSupply+0x9c>)
 8004882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b02      	cmp	r3, #2
 800488a:	d116      	bne.n	80048ba <HAL_PWREx_ConfigSupply+0x7a>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f3      	bne.n	800487a <HAL_PWREx_ConfigSupply+0x3a>
 8004892:	e012      	b.n	80048ba <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004894:	4b11      	ldr	r3, [pc, #68]	; (80048dc <HAL_PWREx_ConfigSupply+0x9c>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	4a10      	ldr	r2, [pc, #64]	; (80048dc <HAL_PWREx_ConfigSupply+0x9c>)
 800489a:	f043 0302 	orr.w	r3, r3, #2
 800489e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80048a0:	e002      	b.n	80048a8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <HAL_PWREx_ConfigSupply+0x9c>)
 80048aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d102      	bne.n	80048ba <HAL_PWREx_ConfigSupply+0x7a>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f3      	bne.n	80048a2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e000      	b.n	80048c6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	2000001c 	.word	0x2000001c
 80048d8:	10624dd3 	.word	0x10624dd3
 80048dc:	46020800 	.word	0x46020800

080048e0 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80048e4:	4b05      	ldr	r3, [pc, #20]	; (80048fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	4a04      	ldr	r2, [pc, #16]	; (80048fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80048ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ee:	6113      	str	r3, [r2, #16]
}
 80048f0:	bf00      	nop
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	46020800 	.word	0x46020800

08004900 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	4a04      	ldr	r2, [pc, #16]	; (800491c <HAL_PWREx_EnableVddIO2+0x1c>)
 800490a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800490e:	6113      	str	r3, [r2, #16]
}
 8004910:	bf00      	nop
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	46020800 	.word	0x46020800

08004920 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08e      	sub	sp, #56	; 0x38
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004928:	2300      	movs	r3, #0
 800492a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d102      	bne.n	800493a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	f000 bec3 	b.w	80056c0 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800493a:	4b9c      	ldr	r3, [pc, #624]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	f003 030c 	and.w	r3, r3, #12
 8004942:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004944:	4b99      	ldr	r3, [pc, #612]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004948:	f003 0303 	and.w	r3, r3, #3
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 8172 	beq.w	8004c40 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <HAL_RCC_OscConfig+0x52>
 8004962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004964:	2b0c      	cmp	r3, #12
 8004966:	f040 80e4 	bne.w	8004b32 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800496a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496c:	2b01      	cmp	r3, #1
 800496e:	f040 80e0 	bne.w	8004b32 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004972:	4b8e      	ldr	r3, [pc, #568]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0304 	and.w	r3, r3, #4
 800497a:	2b00      	cmp	r3, #0
 800497c:	d006      	beq.n	800498c <HAL_RCC_OscConfig+0x6c>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d102      	bne.n	800498c <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f000 be9a 	b.w	80056c0 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004990:	4b86      	ldr	r3, [pc, #536]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d004      	beq.n	80049a6 <HAL_RCC_OscConfig+0x86>
 800499c:	4b83      	ldr	r3, [pc, #524]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80049a4:	e005      	b.n	80049b2 <HAL_RCC_OscConfig+0x92>
 80049a6:	4b81      	ldr	r3, [pc, #516]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 80049a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049ac:	041b      	lsls	r3, r3, #16
 80049ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d255      	bcs.n	8004a62 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10a      	bne.n	80049d2 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	4618      	mov	r0, r3
 80049c2:	f001 f9d3 	bl	8005d6c <RCC_SetFlashLatencyFromMSIRange>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f000 be77 	b.w	80056c0 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80049d2:	4b76      	ldr	r3, [pc, #472]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	4a75      	ldr	r2, [pc, #468]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 80049d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049dc:	6093      	str	r3, [r2, #8]
 80049de:	4b73      	ldr	r3, [pc, #460]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	4970      	ldr	r1, [pc, #448]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80049f8:	d309      	bcc.n	8004a0e <HAL_RCC_OscConfig+0xee>
 80049fa:	4b6c      	ldr	r3, [pc, #432]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f023 021f 	bic.w	r2, r3, #31
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	4969      	ldr	r1, [pc, #420]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60cb      	str	r3, [r1, #12]
 8004a0c:	e07e      	b.n	8004b0c <HAL_RCC_OscConfig+0x1ec>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	da0a      	bge.n	8004a2c <HAL_RCC_OscConfig+0x10c>
 8004a16:	4b65      	ldr	r3, [pc, #404]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	015b      	lsls	r3, r3, #5
 8004a24:	4961      	ldr	r1, [pc, #388]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60cb      	str	r3, [r1, #12]
 8004a2a:	e06f      	b.n	8004b0c <HAL_RCC_OscConfig+0x1ec>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a34:	d30a      	bcc.n	8004a4c <HAL_RCC_OscConfig+0x12c>
 8004a36:	4b5d      	ldr	r3, [pc, #372]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	029b      	lsls	r3, r3, #10
 8004a44:	4959      	ldr	r1, [pc, #356]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60cb      	str	r3, [r1, #12]
 8004a4a:	e05f      	b.n	8004b0c <HAL_RCC_OscConfig+0x1ec>
 8004a4c:	4b57      	ldr	r3, [pc, #348]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	03db      	lsls	r3, r3, #15
 8004a5a:	4954      	ldr	r1, [pc, #336]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60cb      	str	r3, [r1, #12]
 8004a60:	e054      	b.n	8004b0c <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004a62:	4b52      	ldr	r3, [pc, #328]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	4a51      	ldr	r2, [pc, #324]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004a68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a6c:	6093      	str	r3, [r2, #8]
 8004a6e:	4b4f      	ldr	r3, [pc, #316]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	494c      	ldr	r1, [pc, #304]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004a88:	d309      	bcc.n	8004a9e <HAL_RCC_OscConfig+0x17e>
 8004a8a:	4b48      	ldr	r3, [pc, #288]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f023 021f 	bic.w	r2, r3, #31
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	4945      	ldr	r1, [pc, #276]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60cb      	str	r3, [r1, #12]
 8004a9c:	e028      	b.n	8004af0 <HAL_RCC_OscConfig+0x1d0>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	da0a      	bge.n	8004abc <HAL_RCC_OscConfig+0x19c>
 8004aa6:	4b41      	ldr	r3, [pc, #260]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	015b      	lsls	r3, r3, #5
 8004ab4:	493d      	ldr	r1, [pc, #244]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60cb      	str	r3, [r1, #12]
 8004aba:	e019      	b.n	8004af0 <HAL_RCC_OscConfig+0x1d0>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac4:	d30a      	bcc.n	8004adc <HAL_RCC_OscConfig+0x1bc>
 8004ac6:	4b39      	ldr	r3, [pc, #228]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	029b      	lsls	r3, r3, #10
 8004ad4:	4935      	ldr	r1, [pc, #212]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60cb      	str	r3, [r1, #12]
 8004ada:	e009      	b.n	8004af0 <HAL_RCC_OscConfig+0x1d0>
 8004adc:	4b33      	ldr	r3, [pc, #204]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	03db      	lsls	r3, r3, #15
 8004aea:	4930      	ldr	r1, [pc, #192]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	4618      	mov	r0, r3
 8004afc:	f001 f936 	bl	8005d6c <RCC_SetFlashLatencyFromMSIRange>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	f000 bdda 	b.w	80056c0 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004b0c:	f001 f8d8 	bl	8005cc0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b10:	4b27      	ldr	r3, [pc, #156]	; (8004bb0 <HAL_RCC_OscConfig+0x290>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fd fceb 	bl	80024f0 <HAL_InitTick>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 808a 	beq.w	8004c3e <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8004b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b2e:	f000 bdc7 	b.w	80056c0 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d066      	beq.n	8004c08 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004b3a:	4b1c      	ldr	r3, [pc, #112]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a1b      	ldr	r2, [pc, #108]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004b46:	f7fd fd1d 	bl	8002584 <HAL_GetTick>
 8004b4a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004b4c:	e009      	b.n	8004b62 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b4e:	f7fd fd19 	bl	8002584 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d902      	bls.n	8004b62 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	f000 bdaf 	b.w	80056c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004b62:	4b12      	ldr	r3, [pc, #72]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0304 	and.w	r3, r3, #4
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0ef      	beq.n	8004b4e <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004b6e:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	4a0e      	ldr	r2, [pc, #56]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004b74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b78:	6093      	str	r3, [r2, #8]
 8004b7a:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	4909      	ldr	r1, [pc, #36]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004b94:	d30e      	bcc.n	8004bb4 <HAL_RCC_OscConfig+0x294>
 8004b96:	4b05      	ldr	r3, [pc, #20]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f023 021f 	bic.w	r2, r3, #31
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	4902      	ldr	r1, [pc, #8]	; (8004bac <HAL_RCC_OscConfig+0x28c>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60cb      	str	r3, [r1, #12]
 8004ba8:	e04a      	b.n	8004c40 <HAL_RCC_OscConfig+0x320>
 8004baa:	bf00      	nop
 8004bac:	46020c00 	.word	0x46020c00
 8004bb0:	20000020 	.word	0x20000020
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	da0a      	bge.n	8004bd2 <HAL_RCC_OscConfig+0x2b2>
 8004bbc:	4b9b      	ldr	r3, [pc, #620]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	015b      	lsls	r3, r3, #5
 8004bca:	4998      	ldr	r1, [pc, #608]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60cb      	str	r3, [r1, #12]
 8004bd0:	e036      	b.n	8004c40 <HAL_RCC_OscConfig+0x320>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bda:	d30a      	bcc.n	8004bf2 <HAL_RCC_OscConfig+0x2d2>
 8004bdc:	4b93      	ldr	r3, [pc, #588]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	029b      	lsls	r3, r3, #10
 8004bea:	4990      	ldr	r1, [pc, #576]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60cb      	str	r3, [r1, #12]
 8004bf0:	e026      	b.n	8004c40 <HAL_RCC_OscConfig+0x320>
 8004bf2:	4b8e      	ldr	r3, [pc, #568]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	03db      	lsls	r3, r3, #15
 8004c00:	498a      	ldr	r1, [pc, #552]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60cb      	str	r3, [r1, #12]
 8004c06:	e01b      	b.n	8004c40 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004c08:	4b88      	ldr	r3, [pc, #544]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a87      	ldr	r2, [pc, #540]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004c0e:	f023 0301 	bic.w	r3, r3, #1
 8004c12:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c14:	f7fd fcb6 	bl	8002584 <HAL_GetTick>
 8004c18:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004c1a:	e009      	b.n	8004c30 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c1c:	f7fd fcb2 	bl	8002584 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d902      	bls.n	8004c30 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	f000 bd48 	b.w	80056c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004c30:	4b7e      	ldr	r3, [pc, #504]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1ef      	bne.n	8004c1c <HAL_RCC_OscConfig+0x2fc>
 8004c3c:	e000      	b.n	8004c40 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c3e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 8094 	beq.w	8004d76 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d005      	beq.n	8004c60 <HAL_RCC_OscConfig+0x340>
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	2b0c      	cmp	r3, #12
 8004c58:	d110      	bne.n	8004c7c <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	2b03      	cmp	r3, #3
 8004c5e:	d10d      	bne.n	8004c7c <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c60:	4b72      	ldr	r3, [pc, #456]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 8083 	beq.w	8004d74 <HAL_RCC_OscConfig+0x454>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d17e      	bne.n	8004d74 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	f000 bd22 	b.w	80056c0 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c84:	d106      	bne.n	8004c94 <HAL_RCC_OscConfig+0x374>
 8004c86:	4b69      	ldr	r3, [pc, #420]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a68      	ldr	r2, [pc, #416]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	e041      	b.n	8004d18 <HAL_RCC_OscConfig+0x3f8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c9c:	d112      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x3a4>
 8004c9e:	4b63      	ldr	r3, [pc, #396]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a62      	ldr	r2, [pc, #392]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	4b60      	ldr	r3, [pc, #384]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a5f      	ldr	r2, [pc, #380]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004cb0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	4b5d      	ldr	r3, [pc, #372]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a5c      	ldr	r2, [pc, #368]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	e029      	b.n	8004d18 <HAL_RCC_OscConfig+0x3f8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004ccc:	d112      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x3d4>
 8004cce:	4b57      	ldr	r3, [pc, #348]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a56      	ldr	r2, [pc, #344]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	4b54      	ldr	r3, [pc, #336]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a53      	ldr	r2, [pc, #332]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004ce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	4b51      	ldr	r3, [pc, #324]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a50      	ldr	r2, [pc, #320]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	e011      	b.n	8004d18 <HAL_RCC_OscConfig+0x3f8>
 8004cf4:	4b4d      	ldr	r3, [pc, #308]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a4c      	ldr	r2, [pc, #304]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	4b4a      	ldr	r3, [pc, #296]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a49      	ldr	r2, [pc, #292]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	4b47      	ldr	r3, [pc, #284]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a46      	ldr	r2, [pc, #280]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004d12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d014      	beq.n	8004d4a <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8004d20:	f7fd fc30 	bl	8002584 <HAL_GetTick>
 8004d24:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d26:	e009      	b.n	8004d3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d28:	f7fd fc2c 	bl	8002584 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b64      	cmp	r3, #100	; 0x64
 8004d34:	d902      	bls.n	8004d3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	f000 bcc2 	b.w	80056c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d3c:	4b3b      	ldr	r3, [pc, #236]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0ef      	beq.n	8004d28 <HAL_RCC_OscConfig+0x408>
 8004d48:	e015      	b.n	8004d76 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004d4a:	f7fd fc1b 	bl	8002584 <HAL_GetTick>
 8004d4e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d50:	e009      	b.n	8004d66 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d52:	f7fd fc17 	bl	8002584 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b64      	cmp	r3, #100	; 0x64
 8004d5e:	d902      	bls.n	8004d66 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	f000 bcad 	b.w	80056c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d66:	4b31      	ldr	r3, [pc, #196]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1ef      	bne.n	8004d52 <HAL_RCC_OscConfig+0x432>
 8004d72:	e000      	b.n	8004d76 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d066      	beq.n	8004e50 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d005      	beq.n	8004d94 <HAL_RCC_OscConfig+0x474>
 8004d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8a:	2b0c      	cmp	r3, #12
 8004d8c:	d11a      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d117      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d94:	4b25      	ldr	r3, [pc, #148]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d006      	beq.n	8004dae <HAL_RCC_OscConfig+0x48e>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	f000 bc89 	b.w	80056c0 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004dae:	4b1f      	ldr	r3, [pc, #124]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	041b      	lsls	r3, r3, #16
 8004dbc:	491b      	ldr	r1, [pc, #108]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dc2:	e045      	b.n	8004e50 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d024      	beq.n	8004e16 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004dcc:	4b17      	ldr	r3, [pc, #92]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a16      	ldr	r2, [pc, #88]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004dd8:	f7fd fbd4 	bl	8002584 <HAL_GetTick>
 8004ddc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dde:	e009      	b.n	8004df4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004de0:	f7fd fbd0 	bl	8002584 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d902      	bls.n	8004df4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	f000 bc66 	b.w	80056c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004df4:	4b0d      	ldr	r3, [pc, #52]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0ef      	beq.n	8004de0 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004e00:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	041b      	lsls	r3, r3, #16
 8004e0e:	4907      	ldr	r1, [pc, #28]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	610b      	str	r3, [r1, #16]
 8004e14:	e01c      	b.n	8004e50 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004e16:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a04      	ldr	r2, [pc, #16]	; (8004e2c <HAL_RCC_OscConfig+0x50c>)
 8004e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e20:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004e22:	f7fd fbaf 	bl	8002584 <HAL_GetTick>
 8004e26:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e28:	e00c      	b.n	8004e44 <HAL_RCC_OscConfig+0x524>
 8004e2a:	bf00      	nop
 8004e2c:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e30:	f7fd fba8 	bl	8002584 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d902      	bls.n	8004e44 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	f000 bc3e 	b.w	80056c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e44:	4baf      	ldr	r3, [pc, #700]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1ef      	bne.n	8004e30 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 80c7 	beq.w	8004fec <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e64:	4ba7      	ldr	r3, [pc, #668]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8004e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d111      	bne.n	8004e96 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e72:	4ba4      	ldr	r3, [pc, #656]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8004e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e78:	4aa2      	ldr	r2, [pc, #648]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8004e7a:	f043 0304 	orr.w	r3, r3, #4
 8004e7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004e82:	4ba0      	ldr	r3, [pc, #640]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8004e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004e90:	2301      	movs	r3, #1
 8004e92:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004e96:	4b9c      	ldr	r3, [pc, #624]	; (8005108 <HAL_RCC_OscConfig+0x7e8>)
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d118      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004ea2:	4b99      	ldr	r3, [pc, #612]	; (8005108 <HAL_RCC_OscConfig+0x7e8>)
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	4a98      	ldr	r2, [pc, #608]	; (8005108 <HAL_RCC_OscConfig+0x7e8>)
 8004ea8:	f043 0301 	orr.w	r3, r3, #1
 8004eac:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eae:	f7fd fb69 	bl	8002584 <HAL_GetTick>
 8004eb2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb6:	f7fd fb65 	bl	8002584 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e3fb      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ec8:	4b8f      	ldr	r3, [pc, #572]	; (8005108 <HAL_RCC_OscConfig+0x7e8>)
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0f0      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d05f      	beq.n	8004f9c <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004edc:	4b89      	ldr	r3, [pc, #548]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8004ede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ee2:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	699a      	ldr	r2, [r3, #24]
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d037      	beq.n	8004f62 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d006      	beq.n	8004f0a <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e3da      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01b      	beq.n	8004f4c <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8004f14:	4b7b      	ldr	r3, [pc, #492]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8004f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f1a:	4a7a      	ldr	r2, [pc, #488]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8004f1c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004f20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8004f24:	f7fd fb2e 	bl	8002584 <HAL_GetTick>
 8004f28:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f2c:	f7fd fb2a 	bl	8002584 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e3c0      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004f3e:	4b71      	ldr	r3, [pc, #452]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8004f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1ef      	bne.n	8004f2c <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004f4c:	4b6d      	ldr	r3, [pc, #436]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8004f4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	496a      	ldr	r1, [pc, #424]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004f62:	4b68      	ldr	r3, [pc, #416]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8004f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f68:	4a66      	ldr	r2, [pc, #408]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8004f6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004f72:	f7fd fb07 	bl	8002584 <HAL_GetTick>
 8004f76:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f7a:	f7fd fb03 	bl	8002584 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e399      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004f8c:	4b5d      	ldr	r3, [pc, #372]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8004f8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0ef      	beq.n	8004f7a <HAL_RCC_OscConfig+0x65a>
 8004f9a:	e01b      	b.n	8004fd4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004f9c:	4b59      	ldr	r3, [pc, #356]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8004f9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fa2:	4a58      	ldr	r2, [pc, #352]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8004fa4:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004fa8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004fac:	f7fd faea 	bl	8002584 <HAL_GetTick>
 8004fb0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fb4:	f7fd fae6 	bl	8002584 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e37c      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004fc6:	4b4f      	ldr	r3, [pc, #316]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8004fc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1ef      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fd4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d107      	bne.n	8004fec <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fdc:	4b49      	ldr	r3, [pc, #292]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8004fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fe2:	4a48      	ldr	r2, [pc, #288]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8004fe4:	f023 0304 	bic.w	r3, r3, #4
 8004fe8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8112 	beq.w	800521e <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005000:	4b40      	ldr	r3, [pc, #256]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8005002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b00      	cmp	r3, #0
 800500c:	d111      	bne.n	8005032 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800500e:	4b3d      	ldr	r3, [pc, #244]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8005010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005014:	4a3b      	ldr	r2, [pc, #236]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8005016:	f043 0304 	orr.w	r3, r3, #4
 800501a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800501e:	4b39      	ldr	r3, [pc, #228]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8005020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	613b      	str	r3, [r7, #16]
 800502a:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005032:	4b35      	ldr	r3, [pc, #212]	; (8005108 <HAL_RCC_OscConfig+0x7e8>)
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d118      	bne.n	8005070 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800503e:	4b32      	ldr	r3, [pc, #200]	; (8005108 <HAL_RCC_OscConfig+0x7e8>)
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	4a31      	ldr	r2, [pc, #196]	; (8005108 <HAL_RCC_OscConfig+0x7e8>)
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800504a:	f7fd fa9b 	bl	8002584 <HAL_GetTick>
 800504e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005052:	f7fd fa97 	bl	8002584 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e32d      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005064:	4b28      	ldr	r3, [pc, #160]	; (8005108 <HAL_RCC_OscConfig+0x7e8>)
 8005066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0f0      	beq.n	8005052 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01f      	beq.n	80050bc <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d010      	beq.n	80050aa <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005088:	4b1e      	ldr	r3, [pc, #120]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 800508a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800508e:	4a1d      	ldr	r2, [pc, #116]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 8005090:	f043 0304 	orr.w	r3, r3, #4
 8005094:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005098:	4b1a      	ldr	r3, [pc, #104]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 800509a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800509e:	4a19      	ldr	r2, [pc, #100]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 80050a0:	f043 0301 	orr.w	r3, r3, #1
 80050a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80050a8:	e018      	b.n	80050dc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050aa:	4b16      	ldr	r3, [pc, #88]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 80050ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050b0:	4a14      	ldr	r2, [pc, #80]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 80050b2:	f043 0301 	orr.w	r3, r3, #1
 80050b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80050ba:	e00f      	b.n	80050dc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050bc:	4b11      	ldr	r3, [pc, #68]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 80050be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050c2:	4a10      	ldr	r2, [pc, #64]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 80050c4:	f023 0301 	bic.w	r3, r3, #1
 80050c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80050cc:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 80050ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050d2:	4a0c      	ldr	r2, [pc, #48]	; (8005104 <HAL_RCC_OscConfig+0x7e4>)
 80050d4:	f023 0304 	bic.w	r3, r3, #4
 80050d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d058      	beq.n	8005196 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 80050e4:	f7fd fa4e 	bl	8002584 <HAL_GetTick>
 80050e8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ea:	e00f      	b.n	800510c <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ec:	f7fd fa4a 	bl	8002584 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d906      	bls.n	800510c <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e2de      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
 8005102:	bf00      	nop
 8005104:	46020c00 	.word	0x46020c00
 8005108:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800510c:	4b9c      	ldr	r3, [pc, #624]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 800510e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0e8      	beq.n	80050ec <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01b      	beq.n	800515e <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005126:	4b96      	ldr	r3, [pc, #600]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 8005128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800512c:	4a94      	ldr	r2, [pc, #592]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 800512e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005132:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005136:	e00a      	b.n	800514e <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005138:	f7fd fa24 	bl	8002584 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	f241 3288 	movw	r2, #5000	; 0x1388
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e2b8      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800514e:	4b8c      	ldr	r3, [pc, #560]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 8005150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0ed      	beq.n	8005138 <HAL_RCC_OscConfig+0x818>
 800515c:	e053      	b.n	8005206 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800515e:	4b88      	ldr	r3, [pc, #544]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 8005160:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005164:	4a86      	ldr	r2, [pc, #536]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 8005166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800516a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800516e:	e00a      	b.n	8005186 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005170:	f7fd fa08 	bl	8002584 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	f241 3288 	movw	r2, #5000	; 0x1388
 800517e:	4293      	cmp	r3, r2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e29c      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005186:	4b7e      	ldr	r3, [pc, #504]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 8005188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800518c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1ed      	bne.n	8005170 <HAL_RCC_OscConfig+0x850>
 8005194:	e037      	b.n	8005206 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005196:	f7fd f9f5 	bl	8002584 <HAL_GetTick>
 800519a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800519c:	e00a      	b.n	80051b4 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519e:	f7fd f9f1 	bl	8002584 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e285      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051b4:	4b72      	ldr	r3, [pc, #456]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 80051b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1ed      	bne.n	800519e <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80051c2:	4b6f      	ldr	r3, [pc, #444]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 80051c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01a      	beq.n	8005206 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80051d0:	4b6b      	ldr	r3, [pc, #428]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 80051d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051d6:	4a6a      	ldr	r2, [pc, #424]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 80051d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80051e0:	e00a      	b.n	80051f8 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e2:	f7fd f9cf 	bl	8002584 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e263      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80051f8:	4b61      	ldr	r3, [pc, #388]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 80051fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1ed      	bne.n	80051e2 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005206:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800520a:	2b01      	cmp	r3, #1
 800520c:	d107      	bne.n	800521e <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800520e:	4b5c      	ldr	r3, [pc, #368]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 8005210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005214:	4a5a      	ldr	r2, [pc, #360]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 8005216:	f023 0304 	bic.w	r3, r3, #4
 800521a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0320 	and.w	r3, r3, #32
 8005226:	2b00      	cmp	r3, #0
 8005228:	d036      	beq.n	8005298 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d019      	beq.n	8005266 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005232:	4b53      	ldr	r3, [pc, #332]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a52      	ldr	r2, [pc, #328]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 8005238:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800523c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800523e:	f7fd f9a1 	bl	8002584 <HAL_GetTick>
 8005242:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005246:	f7fd f99d 	bl	8002584 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e233      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005258:	4b49      	ldr	r3, [pc, #292]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0f0      	beq.n	8005246 <HAL_RCC_OscConfig+0x926>
 8005264:	e018      	b.n	8005298 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005266:	4b46      	ldr	r3, [pc, #280]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a45      	ldr	r2, [pc, #276]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 800526c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005270:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005272:	f7fd f987 	bl	8002584 <HAL_GetTick>
 8005276:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005278:	e008      	b.n	800528c <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800527a:	f7fd f983 	bl	8002584 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e219      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800528c:	4b3c      	ldr	r3, [pc, #240]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1f0      	bne.n	800527a <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d036      	beq.n	8005312 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d019      	beq.n	80052e0 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80052ac:	4b34      	ldr	r3, [pc, #208]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a33      	ldr	r2, [pc, #204]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 80052b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80052b8:	f7fd f964 	bl	8002584 <HAL_GetTick>
 80052bc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80052c0:	f7fd f960 	bl	8002584 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e1f6      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80052d2:	4b2b      	ldr	r3, [pc, #172]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0f0      	beq.n	80052c0 <HAL_RCC_OscConfig+0x9a0>
 80052de:	e018      	b.n	8005312 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80052e0:	4b27      	ldr	r3, [pc, #156]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a26      	ldr	r2, [pc, #152]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 80052e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052ea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80052ec:	f7fd f94a 	bl	8002584 <HAL_GetTick>
 80052f0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80052f4:	f7fd f946 	bl	8002584 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e1dc      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005306:	4b1e      	ldr	r3, [pc, #120]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f0      	bne.n	80052f4 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d07f      	beq.n	800541e <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005322:	2b00      	cmp	r3, #0
 8005324:	d062      	beq.n	80053ec <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005326:	4b16      	ldr	r3, [pc, #88]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	4a15      	ldr	r2, [pc, #84]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 800532c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005330:	6093      	str	r3, [r2, #8]
 8005332:	4b13      	ldr	r3, [pc, #76]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533e:	4910      	ldr	r1, [pc, #64]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 8005340:	4313      	orrs	r3, r2
 8005342:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800534c:	d309      	bcc.n	8005362 <HAL_RCC_OscConfig+0xa42>
 800534e:	4b0c      	ldr	r3, [pc, #48]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f023 021f 	bic.w	r2, r3, #31
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	4909      	ldr	r1, [pc, #36]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 800535c:	4313      	orrs	r3, r2
 800535e:	60cb      	str	r3, [r1, #12]
 8005360:	e02a      	b.n	80053b8 <HAL_RCC_OscConfig+0xa98>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	2b00      	cmp	r3, #0
 8005368:	da0c      	bge.n	8005384 <HAL_RCC_OscConfig+0xa64>
 800536a:	4b05      	ldr	r3, [pc, #20]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	015b      	lsls	r3, r3, #5
 8005378:	4901      	ldr	r1, [pc, #4]	; (8005380 <HAL_RCC_OscConfig+0xa60>)
 800537a:	4313      	orrs	r3, r2
 800537c:	60cb      	str	r3, [r1, #12]
 800537e:	e01b      	b.n	80053b8 <HAL_RCC_OscConfig+0xa98>
 8005380:	46020c00 	.word	0x46020c00
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538c:	d30a      	bcc.n	80053a4 <HAL_RCC_OscConfig+0xa84>
 800538e:	4ba5      	ldr	r3, [pc, #660]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	029b      	lsls	r3, r3, #10
 800539c:	49a1      	ldr	r1, [pc, #644]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	60cb      	str	r3, [r1, #12]
 80053a2:	e009      	b.n	80053b8 <HAL_RCC_OscConfig+0xa98>
 80053a4:	4b9f      	ldr	r3, [pc, #636]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	03db      	lsls	r3, r3, #15
 80053b2:	499c      	ldr	r1, [pc, #624]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80053b8:	4b9a      	ldr	r3, [pc, #616]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a99      	ldr	r2, [pc, #612]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 80053be:	f043 0310 	orr.w	r3, r3, #16
 80053c2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80053c4:	f7fd f8de 	bl	8002584 <HAL_GetTick>
 80053c8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80053cc:	f7fd f8da 	bl	8002584 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e170      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80053de:	4b91      	ldr	r3, [pc, #580]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0f0      	beq.n	80053cc <HAL_RCC_OscConfig+0xaac>
 80053ea:	e018      	b.n	800541e <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80053ec:	4b8d      	ldr	r3, [pc, #564]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a8c      	ldr	r2, [pc, #560]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 80053f2:	f023 0310 	bic.w	r3, r3, #16
 80053f6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80053f8:	f7fd f8c4 	bl	8002584 <HAL_GetTick>
 80053fc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005400:	f7fd f8c0 	bl	8002584 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e156      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005412:	4b84      	ldr	r3, [pc, #528]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1f0      	bne.n	8005400 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 814b 	beq.w	80056be <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005428:	2300      	movs	r3, #0
 800542a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800542e:	4b7d      	ldr	r3, [pc, #500]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	f003 030c 	and.w	r3, r3, #12
 8005436:	2b0c      	cmp	r3, #12
 8005438:	f000 80fa 	beq.w	8005630 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	2b02      	cmp	r3, #2
 8005442:	f040 80cc 	bne.w	80055de <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005446:	4b77      	ldr	r3, [pc, #476]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a76      	ldr	r2, [pc, #472]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 800544c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005450:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005452:	f7fd f897 	bl	8002584 <HAL_GetTick>
 8005456:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545a:	f7fd f893 	bl	8002584 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e129      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800546c:	4b6d      	ldr	r3, [pc, #436]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1f0      	bne.n	800545a <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005478:	4b6a      	ldr	r3, [pc, #424]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 800547a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	d111      	bne.n	80054aa <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005486:	4b67      	ldr	r3, [pc, #412]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 8005488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800548c:	4a65      	ldr	r2, [pc, #404]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 800548e:	f043 0304 	orr.w	r3, r3, #4
 8005492:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005496:	4b63      	ldr	r3, [pc, #396]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 8005498:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80054a4:	2301      	movs	r3, #1
 80054a6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80054aa:	4b5f      	ldr	r3, [pc, #380]	; (8005628 <HAL_RCC_OscConfig+0xd08>)
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054b6:	d102      	bne.n	80054be <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 80054b8:	2301      	movs	r3, #1
 80054ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80054be:	4b5a      	ldr	r3, [pc, #360]	; (8005628 <HAL_RCC_OscConfig+0xd08>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	4a59      	ldr	r2, [pc, #356]	; (8005628 <HAL_RCC_OscConfig+0xd08>)
 80054c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054c8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80054ca:	4b56      	ldr	r3, [pc, #344]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054d2:	f023 0303 	bic.w	r3, r3, #3
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80054de:	3a01      	subs	r2, #1
 80054e0:	0212      	lsls	r2, r2, #8
 80054e2:	4311      	orrs	r1, r2
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80054e8:	430a      	orrs	r2, r1
 80054ea:	494e      	ldr	r1, [pc, #312]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	628b      	str	r3, [r1, #40]	; 0x28
 80054f0:	4b4c      	ldr	r3, [pc, #304]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 80054f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f4:	4b4d      	ldr	r3, [pc, #308]	; (800562c <HAL_RCC_OscConfig+0xd0c>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80054fc:	3a01      	subs	r2, #1
 80054fe:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005506:	3a01      	subs	r2, #1
 8005508:	0252      	lsls	r2, r2, #9
 800550a:	b292      	uxth	r2, r2
 800550c:	4311      	orrs	r1, r2
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005512:	3a01      	subs	r2, #1
 8005514:	0412      	lsls	r2, r2, #16
 8005516:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800551a:	4311      	orrs	r1, r2
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005520:	3a01      	subs	r2, #1
 8005522:	0612      	lsls	r2, r2, #24
 8005524:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005528:	430a      	orrs	r2, r1
 800552a:	493e      	ldr	r1, [pc, #248]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 800552c:	4313      	orrs	r3, r2
 800552e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005530:	4b3c      	ldr	r3, [pc, #240]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 8005532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005534:	4a3b      	ldr	r2, [pc, #236]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 8005536:	f023 0310 	bic.w	r3, r3, #16
 800553a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800553c:	4b39      	ldr	r3, [pc, #228]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005544:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800554c:	00d2      	lsls	r2, r2, #3
 800554e:	4935      	ldr	r1, [pc, #212]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 8005550:	4313      	orrs	r3, r2
 8005552:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005554:	4b33      	ldr	r3, [pc, #204]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	4a32      	ldr	r2, [pc, #200]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 800555a:	f043 0310 	orr.w	r3, r3, #16
 800555e:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005560:	4b30      	ldr	r3, [pc, #192]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 8005562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005564:	f023 020c 	bic.w	r2, r3, #12
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556c:	492d      	ldr	r1, [pc, #180]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 800556e:	4313      	orrs	r3, r2
 8005570:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8005572:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005576:	2b01      	cmp	r3, #1
 8005578:	d105      	bne.n	8005586 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800557a:	4b2b      	ldr	r3, [pc, #172]	; (8005628 <HAL_RCC_OscConfig+0xd08>)
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	4a2a      	ldr	r2, [pc, #168]	; (8005628 <HAL_RCC_OscConfig+0xd08>)
 8005580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005584:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005586:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800558a:	2b01      	cmp	r3, #1
 800558c:	d107      	bne.n	800559e <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800558e:	4b25      	ldr	r3, [pc, #148]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 8005590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005594:	4a23      	ldr	r2, [pc, #140]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 8005596:	f023 0304 	bic.w	r3, r3, #4
 800559a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800559e:	4b21      	ldr	r3, [pc, #132]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	4a20      	ldr	r2, [pc, #128]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 80055a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055a8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80055aa:	4b1e      	ldr	r3, [pc, #120]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a1d      	ldr	r2, [pc, #116]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 80055b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055b4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80055b6:	f7fc ffe5 	bl	8002584 <HAL_GetTick>
 80055ba:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80055bc:	e008      	b.n	80055d0 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055be:	f7fc ffe1 	bl	8002584 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e077      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80055d0:	4b14      	ldr	r3, [pc, #80]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0f0      	beq.n	80055be <HAL_RCC_OscConfig+0xc9e>
 80055dc:	e06f      	b.n	80056be <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80055de:	4b11      	ldr	r3, [pc, #68]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a10      	ldr	r2, [pc, #64]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 80055e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055e8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80055ea:	f7fc ffcb 	bl	8002584 <HAL_GetTick>
 80055ee:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80055f0:	e008      	b.n	8005604 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f2:	f7fc ffc7 	bl	8002584 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e05d      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005604:	4b07      	ldr	r3, [pc, #28]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1f0      	bne.n	80055f2 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005610:	4b04      	ldr	r3, [pc, #16]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 8005612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005614:	4a03      	ldr	r2, [pc, #12]	; (8005624 <HAL_RCC_OscConfig+0xd04>)
 8005616:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800561a:	f023 0303 	bic.w	r3, r3, #3
 800561e:	6293      	str	r3, [r2, #40]	; 0x28
 8005620:	e04d      	b.n	80056be <HAL_RCC_OscConfig+0xd9e>
 8005622:	bf00      	nop
 8005624:	46020c00 	.word	0x46020c00
 8005628:	46020800 	.word	0x46020800
 800562c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005630:	4b25      	ldr	r3, [pc, #148]	; (80056c8 <HAL_RCC_OscConfig+0xda8>)
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005636:	4b24      	ldr	r3, [pc, #144]	; (80056c8 <HAL_RCC_OscConfig+0xda8>)
 8005638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	2b01      	cmp	r3, #1
 8005642:	d03a      	beq.n	80056ba <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	f003 0203 	and.w	r2, r3, #3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800564e:	429a      	cmp	r2, r3
 8005650:	d133      	bne.n	80056ba <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	0a1b      	lsrs	r3, r3, #8
 8005656:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005660:	429a      	cmp	r2, r3
 8005662:	d12a      	bne.n	80056ba <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	0b1b      	lsrs	r3, r3, #12
 8005668:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005670:	429a      	cmp	r2, r3
 8005672:	d122      	bne.n	80056ba <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800567e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005680:	429a      	cmp	r2, r3
 8005682:	d11a      	bne.n	80056ba <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	0a5b      	lsrs	r3, r3, #9
 8005688:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005690:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005692:	429a      	cmp	r2, r3
 8005694:	d111      	bne.n	80056ba <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	0c1b      	lsrs	r3, r3, #16
 800569a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d108      	bne.n	80056ba <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	0e1b      	lsrs	r3, r3, #24
 80056ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d001      	beq.n	80056be <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3738      	adds	r7, #56	; 0x38
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	46020c00 	.word	0x46020c00

080056cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e1d9      	b.n	8005a94 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056e0:	4b9b      	ldr	r3, [pc, #620]	; (8005950 <HAL_RCC_ClockConfig+0x284>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d910      	bls.n	8005710 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ee:	4b98      	ldr	r3, [pc, #608]	; (8005950 <HAL_RCC_ClockConfig+0x284>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f023 020f 	bic.w	r2, r3, #15
 80056f6:	4996      	ldr	r1, [pc, #600]	; (8005950 <HAL_RCC_ClockConfig+0x284>)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056fe:	4b94      	ldr	r3, [pc, #592]	; (8005950 <HAL_RCC_ClockConfig+0x284>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d001      	beq.n	8005710 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e1c1      	b.n	8005a94 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0310 	and.w	r3, r3, #16
 8005718:	2b00      	cmp	r3, #0
 800571a:	d010      	beq.n	800573e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	695a      	ldr	r2, [r3, #20]
 8005720:	4b8c      	ldr	r3, [pc, #560]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005728:	429a      	cmp	r2, r3
 800572a:	d908      	bls.n	800573e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800572c:	4b89      	ldr	r3, [pc, #548]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	4986      	ldr	r1, [pc, #536]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 800573a:	4313      	orrs	r3, r2
 800573c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d012      	beq.n	8005770 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691a      	ldr	r2, [r3, #16]
 800574e:	4b81      	ldr	r3, [pc, #516]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	091b      	lsrs	r3, r3, #4
 8005754:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005758:	429a      	cmp	r2, r3
 800575a:	d909      	bls.n	8005770 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800575c:	4b7d      	ldr	r3, [pc, #500]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	497a      	ldr	r1, [pc, #488]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 800576c:	4313      	orrs	r3, r2
 800576e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	d010      	beq.n	800579e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	4b74      	ldr	r3, [pc, #464]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005788:	429a      	cmp	r2, r3
 800578a:	d908      	bls.n	800579e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800578c:	4b71      	ldr	r3, [pc, #452]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	496e      	ldr	r1, [pc, #440]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 800579a:	4313      	orrs	r3, r2
 800579c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d010      	beq.n	80057cc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689a      	ldr	r2, [r3, #8]
 80057ae:	4b69      	ldr	r3, [pc, #420]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d908      	bls.n	80057cc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80057ba:	4b66      	ldr	r3, [pc, #408]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	f023 020f 	bic.w	r2, r3, #15
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	4963      	ldr	r1, [pc, #396]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80d2 	beq.w	800597e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80057da:	2300      	movs	r3, #0
 80057dc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d143      	bne.n	800586e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057e6:	4b5b      	ldr	r3, [pc, #364]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 80057e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d110      	bne.n	8005816 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80057f4:	4b57      	ldr	r3, [pc, #348]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 80057f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057fa:	4a56      	ldr	r2, [pc, #344]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 80057fc:	f043 0304 	orr.w	r3, r3, #4
 8005800:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005804:	4b53      	ldr	r3, [pc, #332]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 8005806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	60bb      	str	r3, [r7, #8]
 8005810:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005812:	2301      	movs	r3, #1
 8005814:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005816:	f7fc feb5 	bl	8002584 <HAL_GetTick>
 800581a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800581c:	4b4e      	ldr	r3, [pc, #312]	; (8005958 <HAL_RCC_ClockConfig+0x28c>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00f      	beq.n	8005848 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005828:	e008      	b.n	800583c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800582a:	f7fc feab 	bl	8002584 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e12b      	b.n	8005a94 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800583c:	4b46      	ldr	r3, [pc, #280]	; (8005958 <HAL_RCC_ClockConfig+0x28c>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0f0      	beq.n	800582a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005848:	7dfb      	ldrb	r3, [r7, #23]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d107      	bne.n	800585e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800584e:	4b41      	ldr	r3, [pc, #260]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 8005850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005854:	4a3f      	ldr	r2, [pc, #252]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 8005856:	f023 0304 	bic.w	r3, r3, #4
 800585a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800585e:	4b3d      	ldr	r3, [pc, #244]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d121      	bne.n	80058ae <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e112      	b.n	8005a94 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d107      	bne.n	8005886 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005876:	4b37      	ldr	r3, [pc, #220]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d115      	bne.n	80058ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e106      	b.n	8005a94 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d107      	bne.n	800589e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800588e:	4b31      	ldr	r3, [pc, #196]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0304 	and.w	r3, r3, #4
 8005896:	2b00      	cmp	r3, #0
 8005898:	d109      	bne.n	80058ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e0fa      	b.n	8005a94 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800589e:	4b2d      	ldr	r3, [pc, #180]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e0f2      	b.n	8005a94 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80058ae:	4b29      	ldr	r3, [pc, #164]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	f023 0203 	bic.w	r2, r3, #3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	4926      	ldr	r1, [pc, #152]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80058c0:	f7fc fe60 	bl	8002584 <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d112      	bne.n	80058f4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058ce:	e00a      	b.n	80058e6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058d0:	f7fc fe58 	bl	8002584 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	f241 3288 	movw	r2, #5000	; 0x1388
 80058de:	4293      	cmp	r3, r2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e0d6      	b.n	8005a94 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058e6:	4b1b      	ldr	r3, [pc, #108]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f003 030c 	and.w	r3, r3, #12
 80058ee:	2b0c      	cmp	r3, #12
 80058f0:	d1ee      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x204>
 80058f2:	e044      	b.n	800597e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d112      	bne.n	8005922 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058fc:	e00a      	b.n	8005914 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058fe:	f7fc fe41 	bl	8002584 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	f241 3288 	movw	r2, #5000	; 0x1388
 800590c:	4293      	cmp	r3, r2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e0bf      	b.n	8005a94 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005914:	4b0f      	ldr	r3, [pc, #60]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	f003 030c 	and.w	r3, r3, #12
 800591c:	2b08      	cmp	r3, #8
 800591e:	d1ee      	bne.n	80058fe <HAL_RCC_ClockConfig+0x232>
 8005920:	e02d      	b.n	800597e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d123      	bne.n	8005972 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800592a:	e00a      	b.n	8005942 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800592c:	f7fc fe2a 	bl	8002584 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	f241 3288 	movw	r2, #5000	; 0x1388
 800593a:	4293      	cmp	r3, r2
 800593c:	d901      	bls.n	8005942 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e0a8      	b.n	8005a94 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005942:	4b04      	ldr	r3, [pc, #16]	; (8005954 <HAL_RCC_ClockConfig+0x288>)
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	f003 030c 	and.w	r3, r3, #12
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1ee      	bne.n	800592c <HAL_RCC_ClockConfig+0x260>
 800594e:	e016      	b.n	800597e <HAL_RCC_ClockConfig+0x2b2>
 8005950:	40022000 	.word	0x40022000
 8005954:	46020c00 	.word	0x46020c00
 8005958:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800595c:	f7fc fe12 	bl	8002584 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	f241 3288 	movw	r2, #5000	; 0x1388
 800596a:	4293      	cmp	r3, r2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e090      	b.n	8005a94 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005972:	4b4a      	ldr	r3, [pc, #296]	; (8005a9c <HAL_RCC_ClockConfig+0x3d0>)
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	f003 030c 	and.w	r3, r3, #12
 800597a:	2b04      	cmp	r3, #4
 800597c:	d1ee      	bne.n	800595c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d010      	beq.n	80059ac <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	4b43      	ldr	r3, [pc, #268]	; (8005a9c <HAL_RCC_ClockConfig+0x3d0>)
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	429a      	cmp	r2, r3
 8005998:	d208      	bcs.n	80059ac <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800599a:	4b40      	ldr	r3, [pc, #256]	; (8005a9c <HAL_RCC_ClockConfig+0x3d0>)
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	f023 020f 	bic.w	r2, r3, #15
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	493d      	ldr	r1, [pc, #244]	; (8005a9c <HAL_RCC_ClockConfig+0x3d0>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059ac:	4b3c      	ldr	r3, [pc, #240]	; (8005aa0 <HAL_RCC_ClockConfig+0x3d4>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 030f 	and.w	r3, r3, #15
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d210      	bcs.n	80059dc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ba:	4b39      	ldr	r3, [pc, #228]	; (8005aa0 <HAL_RCC_ClockConfig+0x3d4>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f023 020f 	bic.w	r2, r3, #15
 80059c2:	4937      	ldr	r1, [pc, #220]	; (8005aa0 <HAL_RCC_ClockConfig+0x3d4>)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ca:	4b35      	ldr	r3, [pc, #212]	; (8005aa0 <HAL_RCC_ClockConfig+0x3d4>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d001      	beq.n	80059dc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e05b      	b.n	8005a94 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d010      	beq.n	8005a0a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	4b2b      	ldr	r3, [pc, #172]	; (8005a9c <HAL_RCC_ClockConfig+0x3d0>)
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d208      	bcs.n	8005a0a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80059f8:	4b28      	ldr	r3, [pc, #160]	; (8005a9c <HAL_RCC_ClockConfig+0x3d0>)
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	4925      	ldr	r1, [pc, #148]	; (8005a9c <HAL_RCC_ClockConfig+0x3d0>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0308 	and.w	r3, r3, #8
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d012      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691a      	ldr	r2, [r3, #16]
 8005a1a:	4b20      	ldr	r3, [pc, #128]	; (8005a9c <HAL_RCC_ClockConfig+0x3d0>)
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	091b      	lsrs	r3, r3, #4
 8005a20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d209      	bcs.n	8005a3c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005a28:	4b1c      	ldr	r3, [pc, #112]	; (8005a9c <HAL_RCC_ClockConfig+0x3d0>)
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	4919      	ldr	r1, [pc, #100]	; (8005a9c <HAL_RCC_ClockConfig+0x3d0>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0310 	and.w	r3, r3, #16
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d010      	beq.n	8005a6a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	695a      	ldr	r2, [r3, #20]
 8005a4c:	4b13      	ldr	r3, [pc, #76]	; (8005a9c <HAL_RCC_ClockConfig+0x3d0>)
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d208      	bcs.n	8005a6a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005a58:	4b10      	ldr	r3, [pc, #64]	; (8005a9c <HAL_RCC_ClockConfig+0x3d0>)
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	490d      	ldr	r1, [pc, #52]	; (8005a9c <HAL_RCC_ClockConfig+0x3d0>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005a6a:	f000 f821 	bl	8005ab0 <HAL_RCC_GetSysClockFreq>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <HAL_RCC_ClockConfig+0x3d0>)
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	f003 030f 	and.w	r3, r3, #15
 8005a78:	490a      	ldr	r1, [pc, #40]	; (8005aa4 <HAL_RCC_ClockConfig+0x3d8>)
 8005a7a:	5ccb      	ldrb	r3, [r1, r3]
 8005a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a80:	4a09      	ldr	r2, [pc, #36]	; (8005aa8 <HAL_RCC_ClockConfig+0x3dc>)
 8005a82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a84:	4b09      	ldr	r3, [pc, #36]	; (8005aac <HAL_RCC_ClockConfig+0x3e0>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fc fd31 	bl	80024f0 <HAL_InitTick>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	73fb      	strb	r3, [r7, #15]

  return status;
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3718      	adds	r7, #24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	46020c00 	.word	0x46020c00
 8005aa0:	40022000 	.word	0x40022000
 8005aa4:	080155ac 	.word	0x080155ac
 8005aa8:	2000001c 	.word	0x2000001c
 8005aac:	20000020 	.word	0x20000020

08005ab0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b08b      	sub	sp, #44	; 0x2c
 8005ab4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005abe:	4b7b      	ldr	r3, [pc, #492]	; (8005cac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	f003 030c 	and.w	r3, r3, #12
 8005ac6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ac8:	4b78      	ldr	r3, [pc, #480]	; (8005cac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005acc:	f003 0303 	and.w	r3, r3, #3
 8005ad0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d005      	beq.n	8005ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	2b0c      	cmp	r3, #12
 8005adc:	d121      	bne.n	8005b22 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d11e      	bne.n	8005b22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005ae4:	4b71      	ldr	r3, [pc, #452]	; (8005cac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d107      	bne.n	8005b00 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005af0:	4b6e      	ldr	r3, [pc, #440]	; (8005cac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005af2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005af6:	0b1b      	lsrs	r3, r3, #12
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
 8005afe:	e005      	b.n	8005b0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005b00:	4b6a      	ldr	r3, [pc, #424]	; (8005cac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	0f1b      	lsrs	r3, r3, #28
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b0c:	4a68      	ldr	r2, [pc, #416]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d110      	bne.n	8005b3e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b20:	e00d      	b.n	8005b3e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b22:	4b62      	ldr	r3, [pc, #392]	; (8005cac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	f003 030c 	and.w	r3, r3, #12
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d102      	bne.n	8005b34 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b2e:	4b61      	ldr	r3, [pc, #388]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b30:	623b      	str	r3, [r7, #32]
 8005b32:	e004      	b.n	8005b3e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d101      	bne.n	8005b3e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b3a:	4b5e      	ldr	r3, [pc, #376]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b3c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	2b0c      	cmp	r3, #12
 8005b42:	f040 80ac 	bne.w	8005c9e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005b46:	4b59      	ldr	r3, [pc, #356]	; (8005cac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005b50:	4b56      	ldr	r3, [pc, #344]	; (8005cac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	0a1b      	lsrs	r3, r3, #8
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005b5e:	4b53      	ldr	r3, [pc, #332]	; (8005cac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b62:	091b      	lsrs	r3, r3, #4
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005b6a:	4b50      	ldr	r3, [pc, #320]	; (8005cac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	08db      	lsrs	r3, r3, #3
 8005b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	fb02 f303 	mul.w	r3, r2, r3
 8005b7a:	ee07 3a90 	vmov	s15, r3
 8005b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b82:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 8086 	beq.w	8005c9a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d003      	beq.n	8005b9c <HAL_RCC_GetSysClockFreq+0xec>
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	d022      	beq.n	8005be0 <HAL_RCC_GetSysClockFreq+0x130>
 8005b9a:	e043      	b.n	8005c24 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	ee07 3a90 	vmov	s15, r3
 8005ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba6:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005cb8 <HAL_RCC_GetSysClockFreq+0x208>
 8005baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bae:	4b3f      	ldr	r3, [pc, #252]	; (8005cac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb6:	ee07 3a90 	vmov	s15, r3
 8005bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005bbe:	ed97 6a01 	vldr	s12, [r7, #4]
 8005bc2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005cbc <HAL_RCC_GetSysClockFreq+0x20c>
 8005bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bda:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005bde:	e046      	b.n	8005c6e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bea:	eddf 6a33 	vldr	s13, [pc, #204]	; 8005cb8 <HAL_RCC_GetSysClockFreq+0x208>
 8005bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bf2:	4b2e      	ldr	r3, [pc, #184]	; (8005cac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bfa:	ee07 3a90 	vmov	s15, r3
 8005bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c02:	ed97 6a01 	vldr	s12, [r7, #4]
 8005c06:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005cbc <HAL_RCC_GetSysClockFreq+0x20c>
 8005c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005c22:	e024      	b.n	8005c6e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	ee07 3a90 	vmov	s15, r3
 8005c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c3c:	4b1b      	ldr	r3, [pc, #108]	; (8005cac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c44:	ee07 3a90 	vmov	s15, r3
 8005c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c4c:	ed97 6a01 	vldr	s12, [r7, #4]
 8005c50:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8005cbc <HAL_RCC_GetSysClockFreq+0x20c>
 8005c54:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c58:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c60:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c68:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005c6c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005c6e:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c72:	0e1b      	lsrs	r3, r3, #24
 8005c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c78:	3301      	adds	r3, #1
 8005c7a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	ee07 3a90 	vmov	s15, r3
 8005c82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c86:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c92:	ee17 3a90 	vmov	r3, s15
 8005c96:	623b      	str	r3, [r7, #32]
 8005c98:	e001      	b.n	8005c9e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	372c      	adds	r7, #44	; 0x2c
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	46020c00 	.word	0x46020c00
 8005cb0:	080155c4 	.word	0x080155c4
 8005cb4:	00f42400 	.word	0x00f42400
 8005cb8:	4b742400 	.word	0x4b742400
 8005cbc:	46000000 	.word	0x46000000

08005cc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005cc4:	f7ff fef4 	bl	8005ab0 <HAL_RCC_GetSysClockFreq>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	4b07      	ldr	r3, [pc, #28]	; (8005ce8 <HAL_RCC_GetHCLKFreq+0x28>)
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f003 030f 	and.w	r3, r3, #15
 8005cd2:	4906      	ldr	r1, [pc, #24]	; (8005cec <HAL_RCC_GetHCLKFreq+0x2c>)
 8005cd4:	5ccb      	ldrb	r3, [r1, r3]
 8005cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cda:	4a05      	ldr	r2, [pc, #20]	; (8005cf0 <HAL_RCC_GetHCLKFreq+0x30>)
 8005cdc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005cde:	4b04      	ldr	r3, [pc, #16]	; (8005cf0 <HAL_RCC_GetHCLKFreq+0x30>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	46020c00 	.word	0x46020c00
 8005cec:	080155ac 	.word	0x080155ac
 8005cf0:	2000001c 	.word	0x2000001c

08005cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005cf8:	f7ff ffe2 	bl	8005cc0 <HAL_RCC_GetHCLKFreq>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	4b05      	ldr	r3, [pc, #20]	; (8005d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	091b      	lsrs	r3, r3, #4
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	4903      	ldr	r1, [pc, #12]	; (8005d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d0a:	5ccb      	ldrb	r3, [r1, r3]
 8005d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	46020c00 	.word	0x46020c00
 8005d18:	080155bc 	.word	0x080155bc

08005d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005d20:	f7ff ffce 	bl	8005cc0 <HAL_RCC_GetHCLKFreq>
 8005d24:	4602      	mov	r2, r0
 8005d26:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	0a1b      	lsrs	r3, r3, #8
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	4903      	ldr	r1, [pc, #12]	; (8005d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d32:	5ccb      	ldrb	r3, [r1, r3]
 8005d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	46020c00 	.word	0x46020c00
 8005d40:	080155bc 	.word	0x080155bc

08005d44 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005d48:	f7ff ffba 	bl	8005cc0 <HAL_RCC_GetHCLKFreq>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	091b      	lsrs	r3, r3, #4
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	4903      	ldr	r1, [pc, #12]	; (8005d68 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005d5a:	5ccb      	ldrb	r3, [r1, r3]
 8005d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	46020c00 	.word	0x46020c00
 8005d68:	080155bc 	.word	0x080155bc

08005d6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d74:	4b3e      	ldr	r3, [pc, #248]	; (8005e70 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d7a:	f003 0304 	and.w	r3, r3, #4
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d82:	f7fe fd4f 	bl	8004824 <HAL_PWREx_GetVoltageRange>
 8005d86:	6178      	str	r0, [r7, #20]
 8005d88:	e019      	b.n	8005dbe <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d8a:	4b39      	ldr	r3, [pc, #228]	; (8005e70 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d90:	4a37      	ldr	r2, [pc, #220]	; (8005e70 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d92:	f043 0304 	orr.w	r3, r3, #4
 8005d96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005d9a:	4b35      	ldr	r3, [pc, #212]	; (8005e70 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005da8:	f7fe fd3c 	bl	8004824 <HAL_PWREx_GetVoltageRange>
 8005dac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005dae:	4b30      	ldr	r3, [pc, #192]	; (8005e70 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005db4:	4a2e      	ldr	r2, [pc, #184]	; (8005e70 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005db6:	f023 0304 	bic.w	r3, r3, #4
 8005dba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005dc4:	d003      	beq.n	8005dce <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dcc:	d109      	bne.n	8005de2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dd4:	d202      	bcs.n	8005ddc <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005dda:	e033      	b.n	8005e44 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005ddc:	2300      	movs	r3, #0
 8005dde:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005de0:	e030      	b.n	8005e44 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005de8:	d208      	bcs.n	8005dfc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df0:	d102      	bne.n	8005df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005df2:	2303      	movs	r3, #3
 8005df4:	613b      	str	r3, [r7, #16]
 8005df6:	e025      	b.n	8005e44 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e035      	b.n	8005e68 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e02:	d90f      	bls.n	8005e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d109      	bne.n	8005e1e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e10:	d902      	bls.n	8005e18 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005e12:	2300      	movs	r3, #0
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	e015      	b.n	8005e44 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005e18:	2301      	movs	r3, #1
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	e012      	b.n	8005e44 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005e1e:	2300      	movs	r3, #0
 8005e20:	613b      	str	r3, [r7, #16]
 8005e22:	e00f      	b.n	8005e44 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e2a:	d109      	bne.n	8005e40 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e32:	d102      	bne.n	8005e3a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005e34:	2301      	movs	r3, #1
 8005e36:	613b      	str	r3, [r7, #16]
 8005e38:	e004      	b.n	8005e44 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	e001      	b.n	8005e44 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005e40:	2301      	movs	r3, #1
 8005e42:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e44:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f023 020f 	bic.w	r2, r3, #15
 8005e4c:	4909      	ldr	r1, [pc, #36]	; (8005e74 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005e54:	4b07      	ldr	r3, [pc, #28]	; (8005e74 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 030f 	and.w	r3, r3, #15
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d001      	beq.n	8005e66 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e000      	b.n	8005e68 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	46020c00 	.word	0x46020c00
 8005e74:	40022000 	.word	0x40022000

08005e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e7c:	b0ba      	sub	sp, #232	; 0xe8
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e84:	2300      	movs	r3, #0
 8005e86:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f002 0401 	and.w	r4, r2, #1
 8005e9c:	2500      	movs	r5, #0
 8005e9e:	ea54 0305 	orrs.w	r3, r4, r5
 8005ea2:	d00b      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005ea4:	4bcb      	ldr	r3, [pc, #812]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005eaa:	f023 0103 	bic.w	r1, r3, #3
 8005eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb4:	4ac7      	ldr	r2, [pc, #796]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eb6:	430b      	orrs	r3, r1
 8005eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ebc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec4:	f002 0802 	and.w	r8, r2, #2
 8005ec8:	f04f 0900 	mov.w	r9, #0
 8005ecc:	ea58 0309 	orrs.w	r3, r8, r9
 8005ed0:	d00b      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005ed2:	4bc0      	ldr	r3, [pc, #768]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ed8:	f023 010c 	bic.w	r1, r3, #12
 8005edc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee2:	4abc      	ldr	r2, [pc, #752]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005eea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	f002 0a04 	and.w	sl, r2, #4
 8005ef6:	f04f 0b00 	mov.w	fp, #0
 8005efa:	ea5a 030b 	orrs.w	r3, sl, fp
 8005efe:	d00b      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005f00:	4bb4      	ldr	r3, [pc, #720]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f06:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f10:	4ab0      	ldr	r2, [pc, #704]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f12:	430b      	orrs	r3, r1
 8005f14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	f002 0308 	and.w	r3, r2, #8
 8005f24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005f32:	460b      	mov	r3, r1
 8005f34:	4313      	orrs	r3, r2
 8005f36:	d00b      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005f38:	4ba6      	ldr	r3, [pc, #664]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f48:	4aa2      	ldr	r2, [pc, #648]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f4a:	430b      	orrs	r3, r1
 8005f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	f002 0310 	and.w	r3, r2, #16
 8005f5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f60:	2300      	movs	r3, #0
 8005f62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f66:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	d00b      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005f70:	4b98      	ldr	r3, [pc, #608]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f80:	4a94      	ldr	r2, [pc, #592]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f82:	430b      	orrs	r3, r1
 8005f84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f90:	f002 0320 	and.w	r3, r2, #32
 8005f94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f9e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	d00b      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005fa8:	4b8a      	ldr	r3, [pc, #552]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005faa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fae:	f023 0107 	bic.w	r1, r3, #7
 8005fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fb8:	4a86      	ldr	r2, [pc, #536]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fba:	430b      	orrs	r3, r1
 8005fbc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fd6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	d00b      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005fe0:	4b7c      	ldr	r3, [pc, #496]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fe6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005fea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ff0:	4a78      	ldr	r2, [pc, #480]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ff2:	430b      	orrs	r3, r1
 8005ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ff8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006000:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006004:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006008:	2300      	movs	r3, #0
 800600a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800600e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006012:	460b      	mov	r3, r1
 8006014:	4313      	orrs	r3, r2
 8006016:	d00b      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006018:	4b6e      	ldr	r3, [pc, #440]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800601a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800601e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006028:	4a6a      	ldr	r2, [pc, #424]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800602a:	430b      	orrs	r3, r1
 800602c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006030:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800603c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006040:	2300      	movs	r3, #0
 8006042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006046:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800604a:	460b      	mov	r3, r1
 800604c:	4313      	orrs	r3, r2
 800604e:	d00b      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006050:	4b60      	ldr	r3, [pc, #384]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006052:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006056:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800605a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800605e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006060:	4a5c      	ldr	r2, [pc, #368]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006062:	430b      	orrs	r3, r1
 8006064:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006068:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800606c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006070:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006074:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006078:	2300      	movs	r3, #0
 800607a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800607e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006082:	460b      	mov	r3, r1
 8006084:	4313      	orrs	r3, r2
 8006086:	d00b      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006088:	4b52      	ldr	r3, [pc, #328]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800608a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800608e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8006092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006098:	4a4e      	ldr	r2, [pc, #312]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800609a:	430b      	orrs	r3, r1
 800609c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80060ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060b0:	2300      	movs	r3, #0
 80060b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80060ba:	460b      	mov	r3, r1
 80060bc:	4313      	orrs	r3, r2
 80060be:	d00b      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80060c0:	4b44      	ldr	r3, [pc, #272]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060c6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80060ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060d0:	4a40      	ldr	r2, [pc, #256]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060d2:	430b      	orrs	r3, r1
 80060d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e0:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80060e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060e8:	2300      	movs	r3, #0
 80060ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80060ee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80060f2:	460b      	mov	r3, r1
 80060f4:	4313      	orrs	r3, r2
 80060f6:	d00b      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80060f8:	4b36      	ldr	r3, [pc, #216]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060fe:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8006102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006106:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006108:	4a32      	ldr	r2, [pc, #200]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800610a:	430b      	orrs	r3, r1
 800610c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006110:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800611c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006120:	2300      	movs	r3, #0
 8006122:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006126:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800612a:	460b      	mov	r3, r1
 800612c:	4313      	orrs	r3, r2
 800612e:	d00c      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006130:	4b28      	ldr	r3, [pc, #160]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006132:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006136:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800613a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800613e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006142:	4a24      	ldr	r2, [pc, #144]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006144:	430b      	orrs	r3, r1
 8006146:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800614a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006156:	67bb      	str	r3, [r7, #120]	; 0x78
 8006158:	2300      	movs	r3, #0
 800615a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800615c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006160:	460b      	mov	r3, r1
 8006162:	4313      	orrs	r3, r2
 8006164:	d04f      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800616a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800616e:	2b80      	cmp	r3, #128	; 0x80
 8006170:	d02d      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006172:	2b80      	cmp	r3, #128	; 0x80
 8006174:	d827      	bhi.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006176:	2b60      	cmp	r3, #96	; 0x60
 8006178:	d02e      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800617a:	2b60      	cmp	r3, #96	; 0x60
 800617c:	d823      	bhi.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800617e:	2b40      	cmp	r3, #64	; 0x40
 8006180:	d006      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8006182:	2b40      	cmp	r3, #64	; 0x40
 8006184:	d81f      	bhi.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d009      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x326>
 800618a:	2b20      	cmp	r3, #32
 800618c:	d011      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800618e:	e01a      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006190:	4b10      	ldr	r3, [pc, #64]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006194:	4a0f      	ldr	r2, [pc, #60]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800619a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800619c:	e01d      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800619e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061a2:	3308      	adds	r3, #8
 80061a4:	4618      	mov	r0, r3
 80061a6:	f002 f981 	bl	80084ac <RCCEx_PLL2_Config>
 80061aa:	4603      	mov	r3, r0
 80061ac:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80061b0:	e013      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061b6:	332c      	adds	r3, #44	; 0x2c
 80061b8:	4618      	mov	r0, r3
 80061ba:	f002 fa0f 	bl	80085dc <RCCEx_PLL3_Config>
 80061be:	4603      	mov	r3, r0
 80061c0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80061c4:	e009      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80061cc:	e005      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80061ce:	bf00      	nop
 80061d0:	e003      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x362>
 80061d2:	bf00      	nop
 80061d4:	46020c00 	.word	0x46020c00
        break;
 80061d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061da:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10d      	bne.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80061e2:	4bb6      	ldr	r3, [pc, #728]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80061e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80061e8:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80061ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f4:	4ab1      	ldr	r2, [pc, #708]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80061f6:	430b      	orrs	r3, r1
 80061f8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80061fc:	e003      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006202:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006206:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006212:	673b      	str	r3, [r7, #112]	; 0x70
 8006214:	2300      	movs	r3, #0
 8006216:	677b      	str	r3, [r7, #116]	; 0x74
 8006218:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800621c:	460b      	mov	r3, r1
 800621e:	4313      	orrs	r3, r2
 8006220:	d053      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800622a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800622e:	d033      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006234:	d82c      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006236:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800623a:	d02f      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x424>
 800623c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006240:	d826      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006246:	d008      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800624c:	d820      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00a      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8006252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006256:	d011      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006258:	e01a      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800625a:	4b98      	ldr	r3, [pc, #608]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800625c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625e:	4a97      	ldr	r2, [pc, #604]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006264:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006266:	e01a      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006268:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800626c:	3308      	adds	r3, #8
 800626e:	4618      	mov	r0, r3
 8006270:	f002 f91c 	bl	80084ac <RCCEx_PLL2_Config>
 8006274:	4603      	mov	r3, r0
 8006276:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800627a:	e010      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800627c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006280:	332c      	adds	r3, #44	; 0x2c
 8006282:	4618      	mov	r0, r3
 8006284:	f002 f9aa 	bl	80085dc <RCCEx_PLL3_Config>
 8006288:	4603      	mov	r3, r0
 800628a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800628e:	e006      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006296:	e002      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006298:	bf00      	nop
 800629a:	e000      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800629c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800629e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10d      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80062a6:	4b85      	ldr	r3, [pc, #532]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80062a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80062ac:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80062b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062b8:	4a80      	ldr	r2, [pc, #512]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80062ba:	430b      	orrs	r3, r1
 80062bc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80062c0:	e003      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80062c6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80062ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d2:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80062d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80062d8:	2300      	movs	r3, #0
 80062da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062dc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80062e0:	460b      	mov	r3, r1
 80062e2:	4313      	orrs	r3, r2
 80062e4:	d046      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80062e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062ee:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80062f2:	d028      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80062f4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80062f8:	d821      	bhi.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80062fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062fe:	d022      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006304:	d81b      	bhi.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006306:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800630a:	d01c      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800630c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006310:	d815      	bhi.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006316:	d008      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800631c:	d80f      	bhi.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d011      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006326:	d00e      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006328:	e009      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800632a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800632e:	3308      	adds	r3, #8
 8006330:	4618      	mov	r0, r3
 8006332:	f002 f8bb 	bl	80084ac <RCCEx_PLL2_Config>
 8006336:	4603      	mov	r3, r0
 8006338:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800633c:	e004      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006344:	e000      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8006346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006348:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10d      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006350:	4b5a      	ldr	r3, [pc, #360]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006352:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006356:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800635a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800635e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006362:	4a56      	ldr	r2, [pc, #344]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006364:	430b      	orrs	r3, r1
 8006366:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800636a:	e003      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006370:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006374:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006380:	663b      	str	r3, [r7, #96]	; 0x60
 8006382:	2300      	movs	r3, #0
 8006384:	667b      	str	r3, [r7, #100]	; 0x64
 8006386:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800638a:	460b      	mov	r3, r1
 800638c:	4313      	orrs	r3, r2
 800638e:	d03f      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006390:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006398:	2b04      	cmp	r3, #4
 800639a:	d81e      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x562>
 800639c:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800639e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a2:	bf00      	nop
 80063a4:	080063e3 	.word	0x080063e3
 80063a8:	080063b9 	.word	0x080063b9
 80063ac:	080063c7 	.word	0x080063c7
 80063b0:	080063e3 	.word	0x080063e3
 80063b4:	080063e3 	.word	0x080063e3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063b8:	4b40      	ldr	r3, [pc, #256]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80063ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063bc:	4a3f      	ldr	r2, [pc, #252]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80063be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c2:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80063c4:	e00e      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063ca:	332c      	adds	r3, #44	; 0x2c
 80063cc:	4618      	mov	r0, r3
 80063ce:	f002 f905 	bl	80085dc <RCCEx_PLL3_Config>
 80063d2:	4603      	mov	r3, r0
 80063d4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80063d8:	e004      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80063e0:	e000      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 80063e2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80063e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10d      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80063ec:	4b33      	ldr	r3, [pc, #204]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80063ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80063f2:	f023 0107 	bic.w	r1, r3, #7
 80063f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fe:	4a2f      	ldr	r2, [pc, #188]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006400:	430b      	orrs	r3, r1
 8006402:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006406:	e003      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006408:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800640c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006410:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006418:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800641c:	65bb      	str	r3, [r7, #88]	; 0x58
 800641e:	2300      	movs	r3, #0
 8006420:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006422:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006426:	460b      	mov	r3, r1
 8006428:	4313      	orrs	r3, r2
 800642a:	d04d      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800642c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006434:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006438:	d028      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x614>
 800643a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800643e:	d821      	bhi.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006440:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006444:	d024      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006446:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800644a:	d81b      	bhi.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800644c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006450:	d00e      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8006452:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006456:	d815      	bhi.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006458:	2b00      	cmp	r3, #0
 800645a:	d01b      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800645c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006460:	d110      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006462:	4b16      	ldr	r3, [pc, #88]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006466:	4a15      	ldr	r2, [pc, #84]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800646c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800646e:	e012      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006470:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006474:	332c      	adds	r3, #44	; 0x2c
 8006476:	4618      	mov	r0, r3
 8006478:	f002 f8b0 	bl	80085dc <RCCEx_PLL3_Config>
 800647c:	4603      	mov	r3, r0
 800647e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006482:	e008      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800648a:	e004      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800648c:	bf00      	nop
 800648e:	e002      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006490:	bf00      	nop
 8006492:	e000      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006494:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006496:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d110      	bne.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800649e:	4b07      	ldr	r3, [pc, #28]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80064a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064a4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80064a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064b0:	4a02      	ldr	r2, [pc, #8]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80064b2:	430b      	orrs	r3, r1
 80064b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80064b8:	e006      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80064ba:	bf00      	nop
 80064bc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80064c4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d0:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80064d4:	653b      	str	r3, [r7, #80]	; 0x50
 80064d6:	2300      	movs	r3, #0
 80064d8:	657b      	str	r3, [r7, #84]	; 0x54
 80064da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80064de:	460b      	mov	r3, r1
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f000 80b5 	beq.w	8006650 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064e6:	2300      	movs	r3, #0
 80064e8:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064ec:	4b9d      	ldr	r3, [pc, #628]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80064ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064f2:	f003 0304 	and.w	r3, r3, #4
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d113      	bne.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064fa:	4b9a      	ldr	r3, [pc, #616]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80064fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006500:	4a98      	ldr	r2, [pc, #608]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006502:	f043 0304 	orr.w	r3, r3, #4
 8006506:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800650a:	4b96      	ldr	r3, [pc, #600]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800650c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006518:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800651c:	2301      	movs	r3, #1
 800651e:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006522:	4b91      	ldr	r3, [pc, #580]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006526:	4a90      	ldr	r2, [pc, #576]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006528:	f043 0301 	orr.w	r3, r3, #1
 800652c:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800652e:	f7fc f829 	bl	8002584 <HAL_GetTick>
 8006532:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006536:	e00b      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006538:	f7fc f824 	bl	8002584 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	2b02      	cmp	r3, #2
 8006546:	d903      	bls.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800654e:	e005      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006550:	4b85      	ldr	r3, [pc, #532]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d0ed      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800655c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d165      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006564:	4b7f      	ldr	r3, [pc, #508]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800656a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800656e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006576:	2b00      	cmp	r3, #0
 8006578:	d023      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800657a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800657e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006586:	4293      	cmp	r3, r2
 8006588:	d01b      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800658a:	4b76      	ldr	r3, [pc, #472]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800658c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006594:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006598:	4b72      	ldr	r3, [pc, #456]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800659a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800659e:	4a71      	ldr	r2, [pc, #452]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065a8:	4b6e      	ldr	r3, [pc, #440]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065ae:	4a6d      	ldr	r2, [pc, #436]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065b8:	4a6a      	ldr	r2, [pc, #424]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d019      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ce:	f7fb ffd9 	bl	8002584 <HAL_GetTick>
 80065d2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065d6:	e00d      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065d8:	f7fb ffd4 	bl	8002584 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065e2:	1ad2      	subs	r2, r2, r3
 80065e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d903      	bls.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 80065f2:	e006      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065f4:	4b5b      	ldr	r3, [pc, #364]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0ea      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8006602:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10d      	bne.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800660a:	4b56      	ldr	r3, [pc, #344]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800660c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006610:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006614:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006618:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800661c:	4a51      	ldr	r2, [pc, #324]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800661e:	430b      	orrs	r3, r1
 8006620:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006624:	e008      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006626:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800662a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800662e:	e003      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006630:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006634:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006638:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800663c:	2b01      	cmp	r3, #1
 800663e:	d107      	bne.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006640:	4b48      	ldr	r3, [pc, #288]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006646:	4a47      	ldr	r2, [pc, #284]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006648:	f023 0304 	bic.w	r3, r3, #4
 800664c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006650:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800665c:	64bb      	str	r3, [r7, #72]	; 0x48
 800665e:	2300      	movs	r3, #0
 8006660:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006662:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006666:	460b      	mov	r3, r1
 8006668:	4313      	orrs	r3, r2
 800666a:	d042      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800666c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006670:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006674:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006678:	d022      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800667a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800667e:	d81b      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006680:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006684:	d011      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x832>
 8006686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800668a:	d815      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800668c:	2b00      	cmp	r3, #0
 800668e:	d019      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8006690:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006694:	d110      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800669a:	3308      	adds	r3, #8
 800669c:	4618      	mov	r0, r3
 800669e:	f001 ff05 	bl	80084ac <RCCEx_PLL2_Config>
 80066a2:	4603      	mov	r3, r0
 80066a4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80066a8:	e00d      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066aa:	4b2e      	ldr	r3, [pc, #184]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ae:	4a2d      	ldr	r2, [pc, #180]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066b4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80066b6:	e006      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80066be:	e002      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80066c0:	bf00      	nop
 80066c2:	e000      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80066c4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80066c6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10d      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80066ce:	4b25      	ldr	r3, [pc, #148]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066d4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80066d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80066e0:	4a20      	ldr	r2, [pc, #128]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066e2:	430b      	orrs	r3, r1
 80066e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80066e8:	e003      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ea:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80066ee:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80066fe:	643b      	str	r3, [r7, #64]	; 0x40
 8006700:	2300      	movs	r3, #0
 8006702:	647b      	str	r3, [r7, #68]	; 0x44
 8006704:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006708:	460b      	mov	r3, r1
 800670a:	4313      	orrs	r3, r2
 800670c:	d032      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800670e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006712:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800671a:	d00b      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800671c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006720:	d804      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006722:	2b00      	cmp	r3, #0
 8006724:	d008      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800672a:	d007      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006732:	e004      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006734:	bf00      	nop
 8006736:	e002      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006738:	bf00      	nop
 800673a:	e000      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800673c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800673e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d112      	bne.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006746:	4b07      	ldr	r3, [pc, #28]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006748:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800674c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006750:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006754:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006758:	4a02      	ldr	r2, [pc, #8]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800675a:	430b      	orrs	r3, r1
 800675c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006760:	e008      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8006762:	bf00      	nop
 8006764:	46020c00 	.word	0x46020c00
 8006768:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006770:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006774:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006780:	63bb      	str	r3, [r7, #56]	; 0x38
 8006782:	2300      	movs	r3, #0
 8006784:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006786:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800678a:	460b      	mov	r3, r1
 800678c:	4313      	orrs	r3, r2
 800678e:	d00c      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006790:	4b98      	ldr	r3, [pc, #608]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006792:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006796:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800679a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800679e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067a2:	4a94      	ldr	r2, [pc, #592]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80067a4:	430b      	orrs	r3, r1
 80067a6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80067aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80067b6:	633b      	str	r3, [r7, #48]	; 0x30
 80067b8:	2300      	movs	r3, #0
 80067ba:	637b      	str	r3, [r7, #52]	; 0x34
 80067bc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80067c0:	460b      	mov	r3, r1
 80067c2:	4313      	orrs	r3, r2
 80067c4:	d019      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80067c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067d2:	d105      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067d4:	4b87      	ldr	r3, [pc, #540]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80067d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d8:	4a86      	ldr	r2, [pc, #536]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80067da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067de:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80067e0:	4b84      	ldr	r3, [pc, #528]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80067e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80067e6:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80067ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067f2:	4a80      	ldr	r2, [pc, #512]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80067f4:	430b      	orrs	r3, r1
 80067f6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80067fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006802:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006806:	62bb      	str	r3, [r7, #40]	; 0x28
 8006808:	2300      	movs	r3, #0
 800680a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800680c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006810:	460b      	mov	r3, r1
 8006812:	4313      	orrs	r3, r2
 8006814:	d00c      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006816:	4b77      	ldr	r3, [pc, #476]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800681c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006820:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006824:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006828:	4972      	ldr	r1, [pc, #456]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800682a:	4313      	orrs	r3, r2
 800682c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006830:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006838:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800683c:	623b      	str	r3, [r7, #32]
 800683e:	2300      	movs	r3, #0
 8006840:	627b      	str	r3, [r7, #36]	; 0x24
 8006842:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006846:	460b      	mov	r3, r1
 8006848:	4313      	orrs	r3, r2
 800684a:	d00c      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800684c:	4b69      	ldr	r3, [pc, #420]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800684e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006852:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800685a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800685e:	4965      	ldr	r1, [pc, #404]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006860:	4313      	orrs	r3, r2
 8006862:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006866:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006872:	61bb      	str	r3, [r7, #24]
 8006874:	2300      	movs	r3, #0
 8006876:	61fb      	str	r3, [r7, #28]
 8006878:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800687c:	460b      	mov	r3, r1
 800687e:	4313      	orrs	r3, r2
 8006880:	d00c      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006882:	4b5c      	ldr	r3, [pc, #368]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006884:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006888:	f023 0218 	bic.w	r2, r3, #24
 800688c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006890:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006894:	4957      	ldr	r1, [pc, #348]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006896:	4313      	orrs	r3, r2
 8006898:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800689c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80068a8:	613b      	str	r3, [r7, #16]
 80068aa:	2300      	movs	r3, #0
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80068b2:	460b      	mov	r3, r1
 80068b4:	4313      	orrs	r3, r2
 80068b6:	d032      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80068b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068c4:	d105      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068c6:	4b4b      	ldr	r3, [pc, #300]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80068c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ca:	4a4a      	ldr	r2, [pc, #296]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80068cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068d0:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80068d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068de:	d108      	bne.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80068e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068e4:	3308      	adds	r3, #8
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 fde0 	bl	80084ac <RCCEx_PLL2_Config>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 80068f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10d      	bne.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80068fa:	4b3e      	ldr	r3, [pc, #248]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80068fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006900:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006904:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006908:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800690c:	4939      	ldr	r1, [pc, #228]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800690e:	4313      	orrs	r3, r2
 8006910:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006914:	e003      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006916:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800691a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800691e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006926:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800692a:	60bb      	str	r3, [r7, #8]
 800692c:	2300      	movs	r3, #0
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006934:	460b      	mov	r3, r1
 8006936:	4313      	orrs	r3, r2
 8006938:	d03a      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800693a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800693e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006942:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006946:	d00e      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006948:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800694c:	d815      	bhi.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d017      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006952:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006956:	d110      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006958:	4b26      	ldr	r3, [pc, #152]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800695a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695c:	4a25      	ldr	r2, [pc, #148]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800695e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006962:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006964:	e00e      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800696a:	3308      	adds	r3, #8
 800696c:	4618      	mov	r0, r3
 800696e:	f001 fd9d 	bl	80084ac <RCCEx_PLL2_Config>
 8006972:	4603      	mov	r3, r0
 8006974:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006978:	e004      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006980:	e000      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8006982:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006984:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10d      	bne.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800698c:	4b19      	ldr	r3, [pc, #100]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800698e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006992:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800699a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800699e:	4915      	ldr	r1, [pc, #84]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80069a6:	e003      	b.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80069ac:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80069b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80069bc:	603b      	str	r3, [r7, #0]
 80069be:	2300      	movs	r3, #0
 80069c0:	607b      	str	r3, [r7, #4]
 80069c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80069c6:	460b      	mov	r3, r1
 80069c8:	4313      	orrs	r3, r2
 80069ca:	d00c      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80069cc:	4b09      	ldr	r3, [pc, #36]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80069ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069d2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80069d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80069de:	4905      	ldr	r1, [pc, #20]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80069e6:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	37e8      	adds	r7, #232	; 0xe8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069f4:	46020c00 	.word	0x46020c00

080069f8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b089      	sub	sp, #36	; 0x24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006a00:	4bac      	ldr	r3, [pc, #688]	; (8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a08:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006a0a:	4baa      	ldr	r3, [pc, #680]	; (8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0e:	f003 0303 	and.w	r3, r3, #3
 8006a12:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006a14:	4ba7      	ldr	r3, [pc, #668]	; (8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a18:	0a1b      	lsrs	r3, r3, #8
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	3301      	adds	r3, #1
 8006a20:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006a22:	4ba4      	ldr	r3, [pc, #656]	; (8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a26:	f003 0310 	and.w	r3, r3, #16
 8006a2a:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006a2c:	4ba1      	ldr	r3, [pc, #644]	; (8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a30:	08db      	lsrs	r3, r3, #3
 8006a32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	fb02 f303 	mul.w	r3, r2, r3
 8006a3c:	ee07 3a90 	vmov	s15, r3
 8006a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a44:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 8123 	beq.w	8006c96 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d062      	beq.n	8006b1c <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	f200 8081 	bhi.w	8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d024      	beq.n	8006aae <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d17a      	bne.n	8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	ee07 3a90 	vmov	s15, r3
 8006a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a74:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006a78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a7c:	4b8d      	ldr	r3, [pc, #564]	; (8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a84:	ee07 3a90 	vmov	s15, r3
 8006a88:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a90:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006a94:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a98:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aac:	e08f      	b.n	8006bce <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006aae:	4b81      	ldr	r3, [pc, #516]	; (8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d005      	beq.n	8006ac6 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8006aba:	4b7e      	ldr	r3, [pc, #504]	; (8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	0f1b      	lsrs	r3, r3, #28
 8006ac0:	f003 030f 	and.w	r3, r3, #15
 8006ac4:	e006      	b.n	8006ad4 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8006ac6:	4b7b      	ldr	r3, [pc, #492]	; (8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ac8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006acc:	041b      	lsls	r3, r3, #16
 8006ace:	0f1b      	lsrs	r3, r3, #28
 8006ad0:	f003 030f 	and.w	r3, r3, #15
 8006ad4:	4a7a      	ldr	r2, [pc, #488]	; (8006cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	ee07 3a90 	vmov	s15, r3
 8006ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006afe:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b1a:	e058      	b.n	8006bce <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	ee07 3a90 	vmov	s15, r3
 8006b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b26:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b2e:	4b61      	ldr	r3, [pc, #388]	; (8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b42:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b5e:	e036      	b.n	8006bce <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006b60:	4b54      	ldr	r3, [pc, #336]	; (8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d005      	beq.n	8006b78 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8006b6c:	4b51      	ldr	r3, [pc, #324]	; (8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	0f1b      	lsrs	r3, r3, #28
 8006b72:	f003 030f 	and.w	r3, r3, #15
 8006b76:	e006      	b.n	8006b86 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8006b78:	4b4e      	ldr	r3, [pc, #312]	; (8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b7e:	041b      	lsls	r3, r3, #16
 8006b80:	0f1b      	lsrs	r3, r3, #28
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	4a4e      	ldr	r2, [pc, #312]	; (8006cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b8c:	ee07 3a90 	vmov	s15, r3
 8006b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	ee07 3a90 	vmov	s15, r3
 8006ba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bac:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bb0:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006bb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bcc:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006bce:	4b39      	ldr	r3, [pc, #228]	; (8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d017      	beq.n	8006c0a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006bda:	4b36      	ldr	r3, [pc, #216]	; (8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bde:	0a5b      	lsrs	r3, r3, #9
 8006be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be4:	ee07 3a90 	vmov	s15, r3
 8006be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006bec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bf0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006bf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c00:	ee17 2a90 	vmov	r2, s15
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	e002      	b.n	8006c10 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006c10:	4b28      	ldr	r3, [pc, #160]	; (8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d017      	beq.n	8006c4c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c1c:	4b25      	ldr	r3, [pc, #148]	; (8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c20:	0c1b      	lsrs	r3, r3, #16
 8006c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c26:	ee07 3a90 	vmov	s15, r3
 8006c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006c2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c32:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c36:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c42:	ee17 2a90 	vmov	r2, s15
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	605a      	str	r2, [r3, #4]
 8006c4a:	e002      	b.n	8006c52 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006c52:	4b18      	ldr	r3, [pc, #96]	; (8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d017      	beq.n	8006c8e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c5e:	4b15      	ldr	r3, [pc, #84]	; (8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c62:	0e1b      	lsrs	r3, r3, #24
 8006c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c68:	ee07 3a90 	vmov	s15, r3
 8006c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006c70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c74:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c78:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c84:	ee17 2a90 	vmov	r2, s15
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006c8c:	e00c      	b.n	8006ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	609a      	str	r2, [r3, #8]
}
 8006c94:	e008      	b.n	8006ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	609a      	str	r2, [r3, #8]
}
 8006ca8:	bf00      	nop
 8006caa:	3724      	adds	r7, #36	; 0x24
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	46020c00 	.word	0x46020c00
 8006cb8:	4b742400 	.word	0x4b742400
 8006cbc:	46000000 	.word	0x46000000
 8006cc0:	080155c4 	.word	0x080155c4

08006cc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b089      	sub	sp, #36	; 0x24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006ccc:	4bac      	ldr	r3, [pc, #688]	; (8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006cd6:	4baa      	ldr	r3, [pc, #680]	; (8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cda:	f003 0303 	and.w	r3, r3, #3
 8006cde:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006ce0:	4ba7      	ldr	r3, [pc, #668]	; (8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	0a1b      	lsrs	r3, r3, #8
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	3301      	adds	r3, #1
 8006cec:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8006cee:	4ba4      	ldr	r3, [pc, #656]	; (8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf2:	f003 0310 	and.w	r3, r3, #16
 8006cf6:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006cf8:	4ba1      	ldr	r3, [pc, #644]	; (8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfc:	08db      	lsrs	r3, r3, #3
 8006cfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	fb02 f303 	mul.w	r3, r2, r3
 8006d08:	ee07 3a90 	vmov	s15, r3
 8006d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d10:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 8123 	beq.w	8006f62 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d062      	beq.n	8006de8 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	f200 8081 	bhi.w	8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d024      	beq.n	8006d7a <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d17a      	bne.n	8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	ee07 3a90 	vmov	s15, r3
 8006d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d40:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006d44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d48:	4b8d      	ldr	r3, [pc, #564]	; (8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d50:	ee07 3a90 	vmov	s15, r3
 8006d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d58:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d5c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006f88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006d60:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006d64:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d78:	e08f      	b.n	8006e9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006d7a:	4b81      	ldr	r3, [pc, #516]	; (8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d005      	beq.n	8006d92 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8006d86:	4b7e      	ldr	r3, [pc, #504]	; (8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	0f1b      	lsrs	r3, r3, #28
 8006d8c:	f003 030f 	and.w	r3, r3, #15
 8006d90:	e006      	b.n	8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8006d92:	4b7b      	ldr	r3, [pc, #492]	; (8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d98:	041b      	lsls	r3, r3, #16
 8006d9a:	0f1b      	lsrs	r3, r3, #28
 8006d9c:	f003 030f 	and.w	r3, r3, #15
 8006da0:	4a7a      	ldr	r2, [pc, #488]	; (8006f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006da6:	ee07 3a90 	vmov	s15, r3
 8006daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	ee07 3a90 	vmov	s15, r3
 8006db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	ee07 3a90 	vmov	s15, r3
 8006dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dca:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006f88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006de6:	e058      	b.n	8006e9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	ee07 3a90 	vmov	s15, r3
 8006dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df2:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dfa:	4b61      	ldr	r3, [pc, #388]	; (8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e0e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006f88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e2a:	e036      	b.n	8006e9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006e2c:	4b54      	ldr	r3, [pc, #336]	; (8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8006e38:	4b51      	ldr	r3, [pc, #324]	; (8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	0f1b      	lsrs	r3, r3, #28
 8006e3e:	f003 030f 	and.w	r3, r3, #15
 8006e42:	e006      	b.n	8006e52 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8006e44:	4b4e      	ldr	r3, [pc, #312]	; (8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e4a:	041b      	lsls	r3, r3, #16
 8006e4c:	0f1b      	lsrs	r3, r3, #28
 8006e4e:	f003 030f 	and.w	r3, r3, #15
 8006e52:	4a4e      	ldr	r2, [pc, #312]	; (8006f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e58:	ee07 3a90 	vmov	s15, r3
 8006e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	ee07 3a90 	vmov	s15, r3
 8006e74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e78:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e7c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006f88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006e80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e98:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006e9a:	4b39      	ldr	r3, [pc, #228]	; (8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d017      	beq.n	8006ed6 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006ea6:	4b36      	ldr	r3, [pc, #216]	; (8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eaa:	0a5b      	lsrs	r3, r3, #9
 8006eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb0:	ee07 3a90 	vmov	s15, r3
 8006eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006eb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ebc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006ec0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ecc:	ee17 2a90 	vmov	r2, s15
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	e002      	b.n	8006edc <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006edc:	4b28      	ldr	r3, [pc, #160]	; (8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d017      	beq.n	8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006ee8:	4b25      	ldr	r3, [pc, #148]	; (8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eec:	0c1b      	lsrs	r3, r3, #16
 8006eee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006efa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006efe:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f02:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f0e:	ee17 2a90 	vmov	r2, s15
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	605a      	str	r2, [r3, #4]
 8006f16:	e002      	b.n	8006f1e <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006f1e:	4b18      	ldr	r3, [pc, #96]	; (8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d017      	beq.n	8006f5a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f2a:	4b15      	ldr	r3, [pc, #84]	; (8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2e:	0e1b      	lsrs	r3, r3, #24
 8006f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f34:	ee07 3a90 	vmov	s15, r3
 8006f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006f3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f40:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f44:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f50:	ee17 2a90 	vmov	r2, s15
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006f58:	e00c      	b.n	8006f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	609a      	str	r2, [r3, #8]
}
 8006f60:	e008      	b.n	8006f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	609a      	str	r2, [r3, #8]
}
 8006f74:	bf00      	nop
 8006f76:	3724      	adds	r7, #36	; 0x24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	46020c00 	.word	0x46020c00
 8006f84:	4b742400 	.word	0x4b742400
 8006f88:	46000000 	.word	0x46000000
 8006f8c:	080155c4 	.word	0x080155c4

08006f90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b089      	sub	sp, #36	; 0x24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006f98:	4bac      	ldr	r3, [pc, #688]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006fa2:	4baa      	ldr	r3, [pc, #680]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006fac:	4ba7      	ldr	r3, [pc, #668]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb0:	0a1b      	lsrs	r3, r3, #8
 8006fb2:	f003 030f 	and.w	r3, r3, #15
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8006fba:	4ba4      	ldr	r3, [pc, #656]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fbe:	f003 0310 	and.w	r3, r3, #16
 8006fc2:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006fc4:	4ba1      	ldr	r3, [pc, #644]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fc8:	08db      	lsrs	r3, r3, #3
 8006fca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	fb02 f303 	mul.w	r3, r2, r3
 8006fd4:	ee07 3a90 	vmov	s15, r3
 8006fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fdc:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 8123 	beq.w	800722e <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	d062      	beq.n	80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	f200 8081 	bhi.w	80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d024      	beq.n	8007046 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d17a      	bne.n	80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	ee07 3a90 	vmov	s15, r3
 8007008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700c:	eddf 6a90 	vldr	s13, [pc, #576]	; 8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8007010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007014:	4b8d      	ldr	r3, [pc, #564]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800701c:	ee07 3a90 	vmov	s15, r3
 8007020:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007024:	ed97 6a02 	vldr	s12, [r7, #8]
 8007028:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8007254 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800702c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007030:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007034:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007038:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800703c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007040:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8007044:	e08f      	b.n	8007166 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007046:	4b81      	ldr	r3, [pc, #516]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d005      	beq.n	800705e <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8007052:	4b7e      	ldr	r3, [pc, #504]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	0f1b      	lsrs	r3, r3, #28
 8007058:	f003 030f 	and.w	r3, r3, #15
 800705c:	e006      	b.n	800706c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 800705e:	4b7b      	ldr	r3, [pc, #492]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007064:	041b      	lsls	r3, r3, #16
 8007066:	0f1b      	lsrs	r3, r3, #28
 8007068:	f003 030f 	and.w	r3, r3, #15
 800706c:	4a7a      	ldr	r2, [pc, #488]	; (8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800706e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007072:	ee07 3a90 	vmov	s15, r3
 8007076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	ee07 3a90 	vmov	s15, r3
 8007080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007084:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007092:	ed97 6a02 	vldr	s12, [r7, #8]
 8007096:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007254 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800709a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800709e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80070aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070b2:	e058      	b.n	8007166 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	ee07 3a90 	vmov	s15, r3
 80070ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070be:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80070c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c6:	4b61      	ldr	r3, [pc, #388]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80070c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80070d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80070da:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007254 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80070de:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80070e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80070e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80070ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070f6:	e036      	b.n	8007166 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80070f8:	4b54      	ldr	r3, [pc, #336]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d005      	beq.n	8007110 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8007104:	4b51      	ldr	r3, [pc, #324]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	0f1b      	lsrs	r3, r3, #28
 800710a:	f003 030f 	and.w	r3, r3, #15
 800710e:	e006      	b.n	800711e <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8007110:	4b4e      	ldr	r3, [pc, #312]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007112:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007116:	041b      	lsls	r3, r3, #16
 8007118:	0f1b      	lsrs	r3, r3, #28
 800711a:	f003 030f 	and.w	r3, r3, #15
 800711e:	4a4e      	ldr	r2, [pc, #312]	; (8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	ee07 3a90 	vmov	s15, r3
 8007140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007144:	ed97 6a02 	vldr	s12, [r7, #8]
 8007148:	eddf 5a42 	vldr	s11, [pc, #264]	; 8007254 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800714c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007154:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007158:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800715c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007160:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007164:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007166:	4b39      	ldr	r3, [pc, #228]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d017      	beq.n	80071a2 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007172:	4b36      	ldr	r3, [pc, #216]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007176:	0a5b      	lsrs	r3, r3, #9
 8007178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800717c:	ee07 3a90 	vmov	s15, r3
 8007180:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8007184:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007188:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800718c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007198:	ee17 2a90 	vmov	r2, s15
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	601a      	str	r2, [r3, #0]
 80071a0:	e002      	b.n	80071a8 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80071a8:	4b28      	ldr	r3, [pc, #160]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80071aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d017      	beq.n	80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80071b4:	4b25      	ldr	r3, [pc, #148]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80071b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b8:	0c1b      	lsrs	r3, r3, #16
 80071ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80071c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071ca:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80071ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80071d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071da:	ee17 2a90 	vmov	r2, s15
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	605a      	str	r2, [r3, #4]
 80071e2:	e002      	b.n	80071ea <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80071ea:	4b18      	ldr	r3, [pc, #96]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80071ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d017      	beq.n	8007226 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80071f6:	4b15      	ldr	r3, [pc, #84]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80071f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fa:	0e1b      	lsrs	r3, r3, #24
 80071fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007200:	ee07 3a90 	vmov	s15, r3
 8007204:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007208:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800720c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007210:	edd7 6a07 	vldr	s13, [r7, #28]
 8007214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800721c:	ee17 2a90 	vmov	r2, s15
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007224:	e00c      	b.n	8007240 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	609a      	str	r2, [r3, #8]
}
 800722c:	e008      	b.n	8007240 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	609a      	str	r2, [r3, #8]
}
 8007240:	bf00      	nop
 8007242:	3724      	adds	r7, #36	; 0x24
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	46020c00 	.word	0x46020c00
 8007250:	4b742400 	.word	0x4b742400
 8007254:	46000000 	.word	0x46000000
 8007258:	080155c4 	.word	0x080155c4

0800725c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08e      	sub	sp, #56	; 0x38
 8007260:	af00      	add	r7, sp, #0
 8007262:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800726a:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800726e:	430b      	orrs	r3, r1
 8007270:	d145      	bne.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007272:	4ba7      	ldr	r3, [pc, #668]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800727c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800727e:	4ba4      	ldr	r3, [pc, #656]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007280:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b02      	cmp	r3, #2
 800728a:	d108      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800728c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007292:	d104      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007294:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007298:	637b      	str	r3, [r7, #52]	; 0x34
 800729a:	f001 b8fc 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800729e:	4b9c      	ldr	r3, [pc, #624]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80072a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072ac:	d114      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80072ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072b4:	d110      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072b6:	4b96      	ldr	r3, [pc, #600]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80072b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072c4:	d103      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80072c6:	23fa      	movs	r3, #250	; 0xfa
 80072c8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072ca:	f001 b8e4 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80072ce:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80072d2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072d4:	f001 b8df 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80072d8:	4b8d      	ldr	r3, [pc, #564]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072e4:	d107      	bne.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80072e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ec:	d103      	bne.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80072ee:	4b89      	ldr	r3, [pc, #548]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80072f0:	637b      	str	r3, [r7, #52]	; 0x34
 80072f2:	f001 b8d0 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	637b      	str	r3, [r7, #52]	; 0x34
 80072fa:	f001 b8cc 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80072fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007302:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007306:	430b      	orrs	r3, r1
 8007308:	d151      	bne.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800730a:	4b81      	ldr	r3, [pc, #516]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800730c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007310:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007314:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	2b80      	cmp	r3, #128	; 0x80
 800731a:	d035      	beq.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800731c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731e:	2b80      	cmp	r3, #128	; 0x80
 8007320:	d841      	bhi.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	2b60      	cmp	r3, #96	; 0x60
 8007326:	d02a      	beq.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732a:	2b60      	cmp	r3, #96	; 0x60
 800732c:	d83b      	bhi.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	2b40      	cmp	r3, #64	; 0x40
 8007332:	d009      	beq.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007336:	2b40      	cmp	r3, #64	; 0x40
 8007338:	d835      	bhi.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00c      	beq.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8007340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007342:	2b20      	cmp	r3, #32
 8007344:	d012      	beq.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007346:	e02e      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff fb53 	bl	80069f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007356:	f001 b89e 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800735a:	f107 0318 	add.w	r3, r7, #24
 800735e:	4618      	mov	r0, r3
 8007360:	f7ff fcb0 	bl	8006cc4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007368:	f001 b895 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800736c:	f107 030c 	add.w	r3, r7, #12
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff fe0d 	bl	8006f90 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800737a:	f001 b88c 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800737e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007382:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007384:	f001 b887 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007388:	4b61      	ldr	r3, [pc, #388]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007394:	d103      	bne.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8007396:	4b60      	ldr	r3, [pc, #384]	; (8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007398:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800739a:	f001 b87c 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800739e:	2300      	movs	r3, #0
 80073a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073a2:	f001 b878 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073aa:	f001 b874 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80073ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073b2:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80073b6:	430b      	orrs	r3, r1
 80073b8:	d158      	bne.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80073ba:	4b55      	ldr	r3, [pc, #340]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80073bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80073c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073c4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073cc:	d03b      	beq.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80073ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073d4:	d846      	bhi.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073dc:	d02e      	beq.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80073de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073e4:	d83e      	bhi.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80073e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073ec:	d00b      	beq.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073f4:	d836      	bhi.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00d      	beq.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80073fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007402:	d012      	beq.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007404:	e02e      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff faf4 	bl	80069f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007414:	f001 b83f 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007418:	f107 0318 	add.w	r3, r7, #24
 800741c:	4618      	mov	r0, r3
 800741e:	f7ff fc51 	bl	8006cc4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007426:	f001 b836 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800742a:	f107 030c 	add.w	r3, r7, #12
 800742e:	4618      	mov	r0, r3
 8007430:	f7ff fdae 	bl	8006f90 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007438:	f001 b82d 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800743c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007440:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007442:	f001 b828 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007446:	4b32      	ldr	r3, [pc, #200]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800744e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007452:	d103      	bne.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007454:	4b30      	ldr	r3, [pc, #192]	; (8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007456:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007458:	f001 b81d 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800745c:	2300      	movs	r3, #0
 800745e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007460:	f001 b819 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8007464:	2300      	movs	r3, #0
 8007466:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007468:	f001 b815 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800746c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007470:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007474:	430b      	orrs	r3, r1
 8007476:	d126      	bne.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8007478:	4b25      	ldr	r3, [pc, #148]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800747a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800747e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007482:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8007484:	4b22      	ldr	r3, [pc, #136]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800748c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007490:	d106      	bne.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	2b00      	cmp	r3, #0
 8007496:	d103      	bne.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8007498:	4b1f      	ldr	r3, [pc, #124]	; (8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800749a:	637b      	str	r3, [r7, #52]	; 0x34
 800749c:	f000 bffb 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80074a0:	4b1b      	ldr	r3, [pc, #108]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ac:	d107      	bne.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80074ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074b4:	d103      	bne.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80074b6:	4b19      	ldr	r3, [pc, #100]	; (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80074b8:	637b      	str	r3, [r7, #52]	; 0x34
 80074ba:	f000 bfec 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80074be:	2300      	movs	r3, #0
 80074c0:	637b      	str	r3, [r7, #52]	; 0x34
 80074c2:	f000 bfe8 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80074c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074ca:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80074ce:	430b      	orrs	r3, r1
 80074d0:	d164      	bne.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80074d2:	4b0f      	ldr	r3, [pc, #60]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80074d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074d8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80074dc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80074e4:	d03d      	beq.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80074e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80074ec:	d852      	bhi.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074f4:	d014      	beq.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074fc:	d84a      	bhi.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	2b00      	cmp	r3, #0
 8007502:	d01f      	beq.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007506:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800750a:	d012      	beq.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800750c:	e042      	b.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800750e:	bf00      	nop
 8007510:	46020c00 	.word	0x46020c00
 8007514:	0007a120 	.word	0x0007a120
 8007518:	00f42400 	.word	0x00f42400
 800751c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007524:	4618      	mov	r0, r3
 8007526:	f7ff fa67 	bl	80069f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800752e:	f000 bfb2 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007532:	f107 0318 	add.w	r3, r7, #24
 8007536:	4618      	mov	r0, r3
 8007538:	f7ff fbc4 	bl	8006cc4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007540:	f000 bfa9 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007544:	4bab      	ldr	r3, [pc, #684]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800754c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007550:	d103      	bne.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8007552:	4ba9      	ldr	r3, [pc, #676]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007554:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007556:	f000 bf9e 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800755e:	f000 bf9a 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007562:	4ba4      	ldr	r3, [pc, #656]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d005      	beq.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800756e:	4ba1      	ldr	r3, [pc, #644]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	0e1b      	lsrs	r3, r3, #24
 8007574:	f003 030f 	and.w	r3, r3, #15
 8007578:	e006      	b.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800757a:	4b9e      	ldr	r3, [pc, #632]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800757c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007580:	041b      	lsls	r3, r3, #16
 8007582:	0e1b      	lsrs	r3, r3, #24
 8007584:	f003 030f 	and.w	r3, r3, #15
 8007588:	4a9c      	ldr	r2, [pc, #624]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800758a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800758e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007590:	f000 bf81 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007598:	f000 bf7d 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800759c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a0:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80075a4:	430b      	orrs	r3, r1
 80075a6:	d175      	bne.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80075a8:	4b92      	ldr	r3, [pc, #584]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80075ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075b2:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d15b      	bne.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80075ba:	4b8e      	ldr	r3, [pc, #568]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075c0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80075c4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80075cc:	d034      	beq.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80075ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80075d4:	d849      	bhi.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075dc:	d00b      	beq.n	80075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80075de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075e4:	d841      	bhi.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d016      	beq.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80075ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075f2:	d009      	beq.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80075f4:	e039      	b.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7ff f9fc 	bl	80069f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007602:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007604:	f000 bf47 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007608:	f107 0318 	add.w	r3, r7, #24
 800760c:	4618      	mov	r0, r3
 800760e:	f7ff fb59 	bl	8006cc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007616:	f000 bf3e 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800761a:	4b76      	ldr	r3, [pc, #472]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007626:	d103      	bne.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8007628:	4b73      	ldr	r3, [pc, #460]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800762a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800762c:	f000 bf33 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8007630:	2300      	movs	r3, #0
 8007632:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007634:	f000 bf2f 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007638:	4b6e      	ldr	r3, [pc, #440]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d005      	beq.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8007644:	4b6b      	ldr	r3, [pc, #428]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	0e1b      	lsrs	r3, r3, #24
 800764a:	f003 030f 	and.w	r3, r3, #15
 800764e:	e006      	b.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8007650:	4b68      	ldr	r3, [pc, #416]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007652:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007656:	041b      	lsls	r3, r3, #16
 8007658:	0e1b      	lsrs	r3, r3, #24
 800765a:	f003 030f 	and.w	r3, r3, #15
 800765e:	4a67      	ldr	r2, [pc, #412]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007664:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007666:	f000 bf16 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 800766a:	2300      	movs	r3, #0
 800766c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800766e:	f000 bf12 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007678:	d108      	bne.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800767a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800767e:	4618      	mov	r0, r3
 8007680:	f7ff f9ba 	bl	80069f8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007686:	637b      	str	r3, [r7, #52]	; 0x34
 8007688:	f000 bf05 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 800768c:	2300      	movs	r3, #0
 800768e:	637b      	str	r3, [r7, #52]	; 0x34
 8007690:	f000 bf01 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007698:	1e51      	subs	r1, r2, #1
 800769a:	430b      	orrs	r3, r1
 800769c:	d136      	bne.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800769e:	4b55      	ldr	r3, [pc, #340]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076a4:	f003 0303 	and.w	r3, r3, #3
 80076a8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d104      	bne.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80076b0:	f7fe fb34 	bl	8005d1c <HAL_RCC_GetPCLK2Freq>
 80076b4:	6378      	str	r0, [r7, #52]	; 0x34
 80076b6:	f000 beee 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d104      	bne.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80076c0:	f7fe f9f6 	bl	8005ab0 <HAL_RCC_GetSysClockFreq>
 80076c4:	6378      	str	r0, [r7, #52]	; 0x34
 80076c6:	f000 bee6 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80076ca:	4b4a      	ldr	r3, [pc, #296]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076d6:	d106      	bne.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80076d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d103      	bne.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 80076de:	4b48      	ldr	r3, [pc, #288]	; (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80076e0:	637b      	str	r3, [r7, #52]	; 0x34
 80076e2:	f000 bed8 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80076e6:	4b43      	ldr	r3, [pc, #268]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076ec:	f003 0302 	and.w	r3, r3, #2
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d107      	bne.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d104      	bne.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 80076fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007700:	f000 bec9 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	637b      	str	r3, [r7, #52]	; 0x34
 8007708:	f000 bec5 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800770c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007710:	1e91      	subs	r1, r2, #2
 8007712:	430b      	orrs	r3, r1
 8007714:	d136      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007716:	4b37      	ldr	r3, [pc, #220]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800771c:	f003 030c 	and.w	r3, r3, #12
 8007720:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	2b00      	cmp	r3, #0
 8007726:	d104      	bne.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007728:	f7fe fae4 	bl	8005cf4 <HAL_RCC_GetPCLK1Freq>
 800772c:	6378      	str	r0, [r7, #52]	; 0x34
 800772e:	f000 beb2 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	2b04      	cmp	r3, #4
 8007736:	d104      	bne.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007738:	f7fe f9ba 	bl	8005ab0 <HAL_RCC_GetSysClockFreq>
 800773c:	6378      	str	r0, [r7, #52]	; 0x34
 800773e:	f000 beaa 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007742:	4b2c      	ldr	r3, [pc, #176]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800774a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800774e:	d106      	bne.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8007750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007752:	2b08      	cmp	r3, #8
 8007754:	d103      	bne.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8007756:	4b2a      	ldr	r3, [pc, #168]	; (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007758:	637b      	str	r3, [r7, #52]	; 0x34
 800775a:	f000 be9c 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800775e:	4b25      	ldr	r3, [pc, #148]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007764:	f003 0302 	and.w	r3, r3, #2
 8007768:	2b02      	cmp	r3, #2
 800776a:	d107      	bne.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 800776c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776e:	2b0c      	cmp	r3, #12
 8007770:	d104      	bne.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8007772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007776:	637b      	str	r3, [r7, #52]	; 0x34
 8007778:	f000 be8d 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	637b      	str	r3, [r7, #52]	; 0x34
 8007780:	f000 be89 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007788:	1f11      	subs	r1, r2, #4
 800778a:	430b      	orrs	r3, r1
 800778c:	d13e      	bne.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800778e:	4b19      	ldr	r3, [pc, #100]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007794:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007798:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	2b00      	cmp	r3, #0
 800779e:	d104      	bne.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80077a0:	f7fe faa8 	bl	8005cf4 <HAL_RCC_GetPCLK1Freq>
 80077a4:	6378      	str	r0, [r7, #52]	; 0x34
 80077a6:	f000 be76 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80077aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ac:	2b10      	cmp	r3, #16
 80077ae:	d104      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80077b0:	f7fe f97e 	bl	8005ab0 <HAL_RCC_GetSysClockFreq>
 80077b4:	6378      	str	r0, [r7, #52]	; 0x34
 80077b6:	f000 be6e 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80077ba:	4b0e      	ldr	r3, [pc, #56]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077c6:	d106      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80077c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ca:	2b20      	cmp	r3, #32
 80077cc:	d103      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 80077ce:	4b0c      	ldr	r3, [pc, #48]	; (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80077d0:	637b      	str	r3, [r7, #52]	; 0x34
 80077d2:	f000 be60 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80077d6:	4b07      	ldr	r3, [pc, #28]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80077d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d10f      	bne.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80077e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e6:	2b30      	cmp	r3, #48	; 0x30
 80077e8:	d10c      	bne.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 80077ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ee:	637b      	str	r3, [r7, #52]	; 0x34
 80077f0:	f000 be51 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80077f4:	46020c00 	.word	0x46020c00
 80077f8:	02dc6c00 	.word	0x02dc6c00
 80077fc:	080155c4 	.word	0x080155c4
 8007800:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007804:	2300      	movs	r3, #0
 8007806:	637b      	str	r3, [r7, #52]	; 0x34
 8007808:	f000 be45 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800780c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007810:	f1a2 0108 	sub.w	r1, r2, #8
 8007814:	430b      	orrs	r3, r1
 8007816:	d136      	bne.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007818:	4b9f      	ldr	r3, [pc, #636]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800781a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800781e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007822:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007826:	2b00      	cmp	r3, #0
 8007828:	d104      	bne.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800782a:	f7fe fa63 	bl	8005cf4 <HAL_RCC_GetPCLK1Freq>
 800782e:	6378      	str	r0, [r7, #52]	; 0x34
 8007830:	f000 be31 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	2b40      	cmp	r3, #64	; 0x40
 8007838:	d104      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800783a:	f7fe f939 	bl	8005ab0 <HAL_RCC_GetSysClockFreq>
 800783e:	6378      	str	r0, [r7, #52]	; 0x34
 8007840:	f000 be29 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007844:	4b94      	ldr	r3, [pc, #592]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800784c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007850:	d106      	bne.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	2b80      	cmp	r3, #128	; 0x80
 8007856:	d103      	bne.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8007858:	4b90      	ldr	r3, [pc, #576]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800785a:	637b      	str	r3, [r7, #52]	; 0x34
 800785c:	f000 be1b 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007860:	4b8d      	ldr	r3, [pc, #564]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007862:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007866:	f003 0302 	and.w	r3, r3, #2
 800786a:	2b02      	cmp	r3, #2
 800786c:	d107      	bne.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	2bc0      	cmp	r3, #192	; 0xc0
 8007872:	d104      	bne.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8007874:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007878:	637b      	str	r3, [r7, #52]	; 0x34
 800787a:	f000 be0c 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800787e:	2300      	movs	r3, #0
 8007880:	637b      	str	r3, [r7, #52]	; 0x34
 8007882:	f000 be08 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800788a:	f1a2 0110 	sub.w	r1, r2, #16
 800788e:	430b      	orrs	r3, r1
 8007890:	d139      	bne.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007892:	4b81      	ldr	r3, [pc, #516]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800789c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800789e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d104      	bne.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80078a4:	f7fe fa26 	bl	8005cf4 <HAL_RCC_GetPCLK1Freq>
 80078a8:	6378      	str	r0, [r7, #52]	; 0x34
 80078aa:	f000 bdf4 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078b4:	d104      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80078b6:	f7fe f8fb 	bl	8005ab0 <HAL_RCC_GetSysClockFreq>
 80078ba:	6378      	str	r0, [r7, #52]	; 0x34
 80078bc:	f000 bdeb 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80078c0:	4b75      	ldr	r3, [pc, #468]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078cc:	d107      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 80078ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078d4:	d103      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 80078d6:	4b71      	ldr	r3, [pc, #452]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80078d8:	637b      	str	r3, [r7, #52]	; 0x34
 80078da:	f000 bddc 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80078de:	4b6e      	ldr	r3, [pc, #440]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80078e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078e4:	f003 0302 	and.w	r3, r3, #2
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d108      	bne.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078f2:	d104      	bne.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 80078f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078f8:	637b      	str	r3, [r7, #52]	; 0x34
 80078fa:	f000 bdcc 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80078fe:	2300      	movs	r3, #0
 8007900:	637b      	str	r3, [r7, #52]	; 0x34
 8007902:	f000 bdc8 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007906:	e9d7 2300 	ldrd	r2, r3, [r7]
 800790a:	f1a2 0120 	sub.w	r1, r2, #32
 800790e:	430b      	orrs	r3, r1
 8007910:	d158      	bne.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007912:	4b61      	ldr	r3, [pc, #388]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007914:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007918:	f003 0307 	and.w	r3, r3, #7
 800791c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800791e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007920:	2b00      	cmp	r3, #0
 8007922:	d104      	bne.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007924:	f7fe fa0e 	bl	8005d44 <HAL_RCC_GetPCLK3Freq>
 8007928:	6378      	str	r0, [r7, #52]	; 0x34
 800792a:	f000 bdb4 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	2b01      	cmp	r3, #1
 8007932:	d104      	bne.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007934:	f7fe f8bc 	bl	8005ab0 <HAL_RCC_GetSysClockFreq>
 8007938:	6378      	str	r0, [r7, #52]	; 0x34
 800793a:	f000 bdac 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800793e:	4b56      	ldr	r3, [pc, #344]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800794a:	d106      	bne.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 800794c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794e:	2b02      	cmp	r3, #2
 8007950:	d103      	bne.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8007952:	4b52      	ldr	r3, [pc, #328]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007954:	637b      	str	r3, [r7, #52]	; 0x34
 8007956:	f000 bd9e 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800795a:	4b4f      	ldr	r3, [pc, #316]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800795c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007960:	f003 0302 	and.w	r3, r3, #2
 8007964:	2b02      	cmp	r3, #2
 8007966:	d107      	bne.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8007968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796a:	2b03      	cmp	r3, #3
 800796c:	d104      	bne.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 800796e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007972:	637b      	str	r3, [r7, #52]	; 0x34
 8007974:	f000 bd8f 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007978:	4b47      	ldr	r3, [pc, #284]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0320 	and.w	r3, r3, #32
 8007980:	2b20      	cmp	r3, #32
 8007982:	d11b      	bne.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8007984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007986:	2b04      	cmp	r3, #4
 8007988:	d118      	bne.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800798a:	4b43      	ldr	r3, [pc, #268]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d005      	beq.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007996:	4b40      	ldr	r3, [pc, #256]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	0e1b      	lsrs	r3, r3, #24
 800799c:	f003 030f 	and.w	r3, r3, #15
 80079a0:	e006      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 80079a2:	4b3d      	ldr	r3, [pc, #244]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079a8:	041b      	lsls	r3, r3, #16
 80079aa:	0e1b      	lsrs	r3, r3, #24
 80079ac:	f003 030f 	and.w	r3, r3, #15
 80079b0:	4a3b      	ldr	r2, [pc, #236]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80079b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079b6:	637b      	str	r3, [r7, #52]	; 0x34
 80079b8:	f000 bd6d 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80079bc:	2300      	movs	r3, #0
 80079be:	637b      	str	r3, [r7, #52]	; 0x34
 80079c0:	f000 bd69 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80079c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079c8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80079cc:	430b      	orrs	r3, r1
 80079ce:	d169      	bne.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80079d0:	4b31      	ldr	r3, [pc, #196]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80079d6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80079da:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80079dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e2:	d104      	bne.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80079e4:	f7fe f864 	bl	8005ab0 <HAL_RCC_GetSysClockFreq>
 80079e8:	6378      	str	r0, [r7, #52]	; 0x34
 80079ea:	f000 bd54 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079f4:	d108      	bne.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079f6:	f107 0318 	add.w	r3, r7, #24
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff f962 	bl	8006cc4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	637b      	str	r3, [r7, #52]	; 0x34
 8007a04:	f000 bd47 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d104      	bne.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007a0e:	f7fe f957 	bl	8005cc0 <HAL_RCC_GetHCLKFreq>
 8007a12:	6378      	str	r0, [r7, #52]	; 0x34
 8007a14:	f000 bd3f 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007a1e:	d118      	bne.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007a20:	4b1d      	ldr	r3, [pc, #116]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d005      	beq.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007a2c:	4b1a      	ldr	r3, [pc, #104]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	0f1b      	lsrs	r3, r3, #28
 8007a32:	f003 030f 	and.w	r3, r3, #15
 8007a36:	e006      	b.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8007a38:	4b17      	ldr	r3, [pc, #92]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a3e:	041b      	lsls	r3, r3, #16
 8007a40:	0f1b      	lsrs	r3, r3, #28
 8007a42:	f003 030f 	and.w	r3, r3, #15
 8007a46:	4a16      	ldr	r2, [pc, #88]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a4e:	f000 bd22 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007a52:	4b11      	ldr	r3, [pc, #68]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a5e:	d107      	bne.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a66:	d103      	bne.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8007a68:	4b0c      	ldr	r3, [pc, #48]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a6c:	f000 bd13 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007a70:	4b09      	ldr	r3, [pc, #36]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a7c:	d107      	bne.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a84:	d103      	bne.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8007a86:	4b05      	ldr	r3, [pc, #20]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a88:	637b      	str	r3, [r7, #52]	; 0x34
 8007a8a:	f000 bd04 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	637b      	str	r3, [r7, #52]	; 0x34
 8007a92:	f000 bd00 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007a96:	bf00      	nop
 8007a98:	46020c00 	.word	0x46020c00
 8007a9c:	00f42400 	.word	0x00f42400
 8007aa0:	080155c4 	.word	0x080155c4
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007aa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aa8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007aac:	430b      	orrs	r3, r1
 8007aae:	d14e      	bne.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007ab0:	4ba8      	ldr	r3, [pc, #672]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ab2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007ab6:	f003 0307 	and.w	r3, r3, #7
 8007aba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d841      	bhi.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007ac2:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007b01 	.word	0x08007b01
 8007acc:	08007add 	.word	0x08007add
 8007ad0:	08007aef 	.word	0x08007aef
 8007ad4:	08007b0b 	.word	0x08007b0b
 8007ad8:	08007b15 	.word	0x08007b15
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7fe ff89 	bl	80069f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007aea:	f000 bcd4 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aee:	f107 030c 	add.w	r3, r7, #12
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7ff fa4c 	bl	8006f90 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007afc:	f000 bccb 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007b00:	f7fe f8de 	bl	8005cc0 <HAL_RCC_GetHCLKFreq>
 8007b04:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007b06:	f000 bcc6 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007b0a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007b0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b10:	f000 bcc1 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b14:	4b8f      	ldr	r3, [pc, #572]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d005      	beq.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8007b20:	4b8c      	ldr	r3, [pc, #560]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	0e1b      	lsrs	r3, r3, #24
 8007b26:	f003 030f 	and.w	r3, r3, #15
 8007b2a:	e006      	b.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007b2c:	4b89      	ldr	r3, [pc, #548]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b32:	041b      	lsls	r3, r3, #16
 8007b34:	0e1b      	lsrs	r3, r3, #24
 8007b36:	f003 030f 	and.w	r3, r3, #15
 8007b3a:	4a87      	ldr	r2, [pc, #540]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b42:	f000 bca8 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b4a:	f000 bca4 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b52:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8007b56:	430b      	orrs	r3, r1
 8007b58:	d15d      	bne.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007b5a:	4b7e      	ldr	r3, [pc, #504]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b60:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007b64:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b6c:	d036      	beq.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b74:	d84b      	bhi.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b7c:	d029      	beq.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b84:	d843      	bhi.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b8c:	d013      	beq.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b94:	d83b      	bhi.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d015      	beq.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ba2:	d134      	bne.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fe ff25 	bl	80069f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bb2:	f000 bc70 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bb6:	f107 030c 	add.w	r3, r7, #12
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7ff f9e8 	bl	8006f90 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bc4:	f000 bc67 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007bc8:	f7fe f87a 	bl	8005cc0 <HAL_RCC_GetHCLKFreq>
 8007bcc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007bce:	f000 bc62 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007bd2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007bd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bd8:	f000 bc5d 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007bdc:	4b5d      	ldr	r3, [pc, #372]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d005      	beq.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007be8:	4b5a      	ldr	r3, [pc, #360]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	0e1b      	lsrs	r3, r3, #24
 8007bee:	f003 030f 	and.w	r3, r3, #15
 8007bf2:	e006      	b.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8007bf4:	4b57      	ldr	r3, [pc, #348]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007bf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007bfa:	041b      	lsls	r3, r3, #16
 8007bfc:	0e1b      	lsrs	r3, r3, #24
 8007bfe:	f003 030f 	and.w	r3, r3, #15
 8007c02:	4a55      	ldr	r2, [pc, #340]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c0a:	f000 bc44 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c12:	f000 bc40 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007c16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c1a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8007c1e:	430b      	orrs	r3, r1
 8007c20:	d14a      	bne.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007c22:	4b4c      	ldr	r3, [pc, #304]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c2c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d104      	bne.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007c34:	f7fe f85e 	bl	8005cf4 <HAL_RCC_GetPCLK1Freq>
 8007c38:	6378      	str	r0, [r7, #52]	; 0x34
 8007c3a:	f000 bc2c 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c44:	d104      	bne.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c46:	f7fd ff33 	bl	8005ab0 <HAL_RCC_GetSysClockFreq>
 8007c4a:	6378      	str	r0, [r7, #52]	; 0x34
 8007c4c:	f000 bc23 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007c50:	4b40      	ldr	r3, [pc, #256]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c5c:	d107      	bne.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8007c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c64:	d103      	bne.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8007c66:	4b3d      	ldr	r3, [pc, #244]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007c68:	637b      	str	r3, [r7, #52]	; 0x34
 8007c6a:	f000 bc14 	b.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007c6e:	4b39      	ldr	r3, [pc, #228]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0320 	and.w	r3, r3, #32
 8007c76:	2b20      	cmp	r3, #32
 8007c78:	d11b      	bne.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c80:	d117      	bne.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c82:	4b34      	ldr	r3, [pc, #208]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d005      	beq.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8007c8e:	4b31      	ldr	r3, [pc, #196]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	0e1b      	lsrs	r3, r3, #24
 8007c94:	f003 030f 	and.w	r3, r3, #15
 8007c98:	e006      	b.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8007c9a:	4b2e      	ldr	r3, [pc, #184]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ca0:	041b      	lsls	r3, r3, #16
 8007ca2:	0e1b      	lsrs	r3, r3, #24
 8007ca4:	f003 030f 	and.w	r3, r3, #15
 8007ca8:	4a2b      	ldr	r2, [pc, #172]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cae:	637b      	str	r3, [r7, #52]	; 0x34
 8007cb0:	e3f1      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8007cb6:	e3ee      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cbc:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8007cc0:	430b      	orrs	r3, r1
 8007cc2:	d14d      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007cc4:	4b23      	ldr	r3, [pc, #140]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007cca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007cce:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d103      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007cd6:	f7fe f80d 	bl	8005cf4 <HAL_RCC_GetPCLK1Freq>
 8007cda:	6378      	str	r0, [r7, #52]	; 0x34
 8007cdc:	e3db      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ce4:	d103      	bne.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007ce6:	f7fd fee3 	bl	8005ab0 <HAL_RCC_GetSysClockFreq>
 8007cea:	6378      	str	r0, [r7, #52]	; 0x34
 8007cec:	e3d3      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007cee:	4b19      	ldr	r3, [pc, #100]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cfa:	d106      	bne.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d02:	d102      	bne.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8007d04:	4b15      	ldr	r3, [pc, #84]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007d06:	637b      	str	r3, [r7, #52]	; 0x34
 8007d08:	e3c5      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007d0a:	4b12      	ldr	r3, [pc, #72]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0320 	and.w	r3, r3, #32
 8007d12:	2b20      	cmp	r3, #32
 8007d14:	d11b      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8007d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d1c:	d117      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d1e:	4b0d      	ldr	r3, [pc, #52]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d005      	beq.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8007d2a:	4b0a      	ldr	r3, [pc, #40]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	0e1b      	lsrs	r3, r3, #24
 8007d30:	f003 030f 	and.w	r3, r3, #15
 8007d34:	e006      	b.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8007d36:	4b07      	ldr	r3, [pc, #28]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d3c:	041b      	lsls	r3, r3, #16
 8007d3e:	0e1b      	lsrs	r3, r3, #24
 8007d40:	f003 030f 	and.w	r3, r3, #15
 8007d44:	4a04      	ldr	r2, [pc, #16]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d4c:	e3a3      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	637b      	str	r3, [r7, #52]	; 0x34
 8007d52:	e3a0      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007d54:	46020c00 	.word	0x46020c00
 8007d58:	080155c4 	.word	0x080155c4
 8007d5c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d64:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007d68:	430b      	orrs	r3, r1
 8007d6a:	d148      	bne.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007d6c:	4b9d      	ldr	r3, [pc, #628]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007d72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d76:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7a:	2bc0      	cmp	r3, #192	; 0xc0
 8007d7c:	d024      	beq.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d80:	2bc0      	cmp	r3, #192	; 0xc0
 8007d82:	d839      	bhi.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d86:	2b80      	cmp	r3, #128	; 0x80
 8007d88:	d00d      	beq.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8c:	2b80      	cmp	r3, #128	; 0x80
 8007d8e:	d833      	bhi.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8007d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d98:	2b40      	cmp	r3, #64	; 0x40
 8007d9a:	d011      	beq.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007d9c:	e02c      	b.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007d9e:	f7fd ffd1 	bl	8005d44 <HAL_RCC_GetPCLK3Freq>
 8007da2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007da4:	e377      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007da6:	4b8f      	ldr	r3, [pc, #572]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007db2:	d102      	bne.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8007db4:	4b8c      	ldr	r3, [pc, #560]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007db6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007db8:	e36d      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dbe:	e36a      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007dc0:	f7fd fe76 	bl	8005ab0 <HAL_RCC_GetSysClockFreq>
 8007dc4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007dc6:	e366      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007dc8:	4b86      	ldr	r3, [pc, #536]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d005      	beq.n	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8007dd4:	4b83      	ldr	r3, [pc, #524]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	0f1b      	lsrs	r3, r3, #28
 8007dda:	f003 030f 	and.w	r3, r3, #15
 8007dde:	e006      	b.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8007de0:	4b80      	ldr	r3, [pc, #512]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007de2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007de6:	041b      	lsls	r3, r3, #16
 8007de8:	0f1b      	lsrs	r3, r3, #28
 8007dea:	f003 030f 	and.w	r3, r3, #15
 8007dee:	4a7f      	ldr	r2, [pc, #508]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007df4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007df6:	e34e      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dfc:	e34b      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007dfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e02:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8007e06:	430b      	orrs	r3, r1
 8007e08:	d147      	bne.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007e0a:	4b76      	ldr	r3, [pc, #472]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e14:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d103      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e1c:	f7fd ff6a 	bl	8005cf4 <HAL_RCC_GetPCLK1Freq>
 8007e20:	6378      	str	r0, [r7, #52]	; 0x34
 8007e22:	e338      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e2a:	d103      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e2c:	f7fd fe40 	bl	8005ab0 <HAL_RCC_GetSysClockFreq>
 8007e30:	6378      	str	r0, [r7, #52]	; 0x34
 8007e32:	e330      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007e34:	4b6b      	ldr	r3, [pc, #428]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e40:	d106      	bne.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8007e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e48:	d102      	bne.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8007e4a:	4b67      	ldr	r3, [pc, #412]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e4e:	e322      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007e50:	4b64      	ldr	r3, [pc, #400]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0320 	and.w	r3, r3, #32
 8007e58:	2b20      	cmp	r3, #32
 8007e5a:	d11b      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e62:	d117      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e64:	4b5f      	ldr	r3, [pc, #380]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d005      	beq.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8007e70:	4b5c      	ldr	r3, [pc, #368]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	0e1b      	lsrs	r3, r3, #24
 8007e76:	f003 030f 	and.w	r3, r3, #15
 8007e7a:	e006      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8007e7c:	4b59      	ldr	r3, [pc, #356]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e82:	041b      	lsls	r3, r3, #16
 8007e84:	0e1b      	lsrs	r3, r3, #24
 8007e86:	f003 030f 	and.w	r3, r3, #15
 8007e8a:	4a58      	ldr	r2, [pc, #352]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e90:	637b      	str	r3, [r7, #52]	; 0x34
 8007e92:	e300      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007e94:	2300      	movs	r3, #0
 8007e96:	637b      	str	r3, [r7, #52]	; 0x34
 8007e98:	e2fd      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007e9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e9e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007ea2:	430b      	orrs	r3, r1
 8007ea4:	d15b      	bne.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007ea6:	4b4f      	ldr	r3, [pc, #316]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ea8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eb0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d117      	bne.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007eb8:	4b4a      	ldr	r3, [pc, #296]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d005      	beq.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8007ec4:	4b47      	ldr	r3, [pc, #284]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	0e1b      	lsrs	r3, r3, #24
 8007eca:	f003 030f 	and.w	r3, r3, #15
 8007ece:	e006      	b.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8007ed0:	4b44      	ldr	r3, [pc, #272]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ed2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ed6:	041b      	lsls	r3, r3, #16
 8007ed8:	0e1b      	lsrs	r3, r3, #24
 8007eda:	f003 030f 	and.w	r3, r3, #15
 8007ede:	4a43      	ldr	r2, [pc, #268]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee6:	e2d6      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007ee8:	4b3e      	ldr	r3, [pc, #248]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007eee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ef2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ef6:	d112      	bne.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007efe:	d10e      	bne.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f00:	4b38      	ldr	r3, [pc, #224]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f0e:	d102      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8007f10:	23fa      	movs	r3, #250	; 0xfa
 8007f12:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f14:	e2bf      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007f16:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007f1a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f1c:	e2bb      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007f1e:	4b31      	ldr	r3, [pc, #196]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f2a:	d106      	bne.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f32:	d102      	bne.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8007f34:	4b2c      	ldr	r3, [pc, #176]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007f36:	637b      	str	r3, [r7, #52]	; 0x34
 8007f38:	e2ad      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007f3a:	4b2a      	ldr	r3, [pc, #168]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f40:	f003 0302 	and.w	r3, r3, #2
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d107      	bne.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f4e:	d103      	bne.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8007f50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f54:	637b      	str	r3, [r7, #52]	; 0x34
 8007f56:	e29e      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f5c:	e29b      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007f5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f62:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007f66:	430b      	orrs	r3, r1
 8007f68:	d162      	bne.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007f6a:	4b1e      	ldr	r3, [pc, #120]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f74:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d117      	bne.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f7c:	4b19      	ldr	r3, [pc, #100]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d005      	beq.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8007f88:	4b16      	ldr	r3, [pc, #88]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	0e1b      	lsrs	r3, r3, #24
 8007f8e:	f003 030f 	and.w	r3, r3, #15
 8007f92:	e006      	b.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8007f94:	4b13      	ldr	r3, [pc, #76]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f9a:	041b      	lsls	r3, r3, #16
 8007f9c:	0e1b      	lsrs	r3, r3, #24
 8007f9e:	f003 030f 	and.w	r3, r3, #15
 8007fa2:	4a12      	ldr	r2, [pc, #72]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8007faa:	e274      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007fac:	4b0d      	ldr	r3, [pc, #52]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007fae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fba:	d119      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fc2:	d115      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007fc4:	4b07      	ldr	r3, [pc, #28]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007fc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fd2:	d102      	bne.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8007fd4:	23fa      	movs	r3, #250	; 0xfa
 8007fd6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007fd8:	e25d      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007fda:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007fde:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007fe0:	e259      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007fe2:	bf00      	nop
 8007fe4:	46020c00 	.word	0x46020c00
 8007fe8:	00f42400 	.word	0x00f42400
 8007fec:	080155c4 	.word	0x080155c4
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007ff0:	4b9d      	ldr	r3, [pc, #628]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ffc:	d106      	bne.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008004:	d102      	bne.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8008006:	4b99      	ldr	r3, [pc, #612]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008008:	637b      	str	r3, [r7, #52]	; 0x34
 800800a:	e244      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800800c:	4b96      	ldr	r3, [pc, #600]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800800e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b02      	cmp	r3, #2
 8008018:	d107      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 800801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008020:	d103      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 8008022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008026:	637b      	str	r3, [r7, #52]	; 0x34
 8008028:	e235      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	637b      	str	r3, [r7, #52]	; 0x34
 800802e:	e232      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8008030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008034:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008038:	430b      	orrs	r3, r1
 800803a:	d147      	bne.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800803c:	4b8a      	ldr	r3, [pc, #552]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800803e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008042:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008046:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804a:	2b00      	cmp	r3, #0
 800804c:	d103      	bne.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800804e:	f7fd fe51 	bl	8005cf4 <HAL_RCC_GetPCLK1Freq>
 8008052:	6378      	str	r0, [r7, #52]	; 0x34
 8008054:	e21f      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8008056:	4b84      	ldr	r3, [pc, #528]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800805c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008060:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008064:	d112      	bne.n	800808c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800806c:	d10e      	bne.n	800808c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800806e:	4b7e      	ldr	r3, [pc, #504]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008078:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800807c:	d102      	bne.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 800807e:	23fa      	movs	r3, #250	; 0xfa
 8008080:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008082:	e208      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008084:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008088:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800808a:	e204      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800808c:	4b76      	ldr	r3, [pc, #472]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008098:	d106      	bne.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 800809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080a0:	d102      	bne.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 80080a2:	4b72      	ldr	r3, [pc, #456]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80080a4:	637b      	str	r3, [r7, #52]	; 0x34
 80080a6:	e1f6      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80080a8:	4b6f      	ldr	r3, [pc, #444]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80080aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d107      	bne.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80080b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80080bc:	d103      	bne.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 80080be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080c2:	637b      	str	r3, [r7, #52]	; 0x34
 80080c4:	e1e7      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80080c6:	2300      	movs	r3, #0
 80080c8:	637b      	str	r3, [r7, #52]	; 0x34
 80080ca:	e1e4      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80080cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080d0:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80080d4:	430b      	orrs	r3, r1
 80080d6:	d12d      	bne.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80080d8:	4b63      	ldr	r3, [pc, #396]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80080da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080de:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80080e2:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80080e4:	4b60      	ldr	r3, [pc, #384]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080f0:	d105      	bne.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 80080f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d102      	bne.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 80080f8:	4b5c      	ldr	r3, [pc, #368]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80080fa:	637b      	str	r3, [r7, #52]	; 0x34
 80080fc:	e1cb      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80080fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008104:	d107      	bne.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800810a:	4618      	mov	r0, r3
 800810c:	f7fe fc74 	bl	80069f8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8008110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008112:	637b      	str	r3, [r7, #52]	; 0x34
 8008114:	e1bf      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8008116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008118:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800811c:	d107      	bne.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800811e:	f107 0318 	add.w	r3, r7, #24
 8008122:	4618      	mov	r0, r3
 8008124:	f7fe fdce 	bl	8006cc4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	637b      	str	r3, [r7, #52]	; 0x34
 800812c:	e1b3      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800812e:	2300      	movs	r3, #0
 8008130:	637b      	str	r3, [r7, #52]	; 0x34
 8008132:	e1b0      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008134:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008138:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800813c:	430b      	orrs	r3, r1
 800813e:	d14d      	bne.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008140:	4b49      	ldr	r3, [pc, #292]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008146:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800814a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008152:	d028      	beq.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8008154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008156:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800815a:	d83c      	bhi.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008162:	d013      	beq.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800816a:	d834      	bhi.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800816c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816e:	2b00      	cmp	r3, #0
 8008170:	d004      	beq.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008178:	d004      	beq.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800817a:	e02c      	b.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800817c:	f7fd fdce 	bl	8005d1c <HAL_RCC_GetPCLK2Freq>
 8008180:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008182:	e188      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008184:	f7fd fc94 	bl	8005ab0 <HAL_RCC_GetSysClockFreq>
 8008188:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800818a:	e184      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800818c:	4b36      	ldr	r3, [pc, #216]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008198:	d102      	bne.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 800819a:	4b34      	ldr	r3, [pc, #208]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800819c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800819e:	e17a      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80081a0:	2300      	movs	r3, #0
 80081a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081a4:	e177      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80081a6:	4b30      	ldr	r3, [pc, #192]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d005      	beq.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 80081b2:	4b2d      	ldr	r3, [pc, #180]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	0e1b      	lsrs	r3, r3, #24
 80081b8:	f003 030f 	and.w	r3, r3, #15
 80081bc:	e006      	b.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80081be:	4b2a      	ldr	r3, [pc, #168]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80081c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081c4:	041b      	lsls	r3, r3, #16
 80081c6:	0e1b      	lsrs	r3, r3, #24
 80081c8:	f003 030f 	and.w	r3, r3, #15
 80081cc:	4a28      	ldr	r2, [pc, #160]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 80081ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081d4:	e15f      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081da:	e15c      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80081dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e0:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80081e4:	430b      	orrs	r3, r1
 80081e6:	d154      	bne.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80081e8:	4b1f      	ldr	r3, [pc, #124]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80081ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80081f2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081fa:	d028      	beq.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80081fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008202:	d843      	bhi.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800820a:	d013      	beq.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008212:	d83b      	bhi.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	2b00      	cmp	r3, #0
 8008218:	d004      	beq.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800821a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008220:	d004      	beq.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8008222:	e033      	b.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8008224:	f7fd fd66 	bl	8005cf4 <HAL_RCC_GetPCLK1Freq>
 8008228:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800822a:	e134      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800822c:	f7fd fc40 	bl	8005ab0 <HAL_RCC_GetSysClockFreq>
 8008230:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008232:	e130      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008234:	4b0c      	ldr	r3, [pc, #48]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800823c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008240:	d102      	bne.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8008242:	4b0a      	ldr	r3, [pc, #40]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008244:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008246:	e126      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800824c:	e123      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800824e:	4b06      	ldr	r3, [pc, #24]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00c      	beq.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 800825a:	4b03      	ldr	r3, [pc, #12]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	0e1b      	lsrs	r3, r3, #24
 8008260:	f003 030f 	and.w	r3, r3, #15
 8008264:	e00d      	b.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8008266:	bf00      	nop
 8008268:	46020c00 	.word	0x46020c00
 800826c:	00f42400 	.word	0x00f42400
 8008270:	080155c4 	.word	0x080155c4
 8008274:	4b8a      	ldr	r3, [pc, #552]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008276:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800827a:	041b      	lsls	r3, r3, #16
 800827c:	0e1b      	lsrs	r3, r3, #24
 800827e:	f003 030f 	and.w	r3, r3, #15
 8008282:	4a88      	ldr	r2, [pc, #544]	; (80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8008284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008288:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800828a:	e104      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008290:	e101      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8008292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008296:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800829a:	430b      	orrs	r3, r1
 800829c:	d16e      	bne.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800829e:	4b80      	ldr	r3, [pc, #512]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80082a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80082a4:	f003 0318 	and.w	r3, r3, #24
 80082a8:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ac:	2b18      	cmp	r3, #24
 80082ae:	d862      	bhi.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80082b0:	a201      	add	r2, pc, #4	; (adr r2, 80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 80082b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b6:	bf00      	nop
 80082b8:	0800831d 	.word	0x0800831d
 80082bc:	08008377 	.word	0x08008377
 80082c0:	08008377 	.word	0x08008377
 80082c4:	08008377 	.word	0x08008377
 80082c8:	08008377 	.word	0x08008377
 80082cc:	08008377 	.word	0x08008377
 80082d0:	08008377 	.word	0x08008377
 80082d4:	08008377 	.word	0x08008377
 80082d8:	08008325 	.word	0x08008325
 80082dc:	08008377 	.word	0x08008377
 80082e0:	08008377 	.word	0x08008377
 80082e4:	08008377 	.word	0x08008377
 80082e8:	08008377 	.word	0x08008377
 80082ec:	08008377 	.word	0x08008377
 80082f0:	08008377 	.word	0x08008377
 80082f4:	08008377 	.word	0x08008377
 80082f8:	0800832d 	.word	0x0800832d
 80082fc:	08008377 	.word	0x08008377
 8008300:	08008377 	.word	0x08008377
 8008304:	08008377 	.word	0x08008377
 8008308:	08008377 	.word	0x08008377
 800830c:	08008377 	.word	0x08008377
 8008310:	08008377 	.word	0x08008377
 8008314:	08008377 	.word	0x08008377
 8008318:	08008347 	.word	0x08008347
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800831c:	f7fd fd12 	bl	8005d44 <HAL_RCC_GetPCLK3Freq>
 8008320:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008322:	e0b8      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008324:	f7fd fbc4 	bl	8005ab0 <HAL_RCC_GetSysClockFreq>
 8008328:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800832a:	e0b4      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800832c:	4b5c      	ldr	r3, [pc, #368]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008338:	d102      	bne.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 800833a:	4b5b      	ldr	r3, [pc, #364]	; (80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 800833c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800833e:	e0aa      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008340:	2300      	movs	r3, #0
 8008342:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008344:	e0a7      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008346:	4b56      	ldr	r3, [pc, #344]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d005      	beq.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8008352:	4b53      	ldr	r3, [pc, #332]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	0e1b      	lsrs	r3, r3, #24
 8008358:	f003 030f 	and.w	r3, r3, #15
 800835c:	e006      	b.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 800835e:	4b50      	ldr	r3, [pc, #320]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008360:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008364:	041b      	lsls	r3, r3, #16
 8008366:	0e1b      	lsrs	r3, r3, #24
 8008368:	f003 030f 	and.w	r3, r3, #15
 800836c:	4a4d      	ldr	r2, [pc, #308]	; (80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800836e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008372:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008374:	e08f      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800837a:	e08c      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800837c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008380:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8008384:	430b      	orrs	r3, r1
 8008386:	d14c      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008388:	4b45      	ldr	r3, [pc, #276]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800838a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800838e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008392:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008396:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800839a:	d013      	beq.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 800839c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80083a2:	d83b      	bhi.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80083a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083aa:	d013      	beq.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083b2:	d833      	bhi.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80083b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d014      	beq.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 80083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083c0:	d014      	beq.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 80083c2:	e02b      	b.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083c4:	f107 0318 	add.w	r3, r7, #24
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fe fc7b 	bl	8006cc4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083d2:	e060      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fe fb0d 	bl	80069f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80083de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083e2:	e058      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80083e4:	f7fd fb64 	bl	8005ab0 <HAL_RCC_GetSysClockFreq>
 80083e8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80083ea:	e054      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80083ec:	4b2c      	ldr	r3, [pc, #176]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d005      	beq.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 80083f8:	4b29      	ldr	r3, [pc, #164]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	0e1b      	lsrs	r3, r3, #24
 80083fe:	f003 030f 	and.w	r3, r3, #15
 8008402:	e006      	b.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8008404:	4b26      	ldr	r3, [pc, #152]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008406:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800840a:	041b      	lsls	r3, r3, #16
 800840c:	0e1b      	lsrs	r3, r3, #24
 800840e:	f003 030f 	and.w	r3, r3, #15
 8008412:	4a24      	ldr	r2, [pc, #144]	; (80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8008414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008418:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800841a:	e03c      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800841c:	2300      	movs	r3, #0
 800841e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008420:	e039      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008422:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008426:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800842a:	430b      	orrs	r3, r1
 800842c:	d131      	bne.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800842e:	4b1c      	ldr	r3, [pc, #112]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008438:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800843a:	4b19      	ldr	r3, [pc, #100]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800843c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008440:	f003 0302 	and.w	r3, r3, #2
 8008444:	2b02      	cmp	r3, #2
 8008446:	d106      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8008448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844a:	2b00      	cmp	r3, #0
 800844c:	d103      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 800844e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008452:	637b      	str	r3, [r7, #52]	; 0x34
 8008454:	e01f      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008456:	4b12      	ldr	r3, [pc, #72]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008458:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800845c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008464:	d112      	bne.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800846c:	d10e      	bne.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800846e:	4b0c      	ldr	r3, [pc, #48]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008470:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008478:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800847c:	d102      	bne.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800847e:	23fa      	movs	r3, #250	; 0xfa
 8008480:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008482:	e008      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008484:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008488:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800848a:	e004      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800848c:	2300      	movs	r3, #0
 800848e:	637b      	str	r3, [r7, #52]	; 0x34
 8008490:	e001      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8008492:	2300      	movs	r3, #0
 8008494:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8008496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008498:	4618      	mov	r0, r3
 800849a:	3738      	adds	r7, #56	; 0x38
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	46020c00 	.word	0x46020c00
 80084a4:	080155c4 	.word	0x080155c4
 80084a8:	00f42400 	.word	0x00f42400

080084ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80084b4:	4b47      	ldr	r3, [pc, #284]	; (80085d4 <RCCEx_PLL2_Config+0x128>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a46      	ldr	r2, [pc, #280]	; (80085d4 <RCCEx_PLL2_Config+0x128>)
 80084ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084be:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80084c0:	f7fa f860 	bl	8002584 <HAL_GetTick>
 80084c4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80084c6:	e008      	b.n	80084da <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80084c8:	f7fa f85c 	bl	8002584 <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d901      	bls.n	80084da <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e077      	b.n	80085ca <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80084da:	4b3e      	ldr	r3, [pc, #248]	; (80085d4 <RCCEx_PLL2_Config+0x128>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1f0      	bne.n	80084c8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80084e6:	4b3b      	ldr	r3, [pc, #236]	; (80085d4 <RCCEx_PLL2_Config+0x128>)
 80084e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80084ee:	f023 0303 	bic.w	r3, r3, #3
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	6811      	ldr	r1, [r2, #0]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	6852      	ldr	r2, [r2, #4]
 80084fa:	3a01      	subs	r2, #1
 80084fc:	0212      	lsls	r2, r2, #8
 80084fe:	430a      	orrs	r2, r1
 8008500:	4934      	ldr	r1, [pc, #208]	; (80085d4 <RCCEx_PLL2_Config+0x128>)
 8008502:	4313      	orrs	r3, r2
 8008504:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008506:	4b33      	ldr	r3, [pc, #204]	; (80085d4 <RCCEx_PLL2_Config+0x128>)
 8008508:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800850a:	4b33      	ldr	r3, [pc, #204]	; (80085d8 <RCCEx_PLL2_Config+0x12c>)
 800850c:	4013      	ands	r3, r2
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	6892      	ldr	r2, [r2, #8]
 8008512:	3a01      	subs	r2, #1
 8008514:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	68d2      	ldr	r2, [r2, #12]
 800851c:	3a01      	subs	r2, #1
 800851e:	0252      	lsls	r2, r2, #9
 8008520:	b292      	uxth	r2, r2
 8008522:	4311      	orrs	r1, r2
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	6912      	ldr	r2, [r2, #16]
 8008528:	3a01      	subs	r2, #1
 800852a:	0412      	lsls	r2, r2, #16
 800852c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008530:	4311      	orrs	r1, r2
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	6952      	ldr	r2, [r2, #20]
 8008536:	3a01      	subs	r2, #1
 8008538:	0612      	lsls	r2, r2, #24
 800853a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800853e:	430a      	orrs	r2, r1
 8008540:	4924      	ldr	r1, [pc, #144]	; (80085d4 <RCCEx_PLL2_Config+0x128>)
 8008542:	4313      	orrs	r3, r2
 8008544:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008546:	4b23      	ldr	r3, [pc, #140]	; (80085d4 <RCCEx_PLL2_Config+0x128>)
 8008548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854a:	f023 020c 	bic.w	r2, r3, #12
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	4920      	ldr	r1, [pc, #128]	; (80085d4 <RCCEx_PLL2_Config+0x128>)
 8008554:	4313      	orrs	r3, r2
 8008556:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008558:	4b1e      	ldr	r3, [pc, #120]	; (80085d4 <RCCEx_PLL2_Config+0x128>)
 800855a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	491c      	ldr	r1, [pc, #112]	; (80085d4 <RCCEx_PLL2_Config+0x128>)
 8008562:	4313      	orrs	r3, r2
 8008564:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008566:	4b1b      	ldr	r3, [pc, #108]	; (80085d4 <RCCEx_PLL2_Config+0x128>)
 8008568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856a:	4a1a      	ldr	r2, [pc, #104]	; (80085d4 <RCCEx_PLL2_Config+0x128>)
 800856c:	f023 0310 	bic.w	r3, r3, #16
 8008570:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008572:	4b18      	ldr	r3, [pc, #96]	; (80085d4 <RCCEx_PLL2_Config+0x128>)
 8008574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800857a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	69d2      	ldr	r2, [r2, #28]
 8008582:	00d2      	lsls	r2, r2, #3
 8008584:	4913      	ldr	r1, [pc, #76]	; (80085d4 <RCCEx_PLL2_Config+0x128>)
 8008586:	4313      	orrs	r3, r2
 8008588:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800858a:	4b12      	ldr	r3, [pc, #72]	; (80085d4 <RCCEx_PLL2_Config+0x128>)
 800858c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858e:	4a11      	ldr	r2, [pc, #68]	; (80085d4 <RCCEx_PLL2_Config+0x128>)
 8008590:	f043 0310 	orr.w	r3, r3, #16
 8008594:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008596:	4b0f      	ldr	r3, [pc, #60]	; (80085d4 <RCCEx_PLL2_Config+0x128>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a0e      	ldr	r2, [pc, #56]	; (80085d4 <RCCEx_PLL2_Config+0x128>)
 800859c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80085a0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80085a2:	f7f9 ffef 	bl	8002584 <HAL_GetTick>
 80085a6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80085a8:	e008      	b.n	80085bc <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80085aa:	f7f9 ffeb 	bl	8002584 <HAL_GetTick>
 80085ae:	4602      	mov	r2, r0
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d901      	bls.n	80085bc <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e006      	b.n	80085ca <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80085bc:	4b05      	ldr	r3, [pc, #20]	; (80085d4 <RCCEx_PLL2_Config+0x128>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d0f0      	beq.n	80085aa <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80085c8:	2300      	movs	r3, #0

}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	46020c00 	.word	0x46020c00
 80085d8:	80800000 	.word	0x80800000

080085dc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80085e4:	4b47      	ldr	r3, [pc, #284]	; (8008704 <RCCEx_PLL3_Config+0x128>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a46      	ldr	r2, [pc, #280]	; (8008704 <RCCEx_PLL3_Config+0x128>)
 80085ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085ee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80085f0:	f7f9 ffc8 	bl	8002584 <HAL_GetTick>
 80085f4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085f6:	e008      	b.n	800860a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80085f8:	f7f9 ffc4 	bl	8002584 <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	2b02      	cmp	r3, #2
 8008604:	d901      	bls.n	800860a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e077      	b.n	80086fa <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800860a:	4b3e      	ldr	r3, [pc, #248]	; (8008704 <RCCEx_PLL3_Config+0x128>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1f0      	bne.n	80085f8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008616:	4b3b      	ldr	r3, [pc, #236]	; (8008704 <RCCEx_PLL3_Config+0x128>)
 8008618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800861e:	f023 0303 	bic.w	r3, r3, #3
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	6811      	ldr	r1, [r2, #0]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	6852      	ldr	r2, [r2, #4]
 800862a:	3a01      	subs	r2, #1
 800862c:	0212      	lsls	r2, r2, #8
 800862e:	430a      	orrs	r2, r1
 8008630:	4934      	ldr	r1, [pc, #208]	; (8008704 <RCCEx_PLL3_Config+0x128>)
 8008632:	4313      	orrs	r3, r2
 8008634:	630b      	str	r3, [r1, #48]	; 0x30
 8008636:	4b33      	ldr	r3, [pc, #204]	; (8008704 <RCCEx_PLL3_Config+0x128>)
 8008638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800863a:	4b33      	ldr	r3, [pc, #204]	; (8008708 <RCCEx_PLL3_Config+0x12c>)
 800863c:	4013      	ands	r3, r2
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	6892      	ldr	r2, [r2, #8]
 8008642:	3a01      	subs	r2, #1
 8008644:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	68d2      	ldr	r2, [r2, #12]
 800864c:	3a01      	subs	r2, #1
 800864e:	0252      	lsls	r2, r2, #9
 8008650:	b292      	uxth	r2, r2
 8008652:	4311      	orrs	r1, r2
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	6912      	ldr	r2, [r2, #16]
 8008658:	3a01      	subs	r2, #1
 800865a:	0412      	lsls	r2, r2, #16
 800865c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008660:	4311      	orrs	r1, r2
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	6952      	ldr	r2, [r2, #20]
 8008666:	3a01      	subs	r2, #1
 8008668:	0612      	lsls	r2, r2, #24
 800866a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800866e:	430a      	orrs	r2, r1
 8008670:	4924      	ldr	r1, [pc, #144]	; (8008704 <RCCEx_PLL3_Config+0x128>)
 8008672:	4313      	orrs	r3, r2
 8008674:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008676:	4b23      	ldr	r3, [pc, #140]	; (8008704 <RCCEx_PLL3_Config+0x128>)
 8008678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867a:	f023 020c 	bic.w	r2, r3, #12
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	4920      	ldr	r1, [pc, #128]	; (8008704 <RCCEx_PLL3_Config+0x128>)
 8008684:	4313      	orrs	r3, r2
 8008686:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008688:	4b1e      	ldr	r3, [pc, #120]	; (8008704 <RCCEx_PLL3_Config+0x128>)
 800868a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a1b      	ldr	r3, [r3, #32]
 8008690:	491c      	ldr	r1, [pc, #112]	; (8008704 <RCCEx_PLL3_Config+0x128>)
 8008692:	4313      	orrs	r3, r2
 8008694:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008696:	4b1b      	ldr	r3, [pc, #108]	; (8008704 <RCCEx_PLL3_Config+0x128>)
 8008698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869a:	4a1a      	ldr	r2, [pc, #104]	; (8008704 <RCCEx_PLL3_Config+0x128>)
 800869c:	f023 0310 	bic.w	r3, r3, #16
 80086a0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80086a2:	4b18      	ldr	r3, [pc, #96]	; (8008704 <RCCEx_PLL3_Config+0x128>)
 80086a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	69d2      	ldr	r2, [r2, #28]
 80086b2:	00d2      	lsls	r2, r2, #3
 80086b4:	4913      	ldr	r1, [pc, #76]	; (8008704 <RCCEx_PLL3_Config+0x128>)
 80086b6:	4313      	orrs	r3, r2
 80086b8:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80086ba:	4b12      	ldr	r3, [pc, #72]	; (8008704 <RCCEx_PLL3_Config+0x128>)
 80086bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086be:	4a11      	ldr	r2, [pc, #68]	; (8008704 <RCCEx_PLL3_Config+0x128>)
 80086c0:	f043 0310 	orr.w	r3, r3, #16
 80086c4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80086c6:	4b0f      	ldr	r3, [pc, #60]	; (8008704 <RCCEx_PLL3_Config+0x128>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a0e      	ldr	r2, [pc, #56]	; (8008704 <RCCEx_PLL3_Config+0x128>)
 80086cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086d0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80086d2:	f7f9 ff57 	bl	8002584 <HAL_GetTick>
 80086d6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80086d8:	e008      	b.n	80086ec <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80086da:	f7f9 ff53 	bl	8002584 <HAL_GetTick>
 80086de:	4602      	mov	r2, r0
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d901      	bls.n	80086ec <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e006      	b.n	80086fa <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80086ec:	4b05      	ldr	r3, [pc, #20]	; (8008704 <RCCEx_PLL3_Config+0x128>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d0f0      	beq.n	80086da <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	46020c00 	.word	0x46020c00
 8008708:	80800000 	.word	0x80800000

0800870c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d101      	bne.n	800871e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e0dd      	b.n	80088da <HAL_SPI_Init+0x1ce>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a70      	ldr	r2, [pc, #448]	; (80088e4 <HAL_SPI_Init+0x1d8>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d004      	beq.n	8008732 <HAL_SPI_Init+0x26>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a6e      	ldr	r2, [pc, #440]	; (80088e8 <HAL_SPI_Init+0x1dc>)
 800872e:	4293      	cmp	r3, r2
 8008730:	e000      	b.n	8008734 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8008732:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	629a      	str	r2, [r3, #40]	; 0x28

  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a69      	ldr	r2, [pc, #420]	; (80088e4 <HAL_SPI_Init+0x1d8>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d004      	beq.n	800874e <HAL_SPI_Init+0x42>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a67      	ldr	r2, [pc, #412]	; (80088e8 <HAL_SPI_Init+0x1dc>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d105      	bne.n	800875a <HAL_SPI_Init+0x4e>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	2b0f      	cmp	r3, #15
 8008754:	d901      	bls.n	800875a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e0bf      	b.n	80088da <HAL_SPI_Init+0x1ce>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fdec 	bl	8009338 <SPI_GetPacketSize>
 8008760:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a5f      	ldr	r2, [pc, #380]	; (80088e4 <HAL_SPI_Init+0x1d8>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d004      	beq.n	8008776 <HAL_SPI_Init+0x6a>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a5d      	ldr	r2, [pc, #372]	; (80088e8 <HAL_SPI_Init+0x1dc>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d102      	bne.n	800877c <HAL_SPI_Init+0x70>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2b08      	cmp	r3, #8
 800877a:	d816      	bhi.n	80087aa <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008780:	4a5a      	ldr	r2, [pc, #360]	; (80088ec <HAL_SPI_Init+0x1e0>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d00e      	beq.n	80087a4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a59      	ldr	r2, [pc, #356]	; (80088f0 <HAL_SPI_Init+0x1e4>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d009      	beq.n	80087a4 <HAL_SPI_Init+0x98>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a57      	ldr	r2, [pc, #348]	; (80088f4 <HAL_SPI_Init+0x1e8>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d004      	beq.n	80087a4 <HAL_SPI_Init+0x98>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a56      	ldr	r2, [pc, #344]	; (80088f8 <HAL_SPI_Init+0x1ec>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d104      	bne.n	80087ae <HAL_SPI_Init+0xa2>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b10      	cmp	r3, #16
 80087a8:	d901      	bls.n	80087ae <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e095      	b.n	80088da <HAL_SPI_Init+0x1ce>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d106      	bne.n	80087c8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7f9 fbf2 	bl	8001fac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2202      	movs	r2, #2
 80087cc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 0201 	bic.w	r2, r2, #1
 80087de:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80087ea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087f4:	d119      	bne.n	800882a <HAL_SPI_Init+0x11e>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087fe:	d103      	bne.n	8008808 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008804:	2b00      	cmp	r3, #0
 8008806:	d008      	beq.n	800881a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10c      	bne.n	800882a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008814:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008818:	d107      	bne.n	800882a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008828:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	69da      	ldr	r2, [r3, #28]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008832:	431a      	orrs	r2, r3
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	431a      	orrs	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800883c:	ea42 0103 	orr.w	r1, r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	68da      	ldr	r2, [r3, #12]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	430a      	orrs	r2, r1
 800884a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008854:	431a      	orrs	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885a:	431a      	orrs	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	431a      	orrs	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	431a      	orrs	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	431a      	orrs	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	431a      	orrs	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	431a      	orrs	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800887e:	431a      	orrs	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	431a      	orrs	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800888a:	431a      	orrs	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008890:	431a      	orrs	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008896:	ea42 0103 	orr.w	r1, r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	430a      	orrs	r2, r1
 80088a4:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00a      	beq.n	80088c8 <HAL_SPI_Init+0x1bc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	430a      	orrs	r2, r1
 80088c6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	46002000 	.word	0x46002000
 80088e8:	56002000 	.word	0x56002000
 80088ec:	40013000 	.word	0x40013000
 80088f0:	50013000 	.word	0x50013000
 80088f4:	40003800 	.word	0x40003800
 80088f8:	50003800 	.word	0x50003800

080088fc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08a      	sub	sp, #40	; 0x28
 8008900:	af02      	add	r7, sp, #8
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	603b      	str	r3, [r7, #0]
 8008908:	4613      	mov	r3, r2
 800890a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3320      	adds	r3, #32
 8008912:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800891e:	2b01      	cmp	r3, #1
 8008920:	d101      	bne.n	8008926 <HAL_SPI_Transmit+0x2a>
 8008922:	2302      	movs	r3, #2
 8008924:	e1f7      	b.n	8008d16 <HAL_SPI_Transmit+0x41a>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800892e:	f7f9 fe29 	bl	8002584 <HAL_GetTick>
 8008932:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b01      	cmp	r3, #1
 800893e:	d007      	beq.n	8008950 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008940:	2302      	movs	r3, #2
 8008942:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800894c:	7efb      	ldrb	r3, [r7, #27]
 800894e:	e1e2      	b.n	8008d16 <HAL_SPI_Transmit+0x41a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d002      	beq.n	800895c <HAL_SPI_Transmit+0x60>
 8008956:	88fb      	ldrh	r3, [r7, #6]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d107      	bne.n	800896c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008968:	7efb      	ldrb	r3, [r7, #27]
 800896a:	e1d4      	b.n	8008d16 <HAL_SPI_Transmit+0x41a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2203      	movs	r2, #3
 8008970:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	68ba      	ldr	r2, [r7, #8]
 8008980:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	88fa      	ldrh	r2, [r7, #6]
 8008986:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	88fa      	ldrh	r2, [r7, #6]
 800898e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80089bc:	d107      	bne.n	80089ce <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	0c1b      	lsrs	r3, r3, #16
 80089d6:	041b      	lsls	r3, r3, #16
 80089d8:	88f9      	ldrh	r1, [r7, #6]
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	6812      	ldr	r2, [r2, #0]
 80089de:	430b      	orrs	r3, r1
 80089e0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f042 0201 	orr.w	r2, r2, #1
 80089f0:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d10c      	bne.n	8008a1a <HAL_SPI_Transmit+0x11e>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a08:	d107      	bne.n	8008a1a <HAL_SPI_Transmit+0x11e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	2b0f      	cmp	r3, #15
 8008a20:	d95b      	bls.n	8008ada <HAL_SPI_Transmit+0x1de>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a8f      	ldr	r2, [pc, #572]	; (8008c64 <HAL_SPI_Transmit+0x368>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d04f      	beq.n	8008acc <HAL_SPI_Transmit+0x1d0>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a8d      	ldr	r2, [pc, #564]	; (8008c68 <HAL_SPI_Transmit+0x36c>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d04a      	beq.n	8008acc <HAL_SPI_Transmit+0x1d0>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a8c      	ldr	r2, [pc, #560]	; (8008c6c <HAL_SPI_Transmit+0x370>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d045      	beq.n	8008acc <HAL_SPI_Transmit+0x1d0>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a8a      	ldr	r2, [pc, #552]	; (8008c70 <HAL_SPI_Transmit+0x374>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d147      	bne.n	8008ada <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008a4a:	e03f      	b.n	8008acc <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	f003 0302 	and.w	r3, r3, #2
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d114      	bne.n	8008a84 <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	6812      	ldr	r2, [r2, #0]
 8008a64:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a6a:	1d1a      	adds	r2, r3, #4
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008a82:	e023      	b.n	8008acc <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a84:	f7f9 fd7e 	bl	8002584 <HAL_GetTick>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d803      	bhi.n	8008a9c <HAL_SPI_Transmit+0x1a0>
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9a:	d102      	bne.n	8008aa2 <HAL_SPI_Transmit+0x1a6>
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d114      	bne.n	8008acc <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f000 fb7a 	bl	800919c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ab6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e124      	b.n	8008d16 <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1b9      	bne.n	8008a4c <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008ad8:	e0f7      	b.n	8008cca <HAL_SPI_Transmit+0x3ce>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	2b07      	cmp	r3, #7
 8008ae0:	f240 80ec 	bls.w	8008cbc <HAL_SPI_Transmit+0x3c0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008ae4:	e05d      	b.n	8008ba2 <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	f003 0302 	and.w	r3, r3, #2
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d132      	bne.n	8008b5a <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d918      	bls.n	8008b32 <HAL_SPI_Transmit+0x236>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d014      	beq.n	8008b32 <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6812      	ldr	r2, [r2, #0]
 8008b12:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b18:	1d1a      	adds	r2, r3, #4
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	3b02      	subs	r3, #2
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008b30:	e037      	b.n	8008ba2 <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b36:	881a      	ldrh	r2, [r3, #0]
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b40:	1c9a      	adds	r2, r3, #2
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008b58:	e023      	b.n	8008ba2 <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b5a:	f7f9 fd13 	bl	8002584 <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	683a      	ldr	r2, [r7, #0]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d803      	bhi.n	8008b72 <HAL_SPI_Transmit+0x276>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b70:	d102      	bne.n	8008b78 <HAL_SPI_Transmit+0x27c>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d114      	bne.n	8008ba2 <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f000 fb0f 	bl	800919c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e0b9      	b.n	8008d16 <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d19b      	bne.n	8008ae6 <HAL_SPI_Transmit+0x1ea>
 8008bae:	e08c      	b.n	8008cca <HAL_SPI_Transmit+0x3ce>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	f003 0302 	and.w	r3, r3, #2
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d15a      	bne.n	8008c74 <HAL_SPI_Transmit+0x378>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	2b03      	cmp	r3, #3
 8008bc8:	d918      	bls.n	8008bfc <HAL_SPI_Transmit+0x300>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bce:	2b40      	cmp	r3, #64	; 0x40
 8008bd0:	d914      	bls.n	8008bfc <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	6812      	ldr	r2, [r2, #0]
 8008bdc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008be2:	1d1a      	adds	r2, r3, #4
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	3b04      	subs	r3, #4
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008bfa:	e05f      	b.n	8008cbc <HAL_SPI_Transmit+0x3c0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d917      	bls.n	8008c38 <HAL_SPI_Transmit+0x33c>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d013      	beq.n	8008c38 <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c14:	881a      	ldrh	r2, [r3, #0]
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c1e:	1c9a      	adds	r2, r3, #2
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	3b02      	subs	r3, #2
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008c36:	e041      	b.n	8008cbc <HAL_SPI_Transmit+0x3c0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3320      	adds	r3, #32
 8008c42:	7812      	ldrb	r2, [r2, #0]
 8008c44:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c4a:	1c5a      	adds	r2, r3, #1
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008c62:	e02b      	b.n	8008cbc <HAL_SPI_Transmit+0x3c0>
 8008c64:	40013000 	.word	0x40013000
 8008c68:	50013000 	.word	0x50013000
 8008c6c:	40003800 	.word	0x40003800
 8008c70:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c74:	f7f9 fc86 	bl	8002584 <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d803      	bhi.n	8008c8c <HAL_SPI_Transmit+0x390>
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c8a:	d102      	bne.n	8008c92 <HAL_SPI_Transmit+0x396>
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d114      	bne.n	8008cbc <HAL_SPI_Transmit+0x3c0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 fa82 	bl	800919c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ca6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e02c      	b.n	8008d16 <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f47f af73 	bne.w	8008bb0 <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	2108      	movs	r1, #8
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f000 fb01 	bl	80092dc <SPI_WaitOnFlagUntilTimeout>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d007      	beq.n	8008cf0 <HAL_SPI_Transmit+0x3f4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ce6:	f043 0220 	orr.w	r2, r3, #32
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f000 fa53 	bl	800919c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d001      	beq.n	8008d14 <HAL_SPI_Transmit+0x418>
  {
    return HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	e000      	b.n	8008d16 <HAL_SPI_Transmit+0x41a>
  }
  return errorcode;
 8008d14:	7efb      	ldrb	r3, [r7, #27]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3720      	adds	r7, #32
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop

08008d20 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d101      	bne.n	8008d3c <HAL_SPI_Transmit_DMA+0x1c>
 8008d38:	2302      	movs	r3, #2
 8008d3a:	e1b8      	b.n	80090ae <HAL_SPI_Transmit_DMA+0x38e>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d007      	beq.n	8008d60 <HAL_SPI_Transmit_DMA+0x40>
  {
    errorcode = HAL_BUSY;
 8008d50:	2302      	movs	r3, #2
 8008d52:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008d5c:	7dfb      	ldrb	r3, [r7, #23]
 8008d5e:	e1a6      	b.n	80090ae <HAL_SPI_Transmit_DMA+0x38e>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d002      	beq.n	8008d6c <HAL_SPI_Transmit_DMA+0x4c>
 8008d66:	88fb      	ldrh	r3, [r7, #6]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d107      	bne.n	8008d7c <HAL_SPI_Transmit_DMA+0x5c>
  {
    errorcode = HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008d78:	7dfb      	ldrb	r3, [r7, #23]
 8008d7a:	e198      	b.n	80090ae <HAL_SPI_Transmit_DMA+0x38e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2203      	movs	r2, #3
 8008d80:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	68ba      	ldr	r2, [r7, #8]
 8008d90:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	88fa      	ldrh	r2, [r7, #6]
 8008d96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	88fa      	ldrh	r2, [r7, #6]
 8008d9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->TxISR       = NULL;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->RxXferSize  = (uint16_t)0UL;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t)0UL;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008dcc:	d107      	bne.n	8008dde <HAL_SPI_Transmit_DMA+0xbe>
  {
    SPI_1LINE_TX(hspi);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ddc:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	2b0f      	cmp	r3, #15
 8008de4:	d919      	bls.n	8008e1a <HAL_SPI_Transmit_DMA+0xfa>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d013      	beq.n	8008e1a <HAL_SPI_Transmit_DMA+0xfa>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
 8008df6:	4a89      	ldr	r2, [pc, #548]	; (800901c <HAL_SPI_Transmit_DMA+0x2fc>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d018      	beq.n	8008e2e <HAL_SPI_Transmit_DMA+0x10e>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a87      	ldr	r2, [pc, #540]	; (8009020 <HAL_SPI_Transmit_DMA+0x300>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d013      	beq.n	8008e2e <HAL_SPI_Transmit_DMA+0x10e>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a86      	ldr	r2, [pc, #536]	; (8009024 <HAL_SPI_Transmit_DMA+0x304>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d00e      	beq.n	8008e2e <HAL_SPI_Transmit_DMA+0x10e>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a84      	ldr	r2, [pc, #528]	; (8009028 <HAL_SPI_Transmit_DMA+0x308>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d009      	beq.n	8008e2e <HAL_SPI_Transmit_DMA+0x10e>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8008e1e:	2b07      	cmp	r3, #7
 8008e20:	d90d      	bls.n	8008e3e <HAL_SPI_Transmit_DMA+0x11e>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d107      	bne.n	8008e3e <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
 8008e3c:	e137      	b.n	80090ae <HAL_SPI_Transmit_DMA+0x38e>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	2b07      	cmp	r3, #7
 8008e44:	d820      	bhi.n	8008e88 <HAL_SPI_Transmit_DMA+0x168>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d109      	bne.n	8008e66 <HAL_SPI_Transmit_DMA+0x146>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	105b      	asrs	r3, r3, #1
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d11e      	bne.n	8008eb0 <HAL_SPI_Transmit_DMA+0x190>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	3303      	adds	r3, #3
 8008e7c:	109b      	asrs	r3, r3, #2
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008e86:	e013      	b.n	8008eb0 <HAL_SPI_Transmit_DMA+0x190>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	2b0f      	cmp	r3, #15
 8008e8e:	d80f      	bhi.n	8008eb0 <HAL_SPI_Transmit_DMA+0x190>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d109      	bne.n	8008eb0 <HAL_SPI_Transmit_DMA+0x190>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	105b      	asrs	r3, r3, #1
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eb6:	4a5d      	ldr	r2, [pc, #372]	; (800902c <HAL_SPI_Transmit_DMA+0x30c>)
 8008eb8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ec0:	4a5b      	ldr	r2, [pc, #364]	; (8009030 <HAL_SPI_Transmit_DMA+0x310>)
 8008ec2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eca:	4a5a      	ldr	r2, [pc, #360]	; (8009034 <HAL_SPI_Transmit_DMA+0x314>)
 8008ecc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	689a      	ldr	r2, [r3, #8]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ee6:	609a      	str	r2, [r3, #8]

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	2b07      	cmp	r3, #7
 8008eee:	d804      	bhi.n	8008efa <HAL_SPI_Transmit_DMA+0x1da>
  {
    hspi->TxXferCount = Size;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	88fa      	ldrh	r2, [r7, #6]
 8008ef4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008ef8:	e010      	b.n	8008f1c <HAL_SPI_Transmit_DMA+0x1fc>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	2b0f      	cmp	r3, #15
 8008f00:	d806      	bhi.n	8008f10 <HAL_SPI_Transmit_DMA+0x1f0>
  {
    hspi->TxXferCount = Size * 2U;
 8008f02:	88fb      	ldrh	r3, [r7, #6]
 8008f04:	005b      	lsls	r3, r3, #1
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008f0e:	e005      	b.n	8008f1c <HAL_SPI_Transmit_DMA+0x1fc>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 8008f10:	88fb      	ldrh	r3, [r7, #6]
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }

  /* Enable the Tx DMA Stream/Channel */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d03e      	beq.n	8008faa <HAL_SPI_Transmit_DMA+0x28a>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d024      	beq.n	8008f82 <HAL_SPI_Transmit_DMA+0x262>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008f3e:	b29a      	uxth	r2, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f103 0220 	add.w	r2, r3, #32
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	611a      	str	r2, [r3, #16]

      errorcode = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fa f8aa 	bl	80030d0 <HAL_DMAEx_List_Start_IT>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	75fb      	strb	r3, [r7, #23]
 8008f80:	e025      	b.n	8008fce <HAL_SPI_Transmit_DMA+0x2ae>
    }
    else
    {
      /* Update SPI error code */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f88:	f043 0210 	orr.w	r2, r3, #16
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Unlock the process */
      __HAL_UNLOCK(hspi);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

      hspi->State = HAL_SPI_STATE_READY;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
      errorcode = HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	75fb      	strb	r3, [r7, #23]
      return errorcode;
 8008fa6:	7dfb      	ldrb	r3, [r7, #23]
 8008fa8:	e081      	b.n	80090ae <HAL_SPI_Transmit_DMA+0x38e>
    }
  }
  else
  {
    errorcode = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	3320      	adds	r3, #32
 8008fbc:	461a      	mov	r2, r3
                                 hspi->TxXferCount);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008fc4:	b29b      	uxth	r3, r3
    errorcode = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008fc6:	f7f9 fff2 	bl	8002fae <HAL_DMA_Start_IT>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (errorcode != HAL_OK)
 8008fce:	7dfb      	ldrb	r3, [r7, #23]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d013      	beq.n	8008ffc <HAL_SPI_Transmit_DMA+0x2dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fda:	f043 0210 	orr.w	r2, r3, #16
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_READY;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    errorcode = HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8008ff8:	7dfb      	ldrb	r3, [r7, #23]
 8008ffa:	e058      	b.n	80090ae <HAL_SPI_Transmit_DMA+0x38e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009004:	2b81      	cmp	r3, #129	; 0x81
 8009006:	d117      	bne.n	8009038 <HAL_SPI_Transmit_DMA+0x318>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	6812      	ldr	r2, [r2, #0]
 8009012:	0c1b      	lsrs	r3, r3, #16
 8009014:	041b      	lsls	r3, r3, #16
 8009016:	6053      	str	r3, [r2, #4]
 8009018:	e018      	b.n	800904c <HAL_SPI_Transmit_DMA+0x32c>
 800901a:	bf00      	nop
 800901c:	40013000 	.word	0x40013000
 8009020:	50013000 	.word	0x50013000
 8009024:	40003800 	.word	0x40003800
 8009028:	50003800 	.word	0x50003800
 800902c:	0800913b 	.word	0x0800913b
 8009030:	080090f5 	.word	0x080090f5
 8009034:	08009157 	.word	0x08009157
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	0c1b      	lsrs	r3, r3, #16
 8009040:	041b      	lsls	r3, r3, #16
 8009042:	88f9      	ldrh	r1, [r7, #6]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	6812      	ldr	r2, [r2, #0]
 8009048:	430b      	orrs	r3, r1
 800904a:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689a      	ldr	r2, [r3, #8]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800905a:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	691a      	ldr	r2, [r3, #16]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 800906a:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f042 0201 	orr.w	r2, r2, #1
 800907a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10c      	bne.n	80090a4 <HAL_SPI_Transmit_DMA+0x384>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009092:	d107      	bne.n	80090a4 <HAL_SPI_Transmit_DMA+0x384>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090a2:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
  return errorcode;
 80090ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop

080090b8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80090c0:	bf00      	nop
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80090d4:	bf00      	nop
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009100:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009108:	b2db      	uxtb	r3, r3
 800910a:	2b07      	cmp	r3, #7
 800910c:	d011      	beq.n	8009132 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009116:	2b81      	cmp	r3, #129	; 0x81
 8009118:	d103      	bne.n	8009122 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f7ff ffcc 	bl	80090b8 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009120:	e007      	b.n	8009132 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	691a      	ldr	r2, [r3, #16]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f042 0208 	orr.w	r2, r2, #8
 8009130:	611a      	str	r2, [r3, #16]
}
 8009132:	bf00      	nop
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009146:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f7ff ffbf 	bl	80090cc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800914e:	bf00      	nop
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b084      	sub	sp, #16
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009162:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7f9 ff82 	bl	800306e <HAL_DMA_GetError>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d011      	beq.n	8009194 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f000 f813 	bl	800919c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800917c:	f043 0210 	orr.w	r2, r3, #16
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f7ff ffa6 	bl	80090e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009194:	bf00      	nop
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800919c:	b480      	push	{r7}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	695b      	ldr	r3, [r3, #20]
 80091aa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	699a      	ldr	r2, [r3, #24]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f042 0208 	orr.w	r2, r2, #8
 80091ba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	699a      	ldr	r2, [r3, #24]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f042 0210 	orr.w	r2, r2, #16
 80091ca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f022 0201 	bic.w	r2, r2, #1
 80091da:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	6812      	ldr	r2, [r2, #0]
 80091e6:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 80091ea:	f023 0303 	bic.w	r3, r3, #3
 80091ee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689a      	ldr	r2, [r3, #8]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80091fe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b04      	cmp	r3, #4
 800920a:	d014      	beq.n	8009236 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f003 0320 	and.w	r3, r3, #32
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00f      	beq.n	8009236 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800921c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	699a      	ldr	r2, [r3, #24]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f042 0220 	orr.w	r2, r2, #32
 8009234:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b03      	cmp	r3, #3
 8009240:	d014      	beq.n	800926c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00f      	beq.n	800926c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009252:	f043 0204 	orr.w	r2, r3, #4
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	699a      	ldr	r2, [r3, #24]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800926a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00f      	beq.n	8009296 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800927c:	f043 0201 	orr.w	r2, r3, #1
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	699a      	ldr	r2, [r3, #24]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009294:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00f      	beq.n	80092c0 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092a6:	f043 0208 	orr.w	r2, r3, #8
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	699a      	ldr	r2, [r3, #24]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092be:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 80092d0:	bf00      	nop
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	603b      	str	r3, [r7, #0]
 80092e8:	4613      	mov	r3, r2
 80092ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80092ec:	e010      	b.n	8009310 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092ee:	f7f9 f949 	bl	8002584 <HAL_GetTick>
 80092f2:	4602      	mov	r2, r0
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	69ba      	ldr	r2, [r7, #24]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d803      	bhi.n	8009306 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009304:	d102      	bne.n	800930c <SPI_WaitOnFlagUntilTimeout+0x30>
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d101      	bne.n	8009310 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	e00f      	b.n	8009330 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	695a      	ldr	r2, [r3, #20]
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	4013      	ands	r3, r2
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	429a      	cmp	r2, r3
 800931e:	bf0c      	ite	eq
 8009320:	2301      	moveq	r3, #1
 8009322:	2300      	movne	r3, #0
 8009324:	b2db      	uxtb	r3, r3
 8009326:	461a      	mov	r2, r3
 8009328:	79fb      	ldrb	r3, [r7, #7]
 800932a:	429a      	cmp	r2, r3
 800932c:	d0df      	beq.n	80092ee <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009344:	095b      	lsrs	r3, r3, #5
 8009346:	3301      	adds	r3, #1
 8009348:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	3301      	adds	r3, #1
 8009350:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	3307      	adds	r3, #7
 8009356:	08db      	lsrs	r3, r3, #3
 8009358:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009362:	4618      	mov	r0, r3
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <HAL_SPIEx_SetConfigAutonomousMode>:
  * @param  sConfig Pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi, SPI_AutonomousModeConfTypeDef *sConfig)
{
 800936e:	b480      	push	{r7}
 8009370:	b083      	sub	sp, #12
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b01      	cmp	r3, #1
 8009382:	d12e      	bne.n	80093e2 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800938a:	2b01      	cmp	r3, #1
 800938c:	d101      	bne.n	8009392 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800938e:	2302      	movs	r3, #2
 8009390:	e028      	b.n	80093e4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2202      	movs	r2, #2
 800939e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));

    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f022 0201 	bic.w	r2, r2, #1
 80093b0:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80093be:	ea42 0103 	orr.w	r1, r2, r3
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	689a      	ldr	r2, [r3, #8]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	430a      	orrs	r2, r1
 80093cc:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2201      	movs	r2, #1
 80093d2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	e000      	b.n	80093e4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
  }
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d101      	bne.n	8009402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e042      	b.n	8009488 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009408:	2b00      	cmp	r3, #0
 800940a:	d106      	bne.n	800941a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f7f8 feab 	bl	8002170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2224      	movs	r2, #36	; 0x24
 800941e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f022 0201 	bic.w	r2, r2, #1
 8009430:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f82c 	bl	8009490 <UART_SetConfig>
 8009438:	4603      	mov	r3, r0
 800943a:	2b01      	cmp	r3, #1
 800943c:	d101      	bne.n	8009442 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e022      	b.n	8009488 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009446:	2b00      	cmp	r3, #0
 8009448:	d002      	beq.n	8009450 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f9c2 	bl	80097d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	685a      	ldr	r2, [r3, #4]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800945e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	689a      	ldr	r2, [r3, #8]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800946e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f042 0201 	orr.w	r2, r2, #1
 800947e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fa49 	bl	8009918 <UART_CheckIdleState>
 8009486:	4603      	mov	r3, r0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009494:	b094      	sub	sp, #80	; 0x50
 8009496:	af00      	add	r7, sp, #0
 8009498:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80094a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	4b7e      	ldr	r3, [pc, #504]	; (80096a0 <UART_SetConfig+0x210>)
 80094a6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094aa:	689a      	ldr	r2, [r3, #8]
 80094ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	431a      	orrs	r2, r3
 80094b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b4:	695b      	ldr	r3, [r3, #20]
 80094b6:	431a      	orrs	r2, r3
 80094b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ba:	69db      	ldr	r3, [r3, #28]
 80094bc:	4313      	orrs	r3, r2
 80094be:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4977      	ldr	r1, [pc, #476]	; (80096a4 <UART_SetConfig+0x214>)
 80094c8:	4019      	ands	r1, r3
 80094ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d0:	430b      	orrs	r3, r1
 80094d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80094de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e0:	68d9      	ldr	r1, [r3, #12]
 80094e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	ea40 0301 	orr.w	r3, r0, r1
 80094ea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	4b6a      	ldr	r3, [pc, #424]	; (80096a0 <UART_SetConfig+0x210>)
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d009      	beq.n	8009510 <UART_SetConfig+0x80>
 80094fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	4b69      	ldr	r3, [pc, #420]	; (80096a8 <UART_SetConfig+0x218>)
 8009502:	429a      	cmp	r2, r3
 8009504:	d004      	beq.n	8009510 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009508:	6a1a      	ldr	r2, [r3, #32]
 800950a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800950c:	4313      	orrs	r3, r2
 800950e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800951a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800951e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009524:	430b      	orrs	r3, r1
 8009526:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952e:	f023 000f 	bic.w	r0, r3, #15
 8009532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009534:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	ea40 0301 	orr.w	r3, r0, r1
 800953e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	4b59      	ldr	r3, [pc, #356]	; (80096ac <UART_SetConfig+0x21c>)
 8009546:	429a      	cmp	r2, r3
 8009548:	d102      	bne.n	8009550 <UART_SetConfig+0xc0>
 800954a:	2301      	movs	r3, #1
 800954c:	64bb      	str	r3, [r7, #72]	; 0x48
 800954e:	e029      	b.n	80095a4 <UART_SetConfig+0x114>
 8009550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	4b56      	ldr	r3, [pc, #344]	; (80096b0 <UART_SetConfig+0x220>)
 8009556:	429a      	cmp	r2, r3
 8009558:	d102      	bne.n	8009560 <UART_SetConfig+0xd0>
 800955a:	2302      	movs	r3, #2
 800955c:	64bb      	str	r3, [r7, #72]	; 0x48
 800955e:	e021      	b.n	80095a4 <UART_SetConfig+0x114>
 8009560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	4b53      	ldr	r3, [pc, #332]	; (80096b4 <UART_SetConfig+0x224>)
 8009566:	429a      	cmp	r2, r3
 8009568:	d102      	bne.n	8009570 <UART_SetConfig+0xe0>
 800956a:	2304      	movs	r3, #4
 800956c:	64bb      	str	r3, [r7, #72]	; 0x48
 800956e:	e019      	b.n	80095a4 <UART_SetConfig+0x114>
 8009570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	4b50      	ldr	r3, [pc, #320]	; (80096b8 <UART_SetConfig+0x228>)
 8009576:	429a      	cmp	r2, r3
 8009578:	d102      	bne.n	8009580 <UART_SetConfig+0xf0>
 800957a:	2308      	movs	r3, #8
 800957c:	64bb      	str	r3, [r7, #72]	; 0x48
 800957e:	e011      	b.n	80095a4 <UART_SetConfig+0x114>
 8009580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	4b4d      	ldr	r3, [pc, #308]	; (80096bc <UART_SetConfig+0x22c>)
 8009586:	429a      	cmp	r2, r3
 8009588:	d102      	bne.n	8009590 <UART_SetConfig+0x100>
 800958a:	2310      	movs	r3, #16
 800958c:	64bb      	str	r3, [r7, #72]	; 0x48
 800958e:	e009      	b.n	80095a4 <UART_SetConfig+0x114>
 8009590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	4b42      	ldr	r3, [pc, #264]	; (80096a0 <UART_SetConfig+0x210>)
 8009596:	429a      	cmp	r2, r3
 8009598:	d102      	bne.n	80095a0 <UART_SetConfig+0x110>
 800959a:	2320      	movs	r3, #32
 800959c:	64bb      	str	r3, [r7, #72]	; 0x48
 800959e:	e001      	b.n	80095a4 <UART_SetConfig+0x114>
 80095a0:	2300      	movs	r3, #0
 80095a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80095a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	4b3d      	ldr	r3, [pc, #244]	; (80096a0 <UART_SetConfig+0x210>)
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d005      	beq.n	80095ba <UART_SetConfig+0x12a>
 80095ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	4b3d      	ldr	r3, [pc, #244]	; (80096a8 <UART_SetConfig+0x218>)
 80095b4:	429a      	cmp	r2, r3
 80095b6:	f040 8085 	bne.w	80096c4 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80095ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095bc:	2200      	movs	r2, #0
 80095be:	623b      	str	r3, [r7, #32]
 80095c0:	627a      	str	r2, [r7, #36]	; 0x24
 80095c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80095c6:	f7fd fe49 	bl	800725c <HAL_RCCEx_GetPeriphCLKFreq>
 80095ca:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80095cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f000 80e8 	beq.w	80097a4 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80095d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d8:	4a39      	ldr	r2, [pc, #228]	; (80096c0 <UART_SetConfig+0x230>)
 80095da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095de:	461a      	mov	r2, r3
 80095e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80095e6:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	4613      	mov	r3, r2
 80095ee:	005b      	lsls	r3, r3, #1
 80095f0:	4413      	add	r3, r2
 80095f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d305      	bcc.n	8009604 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80095f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009600:	429a      	cmp	r2, r3
 8009602:	d903      	bls.n	800960c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800960a:	e048      	b.n	800969e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800960c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800960e:	2200      	movs	r2, #0
 8009610:	61bb      	str	r3, [r7, #24]
 8009612:	61fa      	str	r2, [r7, #28]
 8009614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	4a29      	ldr	r2, [pc, #164]	; (80096c0 <UART_SetConfig+0x230>)
 800961a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800961e:	b29b      	uxth	r3, r3
 8009620:	2200      	movs	r2, #0
 8009622:	613b      	str	r3, [r7, #16]
 8009624:	617a      	str	r2, [r7, #20]
 8009626:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800962a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800962e:	f7f6 fe21 	bl	8000274 <__aeabi_uldivmod>
 8009632:	4602      	mov	r2, r0
 8009634:	460b      	mov	r3, r1
 8009636:	4610      	mov	r0, r2
 8009638:	4619      	mov	r1, r3
 800963a:	f04f 0200 	mov.w	r2, #0
 800963e:	f04f 0300 	mov.w	r3, #0
 8009642:	020b      	lsls	r3, r1, #8
 8009644:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009648:	0202      	lsls	r2, r0, #8
 800964a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800964c:	6849      	ldr	r1, [r1, #4]
 800964e:	0849      	lsrs	r1, r1, #1
 8009650:	2000      	movs	r0, #0
 8009652:	460c      	mov	r4, r1
 8009654:	4605      	mov	r5, r0
 8009656:	eb12 0804 	adds.w	r8, r2, r4
 800965a:	eb43 0905 	adc.w	r9, r3, r5
 800965e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	60bb      	str	r3, [r7, #8]
 8009666:	60fa      	str	r2, [r7, #12]
 8009668:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800966c:	4640      	mov	r0, r8
 800966e:	4649      	mov	r1, r9
 8009670:	f7f6 fe00 	bl	8000274 <__aeabi_uldivmod>
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	4613      	mov	r3, r2
 800967a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800967c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800967e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009682:	d308      	bcc.n	8009696 <UART_SetConfig+0x206>
 8009684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800968a:	d204      	bcs.n	8009696 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800968c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009692:	60da      	str	r2, [r3, #12]
 8009694:	e003      	b.n	800969e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800969c:	e082      	b.n	80097a4 <UART_SetConfig+0x314>
 800969e:	e081      	b.n	80097a4 <UART_SetConfig+0x314>
 80096a0:	46002400 	.word	0x46002400
 80096a4:	cfff69f3 	.word	0xcfff69f3
 80096a8:	56002400 	.word	0x56002400
 80096ac:	40013800 	.word	0x40013800
 80096b0:	40004400 	.word	0x40004400
 80096b4:	40004800 	.word	0x40004800
 80096b8:	40004c00 	.word	0x40004c00
 80096bc:	40005000 	.word	0x40005000
 80096c0:	08015684 	.word	0x08015684
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c6:	69db      	ldr	r3, [r3, #28]
 80096c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096cc:	d13c      	bne.n	8009748 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80096ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096d0:	2200      	movs	r2, #0
 80096d2:	603b      	str	r3, [r7, #0]
 80096d4:	607a      	str	r2, [r7, #4]
 80096d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096da:	f7fd fdbf 	bl	800725c <HAL_RCCEx_GetPeriphCLKFreq>
 80096de:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80096e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d05e      	beq.n	80097a4 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ea:	4a39      	ldr	r2, [pc, #228]	; (80097d0 <UART_SetConfig+0x340>)
 80096ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096f0:	461a      	mov	r2, r3
 80096f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80096f8:	005a      	lsls	r2, r3, #1
 80096fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	085b      	lsrs	r3, r3, #1
 8009700:	441a      	add	r2, r3
 8009702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	fbb2 f3f3 	udiv	r3, r2, r3
 800970a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800970c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800970e:	2b0f      	cmp	r3, #15
 8009710:	d916      	bls.n	8009740 <UART_SetConfig+0x2b0>
 8009712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009718:	d212      	bcs.n	8009740 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800971a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800971c:	b29b      	uxth	r3, r3
 800971e:	f023 030f 	bic.w	r3, r3, #15
 8009722:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009726:	085b      	lsrs	r3, r3, #1
 8009728:	b29b      	uxth	r3, r3
 800972a:	f003 0307 	and.w	r3, r3, #7
 800972e:	b29a      	uxth	r2, r3
 8009730:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009732:	4313      	orrs	r3, r2
 8009734:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8009736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800973c:	60da      	str	r2, [r3, #12]
 800973e:	e031      	b.n	80097a4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009746:	e02d      	b.n	80097a4 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800974a:	2200      	movs	r2, #0
 800974c:	469a      	mov	sl, r3
 800974e:	4693      	mov	fp, r2
 8009750:	4650      	mov	r0, sl
 8009752:	4659      	mov	r1, fp
 8009754:	f7fd fd82 	bl	800725c <HAL_RCCEx_GetPeriphCLKFreq>
 8009758:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800975a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800975c:	2b00      	cmp	r3, #0
 800975e:	d021      	beq.n	80097a4 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009764:	4a1a      	ldr	r2, [pc, #104]	; (80097d0 <UART_SetConfig+0x340>)
 8009766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800976a:	461a      	mov	r2, r3
 800976c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800976e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	085b      	lsrs	r3, r3, #1
 8009778:	441a      	add	r2, r3
 800977a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009782:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009786:	2b0f      	cmp	r3, #15
 8009788:	d909      	bls.n	800979e <UART_SetConfig+0x30e>
 800978a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800978c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009790:	d205      	bcs.n	800979e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009794:	b29a      	uxth	r2, r3
 8009796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	60da      	str	r2, [r3, #12]
 800979c:	e002      	b.n	80097a4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80097a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a6:	2201      	movs	r2, #1
 80097a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80097ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ae:	2201      	movs	r2, #1
 80097b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80097b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b6:	2200      	movs	r2, #0
 80097b8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80097ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097bc:	2200      	movs	r2, #0
 80097be:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80097c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3750      	adds	r7, #80	; 0x50
 80097c8:	46bd      	mov	sp, r7
 80097ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097ce:	bf00      	nop
 80097d0:	08015684 	.word	0x08015684

080097d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00a      	beq.n	80097fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	430a      	orrs	r2, r1
 80097fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009802:	f003 0302 	and.w	r3, r3, #2
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00a      	beq.n	8009820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	430a      	orrs	r2, r1
 800981e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009824:	f003 0304 	and.w	r3, r3, #4
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00a      	beq.n	8009842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	430a      	orrs	r2, r1
 8009840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009846:	f003 0308 	and.w	r3, r3, #8
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00a      	beq.n	8009864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	430a      	orrs	r2, r1
 8009862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009868:	f003 0310 	and.w	r3, r3, #16
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00a      	beq.n	8009886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	430a      	orrs	r2, r1
 8009884:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800988a:	f003 0320 	and.w	r3, r3, #32
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00a      	beq.n	80098a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	430a      	orrs	r2, r1
 80098a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d01a      	beq.n	80098ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	430a      	orrs	r2, r1
 80098c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098d2:	d10a      	bne.n	80098ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	430a      	orrs	r2, r1
 80098e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	430a      	orrs	r2, r1
 800990a:	605a      	str	r2, [r3, #4]
  }
}
 800990c:	bf00      	nop
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af02      	add	r7, sp, #8
 800991e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009928:	f7f8 fe2c 	bl	8002584 <HAL_GetTick>
 800992c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 0308 	and.w	r3, r3, #8
 8009938:	2b08      	cmp	r3, #8
 800993a:	d10e      	bne.n	800995a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800993c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2200      	movs	r2, #0
 8009946:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f82f 	bl	80099ae <UART_WaitOnFlagUntilTimeout>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009956:	2303      	movs	r3, #3
 8009958:	e025      	b.n	80099a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f003 0304 	and.w	r3, r3, #4
 8009964:	2b04      	cmp	r3, #4
 8009966:	d10e      	bne.n	8009986 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 f819 	bl	80099ae <UART_WaitOnFlagUntilTimeout>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e00f      	b.n	80099a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2220      	movs	r2, #32
 800998a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2220      	movs	r2, #32
 8009992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b09c      	sub	sp, #112	; 0x70
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	60f8      	str	r0, [r7, #12]
 80099b6:	60b9      	str	r1, [r7, #8]
 80099b8:	603b      	str	r3, [r7, #0]
 80099ba:	4613      	mov	r3, r2
 80099bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099be:	e0a9      	b.n	8009b14 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c6:	f000 80a5 	beq.w	8009b14 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099ca:	f7f8 fddb 	bl	8002584 <HAL_GetTick>
 80099ce:	4602      	mov	r2, r0
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	1ad3      	subs	r3, r2, r3
 80099d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d302      	bcc.n	80099e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80099da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d140      	bne.n	8009a62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099e8:	e853 3f00 	ldrex	r3, [r3]
 80099ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80099ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80099f4:	667b      	str	r3, [r7, #100]	; 0x64
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	461a      	mov	r2, r3
 80099fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a00:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a06:	e841 2300 	strex	r3, r2, [r1]
 8009a0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1e6      	bne.n	80099e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	3308      	adds	r3, #8
 8009a18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a1c:	e853 3f00 	ldrex	r3, [r3]
 8009a20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a24:	f023 0301 	bic.w	r3, r3, #1
 8009a28:	663b      	str	r3, [r7, #96]	; 0x60
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	3308      	adds	r3, #8
 8009a30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009a32:	64ba      	str	r2, [r7, #72]	; 0x48
 8009a34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a3a:	e841 2300 	strex	r3, r2, [r1]
 8009a3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1e5      	bne.n	8009a12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2220      	movs	r2, #32
 8009a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2220      	movs	r2, #32
 8009a52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	e069      	b.n	8009b36 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 0304 	and.w	r3, r3, #4
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d051      	beq.n	8009b14 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	69db      	ldr	r3, [r3, #28]
 8009a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a7e:	d149      	bne.n	8009b14 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a92:	e853 3f00 	ldrex	r3, [r3]
 8009a96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009a9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8009aaa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009aae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ab0:	e841 2300 	strex	r3, r2, [r1]
 8009ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1e6      	bne.n	8009a8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	e853 3f00 	ldrex	r3, [r3]
 8009aca:	613b      	str	r3, [r7, #16]
   return(result);
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	f023 0301 	bic.w	r3, r3, #1
 8009ad2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3308      	adds	r3, #8
 8009ada:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009adc:	623a      	str	r2, [r7, #32]
 8009ade:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae0:	69f9      	ldr	r1, [r7, #28]
 8009ae2:	6a3a      	ldr	r2, [r7, #32]
 8009ae4:	e841 2300 	strex	r3, r2, [r1]
 8009ae8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1e5      	bne.n	8009abc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2220      	movs	r2, #32
 8009af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2220      	movs	r2, #32
 8009afc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2220      	movs	r2, #32
 8009b04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	e010      	b.n	8009b36 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	69da      	ldr	r2, [r3, #28]
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	4013      	ands	r3, r2
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	bf0c      	ite	eq
 8009b24:	2301      	moveq	r3, #1
 8009b26:	2300      	movne	r3, #0
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	79fb      	ldrb	r3, [r7, #7]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	f43f af46 	beq.w	80099c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3770      	adds	r7, #112	; 0x70
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b3e:	b480      	push	{r7}
 8009b40:	b085      	sub	sp, #20
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d101      	bne.n	8009b54 <HAL_UARTEx_DisableFifoMode+0x16>
 8009b50:	2302      	movs	r3, #2
 8009b52:	e027      	b.n	8009ba4 <HAL_UARTEx_DisableFifoMode+0x66>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2224      	movs	r2, #36	; 0x24
 8009b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f022 0201 	bic.w	r2, r2, #1
 8009b7a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2220      	movs	r2, #32
 8009b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d101      	bne.n	8009bc8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009bc4:	2302      	movs	r3, #2
 8009bc6:	e02d      	b.n	8009c24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2224      	movs	r2, #36	; 0x24
 8009bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f022 0201 	bic.w	r2, r2, #1
 8009bee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	430a      	orrs	r2, r1
 8009c02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f84f 	bl	8009ca8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2220      	movs	r2, #32
 8009c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d101      	bne.n	8009c44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c40:	2302      	movs	r3, #2
 8009c42:	e02d      	b.n	8009ca0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2224      	movs	r2, #36	; 0x24
 8009c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f022 0201 	bic.w	r2, r2, #1
 8009c6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	683a      	ldr	r2, [r7, #0]
 8009c7c:	430a      	orrs	r2, r1
 8009c7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f811 	bl	8009ca8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2220      	movs	r2, #32
 8009c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b085      	sub	sp, #20
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d108      	bne.n	8009cca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009cc8:	e031      	b.n	8009d2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009cca:	2308      	movs	r3, #8
 8009ccc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009cce:	2308      	movs	r3, #8
 8009cd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	0e5b      	lsrs	r3, r3, #25
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	f003 0307 	and.w	r3, r3, #7
 8009ce0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	0f5b      	lsrs	r3, r3, #29
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	f003 0307 	and.w	r3, r3, #7
 8009cf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cf2:	7bbb      	ldrb	r3, [r7, #14]
 8009cf4:	7b3a      	ldrb	r2, [r7, #12]
 8009cf6:	4911      	ldr	r1, [pc, #68]	; (8009d3c <UARTEx_SetNbDataToProcess+0x94>)
 8009cf8:	5c8a      	ldrb	r2, [r1, r2]
 8009cfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009cfe:	7b3a      	ldrb	r2, [r7, #12]
 8009d00:	490f      	ldr	r1, [pc, #60]	; (8009d40 <UARTEx_SetNbDataToProcess+0x98>)
 8009d02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d04:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d08:	b29a      	uxth	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
 8009d12:	7b7a      	ldrb	r2, [r7, #13]
 8009d14:	4909      	ldr	r1, [pc, #36]	; (8009d3c <UARTEx_SetNbDataToProcess+0x94>)
 8009d16:	5c8a      	ldrb	r2, [r1, r2]
 8009d18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d1c:	7b7a      	ldrb	r2, [r7, #13]
 8009d1e:	4908      	ldr	r1, [pc, #32]	; (8009d40 <UARTEx_SetNbDataToProcess+0x98>)
 8009d20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d22:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009d2e:	bf00      	nop
 8009d30:	3714      	adds	r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	0801569c 	.word	0x0801569c
 8009d40:	080156a4 	.word	0x080156a4

08009d44 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b08b      	sub	sp, #44	; 0x2c
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	fa93 f3a3 	rbit	r3, r3
 8009d5e:	613b      	str	r3, [r7, #16]
  return result;
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d101      	bne.n	8009d6e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009d6a:	2320      	movs	r3, #32
 8009d6c:	e003      	b.n	8009d76 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	fab3 f383 	clz	r3, r3
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	005b      	lsls	r3, r3, #1
 8009d78:	2103      	movs	r1, #3
 8009d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d7e:	43db      	mvns	r3, r3
 8009d80:	401a      	ands	r2, r3
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	fa93 f3a3 	rbit	r3, r3
 8009d8c:	61fb      	str	r3, [r7, #28]
  return result;
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d101      	bne.n	8009d9c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009d98:	2320      	movs	r3, #32
 8009d9a:	e003      	b.n	8009da4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9e:	fab3 f383 	clz	r3, r3
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	005b      	lsls	r3, r3, #1
 8009da6:	6879      	ldr	r1, [r7, #4]
 8009da8:	fa01 f303 	lsl.w	r3, r1, r3
 8009dac:	431a      	orrs	r2, r3
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	601a      	str	r2, [r3, #0]
}
 8009db2:	bf00      	nop
 8009db4:	372c      	adds	r7, #44	; 0x2c
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8009dbe:	b480      	push	{r7}
 8009dc0:	b085      	sub	sp, #20
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	60f8      	str	r0, [r7, #12]
 8009dc6:	60b9      	str	r1, [r7, #8]
 8009dc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	685a      	ldr	r2, [r3, #4]
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	43db      	mvns	r3, r3
 8009dd2:	401a      	ands	r2, r3
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	6879      	ldr	r1, [r7, #4]
 8009dd8:	fb01 f303 	mul.w	r3, r1, r3
 8009ddc:	431a      	orrs	r2, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	605a      	str	r2, [r3, #4]
}
 8009de2:	bf00      	nop
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b08b      	sub	sp, #44	; 0x2c
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	60f8      	str	r0, [r7, #12]
 8009df6:	60b9      	str	r1, [r7, #8]
 8009df8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	689a      	ldr	r2, [r3, #8]
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	fa93 f3a3 	rbit	r3, r3
 8009e08:	613b      	str	r3, [r7, #16]
  return result;
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009e14:	2320      	movs	r3, #32
 8009e16:	e003      	b.n	8009e20 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	fab3 f383 	clz	r3, r3
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	005b      	lsls	r3, r3, #1
 8009e22:	2103      	movs	r1, #3
 8009e24:	fa01 f303 	lsl.w	r3, r1, r3
 8009e28:	43db      	mvns	r3, r3
 8009e2a:	401a      	ands	r2, r3
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e30:	6a3b      	ldr	r3, [r7, #32]
 8009e32:	fa93 f3a3 	rbit	r3, r3
 8009e36:	61fb      	str	r3, [r7, #28]
  return result;
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d101      	bne.n	8009e46 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009e42:	2320      	movs	r3, #32
 8009e44:	e003      	b.n	8009e4e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	fab3 f383 	clz	r3, r3
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	005b      	lsls	r3, r3, #1
 8009e50:	6879      	ldr	r1, [r7, #4]
 8009e52:	fa01 f303 	lsl.w	r3, r1, r3
 8009e56:	431a      	orrs	r2, r3
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009e5c:	bf00      	nop
 8009e5e:	372c      	adds	r7, #44	; 0x2c
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b08b      	sub	sp, #44	; 0x2c
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	68da      	ldr	r2, [r3, #12]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	fa93 f3a3 	rbit	r3, r3
 8009e82:	613b      	str	r3, [r7, #16]
  return result;
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d101      	bne.n	8009e92 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8009e8e:	2320      	movs	r3, #32
 8009e90:	e003      	b.n	8009e9a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	fab3 f383 	clz	r3, r3
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	005b      	lsls	r3, r3, #1
 8009e9c:	2103      	movs	r1, #3
 8009e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009ea2:	43db      	mvns	r3, r3
 8009ea4:	401a      	ands	r2, r3
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009eaa:	6a3b      	ldr	r3, [r7, #32]
 8009eac:	fa93 f3a3 	rbit	r3, r3
 8009eb0:	61fb      	str	r3, [r7, #28]
  return result;
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d101      	bne.n	8009ec0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009ebc:	2320      	movs	r3, #32
 8009ebe:	e003      	b.n	8009ec8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	fab3 f383 	clz	r3, r3
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	005b      	lsls	r3, r3, #1
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8009ed0:	431a      	orrs	r2, r3
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	60da      	str	r2, [r3, #12]
}
 8009ed6:	bf00      	nop
 8009ed8:	372c      	adds	r7, #44	; 0x2c
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr

08009ee2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009ee2:	b480      	push	{r7}
 8009ee4:	b08b      	sub	sp, #44	; 0x2c
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	60f8      	str	r0, [r7, #12]
 8009eea:	60b9      	str	r1, [r7, #8]
 8009eec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6a1a      	ldr	r2, [r3, #32]
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	fa93 f3a3 	rbit	r3, r3
 8009efc:	613b      	str	r3, [r7, #16]
  return result;
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d101      	bne.n	8009f0c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009f08:	2320      	movs	r3, #32
 8009f0a:	e003      	b.n	8009f14 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	fab3 f383 	clz	r3, r3
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	210f      	movs	r1, #15
 8009f18:	fa01 f303 	lsl.w	r3, r1, r3
 8009f1c:	43db      	mvns	r3, r3
 8009f1e:	401a      	ands	r2, r3
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f24:	6a3b      	ldr	r3, [r7, #32]
 8009f26:	fa93 f3a3 	rbit	r3, r3
 8009f2a:	61fb      	str	r3, [r7, #28]
  return result;
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d101      	bne.n	8009f3a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009f36:	2320      	movs	r3, #32
 8009f38:	e003      	b.n	8009f42 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3c:	fab3 f383 	clz	r3, r3
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	6879      	ldr	r1, [r7, #4]
 8009f46:	fa01 f303 	lsl.w	r3, r1, r3
 8009f4a:	431a      	orrs	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8009f50:	bf00      	nop
 8009f52:	372c      	adds	r7, #44	; 0x2c
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b08b      	sub	sp, #44	; 0x2c
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	0a1b      	lsrs	r3, r3, #8
 8009f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	fa93 f3a3 	rbit	r3, r3
 8009f78:	613b      	str	r3, [r7, #16]
  return result;
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009f84:	2320      	movs	r3, #32
 8009f86:	e003      	b.n	8009f90 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	fab3 f383 	clz	r3, r3
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	210f      	movs	r1, #15
 8009f94:	fa01 f303 	lsl.w	r3, r1, r3
 8009f98:	43db      	mvns	r3, r3
 8009f9a:	401a      	ands	r2, r3
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	0a1b      	lsrs	r3, r3, #8
 8009fa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fa2:	6a3b      	ldr	r3, [r7, #32]
 8009fa4:	fa93 f3a3 	rbit	r3, r3
 8009fa8:	61fb      	str	r3, [r7, #28]
  return result;
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d101      	bne.n	8009fb8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009fb4:	2320      	movs	r3, #32
 8009fb6:	e003      	b.n	8009fc0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fba:	fab3 f383 	clz	r3, r3
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	6879      	ldr	r1, [r7, #4]
 8009fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8009fc8:	431a      	orrs	r2, r3
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8009fce:	bf00      	nop
 8009fd0:	372c      	adds	r7, #44	; 0x2c
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr

08009fda <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b08a      	sub	sp, #40	; 0x28
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	fa93 f3a3 	rbit	r3, r3
 8009ff0:	617b      	str	r3, [r7, #20]
  return result;
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d101      	bne.n	800a000 <LL_GPIO_Init+0x26>
    return 32U;
 8009ffc:	2320      	movs	r3, #32
 8009ffe:	e003      	b.n	800a008 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	fab3 f383 	clz	r3, r3
 800a006:	b2db      	uxtb	r3, r3
 800a008:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a00a:	e050      	b.n	800a0ae <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	2101      	movs	r1, #1
 800a012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a014:	fa01 f303 	lsl.w	r3, r1, r3
 800a018:	4013      	ands	r3, r2
 800a01a:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800a01c:	6a3b      	ldr	r3, [r7, #32]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d042      	beq.n	800a0a8 <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	461a      	mov	r2, r3
 800a028:	6a39      	ldr	r1, [r7, #32]
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f7ff fe8a 	bl	8009d44 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d003      	beq.n	800a040 <LL_GPIO_Init+0x66>
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	d106      	bne.n	800a04e <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	461a      	mov	r2, r3
 800a046:	6a39      	ldr	r1, [r7, #32]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f7ff fed0 	bl	8009dee <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	461a      	mov	r2, r3
 800a054:	6a39      	ldr	r1, [r7, #32]
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f7ff ff06 	bl	8009e68 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	2b02      	cmp	r3, #2
 800a062:	d121      	bne.n	800a0a8 <LL_GPIO_Init+0xce>
 800a064:	6a3b      	ldr	r3, [r7, #32]
 800a066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	fa93 f3a3 	rbit	r3, r3
 800a06e:	60bb      	str	r3, [r7, #8]
  return result;
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d101      	bne.n	800a07e <LL_GPIO_Init+0xa4>
    return 32U;
 800a07a:	2320      	movs	r3, #32
 800a07c:	e003      	b.n	800a086 <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	fab3 f383 	clz	r3, r3
 800a084:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800a086:	2b07      	cmp	r3, #7
 800a088:	d807      	bhi.n	800a09a <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	695b      	ldr	r3, [r3, #20]
 800a08e:	461a      	mov	r2, r3
 800a090:	6a39      	ldr	r1, [r7, #32]
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f7ff ff25 	bl	8009ee2 <LL_GPIO_SetAFPin_0_7>
 800a098:	e006      	b.n	800a0a8 <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	695b      	ldr	r3, [r3, #20]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	6a39      	ldr	r1, [r7, #32]
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f7ff ff5a 	bl	8009f5c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1a7      	bne.n	800a00c <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d003      	beq.n	800a0cc <LL_GPIO_Init+0xf2>
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d107      	bne.n	800a0dc <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	6819      	ldr	r1, [r3, #0]
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f7ff fe71 	bl	8009dbe <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3728      	adds	r7, #40	; 0x28
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	f107 001c 	add.w	r0, r7, #28
 800a0f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fd8f 	bl	800ac28 <USB_CoreReset>
 800a10a:	4603      	mov	r3, r0
 800a10c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a10e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a110:	2b00      	cmp	r3, #0
 800a112:	d106      	bne.n	800a122 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a118:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	639a      	str	r2, [r3, #56]	; 0x38
 800a120:	e005      	b.n	800a12e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a126:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 800a12e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a130:	4618      	mov	r0, r3
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a13a:	b004      	add	sp, #16
 800a13c:	4770      	bx	lr
	...

0800a140 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a140:	b480      	push	{r7}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	4613      	mov	r3, r2
 800a14c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a14e:	79fb      	ldrb	r3, [r7, #7]
 800a150:	2b02      	cmp	r3, #2
 800a152:	d165      	bne.n	800a220 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	4a41      	ldr	r2, [pc, #260]	; (800a25c <USB_SetTurnaroundTime+0x11c>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d906      	bls.n	800a16a <USB_SetTurnaroundTime+0x2a>
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	4a40      	ldr	r2, [pc, #256]	; (800a260 <USB_SetTurnaroundTime+0x120>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d202      	bcs.n	800a16a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a164:	230f      	movs	r3, #15
 800a166:	617b      	str	r3, [r7, #20]
 800a168:	e062      	b.n	800a230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	4a3c      	ldr	r2, [pc, #240]	; (800a260 <USB_SetTurnaroundTime+0x120>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d306      	bcc.n	800a180 <USB_SetTurnaroundTime+0x40>
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	4a3b      	ldr	r2, [pc, #236]	; (800a264 <USB_SetTurnaroundTime+0x124>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d202      	bcs.n	800a180 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a17a:	230e      	movs	r3, #14
 800a17c:	617b      	str	r3, [r7, #20]
 800a17e:	e057      	b.n	800a230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	4a38      	ldr	r2, [pc, #224]	; (800a264 <USB_SetTurnaroundTime+0x124>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d306      	bcc.n	800a196 <USB_SetTurnaroundTime+0x56>
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	4a37      	ldr	r2, [pc, #220]	; (800a268 <USB_SetTurnaroundTime+0x128>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d202      	bcs.n	800a196 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a190:	230d      	movs	r3, #13
 800a192:	617b      	str	r3, [r7, #20]
 800a194:	e04c      	b.n	800a230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	4a33      	ldr	r2, [pc, #204]	; (800a268 <USB_SetTurnaroundTime+0x128>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d306      	bcc.n	800a1ac <USB_SetTurnaroundTime+0x6c>
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	4a32      	ldr	r2, [pc, #200]	; (800a26c <USB_SetTurnaroundTime+0x12c>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d802      	bhi.n	800a1ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a1a6:	230c      	movs	r3, #12
 800a1a8:	617b      	str	r3, [r7, #20]
 800a1aa:	e041      	b.n	800a230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	4a2f      	ldr	r2, [pc, #188]	; (800a26c <USB_SetTurnaroundTime+0x12c>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d906      	bls.n	800a1c2 <USB_SetTurnaroundTime+0x82>
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	4a2e      	ldr	r2, [pc, #184]	; (800a270 <USB_SetTurnaroundTime+0x130>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d802      	bhi.n	800a1c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a1bc:	230b      	movs	r3, #11
 800a1be:	617b      	str	r3, [r7, #20]
 800a1c0:	e036      	b.n	800a230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	4a2a      	ldr	r2, [pc, #168]	; (800a270 <USB_SetTurnaroundTime+0x130>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d906      	bls.n	800a1d8 <USB_SetTurnaroundTime+0x98>
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	4a29      	ldr	r2, [pc, #164]	; (800a274 <USB_SetTurnaroundTime+0x134>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d802      	bhi.n	800a1d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a1d2:	230a      	movs	r3, #10
 800a1d4:	617b      	str	r3, [r7, #20]
 800a1d6:	e02b      	b.n	800a230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	4a26      	ldr	r2, [pc, #152]	; (800a274 <USB_SetTurnaroundTime+0x134>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d906      	bls.n	800a1ee <USB_SetTurnaroundTime+0xae>
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	4a25      	ldr	r2, [pc, #148]	; (800a278 <USB_SetTurnaroundTime+0x138>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d202      	bcs.n	800a1ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a1e8:	2309      	movs	r3, #9
 800a1ea:	617b      	str	r3, [r7, #20]
 800a1ec:	e020      	b.n	800a230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	4a21      	ldr	r2, [pc, #132]	; (800a278 <USB_SetTurnaroundTime+0x138>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d306      	bcc.n	800a204 <USB_SetTurnaroundTime+0xc4>
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	4a20      	ldr	r2, [pc, #128]	; (800a27c <USB_SetTurnaroundTime+0x13c>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d802      	bhi.n	800a204 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a1fe:	2308      	movs	r3, #8
 800a200:	617b      	str	r3, [r7, #20]
 800a202:	e015      	b.n	800a230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	4a1d      	ldr	r2, [pc, #116]	; (800a27c <USB_SetTurnaroundTime+0x13c>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d906      	bls.n	800a21a <USB_SetTurnaroundTime+0xda>
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	4a1c      	ldr	r2, [pc, #112]	; (800a280 <USB_SetTurnaroundTime+0x140>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d202      	bcs.n	800a21a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a214:	2307      	movs	r3, #7
 800a216:	617b      	str	r3, [r7, #20]
 800a218:	e00a      	b.n	800a230 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a21a:	2306      	movs	r3, #6
 800a21c:	617b      	str	r3, [r7, #20]
 800a21e:	e007      	b.n	800a230 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a220:	79fb      	ldrb	r3, [r7, #7]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d102      	bne.n	800a22c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a226:	2309      	movs	r3, #9
 800a228:	617b      	str	r3, [r7, #20]
 800a22a:	e001      	b.n	800a230 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a22c:	2309      	movs	r3, #9
 800a22e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	68da      	ldr	r2, [r3, #12]
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	029b      	lsls	r3, r3, #10
 800a244:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a248:	431a      	orrs	r2, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	371c      	adds	r7, #28
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	00d8acbf 	.word	0x00d8acbf
 800a260:	00e4e1c0 	.word	0x00e4e1c0
 800a264:	00f42400 	.word	0x00f42400
 800a268:	01067380 	.word	0x01067380
 800a26c:	011a499f 	.word	0x011a499f
 800a270:	01312cff 	.word	0x01312cff
 800a274:	014ca43f 	.word	0x014ca43f
 800a278:	016e3600 	.word	0x016e3600
 800a27c:	01a6ab1f 	.word	0x01a6ab1f
 800a280:	01e84800 	.word	0x01e84800

0800a284 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	f023 0201 	bic.w	r2, r3, #1
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	370c      	adds	r7, #12
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b084      	sub	sp, #16
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a2c2:	78fb      	ldrb	r3, [r7, #3]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d115      	bne.n	800a2f4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a2d4:	2001      	movs	r0, #1
 800a2d6:	f7f8 f961 	bl	800259c <HAL_Delay>
      ms++;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fc11 	bl	800ab08 <USB_GetMode>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d01e      	beq.n	800a32a <USB_SetCurrentMode+0x84>
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2b31      	cmp	r3, #49	; 0x31
 800a2f0:	d9f0      	bls.n	800a2d4 <USB_SetCurrentMode+0x2e>
 800a2f2:	e01a      	b.n	800a32a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a2f4:	78fb      	ldrb	r3, [r7, #3]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d115      	bne.n	800a326 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a306:	2001      	movs	r0, #1
 800a308:	f7f8 f948 	bl	800259c <HAL_Delay>
      ms++;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	3301      	adds	r3, #1
 800a310:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fbf8 	bl	800ab08 <USB_GetMode>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d005      	beq.n	800a32a <USB_SetCurrentMode+0x84>
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2b31      	cmp	r3, #49	; 0x31
 800a322:	d9f0      	bls.n	800a306 <USB_SetCurrentMode+0x60>
 800a324:	e001      	b.n	800a32a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e005      	b.n	800a336 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2b32      	cmp	r3, #50	; 0x32
 800a32e:	d101      	bne.n	800a334 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e000      	b.n	800a336 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
	...

0800a340 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a340:	b084      	sub	sp, #16
 800a342:	b580      	push	{r7, lr}
 800a344:	b086      	sub	sp, #24
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
 800a34a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a34e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a35a:	2300      	movs	r3, #0
 800a35c:	613b      	str	r3, [r7, #16]
 800a35e:	e009      	b.n	800a374 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	3340      	adds	r3, #64	; 0x40
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	4413      	add	r3, r2
 800a36a:	2200      	movs	r2, #0
 800a36c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	3301      	adds	r3, #1
 800a372:	613b      	str	r3, [r7, #16]
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	2b0e      	cmp	r3, #14
 800a378:	d9f2      	bls.n	800a360 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a37a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d11c      	bne.n	800a3ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a38e:	f043 0302 	orr.w	r3, r3, #2
 800a392:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a398:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	601a      	str	r2, [r3, #0]
 800a3b8:	e005      	b.n	800a3c6 <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3d8:	4619      	mov	r1, r3
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	680b      	ldr	r3, [r1, #0]
 800a3e4:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a3e6:	2103      	movs	r1, #3
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f95b 	bl	800a6a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a3ee:	2110      	movs	r1, #16
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 f8f3 	bl	800a5dc <USB_FlushTxFifo>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d001      	beq.n	800a400 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 f91f 	bl	800a644 <USB_FlushRxFifo>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d001      	beq.n	800a410 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a416:	461a      	mov	r2, r3
 800a418:	2300      	movs	r3, #0
 800a41a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a422:	461a      	mov	r2, r3
 800a424:	2300      	movs	r3, #0
 800a426:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a42e:	461a      	mov	r2, r3
 800a430:	2300      	movs	r3, #0
 800a432:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a434:	2300      	movs	r3, #0
 800a436:	613b      	str	r3, [r7, #16]
 800a438:	e043      	b.n	800a4c2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	015a      	lsls	r2, r3, #5
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	4413      	add	r3, r2
 800a442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a44c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a450:	d118      	bne.n	800a484 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10a      	bne.n	800a46e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	015a      	lsls	r2, r3, #5
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	4413      	add	r3, r2
 800a460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a464:	461a      	mov	r2, r3
 800a466:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a46a:	6013      	str	r3, [r2, #0]
 800a46c:	e013      	b.n	800a496 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	015a      	lsls	r2, r3, #5
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	4413      	add	r3, r2
 800a476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a47a:	461a      	mov	r2, r3
 800a47c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a480:	6013      	str	r3, [r2, #0]
 800a482:	e008      	b.n	800a496 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	015a      	lsls	r2, r3, #5
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	4413      	add	r3, r2
 800a48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a490:	461a      	mov	r2, r3
 800a492:	2300      	movs	r3, #0
 800a494:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	015a      	lsls	r2, r3, #5
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	4413      	add	r3, r2
 800a49e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	015a      	lsls	r2, r3, #5
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a4ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	613b      	str	r3, [r7, #16]
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c4:	693a      	ldr	r2, [r7, #16]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d3b7      	bcc.n	800a43a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	613b      	str	r3, [r7, #16]
 800a4ce:	e043      	b.n	800a558 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	015a      	lsls	r2, r3, #5
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4e6:	d118      	bne.n	800a51a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10a      	bne.n	800a504 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	015a      	lsls	r2, r3, #5
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a500:	6013      	str	r3, [r2, #0]
 800a502:	e013      	b.n	800a52c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	015a      	lsls	r2, r3, #5
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	4413      	add	r3, r2
 800a50c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a510:	461a      	mov	r2, r3
 800a512:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a516:	6013      	str	r3, [r2, #0]
 800a518:	e008      	b.n	800a52c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	015a      	lsls	r2, r3, #5
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	4413      	add	r3, r2
 800a522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a526:	461a      	mov	r2, r3
 800a528:	2300      	movs	r3, #0
 800a52a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	015a      	lsls	r2, r3, #5
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	4413      	add	r3, r2
 800a534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a538:	461a      	mov	r2, r3
 800a53a:	2300      	movs	r3, #0
 800a53c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	015a      	lsls	r2, r3, #5
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	4413      	add	r3, r2
 800a546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a54a:	461a      	mov	r2, r3
 800a54c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a550:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	3301      	adds	r3, #1
 800a556:	613b      	str	r3, [r7, #16]
 800a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55a:	693a      	ldr	r2, [r7, #16]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d3b7      	bcc.n	800a4d0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a56e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a572:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a580:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a584:	2b00      	cmp	r3, #0
 800a586:	d105      	bne.n	800a594 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	699b      	ldr	r3, [r3, #24]
 800a58c:	f043 0210 	orr.w	r2, r3, #16
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	699a      	ldr	r2, [r3, #24]
 800a598:	4b0f      	ldr	r3, [pc, #60]	; (800a5d8 <USB_DevInit+0x298>)
 800a59a:	4313      	orrs	r3, r2
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d005      	beq.n	800a5b2 <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	f043 0208 	orr.w	r2, r3, #8
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a5b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d107      	bne.n	800a5c8 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5c0:	f043 0304 	orr.w	r3, r3, #4
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a5c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3718      	adds	r7, #24
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5d4:	b004      	add	sp, #16
 800a5d6:	4770      	bx	lr
 800a5d8:	803c3800 	.word	0x803c3800

0800a5dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	4a13      	ldr	r2, [pc, #76]	; (800a640 <USB_FlushTxFifo+0x64>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d901      	bls.n	800a5fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e01b      	b.n	800a634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	2b00      	cmp	r3, #0
 800a602:	daf2      	bge.n	800a5ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a604:	2300      	movs	r3, #0
 800a606:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	019b      	lsls	r3, r3, #6
 800a60c:	f043 0220 	orr.w	r2, r3, #32
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	3301      	adds	r3, #1
 800a618:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	4a08      	ldr	r2, [pc, #32]	; (800a640 <USB_FlushTxFifo+0x64>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d901      	bls.n	800a626 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a622:	2303      	movs	r3, #3
 800a624:	e006      	b.n	800a634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	f003 0320 	and.w	r3, r3, #32
 800a62e:	2b20      	cmp	r3, #32
 800a630:	d0f0      	beq.n	800a614 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3714      	adds	r7, #20
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr
 800a640:	00030d40 	.word	0x00030d40

0800a644 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a64c:	2300      	movs	r3, #0
 800a64e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	3301      	adds	r3, #1
 800a654:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	4a11      	ldr	r2, [pc, #68]	; (800a6a0 <USB_FlushRxFifo+0x5c>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d901      	bls.n	800a662 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a65e:	2303      	movs	r3, #3
 800a660:	e018      	b.n	800a694 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	2b00      	cmp	r3, #0
 800a668:	daf2      	bge.n	800a650 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a66a:	2300      	movs	r3, #0
 800a66c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2210      	movs	r2, #16
 800a672:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	3301      	adds	r3, #1
 800a678:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	4a08      	ldr	r2, [pc, #32]	; (800a6a0 <USB_FlushRxFifo+0x5c>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d901      	bls.n	800a686 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a682:	2303      	movs	r3, #3
 800a684:	e006      	b.n	800a694 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	f003 0310 	and.w	r3, r3, #16
 800a68e:	2b10      	cmp	r3, #16
 800a690:	d0f0      	beq.n	800a674 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3714      	adds	r7, #20
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr
 800a6a0:	00030d40 	.word	0x00030d40

0800a6a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	78fb      	ldrb	r3, [r7, #3]
 800a6be:	68f9      	ldr	r1, [r7, #12]
 800a6c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3714      	adds	r7, #20
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr

0800a6d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a6d6:	b480      	push	{r7}
 800a6d8:	b087      	sub	sp, #28
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	f003 0306 	and.w	r3, r3, #6
 800a6ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d102      	bne.n	800a6fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	75fb      	strb	r3, [r7, #23]
 800a6fa:	e00a      	b.n	800a712 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	d002      	beq.n	800a708 <USB_GetDevSpeed+0x32>
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2b06      	cmp	r3, #6
 800a706:	d102      	bne.n	800a70e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a708:	2302      	movs	r3, #2
 800a70a:	75fb      	strb	r3, [r7, #23]
 800a70c:	e001      	b.n	800a712 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a70e:	230f      	movs	r3, #15
 800a710:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a712:	7dfb      	ldrb	r3, [r7, #23]
}
 800a714:	4618      	mov	r0, r3
 800a716:	371c      	adds	r7, #28
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a720:	b480      	push	{r7}
 800a722:	b087      	sub	sp, #28
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a72a:	2300      	movs	r3, #0
 800a72c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	785b      	ldrb	r3, [r3, #1]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d14a      	bne.n	800a7d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	015a      	lsls	r2, r3, #5
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	4413      	add	r3, r2
 800a748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a756:	f040 8086 	bne.w	800a866 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	015a      	lsls	r2, r3, #5
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	4413      	add	r3, r2
 800a764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	683a      	ldr	r2, [r7, #0]
 800a76c:	7812      	ldrb	r2, [r2, #0]
 800a76e:	0151      	lsls	r1, r2, #5
 800a770:	693a      	ldr	r2, [r7, #16]
 800a772:	440a      	add	r2, r1
 800a774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a778:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a77c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	015a      	lsls	r2, r3, #5
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	4413      	add	r3, r2
 800a788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	683a      	ldr	r2, [r7, #0]
 800a790:	7812      	ldrb	r2, [r2, #0]
 800a792:	0151      	lsls	r1, r2, #5
 800a794:	693a      	ldr	r2, [r7, #16]
 800a796:	440a      	add	r2, r1
 800a798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a79c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f242 7210 	movw	r2, #10000	; 0x2710
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d902      	bls.n	800a7b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	75fb      	strb	r3, [r7, #23]
          break;
 800a7b6:	e056      	b.n	800a866 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	015a      	lsls	r2, r3, #5
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7d0:	d0e7      	beq.n	800a7a2 <USB_EPStopXfer+0x82>
 800a7d2:	e048      	b.n	800a866 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	015a      	lsls	r2, r3, #5
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	4413      	add	r3, r2
 800a7de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7ec:	d13b      	bne.n	800a866 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	015a      	lsls	r2, r3, #5
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	683a      	ldr	r2, [r7, #0]
 800a800:	7812      	ldrb	r2, [r2, #0]
 800a802:	0151      	lsls	r1, r2, #5
 800a804:	693a      	ldr	r2, [r7, #16]
 800a806:	440a      	add	r2, r1
 800a808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a80c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a810:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	015a      	lsls	r2, r3, #5
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	4413      	add	r3, r2
 800a81c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	683a      	ldr	r2, [r7, #0]
 800a824:	7812      	ldrb	r2, [r2, #0]
 800a826:	0151      	lsls	r1, r2, #5
 800a828:	693a      	ldr	r2, [r7, #16]
 800a82a:	440a      	add	r2, r1
 800a82c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a830:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a834:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	3301      	adds	r3, #1
 800a83a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a842:	4293      	cmp	r3, r2
 800a844:	d902      	bls.n	800a84c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	75fb      	strb	r3, [r7, #23]
          break;
 800a84a:	e00c      	b.n	800a866 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	015a      	lsls	r2, r3, #5
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	4413      	add	r3, r2
 800a856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a860:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a864:	d0e7      	beq.n	800a836 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a866:	7dfb      	ldrb	r3, [r7, #23]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	371c      	adds	r7, #28
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a874:	b480      	push	{r7}
 800a876:	b089      	sub	sp, #36	; 0x24
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	4611      	mov	r1, r2
 800a880:	461a      	mov	r2, r3
 800a882:	460b      	mov	r3, r1
 800a884:	71fb      	strb	r3, [r7, #7]
 800a886:	4613      	mov	r3, r2
 800a888:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a892:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a896:	2b00      	cmp	r3, #0
 800a898:	d123      	bne.n	800a8e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a89a:	88bb      	ldrh	r3, [r7, #4]
 800a89c:	3303      	adds	r3, #3
 800a89e:	089b      	lsrs	r3, r3, #2
 800a8a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	61bb      	str	r3, [r7, #24]
 800a8a6:	e018      	b.n	800a8da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a8a8:	79fb      	ldrb	r3, [r7, #7]
 800a8aa:	031a      	lsls	r2, r3, #12
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	4413      	add	r3, r2
 800a8b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a8c8:	69fb      	ldr	r3, [r7, #28]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	61bb      	str	r3, [r7, #24]
 800a8da:	69ba      	ldr	r2, [r7, #24]
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d3e2      	bcc.n	800a8a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3724      	adds	r7, #36	; 0x24
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b08b      	sub	sp, #44	; 0x2c
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a906:	88fb      	ldrh	r3, [r7, #6]
 800a908:	089b      	lsrs	r3, r3, #2
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a90e:	88fb      	ldrh	r3, [r7, #6]
 800a910:	f003 0303 	and.w	r3, r3, #3
 800a914:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a916:	2300      	movs	r3, #0
 800a918:	623b      	str	r3, [r7, #32]
 800a91a:	e014      	b.n	800a946 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a91c:	69bb      	ldr	r3, [r7, #24]
 800a91e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a926:	601a      	str	r2, [r3, #0]
    pDest++;
 800a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92a:	3301      	adds	r3, #1
 800a92c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a930:	3301      	adds	r3, #1
 800a932:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	3301      	adds	r3, #1
 800a938:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93c:	3301      	adds	r3, #1
 800a93e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a940:	6a3b      	ldr	r3, [r7, #32]
 800a942:	3301      	adds	r3, #1
 800a944:	623b      	str	r3, [r7, #32]
 800a946:	6a3a      	ldr	r2, [r7, #32]
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d3e6      	bcc.n	800a91c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a94e:	8bfb      	ldrh	r3, [r7, #30]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d01e      	beq.n	800a992 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a954:	2300      	movs	r3, #0
 800a956:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a95e:	461a      	mov	r2, r3
 800a960:	f107 0310 	add.w	r3, r7, #16
 800a964:	6812      	ldr	r2, [r2, #0]
 800a966:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a968:	693a      	ldr	r2, [r7, #16]
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	00db      	lsls	r3, r3, #3
 800a970:	fa22 f303 	lsr.w	r3, r2, r3
 800a974:	b2da      	uxtb	r2, r3
 800a976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a978:	701a      	strb	r2, [r3, #0]
      i++;
 800a97a:	6a3b      	ldr	r3, [r7, #32]
 800a97c:	3301      	adds	r3, #1
 800a97e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a982:	3301      	adds	r3, #1
 800a984:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a986:	8bfb      	ldrh	r3, [r7, #30]
 800a988:	3b01      	subs	r3, #1
 800a98a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a98c:	8bfb      	ldrh	r3, [r7, #30]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d1ea      	bne.n	800a968 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a994:	4618      	mov	r0, r3
 800a996:	372c      	adds	r7, #44	; 0x2c
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b085      	sub	sp, #20
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a9ba:	f023 0303 	bic.w	r3, r3, #3
 800a9be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	68fa      	ldr	r2, [r7, #12]
 800a9ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9ce:	f043 0302 	orr.w	r3, r3, #2
 800a9d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b085      	sub	sp, #20
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	695b      	ldr	r3, [r3, #20]
 800a9ee:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	699b      	ldr	r3, [r3, #24]
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa1a:	699b      	ldr	r3, [r3, #24]
 800aa1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa24:	69db      	ldr	r3, [r3, #28]
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	4013      	ands	r3, r2
 800aa2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	0c1b      	lsrs	r3, r3, #16
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3714      	adds	r7, #20
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b085      	sub	sp, #20
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa4e:	699b      	ldr	r3, [r3, #24]
 800aa50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa58:	69db      	ldr	r3, [r3, #28]
 800aa5a:	68ba      	ldr	r2, [r7, #8]
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	b29b      	uxth	r3, r3
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3714      	adds	r7, #20
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b085      	sub	sp, #20
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	460b      	mov	r3, r1
 800aa7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800aa80:	78fb      	ldrb	r3, [r7, #3]
 800aa82:	015a      	lsls	r2, r3, #5
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	4413      	add	r3, r2
 800aa88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa96:	695b      	ldr	r3, [r3, #20]
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	4013      	ands	r3, r2
 800aa9c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa9e:	68bb      	ldr	r3, [r7, #8]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3714      	adds	r7, #20
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b087      	sub	sp, #28
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	460b      	mov	r3, r1
 800aab6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aacc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aace:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aad0:	78fb      	ldrb	r3, [r7, #3]
 800aad2:	f003 030f 	and.w	r3, r3, #15
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	fa22 f303 	lsr.w	r3, r2, r3
 800aadc:	01db      	lsls	r3, r3, #7
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	693a      	ldr	r2, [r7, #16]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aae6:	78fb      	ldrb	r3, [r7, #3]
 800aae8:	015a      	lsls	r2, r3, #5
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	4413      	add	r3, r2
 800aaee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	693a      	ldr	r2, [r7, #16]
 800aaf6:	4013      	ands	r3, r2
 800aaf8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aafa:	68bb      	ldr	r3, [r7, #8]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	371c      	adds	r7, #28
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	695b      	ldr	r3, [r3, #20]
 800ab14:	f003 0301 	and.w	r3, r3, #1
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	370c      	adds	r7, #12
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b085      	sub	sp, #20
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab3e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ab42:	f023 0307 	bic.w	r3, r3, #7
 800ab46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3714      	adds	r7, #20
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
	...

0800ab6c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b087      	sub	sp, #28
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	460b      	mov	r3, r1
 800ab76:	607a      	str	r2, [r7, #4]
 800ab78:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	333c      	adds	r3, #60	; 0x3c
 800ab82:	3304      	adds	r3, #4
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	4a26      	ldr	r2, [pc, #152]	; (800ac24 <USB_EP0_OutStart+0xb8>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d90a      	bls.n	800aba6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aba0:	d101      	bne.n	800aba6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aba2:	2300      	movs	r3, #0
 800aba4:	e037      	b.n	800ac16 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abac:	461a      	mov	r2, r3
 800abae:	2300      	movs	r3, #0
 800abb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800abc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	697a      	ldr	r2, [r7, #20]
 800abd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abd4:	f043 0318 	orr.w	r3, r3, #24
 800abd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	697a      	ldr	r2, [r7, #20]
 800abe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abe8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800abec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800abee:	7afb      	ldrb	r3, [r7, #11]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d10f      	bne.n	800ac14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abfa:	461a      	mov	r2, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	697a      	ldr	r2, [r7, #20]
 800ac0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac0e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ac12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	371c      	adds	r7, #28
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	4f54300a 	.word	0x4f54300a

0800ac28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac30:	2300      	movs	r3, #0
 800ac32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	3301      	adds	r3, #1
 800ac38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	4a13      	ldr	r2, [pc, #76]	; (800ac8c <USB_CoreReset+0x64>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d901      	bls.n	800ac46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ac42:	2303      	movs	r3, #3
 800ac44:	e01b      	b.n	800ac7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	691b      	ldr	r3, [r3, #16]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	daf2      	bge.n	800ac34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	f043 0201 	orr.w	r2, r3, #1
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	3301      	adds	r3, #1
 800ac62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	4a09      	ldr	r2, [pc, #36]	; (800ac8c <USB_CoreReset+0x64>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d901      	bls.n	800ac70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ac6c:	2303      	movs	r3, #3
 800ac6e:	e006      	b.n	800ac7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	f003 0301 	and.w	r3, r3, #1
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d0f0      	beq.n	800ac5e <USB_CoreReset+0x36>

  return HAL_OK;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3714      	adds	r7, #20
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	00030d40 	.word	0x00030d40

0800ac90 <__libc_init_array>:
 800ac90:	b570      	push	{r4, r5, r6, lr}
 800ac92:	4d0d      	ldr	r5, [pc, #52]	; (800acc8 <__libc_init_array+0x38>)
 800ac94:	2600      	movs	r6, #0
 800ac96:	4c0d      	ldr	r4, [pc, #52]	; (800accc <__libc_init_array+0x3c>)
 800ac98:	1b64      	subs	r4, r4, r5
 800ac9a:	10a4      	asrs	r4, r4, #2
 800ac9c:	42a6      	cmp	r6, r4
 800ac9e:	d109      	bne.n	800acb4 <__libc_init_array+0x24>
 800aca0:	4d0b      	ldr	r5, [pc, #44]	; (800acd0 <__libc_init_array+0x40>)
 800aca2:	2600      	movs	r6, #0
 800aca4:	4c0b      	ldr	r4, [pc, #44]	; (800acd4 <__libc_init_array+0x44>)
 800aca6:	f000 f81f 	bl	800ace8 <_init>
 800acaa:	1b64      	subs	r4, r4, r5
 800acac:	10a4      	asrs	r4, r4, #2
 800acae:	42a6      	cmp	r6, r4
 800acb0:	d105      	bne.n	800acbe <__libc_init_array+0x2e>
 800acb2:	bd70      	pop	{r4, r5, r6, pc}
 800acb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800acb8:	3601      	adds	r6, #1
 800acba:	4798      	blx	r3
 800acbc:	e7ee      	b.n	800ac9c <__libc_init_array+0xc>
 800acbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800acc2:	3601      	adds	r6, #1
 800acc4:	4798      	blx	r3
 800acc6:	e7f2      	b.n	800acae <__libc_init_array+0x1e>
 800acc8:	080156b4 	.word	0x080156b4
 800accc:	080156b4 	.word	0x080156b4
 800acd0:	080156b4 	.word	0x080156b4
 800acd4:	080156b8 	.word	0x080156b8

0800acd8 <memset>:
 800acd8:	4402      	add	r2, r0
 800acda:	4603      	mov	r3, r0
 800acdc:	4293      	cmp	r3, r2
 800acde:	d100      	bne.n	800ace2 <memset+0xa>
 800ace0:	4770      	bx	lr
 800ace2:	f803 1b01 	strb.w	r1, [r3], #1
 800ace6:	e7f9      	b.n	800acdc <memset+0x4>

0800ace8 <_init>:
 800ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acea:	bf00      	nop
 800acec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acee:	bc08      	pop	{r3}
 800acf0:	469e      	mov	lr, r3
 800acf2:	4770      	bx	lr

0800acf4 <_fini>:
 800acf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf6:	bf00      	nop
 800acf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acfa:	bc08      	pop	{r3}
 800acfc:	469e      	mov	lr, r3
 800acfe:	4770      	bx	lr
