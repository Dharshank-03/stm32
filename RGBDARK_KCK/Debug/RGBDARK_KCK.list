
RGBDARK_KCK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002af0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002bfc  08002bfc  00012bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c1c  08002c1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c1c  08002c1c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c1c  08002c1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c1c  08002c1c  00012c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000000c  08002c30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08002c30  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008641  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a6  00000000  00000000  00028676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  00029e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002a7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016319  00000000  00000000  0002b108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a069  00000000  00000000  00041421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081c67  00000000  00000000  0004b48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd0f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002868  00000000  00000000  000cd144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002be4 	.word	0x08002be4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002be4 	.word	0x08002be4

0800014c <HAL_TIM_PWM_PulseFinishedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t datasentflag;
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000154:	2100      	movs	r1, #0
 8000156:	4805      	ldr	r0, [pc, #20]	; (800016c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000158:	f001 feb0 	bl	8001ebc <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 800015c:	4b04      	ldr	r3, [pc, #16]	; (8000170 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800015e:	2201      	movs	r2, #1
 8000160:	701a      	strb	r2, [r3, #0]
}
 8000162:	bf00      	nop
 8000164:	3708      	adds	r7, #8
 8000166:	46bd      	mov	sp, r7
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	20000028 	.word	0x20000028
 8000170:	200000b4 	.word	0x200000b4

08000174 <setledkck>:
#define maxled 3
uint8_t set[maxled][3];

void setledkck(uint8_t pin,uint8_t green,uint8_t red,uint8_t blue){
 8000174:	b490      	push	{r4, r7}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	4604      	mov	r4, r0
 800017c:	4608      	mov	r0, r1
 800017e:	4611      	mov	r1, r2
 8000180:	461a      	mov	r2, r3
 8000182:	4623      	mov	r3, r4
 8000184:	71fb      	strb	r3, [r7, #7]
 8000186:	4603      	mov	r3, r0
 8000188:	71bb      	strb	r3, [r7, #6]
 800018a:	460b      	mov	r3, r1
 800018c:	717b      	strb	r3, [r7, #5]
 800018e:	4613      	mov	r3, r2
 8000190:	713b      	strb	r3, [r7, #4]
	set[pin][0]=pin;
 8000192:	79fa      	ldrb	r2, [r7, #7]
 8000194:	4913      	ldr	r1, [pc, #76]	; (80001e4 <setledkck+0x70>)
 8000196:	4613      	mov	r3, r2
 8000198:	005b      	lsls	r3, r3, #1
 800019a:	4413      	add	r3, r2
 800019c:	440b      	add	r3, r1
 800019e:	79fa      	ldrb	r2, [r7, #7]
 80001a0:	701a      	strb	r2, [r3, #0]
	set[pin][1]=green;
 80001a2:	79fa      	ldrb	r2, [r7, #7]
 80001a4:	490f      	ldr	r1, [pc, #60]	; (80001e4 <setledkck+0x70>)
 80001a6:	4613      	mov	r3, r2
 80001a8:	005b      	lsls	r3, r3, #1
 80001aa:	4413      	add	r3, r2
 80001ac:	440b      	add	r3, r1
 80001ae:	3301      	adds	r3, #1
 80001b0:	79ba      	ldrb	r2, [r7, #6]
 80001b2:	701a      	strb	r2, [r3, #0]
	set[pin][2]=red;
 80001b4:	79fa      	ldrb	r2, [r7, #7]
 80001b6:	490b      	ldr	r1, [pc, #44]	; (80001e4 <setledkck+0x70>)
 80001b8:	4613      	mov	r3, r2
 80001ba:	005b      	lsls	r3, r3, #1
 80001bc:	4413      	add	r3, r2
 80001be:	440b      	add	r3, r1
 80001c0:	3302      	adds	r3, #2
 80001c2:	797a      	ldrb	r2, [r7, #5]
 80001c4:	701a      	strb	r2, [r3, #0]
	set[pin][3]=blue;
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	4906      	ldr	r1, [pc, #24]	; (80001e4 <setledkck+0x70>)
 80001ca:	1c5a      	adds	r2, r3, #1
 80001cc:	4613      	mov	r3, r2
 80001ce:	005b      	lsls	r3, r3, #1
 80001d0:	4413      	add	r3, r2
 80001d2:	440b      	add	r3, r1
 80001d4:	793a      	ldrb	r2, [r7, #4]
 80001d6:	701a      	strb	r2, [r3, #0]
}
 80001d8:	bf00      	nop
 80001da:	3708      	adds	r7, #8
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc90      	pop	{r4, r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	200000b8 	.word	0x200000b8

080001e8 <send>:
int  pwmkck[(maxled*24)+50];
void send(){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0
	int index=0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	617b      	str	r3, [r7, #20]
	uint32_t all;
	for(int i=0;i<maxled;i++){
 80001f2:	2300      	movs	r3, #0
 80001f4:	613b      	str	r3, [r7, #16]
 80001f6:	e03f      	b.n	8000278 <send+0x90>
		all= set[i][1]<<16|set[i][2]<<8|set[i][2];
 80001f8:	4933      	ldr	r1, [pc, #204]	; (80002c8 <send+0xe0>)
 80001fa:	693a      	ldr	r2, [r7, #16]
 80001fc:	4613      	mov	r3, r2
 80001fe:	005b      	lsls	r3, r3, #1
 8000200:	4413      	add	r3, r2
 8000202:	440b      	add	r3, r1
 8000204:	3301      	adds	r3, #1
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	0419      	lsls	r1, r3, #16
 800020a:	482f      	ldr	r0, [pc, #188]	; (80002c8 <send+0xe0>)
 800020c:	693a      	ldr	r2, [r7, #16]
 800020e:	4613      	mov	r3, r2
 8000210:	005b      	lsls	r3, r3, #1
 8000212:	4413      	add	r3, r2
 8000214:	4403      	add	r3, r0
 8000216:	3302      	adds	r3, #2
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	021b      	lsls	r3, r3, #8
 800021c:	4319      	orrs	r1, r3
 800021e:	482a      	ldr	r0, [pc, #168]	; (80002c8 <send+0xe0>)
 8000220:	693a      	ldr	r2, [r7, #16]
 8000222:	4613      	mov	r3, r2
 8000224:	005b      	lsls	r3, r3, #1
 8000226:	4413      	add	r3, r2
 8000228:	4403      	add	r3, r0
 800022a:	3302      	adds	r3, #2
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	430b      	orrs	r3, r1
 8000230:	607b      	str	r3, [r7, #4]
		for (int i=23;i>=0;i--){
 8000232:	2317      	movs	r3, #23
 8000234:	60fb      	str	r3, [r7, #12]
 8000236:	e019      	b.n	800026c <send+0x84>
			if(all&(1<<i))
 8000238:	2201      	movs	r2, #1
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	fa02 f303 	lsl.w	r3, r2, r3
 8000240:	461a      	mov	r2, r3
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4013      	ands	r3, r2
 8000246:	2b00      	cmp	r3, #0
 8000248:	d005      	beq.n	8000256 <send+0x6e>
				pwmkck[index]=6.2;
 800024a:	4a20      	ldr	r2, [pc, #128]	; (80002cc <send+0xe4>)
 800024c:	697b      	ldr	r3, [r7, #20]
 800024e:	2106      	movs	r1, #6
 8000250:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000254:	e004      	b.n	8000260 <send+0x78>
			else
				pwmkck[index]=3.8;
 8000256:	4a1d      	ldr	r2, [pc, #116]	; (80002cc <send+0xe4>)
 8000258:	697b      	ldr	r3, [r7, #20]
 800025a:	2103      	movs	r1, #3
 800025c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			index++;
 8000260:	697b      	ldr	r3, [r7, #20]
 8000262:	3301      	adds	r3, #1
 8000264:	617b      	str	r3, [r7, #20]
		for (int i=23;i>=0;i--){
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	3b01      	subs	r3, #1
 800026a:	60fb      	str	r3, [r7, #12]
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	2b00      	cmp	r3, #0
 8000270:	dae2      	bge.n	8000238 <send+0x50>
	for(int i=0;i<maxled;i++){
 8000272:	693b      	ldr	r3, [r7, #16]
 8000274:	3301      	adds	r3, #1
 8000276:	613b      	str	r3, [r7, #16]
 8000278:	693b      	ldr	r3, [r7, #16]
 800027a:	2b02      	cmp	r3, #2
 800027c:	ddbc      	ble.n	80001f8 <send+0x10>

		}

	}
	for(int i=0;i<50;i++){
 800027e:	2300      	movs	r3, #0
 8000280:	60bb      	str	r3, [r7, #8]
 8000282:	e00a      	b.n	800029a <send+0xb2>
		pwmkck[index]=0;
 8000284:	4a11      	ldr	r2, [pc, #68]	; (80002cc <send+0xe4>)
 8000286:	697b      	ldr	r3, [r7, #20]
 8000288:	2100      	movs	r1, #0
 800028a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		index++;
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	3301      	adds	r3, #1
 8000292:	617b      	str	r3, [r7, #20]
	for(int i=0;i<50;i++){
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	3301      	adds	r3, #1
 8000298:	60bb      	str	r3, [r7, #8]
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	2b31      	cmp	r3, #49	; 0x31
 800029e:	ddf1      	ble.n	8000284 <send+0x9c>
	}


	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,(uint32_t*)pwmkck, index);
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	4a09      	ldr	r2, [pc, #36]	; (80002cc <send+0xe4>)
 80002a6:	2100      	movs	r1, #0
 80002a8:	4809      	ldr	r0, [pc, #36]	; (80002d0 <send+0xe8>)
 80002aa:	f001 fc73 	bl	8001b94 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 80002ae:	bf00      	nop
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <send+0xec>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d0fb      	beq.n	80002b0 <send+0xc8>
		datasentflag = 0;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <send+0xec>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	701a      	strb	r2, [r3, #0]





}
 80002be:	bf00      	nop
 80002c0:	3718      	adds	r7, #24
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	200000b8 	.word	0x200000b8
 80002cc:	200000c4 	.word	0x200000c4
 80002d0:	20000028 	.word	0x20000028
 80002d4:	200000b4 	.word	0x200000b4

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 fa62 	bl	80007a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f824 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f91a 	bl	800051c <MX_GPIO_Init>
  MX_DMA_Init();
 80002e8:	f000 f8fa 	bl	80004e0 <MX_DMA_Init>
  MX_TIM1_Init();
 80002ec:	f000 f858 	bl	80003a0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // send();
  /* USER CODE END 2 */
  setledkck(0,0,255,0);
 80002f0:	2300      	movs	r3, #0
 80002f2:	22ff      	movs	r2, #255	; 0xff
 80002f4:	2100      	movs	r1, #0
 80002f6:	2000      	movs	r0, #0
 80002f8:	f7ff ff3c 	bl	8000174 <setledkck>
  setledkck(1,255,0,0);
 80002fc:	2300      	movs	r3, #0
 80002fe:	2200      	movs	r2, #0
 8000300:	21ff      	movs	r1, #255	; 0xff
 8000302:	2001      	movs	r0, #1
 8000304:	f7ff ff36 	bl	8000174 <setledkck>
  setledkck(2,0,0,255);
 8000308:	23ff      	movs	r3, #255	; 0xff
 800030a:	2200      	movs	r2, #0
 800030c:	2100      	movs	r1, #0
 800030e:	2002      	movs	r0, #2
 8000310:	f7ff ff30 	bl	8000174 <setledkck>
  {
    /* USER CODE END WHILE */
	//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);


	  send();
 8000314:	f7ff ff68 	bl	80001e8 <send>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000318:	2201      	movs	r2, #1
 800031a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800031e:	4802      	ldr	r0, [pc, #8]	; (8000328 <main+0x50>)
 8000320:	f000 ff90 	bl	8001244 <HAL_GPIO_WritePin>
	  send();
 8000324:	e7f6      	b.n	8000314 <main+0x3c>
 8000326:	bf00      	nop
 8000328:	40010800 	.word	0x40010800

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b090      	sub	sp, #64	; 0x40
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	2228      	movs	r2, #40	; 0x28
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f002 fc4a 	bl	8002bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800034e:	2301      	movs	r3, #1
 8000350:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000352:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000356:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000358:	2300      	movs	r3, #0
 800035a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035c:	f107 0318 	add.w	r3, r7, #24
 8000360:	4618      	mov	r0, r3
 8000362:	f000 ff87 	bl	8001274 <HAL_RCC_OscConfig>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0x44>
  {
    Error_Handler();
 800036c:	f000 f916 	bl	800059c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000370:	230f      	movs	r3, #15
 8000372:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000374:	2301      	movs	r3, #1
 8000376:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000378:	2300      	movs	r3, #0
 800037a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2100      	movs	r1, #0
 8000388:	4618      	mov	r0, r3
 800038a:	f001 f9f5 	bl	8001778 <HAL_RCC_ClockConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000394:	f000 f902 	bl	800059c <Error_Handler>
  }
}
 8000398:	bf00      	nop
 800039a:	3740      	adds	r7, #64	; 0x40
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b096      	sub	sp, #88	; 0x58
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]
 80003ce:	615a      	str	r2, [r3, #20]
 80003d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2220      	movs	r2, #32
 80003d6:	2100      	movs	r1, #0
 80003d8:	4618      	mov	r0, r3
 80003da:	f002 fbfb 	bl	8002bd4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003de:	4b3e      	ldr	r3, [pc, #248]	; (80004d8 <MX_TIM1_Init+0x138>)
 80003e0:	4a3e      	ldr	r2, [pc, #248]	; (80004dc <MX_TIM1_Init+0x13c>)
 80003e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003e4:	4b3c      	ldr	r3, [pc, #240]	; (80004d8 <MX_TIM1_Init+0x138>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ea:	4b3b      	ldr	r3, [pc, #236]	; (80004d8 <MX_TIM1_Init+0x138>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 80003f0:	4b39      	ldr	r3, [pc, #228]	; (80004d8 <MX_TIM1_Init+0x138>)
 80003f2:	2209      	movs	r2, #9
 80003f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f6:	4b38      	ldr	r3, [pc, #224]	; (80004d8 <MX_TIM1_Init+0x138>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003fc:	4b36      	ldr	r3, [pc, #216]	; (80004d8 <MX_TIM1_Init+0x138>)
 80003fe:	2200      	movs	r2, #0
 8000400:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000402:	4b35      	ldr	r3, [pc, #212]	; (80004d8 <MX_TIM1_Init+0x138>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000408:	4833      	ldr	r0, [pc, #204]	; (80004d8 <MX_TIM1_Init+0x138>)
 800040a:	f001 fb1b 	bl	8001a44 <HAL_TIM_Base_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000414:	f000 f8c2 	bl	800059c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800041e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000422:	4619      	mov	r1, r3
 8000424:	482c      	ldr	r0, [pc, #176]	; (80004d8 <MX_TIM1_Init+0x138>)
 8000426:	f001 fec5 	bl	80021b4 <HAL_TIM_ConfigClockSource>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000430:	f000 f8b4 	bl	800059c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000434:	4828      	ldr	r0, [pc, #160]	; (80004d8 <MX_TIM1_Init+0x138>)
 8000436:	f001 fb54 	bl	8001ae2 <HAL_TIM_PWM_Init>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000440:	f000 f8ac 	bl	800059c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000444:	2300      	movs	r3, #0
 8000446:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000448:	2300      	movs	r3, #0
 800044a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800044c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000450:	4619      	mov	r1, r3
 8000452:	4821      	ldr	r0, [pc, #132]	; (80004d8 <MX_TIM1_Init+0x138>)
 8000454:	f002 faf0 	bl	8002a38 <HAL_TIMEx_MasterConfigSynchronization>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800045e:	f000 f89d 	bl	800059c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000462:	2360      	movs	r3, #96	; 0x60
 8000464:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800046a:	2300      	movs	r3, #0
 800046c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800046e:	2300      	movs	r3, #0
 8000470:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000472:	2300      	movs	r3, #0
 8000474:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000476:	2300      	movs	r3, #0
 8000478:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800047a:	2300      	movs	r3, #0
 800047c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800047e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000482:	2200      	movs	r2, #0
 8000484:	4619      	mov	r1, r3
 8000486:	4814      	ldr	r0, [pc, #80]	; (80004d8 <MX_TIM1_Init+0x138>)
 8000488:	f001 fdd6 	bl	8002038 <HAL_TIM_PWM_ConfigChannel>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000492:	f000 f883 	bl	800059c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000496:	2300      	movs	r3, #0
 8000498:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800049a:	2300      	movs	r3, #0
 800049c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	4619      	mov	r1, r3
 80004b8:	4807      	ldr	r0, [pc, #28]	; (80004d8 <MX_TIM1_Init+0x138>)
 80004ba:	f002 fb15 	bl	8002ae8 <HAL_TIMEx_ConfigBreakDeadTime>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80004c4:	f000 f86a 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004c8:	4803      	ldr	r0, [pc, #12]	; (80004d8 <MX_TIM1_Init+0x138>)
 80004ca:	f000 f8d9 	bl	8000680 <HAL_TIM_MspPostInit>

}
 80004ce:	bf00      	nop
 80004d0:	3758      	adds	r7, #88	; 0x58
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	20000028 	.word	0x20000028
 80004dc:	40012c00 	.word	0x40012c00

080004e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <MX_DMA_Init+0x38>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <MX_DMA_Init+0x38>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <MX_DMA_Init+0x38>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	200c      	movs	r0, #12
 8000504:	f000 fa87 	bl	8000a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000508:	200c      	movs	r0, #12
 800050a:	f000 faa0 	bl	8000a4e <HAL_NVIC_EnableIRQ>

}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000

0800051c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	f107 0308 	add.w	r3, r7, #8
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <MX_GPIO_Init+0x78>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a17      	ldr	r2, [pc, #92]	; (8000594 <MX_GPIO_Init+0x78>)
 8000536:	f043 0320 	orr.w	r3, r3, #32
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b15      	ldr	r3, [pc, #84]	; (8000594 <MX_GPIO_Init+0x78>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0320 	and.w	r3, r3, #32
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <MX_GPIO_Init+0x78>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a11      	ldr	r2, [pc, #68]	; (8000594 <MX_GPIO_Init+0x78>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <MX_GPIO_Init+0x78>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0304 	and.w	r3, r3, #4
 800055c:	603b      	str	r3, [r7, #0]
 800055e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000560:	2201      	movs	r2, #1
 8000562:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000566:	480c      	ldr	r0, [pc, #48]	; (8000598 <MX_GPIO_Init+0x7c>)
 8000568:	f000 fe6c 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800056c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000570:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000572:	2301      	movs	r3, #1
 8000574:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800057a:	2303      	movs	r3, #3
 800057c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057e:	f107 0308 	add.w	r3, r7, #8
 8000582:	4619      	mov	r1, r3
 8000584:	4804      	ldr	r0, [pc, #16]	; (8000598 <MX_GPIO_Init+0x7c>)
 8000586:	f000 fce1 	bl	8000f4c <HAL_GPIO_Init>

}
 800058a:	bf00      	nop
 800058c:	3718      	adds	r7, #24
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40021000 	.word	0x40021000
 8000598:	40010800 	.word	0x40010800

0800059c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a0:	b672      	cpsid	i
}
 80005a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <Error_Handler+0x8>
	...

080005a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <HAL_MspInit+0x40>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <HAL_MspInit+0x40>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6193      	str	r3, [r2, #24]
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <HAL_MspInit+0x40>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <HAL_MspInit+0x40>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <HAL_MspInit+0x40>)
 80005cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <HAL_MspInit+0x40>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a1d      	ldr	r2, [pc, #116]	; (8000670 <HAL_TIM_Base_MspInit+0x84>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d134      	bne.n	8000668 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005fe:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <HAL_TIM_Base_MspInit+0x88>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <HAL_TIM_Base_MspInit+0x88>)
 8000604:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000608:	6193      	str	r3, [r2, #24]
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <HAL_TIM_Base_MspInit+0x88>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <HAL_TIM_Base_MspInit+0x8c>)
 8000618:	4a18      	ldr	r2, [pc, #96]	; (800067c <HAL_TIM_Base_MspInit+0x90>)
 800061a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <HAL_TIM_Base_MspInit+0x8c>)
 800061e:	2210      	movs	r2, #16
 8000620:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <HAL_TIM_Base_MspInit+0x8c>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <HAL_TIM_Base_MspInit+0x8c>)
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HAL_TIM_Base_MspInit+0x8c>)
 8000630:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000634:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <HAL_TIM_Base_MspInit+0x8c>)
 8000638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800063c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <HAL_TIM_Base_MspInit+0x8c>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <HAL_TIM_Base_MspInit+0x8c>)
 8000646:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800064a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <HAL_TIM_Base_MspInit+0x8c>)
 800064e:	f000 fa19 	bl	8000a84 <HAL_DMA_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8000658:	f7ff ffa0 	bl	800059c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a06      	ldr	r2, [pc, #24]	; (8000678 <HAL_TIM_Base_MspInit+0x8c>)
 8000660:	625a      	str	r2, [r3, #36]	; 0x24
 8000662:	4a05      	ldr	r2, [pc, #20]	; (8000678 <HAL_TIM_Base_MspInit+0x8c>)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40012c00 	.word	0x40012c00
 8000674:	40021000 	.word	0x40021000
 8000678:	20000070 	.word	0x20000070
 800067c:	4002001c 	.word	0x4002001c

08000680 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a10      	ldr	r2, [pc, #64]	; (80006dc <HAL_TIM_MspPostInit+0x5c>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d118      	bne.n	80006d2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <HAL_TIM_MspPostInit+0x60>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <HAL_TIM_MspPostInit+0x60>)
 80006a6:	f043 0304 	orr.w	r3, r3, #4
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <HAL_TIM_MspPostInit+0x60>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0304 	and.w	r3, r3, #4
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2302      	movs	r3, #2
 80006c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	4619      	mov	r1, r3
 80006cc:	4805      	ldr	r0, [pc, #20]	; (80006e4 <HAL_TIM_MspPostInit+0x64>)
 80006ce:	f000 fc3d 	bl	8000f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80006d2:	bf00      	nop
 80006d4:	3720      	adds	r7, #32
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40012c00 	.word	0x40012c00
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40010800 	.word	0x40010800

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <NMI_Handler+0x4>

080006ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <HardFault_Handler+0x4>

080006f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <MemManage_Handler+0x4>

080006fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <BusFault_Handler+0x4>

08000700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <UsageFault_Handler+0x4>

08000706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr

08000712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr

0800071e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr

0800072a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072e:	f000 f87f 	bl	8000830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800073c:	4802      	ldr	r0, [pc, #8]	; (8000748 <DMA1_Channel2_IRQHandler+0x10>)
 800073e:	f000 fad1 	bl	8000ce4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000070 	.word	0x20000070

0800074c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800075a:	490d      	ldr	r1, [pc, #52]	; (8000790 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800075c:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000760:	e002      	b.n	8000768 <LoopCopyDataInit>

08000762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000766:	3304      	adds	r3, #4

08000768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800076c:	d3f9      	bcc.n	8000762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000770:	4c0a      	ldr	r4, [pc, #40]	; (800079c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000774:	e001      	b.n	800077a <LoopFillZerobss>

08000776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000778:	3204      	adds	r2, #4

0800077a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800077c:	d3fb      	bcc.n	8000776 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800077e:	f7ff ffe5 	bl	800074c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000782:	f002 fa03 	bl	8002b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000786:	f7ff fda7 	bl	80002d8 <main>
  bx lr
 800078a:	4770      	bx	lr
  ldr r0, =_sdata
 800078c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000790:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000794:	08002c24 	.word	0x08002c24
  ldr r2, =_sbss
 8000798:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800079c:	200002b0 	.word	0x200002b0

080007a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a0:	e7fe      	b.n	80007a0 <ADC1_2_IRQHandler>
	...

080007a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <HAL_Init+0x28>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a07      	ldr	r2, [pc, #28]	; (80007cc <HAL_Init+0x28>)
 80007ae:	f043 0310 	orr.w	r3, r3, #16
 80007b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b4:	2003      	movs	r0, #3
 80007b6:	f000 f923 	bl	8000a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ba:	200f      	movs	r0, #15
 80007bc:	f000 f808 	bl	80007d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c0:	f7ff fef2 	bl	80005a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40022000 	.word	0x40022000

080007d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_InitTick+0x54>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_InitTick+0x58>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f93b 	bl	8000a6a <HAL_SYSTICK_Config>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e00e      	b.n	800081c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b0f      	cmp	r3, #15
 8000802:	d80a      	bhi.n	800081a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000804:	2200      	movs	r2, #0
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	f000 f903 	bl	8000a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000810:	4a06      	ldr	r2, [pc, #24]	; (800082c <HAL_InitTick+0x5c>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000816:	2300      	movs	r3, #0
 8000818:	e000      	b.n	800081c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
}
 800081c:	4618      	mov	r0, r3
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000000 	.word	0x20000000
 8000828:	20000008 	.word	0x20000008
 800082c:	20000004 	.word	0x20000004

08000830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_IncTick+0x1c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <HAL_IncTick+0x20>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4413      	add	r3, r2
 8000840:	4a03      	ldr	r2, [pc, #12]	; (8000850 <HAL_IncTick+0x20>)
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	20000008 	.word	0x20000008
 8000850:	200002ac 	.word	0x200002ac

08000854 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return uwTick;
 8000858:	4b02      	ldr	r3, [pc, #8]	; (8000864 <HAL_GetTick+0x10>)
 800085a:	681b      	ldr	r3, [r3, #0]
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	200002ac 	.word	0x200002ac

08000868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <__NVIC_SetPriorityGrouping+0x44>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000884:	4013      	ands	r3, r2
 8000886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800089a:	4a04      	ldr	r2, [pc, #16]	; (80008ac <__NVIC_SetPriorityGrouping+0x44>)
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	60d3      	str	r3, [r2, #12]
}
 80008a0:	bf00      	nop
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__NVIC_GetPriorityGrouping+0x18>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	f003 0307 	and.w	r3, r3, #7
}
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	db0b      	blt.n	80008f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	f003 021f 	and.w	r2, r3, #31
 80008e4:	4906      	ldr	r1, [pc, #24]	; (8000900 <__NVIC_EnableIRQ+0x34>)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	095b      	lsrs	r3, r3, #5
 80008ec:	2001      	movs	r0, #1
 80008ee:	fa00 f202 	lsl.w	r2, r0, r2
 80008f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	e000e100 	.word	0xe000e100

08000904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	6039      	str	r1, [r7, #0]
 800090e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	db0a      	blt.n	800092e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	b2da      	uxtb	r2, r3
 800091c:	490c      	ldr	r1, [pc, #48]	; (8000950 <__NVIC_SetPriority+0x4c>)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	0112      	lsls	r2, r2, #4
 8000924:	b2d2      	uxtb	r2, r2
 8000926:	440b      	add	r3, r1
 8000928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800092c:	e00a      	b.n	8000944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4908      	ldr	r1, [pc, #32]	; (8000954 <__NVIC_SetPriority+0x50>)
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f003 030f 	and.w	r3, r3, #15
 800093a:	3b04      	subs	r3, #4
 800093c:	0112      	lsls	r2, r2, #4
 800093e:	b2d2      	uxtb	r2, r2
 8000940:	440b      	add	r3, r1
 8000942:	761a      	strb	r2, [r3, #24]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000e100 	.word	0xe000e100
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000958:	b480      	push	{r7}
 800095a:	b089      	sub	sp, #36	; 0x24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	f1c3 0307 	rsb	r3, r3, #7
 8000972:	2b04      	cmp	r3, #4
 8000974:	bf28      	it	cs
 8000976:	2304      	movcs	r3, #4
 8000978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3304      	adds	r3, #4
 800097e:	2b06      	cmp	r3, #6
 8000980:	d902      	bls.n	8000988 <NVIC_EncodePriority+0x30>
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3b03      	subs	r3, #3
 8000986:	e000      	b.n	800098a <NVIC_EncodePriority+0x32>
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	f04f 32ff 	mov.w	r2, #4294967295
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43da      	mvns	r2, r3
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	401a      	ands	r2, r3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a0:	f04f 31ff 	mov.w	r1, #4294967295
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	fa01 f303 	lsl.w	r3, r1, r3
 80009aa:	43d9      	mvns	r1, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	4313      	orrs	r3, r2
         );
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3724      	adds	r7, #36	; 0x24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009cc:	d301      	bcc.n	80009d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00f      	b.n	80009f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <SysTick_Config+0x40>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009da:	210f      	movs	r1, #15
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295
 80009e0:	f7ff ff90 	bl	8000904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <SysTick_Config+0x40>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ea:	4b04      	ldr	r3, [pc, #16]	; (80009fc <SysTick_Config+0x40>)
 80009ec:	2207      	movs	r2, #7
 80009ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	e000e010 	.word	0xe000e010

08000a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff ff2d 	bl	8000868 <__NVIC_SetPriorityGrouping>
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b086      	sub	sp, #24
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
 8000a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a28:	f7ff ff42 	bl	80008b0 <__NVIC_GetPriorityGrouping>
 8000a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	68b9      	ldr	r1, [r7, #8]
 8000a32:	6978      	ldr	r0, [r7, #20]
 8000a34:	f7ff ff90 	bl	8000958 <NVIC_EncodePriority>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff5f 	bl	8000904 <__NVIC_SetPriority>
}
 8000a46:	bf00      	nop
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b082      	sub	sp, #8
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	4603      	mov	r3, r0
 8000a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff35 	bl	80008cc <__NVIC_EnableIRQ>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff ffa2 	bl	80009bc <SysTick_Config>
 8000a78:	4603      	mov	r3, r0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d101      	bne.n	8000a9a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e043      	b.n	8000b22 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <HAL_DMA_Init+0xa8>)
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <HAL_DMA_Init+0xac>)
 8000aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aaa:	091b      	lsrs	r3, r3, #4
 8000aac:	009a      	lsls	r2, r3, #2
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a1f      	ldr	r2, [pc, #124]	; (8000b34 <HAL_DMA_Init+0xb0>)
 8000ab6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2202      	movs	r2, #2
 8000abc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000ace:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ad2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000af4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2201      	movs	r2, #1
 8000b14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	bffdfff8 	.word	0xbffdfff8
 8000b30:	cccccccd 	.word	0xcccccccd
 8000b34:	40020000 	.word	0x40020000

08000b38 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d101      	bne.n	8000b58 <HAL_DMA_Start_IT+0x20>
 8000b54:	2302      	movs	r3, #2
 8000b56:	e04a      	b.n	8000bee <HAL_DMA_Start_IT+0xb6>
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d13a      	bne.n	8000be0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	2200      	movs	r2, #0
 8000b76:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f022 0201 	bic.w	r2, r2, #1
 8000b86:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f000 f9ae 	bl	8000ef0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d008      	beq.n	8000bae <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f042 020e 	orr.w	r2, r2, #14
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	e00f      	b.n	8000bce <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f022 0204 	bic.w	r2, r2, #4
 8000bbc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f042 020a 	orr.w	r2, r2, #10
 8000bcc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f042 0201 	orr.w	r2, r2, #1
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	e005      	b.n	8000bec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2200      	movs	r2, #0
 8000be4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000be8:	2302      	movs	r3, #2
 8000bea:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c00:	2300      	movs	r3, #0
 8000c02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d005      	beq.n	8000c1a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2204      	movs	r2, #4
 8000c12:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
 8000c18:	e051      	b.n	8000cbe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f022 020e 	bic.w	r2, r2, #14
 8000c28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f022 0201 	bic.w	r2, r2, #1
 8000c38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a22      	ldr	r2, [pc, #136]	; (8000cc8 <HAL_DMA_Abort_IT+0xd0>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d029      	beq.n	8000c98 <HAL_DMA_Abort_IT+0xa0>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a20      	ldr	r2, [pc, #128]	; (8000ccc <HAL_DMA_Abort_IT+0xd4>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d022      	beq.n	8000c94 <HAL_DMA_Abort_IT+0x9c>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a1f      	ldr	r2, [pc, #124]	; (8000cd0 <HAL_DMA_Abort_IT+0xd8>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d01a      	beq.n	8000c8e <HAL_DMA_Abort_IT+0x96>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a1d      	ldr	r2, [pc, #116]	; (8000cd4 <HAL_DMA_Abort_IT+0xdc>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d012      	beq.n	8000c88 <HAL_DMA_Abort_IT+0x90>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a1c      	ldr	r2, [pc, #112]	; (8000cd8 <HAL_DMA_Abort_IT+0xe0>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d00a      	beq.n	8000c82 <HAL_DMA_Abort_IT+0x8a>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a1a      	ldr	r2, [pc, #104]	; (8000cdc <HAL_DMA_Abort_IT+0xe4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d102      	bne.n	8000c7c <HAL_DMA_Abort_IT+0x84>
 8000c76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c7a:	e00e      	b.n	8000c9a <HAL_DMA_Abort_IT+0xa2>
 8000c7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c80:	e00b      	b.n	8000c9a <HAL_DMA_Abort_IT+0xa2>
 8000c82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c86:	e008      	b.n	8000c9a <HAL_DMA_Abort_IT+0xa2>
 8000c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8c:	e005      	b.n	8000c9a <HAL_DMA_Abort_IT+0xa2>
 8000c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c92:	e002      	b.n	8000c9a <HAL_DMA_Abort_IT+0xa2>
 8000c94:	2310      	movs	r3, #16
 8000c96:	e000      	b.n	8000c9a <HAL_DMA_Abort_IT+0xa2>
 8000c98:	2301      	movs	r3, #1
 8000c9a:	4a11      	ldr	r2, [pc, #68]	; (8000ce0 <HAL_DMA_Abort_IT+0xe8>)
 8000c9c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	4798      	blx	r3
    } 
  }
  return status;
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40020008 	.word	0x40020008
 8000ccc:	4002001c 	.word	0x4002001c
 8000cd0:	40020030 	.word	0x40020030
 8000cd4:	40020044 	.word	0x40020044
 8000cd8:	40020058 	.word	0x40020058
 8000cdc:	4002006c 	.word	0x4002006c
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	2204      	movs	r2, #4
 8000d02:	409a      	lsls	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4013      	ands	r3, r2
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d04f      	beq.n	8000dac <HAL_DMA_IRQHandler+0xc8>
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d04a      	beq.n	8000dac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0320 	and.w	r3, r3, #32
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d107      	bne.n	8000d34 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 0204 	bic.w	r2, r2, #4
 8000d32:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a66      	ldr	r2, [pc, #408]	; (8000ed4 <HAL_DMA_IRQHandler+0x1f0>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d029      	beq.n	8000d92 <HAL_DMA_IRQHandler+0xae>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a65      	ldr	r2, [pc, #404]	; (8000ed8 <HAL_DMA_IRQHandler+0x1f4>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d022      	beq.n	8000d8e <HAL_DMA_IRQHandler+0xaa>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a63      	ldr	r2, [pc, #396]	; (8000edc <HAL_DMA_IRQHandler+0x1f8>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d01a      	beq.n	8000d88 <HAL_DMA_IRQHandler+0xa4>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a62      	ldr	r2, [pc, #392]	; (8000ee0 <HAL_DMA_IRQHandler+0x1fc>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d012      	beq.n	8000d82 <HAL_DMA_IRQHandler+0x9e>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a60      	ldr	r2, [pc, #384]	; (8000ee4 <HAL_DMA_IRQHandler+0x200>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d00a      	beq.n	8000d7c <HAL_DMA_IRQHandler+0x98>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a5f      	ldr	r2, [pc, #380]	; (8000ee8 <HAL_DMA_IRQHandler+0x204>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d102      	bne.n	8000d76 <HAL_DMA_IRQHandler+0x92>
 8000d70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d74:	e00e      	b.n	8000d94 <HAL_DMA_IRQHandler+0xb0>
 8000d76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d7a:	e00b      	b.n	8000d94 <HAL_DMA_IRQHandler+0xb0>
 8000d7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d80:	e008      	b.n	8000d94 <HAL_DMA_IRQHandler+0xb0>
 8000d82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d86:	e005      	b.n	8000d94 <HAL_DMA_IRQHandler+0xb0>
 8000d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8c:	e002      	b.n	8000d94 <HAL_DMA_IRQHandler+0xb0>
 8000d8e:	2340      	movs	r3, #64	; 0x40
 8000d90:	e000      	b.n	8000d94 <HAL_DMA_IRQHandler+0xb0>
 8000d92:	2304      	movs	r3, #4
 8000d94:	4a55      	ldr	r2, [pc, #340]	; (8000eec <HAL_DMA_IRQHandler+0x208>)
 8000d96:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	f000 8094 	beq.w	8000eca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000daa:	e08e      	b.n	8000eca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	2202      	movs	r2, #2
 8000db2:	409a      	lsls	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4013      	ands	r3, r2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d056      	beq.n	8000e6a <HAL_DMA_IRQHandler+0x186>
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d051      	beq.n	8000e6a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0320 	and.w	r3, r3, #32
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d10b      	bne.n	8000dec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f022 020a 	bic.w	r2, r2, #10
 8000de2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2201      	movs	r2, #1
 8000de8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a38      	ldr	r2, [pc, #224]	; (8000ed4 <HAL_DMA_IRQHandler+0x1f0>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d029      	beq.n	8000e4a <HAL_DMA_IRQHandler+0x166>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a37      	ldr	r2, [pc, #220]	; (8000ed8 <HAL_DMA_IRQHandler+0x1f4>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d022      	beq.n	8000e46 <HAL_DMA_IRQHandler+0x162>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a35      	ldr	r2, [pc, #212]	; (8000edc <HAL_DMA_IRQHandler+0x1f8>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d01a      	beq.n	8000e40 <HAL_DMA_IRQHandler+0x15c>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a34      	ldr	r2, [pc, #208]	; (8000ee0 <HAL_DMA_IRQHandler+0x1fc>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d012      	beq.n	8000e3a <HAL_DMA_IRQHandler+0x156>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a32      	ldr	r2, [pc, #200]	; (8000ee4 <HAL_DMA_IRQHandler+0x200>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d00a      	beq.n	8000e34 <HAL_DMA_IRQHandler+0x150>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a31      	ldr	r2, [pc, #196]	; (8000ee8 <HAL_DMA_IRQHandler+0x204>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d102      	bne.n	8000e2e <HAL_DMA_IRQHandler+0x14a>
 8000e28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e2c:	e00e      	b.n	8000e4c <HAL_DMA_IRQHandler+0x168>
 8000e2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e32:	e00b      	b.n	8000e4c <HAL_DMA_IRQHandler+0x168>
 8000e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e38:	e008      	b.n	8000e4c <HAL_DMA_IRQHandler+0x168>
 8000e3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e3e:	e005      	b.n	8000e4c <HAL_DMA_IRQHandler+0x168>
 8000e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e44:	e002      	b.n	8000e4c <HAL_DMA_IRQHandler+0x168>
 8000e46:	2320      	movs	r3, #32
 8000e48:	e000      	b.n	8000e4c <HAL_DMA_IRQHandler+0x168>
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	4a27      	ldr	r2, [pc, #156]	; (8000eec <HAL_DMA_IRQHandler+0x208>)
 8000e4e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d034      	beq.n	8000eca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e68:	e02f      	b.n	8000eca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	2208      	movs	r2, #8
 8000e70:	409a      	lsls	r2, r3
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	4013      	ands	r3, r2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d028      	beq.n	8000ecc <HAL_DMA_IRQHandler+0x1e8>
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	f003 0308 	and.w	r3, r3, #8
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d023      	beq.n	8000ecc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 020e 	bic.w	r2, r2, #14
 8000e92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2201      	movs	r2, #1
 8000eae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d004      	beq.n	8000ecc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	4798      	blx	r3
    }
  }
  return;
 8000eca:	bf00      	nop
 8000ecc:	bf00      	nop
}
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40020008 	.word	0x40020008
 8000ed8:	4002001c 	.word	0x4002001c
 8000edc:	40020030 	.word	0x40020030
 8000ee0:	40020044 	.word	0x40020044
 8000ee4:	40020058 	.word	0x40020058
 8000ee8:	4002006c 	.word	0x4002006c
 8000eec:	40020000 	.word	0x40020000

08000ef0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f06:	2101      	movs	r1, #1
 8000f08:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b10      	cmp	r3, #16
 8000f1c:	d108      	bne.n	8000f30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f2e:	e007      	b.n	8000f40 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	60da      	str	r2, [r3, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
	...

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b08b      	sub	sp, #44	; 0x2c
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5e:	e161      	b.n	8001224 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f60:	2201      	movs	r2, #1
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	69fa      	ldr	r2, [r7, #28]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	f040 8150 	bne.w	800121e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	4a97      	ldr	r2, [pc, #604]	; (80011e0 <HAL_GPIO_Init+0x294>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d05e      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
 8000f88:	4a95      	ldr	r2, [pc, #596]	; (80011e0 <HAL_GPIO_Init+0x294>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d875      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000f8e:	4a95      	ldr	r2, [pc, #596]	; (80011e4 <HAL_GPIO_Init+0x298>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d058      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
 8000f94:	4a93      	ldr	r2, [pc, #588]	; (80011e4 <HAL_GPIO_Init+0x298>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d86f      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000f9a:	4a93      	ldr	r2, [pc, #588]	; (80011e8 <HAL_GPIO_Init+0x29c>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d052      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
 8000fa0:	4a91      	ldr	r2, [pc, #580]	; (80011e8 <HAL_GPIO_Init+0x29c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d869      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000fa6:	4a91      	ldr	r2, [pc, #580]	; (80011ec <HAL_GPIO_Init+0x2a0>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d04c      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
 8000fac:	4a8f      	ldr	r2, [pc, #572]	; (80011ec <HAL_GPIO_Init+0x2a0>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d863      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000fb2:	4a8f      	ldr	r2, [pc, #572]	; (80011f0 <HAL_GPIO_Init+0x2a4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d046      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
 8000fb8:	4a8d      	ldr	r2, [pc, #564]	; (80011f0 <HAL_GPIO_Init+0x2a4>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d85d      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000fbe:	2b12      	cmp	r3, #18
 8000fc0:	d82a      	bhi.n	8001018 <HAL_GPIO_Init+0xcc>
 8000fc2:	2b12      	cmp	r3, #18
 8000fc4:	d859      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000fc6:	a201      	add	r2, pc, #4	; (adr r2, 8000fcc <HAL_GPIO_Init+0x80>)
 8000fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fcc:	08001047 	.word	0x08001047
 8000fd0:	08001021 	.word	0x08001021
 8000fd4:	08001033 	.word	0x08001033
 8000fd8:	08001075 	.word	0x08001075
 8000fdc:	0800107b 	.word	0x0800107b
 8000fe0:	0800107b 	.word	0x0800107b
 8000fe4:	0800107b 	.word	0x0800107b
 8000fe8:	0800107b 	.word	0x0800107b
 8000fec:	0800107b 	.word	0x0800107b
 8000ff0:	0800107b 	.word	0x0800107b
 8000ff4:	0800107b 	.word	0x0800107b
 8000ff8:	0800107b 	.word	0x0800107b
 8000ffc:	0800107b 	.word	0x0800107b
 8001000:	0800107b 	.word	0x0800107b
 8001004:	0800107b 	.word	0x0800107b
 8001008:	0800107b 	.word	0x0800107b
 800100c:	0800107b 	.word	0x0800107b
 8001010:	08001029 	.word	0x08001029
 8001014:	0800103d 	.word	0x0800103d
 8001018:	4a76      	ldr	r2, [pc, #472]	; (80011f4 <HAL_GPIO_Init+0x2a8>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800101e:	e02c      	b.n	800107a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	623b      	str	r3, [r7, #32]
          break;
 8001026:	e029      	b.n	800107c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	3304      	adds	r3, #4
 800102e:	623b      	str	r3, [r7, #32]
          break;
 8001030:	e024      	b.n	800107c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	3308      	adds	r3, #8
 8001038:	623b      	str	r3, [r7, #32]
          break;
 800103a:	e01f      	b.n	800107c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	330c      	adds	r3, #12
 8001042:	623b      	str	r3, [r7, #32]
          break;
 8001044:	e01a      	b.n	800107c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d102      	bne.n	8001054 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800104e:	2304      	movs	r3, #4
 8001050:	623b      	str	r3, [r7, #32]
          break;
 8001052:	e013      	b.n	800107c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d105      	bne.n	8001068 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800105c:	2308      	movs	r3, #8
 800105e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69fa      	ldr	r2, [r7, #28]
 8001064:	611a      	str	r2, [r3, #16]
          break;
 8001066:	e009      	b.n	800107c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001068:	2308      	movs	r3, #8
 800106a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69fa      	ldr	r2, [r7, #28]
 8001070:	615a      	str	r2, [r3, #20]
          break;
 8001072:	e003      	b.n	800107c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
          break;
 8001078:	e000      	b.n	800107c <HAL_GPIO_Init+0x130>
          break;
 800107a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2bff      	cmp	r3, #255	; 0xff
 8001080:	d801      	bhi.n	8001086 <HAL_GPIO_Init+0x13a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	e001      	b.n	800108a <HAL_GPIO_Init+0x13e>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3304      	adds	r3, #4
 800108a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	2bff      	cmp	r3, #255	; 0xff
 8001090:	d802      	bhi.n	8001098 <HAL_GPIO_Init+0x14c>
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	e002      	b.n	800109e <HAL_GPIO_Init+0x152>
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	3b08      	subs	r3, #8
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	210f      	movs	r1, #15
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	401a      	ands	r2, r3
 80010b0:	6a39      	ldr	r1, [r7, #32]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	431a      	orrs	r2, r3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 80a9 	beq.w	800121e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010cc:	4b4a      	ldr	r3, [pc, #296]	; (80011f8 <HAL_GPIO_Init+0x2ac>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a49      	ldr	r2, [pc, #292]	; (80011f8 <HAL_GPIO_Init+0x2ac>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b47      	ldr	r3, [pc, #284]	; (80011f8 <HAL_GPIO_Init+0x2ac>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010e4:	4a45      	ldr	r2, [pc, #276]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3302      	adds	r3, #2
 80010ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	220f      	movs	r2, #15
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	4013      	ands	r3, r2
 8001106:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a3d      	ldr	r2, [pc, #244]	; (8001200 <HAL_GPIO_Init+0x2b4>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d00d      	beq.n	800112c <HAL_GPIO_Init+0x1e0>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a3c      	ldr	r2, [pc, #240]	; (8001204 <HAL_GPIO_Init+0x2b8>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d007      	beq.n	8001128 <HAL_GPIO_Init+0x1dc>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a3b      	ldr	r2, [pc, #236]	; (8001208 <HAL_GPIO_Init+0x2bc>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d101      	bne.n	8001124 <HAL_GPIO_Init+0x1d8>
 8001120:	2302      	movs	r3, #2
 8001122:	e004      	b.n	800112e <HAL_GPIO_Init+0x1e2>
 8001124:	2303      	movs	r3, #3
 8001126:	e002      	b.n	800112e <HAL_GPIO_Init+0x1e2>
 8001128:	2301      	movs	r3, #1
 800112a:	e000      	b.n	800112e <HAL_GPIO_Init+0x1e2>
 800112c:	2300      	movs	r3, #0
 800112e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001130:	f002 0203 	and.w	r2, r2, #3
 8001134:	0092      	lsls	r2, r2, #2
 8001136:	4093      	lsls	r3, r2
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	4313      	orrs	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800113e:	492f      	ldr	r1, [pc, #188]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3302      	adds	r3, #2
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d006      	beq.n	8001166 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001158:	4b2c      	ldr	r3, [pc, #176]	; (800120c <HAL_GPIO_Init+0x2c0>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	492b      	ldr	r1, [pc, #172]	; (800120c <HAL_GPIO_Init+0x2c0>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	600b      	str	r3, [r1, #0]
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001166:	4b29      	ldr	r3, [pc, #164]	; (800120c <HAL_GPIO_Init+0x2c0>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	43db      	mvns	r3, r3
 800116e:	4927      	ldr	r1, [pc, #156]	; (800120c <HAL_GPIO_Init+0x2c0>)
 8001170:	4013      	ands	r3, r2
 8001172:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d006      	beq.n	800118e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001180:	4b22      	ldr	r3, [pc, #136]	; (800120c <HAL_GPIO_Init+0x2c0>)
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	4921      	ldr	r1, [pc, #132]	; (800120c <HAL_GPIO_Init+0x2c0>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	604b      	str	r3, [r1, #4]
 800118c:	e006      	b.n	800119c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <HAL_GPIO_Init+0x2c0>)
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	43db      	mvns	r3, r3
 8001196:	491d      	ldr	r1, [pc, #116]	; (800120c <HAL_GPIO_Init+0x2c0>)
 8001198:	4013      	ands	r3, r2
 800119a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_GPIO_Init+0x2c0>)
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	4917      	ldr	r1, [pc, #92]	; (800120c <HAL_GPIO_Init+0x2c0>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	608b      	str	r3, [r1, #8]
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_GPIO_Init+0x2c0>)
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	43db      	mvns	r3, r3
 80011be:	4913      	ldr	r1, [pc, #76]	; (800120c <HAL_GPIO_Init+0x2c0>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d01f      	beq.n	8001210 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_GPIO_Init+0x2c0>)
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	490d      	ldr	r1, [pc, #52]	; (800120c <HAL_GPIO_Init+0x2c0>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	60cb      	str	r3, [r1, #12]
 80011dc:	e01f      	b.n	800121e <HAL_GPIO_Init+0x2d2>
 80011de:	bf00      	nop
 80011e0:	10320000 	.word	0x10320000
 80011e4:	10310000 	.word	0x10310000
 80011e8:	10220000 	.word	0x10220000
 80011ec:	10210000 	.word	0x10210000
 80011f0:	10120000 	.word	0x10120000
 80011f4:	10110000 	.word	0x10110000
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010000 	.word	0x40010000
 8001200:	40010800 	.word	0x40010800
 8001204:	40010c00 	.word	0x40010c00
 8001208:	40011000 	.word	0x40011000
 800120c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HAL_GPIO_Init+0x2f4>)
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	43db      	mvns	r3, r3
 8001218:	4909      	ldr	r1, [pc, #36]	; (8001240 <HAL_GPIO_Init+0x2f4>)
 800121a:	4013      	ands	r3, r2
 800121c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	3301      	adds	r3, #1
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	fa22 f303 	lsr.w	r3, r2, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	f47f ae96 	bne.w	8000f60 <HAL_GPIO_Init+0x14>
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	372c      	adds	r7, #44	; 0x2c
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	40010400 	.word	0x40010400

08001244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
 8001250:	4613      	mov	r3, r2
 8001252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001254:	787b      	ldrb	r3, [r7, #1]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001260:	e003      	b.n	800126a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	041a      	lsls	r2, r3, #16
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	611a      	str	r2, [r3, #16]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e272      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8087 	beq.w	80013a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001294:	4b92      	ldr	r3, [pc, #584]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b04      	cmp	r3, #4
 800129e:	d00c      	beq.n	80012ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012a0:	4b8f      	ldr	r3, [pc, #572]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d112      	bne.n	80012d2 <HAL_RCC_OscConfig+0x5e>
 80012ac:	4b8c      	ldr	r3, [pc, #560]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b8:	d10b      	bne.n	80012d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ba:	4b89      	ldr	r3, [pc, #548]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d06c      	beq.n	80013a0 <HAL_RCC_OscConfig+0x12c>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d168      	bne.n	80013a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e24c      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012da:	d106      	bne.n	80012ea <HAL_RCC_OscConfig+0x76>
 80012dc:	4b80      	ldr	r3, [pc, #512]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a7f      	ldr	r2, [pc, #508]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	e02e      	b.n	8001348 <HAL_RCC_OscConfig+0xd4>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0x98>
 80012f2:	4b7b      	ldr	r3, [pc, #492]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a7a      	ldr	r2, [pc, #488]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b78      	ldr	r3, [pc, #480]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a77      	ldr	r2, [pc, #476]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001304:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e01d      	b.n	8001348 <HAL_RCC_OscConfig+0xd4>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0xbc>
 8001316:	4b72      	ldr	r3, [pc, #456]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a71      	ldr	r2, [pc, #452]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800131c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b6f      	ldr	r3, [pc, #444]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a6e      	ldr	r2, [pc, #440]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e00b      	b.n	8001348 <HAL_RCC_OscConfig+0xd4>
 8001330:	4b6b      	ldr	r3, [pc, #428]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a6a      	ldr	r2, [pc, #424]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b68      	ldr	r3, [pc, #416]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a67      	ldr	r2, [pc, #412]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001346:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fa80 	bl	8000854 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fa7c 	bl	8000854 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e200      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	4b5d      	ldr	r3, [pc, #372]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0xe4>
 8001376:	e014      	b.n	80013a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fa6c 	bl	8000854 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fa68 	bl	8000854 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e1ec      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	4b53      	ldr	r3, [pc, #332]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x10c>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d063      	beq.n	8001476 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ae:	4b4c      	ldr	r3, [pc, #304]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013ba:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d11c      	bne.n	8001400 <HAL_RCC_OscConfig+0x18c>
 80013c6:	4b46      	ldr	r3, [pc, #280]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d116      	bne.n	8001400 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_RCC_OscConfig+0x176>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e1c0      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ea:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4939      	ldr	r1, [pc, #228]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	e03a      	b.n	8001476 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d020      	beq.n	800144a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001408:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <HAL_RCC_OscConfig+0x270>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7ff fa21 	bl	8000854 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001416:	f7ff fa1d 	bl	8000854 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e1a1      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4927      	ldr	r1, [pc, #156]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
 8001448:	e015      	b.n	8001476 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800144a:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <HAL_RCC_OscConfig+0x270>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fa00 	bl	8000854 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001458:	f7ff f9fc 	bl	8000854 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e180      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d03a      	beq.n	80014f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d019      	beq.n	80014be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <HAL_RCC_OscConfig+0x274>)
 800148c:	2201      	movs	r2, #1
 800148e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001490:	f7ff f9e0 	bl	8000854 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001498:	f7ff f9dc 	bl	8000854 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e160      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014b6:	2001      	movs	r0, #1
 80014b8:	f000 faa6 	bl	8001a08 <RCC_Delay>
 80014bc:	e01c      	b.n	80014f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <HAL_RCC_OscConfig+0x274>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c4:	f7ff f9c6 	bl	8000854 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ca:	e00f      	b.n	80014ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014cc:	f7ff f9c2 	bl	8000854 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d908      	bls.n	80014ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e146      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000
 80014e4:	42420000 	.word	0x42420000
 80014e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ec:	4b92      	ldr	r3, [pc, #584]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1e9      	bne.n	80014cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80a6 	beq.w	8001652 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150a:	4b8b      	ldr	r3, [pc, #556]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10d      	bne.n	8001532 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b88      	ldr	r3, [pc, #544]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a87      	ldr	r2, [pc, #540]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b85      	ldr	r3, [pc, #532]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152e:	2301      	movs	r3, #1
 8001530:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001532:	4b82      	ldr	r3, [pc, #520]	; (800173c <HAL_RCC_OscConfig+0x4c8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153a:	2b00      	cmp	r3, #0
 800153c:	d118      	bne.n	8001570 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800153e:	4b7f      	ldr	r3, [pc, #508]	; (800173c <HAL_RCC_OscConfig+0x4c8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a7e      	ldr	r2, [pc, #504]	; (800173c <HAL_RCC_OscConfig+0x4c8>)
 8001544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800154a:	f7ff f983 	bl	8000854 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001552:	f7ff f97f 	bl	8000854 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b64      	cmp	r3, #100	; 0x64
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e103      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001564:	4b75      	ldr	r3, [pc, #468]	; (800173c <HAL_RCC_OscConfig+0x4c8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d106      	bne.n	8001586 <HAL_RCC_OscConfig+0x312>
 8001578:	4b6f      	ldr	r3, [pc, #444]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	4a6e      	ldr	r2, [pc, #440]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6213      	str	r3, [r2, #32]
 8001584:	e02d      	b.n	80015e2 <HAL_RCC_OscConfig+0x36e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x334>
 800158e:	4b6a      	ldr	r3, [pc, #424]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	4a69      	ldr	r2, [pc, #420]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	f023 0301 	bic.w	r3, r3, #1
 8001598:	6213      	str	r3, [r2, #32]
 800159a:	4b67      	ldr	r3, [pc, #412]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4a66      	ldr	r2, [pc, #408]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	f023 0304 	bic.w	r3, r3, #4
 80015a4:	6213      	str	r3, [r2, #32]
 80015a6:	e01c      	b.n	80015e2 <HAL_RCC_OscConfig+0x36e>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	d10c      	bne.n	80015ca <HAL_RCC_OscConfig+0x356>
 80015b0:	4b61      	ldr	r3, [pc, #388]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4a60      	ldr	r2, [pc, #384]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6213      	str	r3, [r2, #32]
 80015bc:	4b5e      	ldr	r3, [pc, #376]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	4a5d      	ldr	r2, [pc, #372]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6213      	str	r3, [r2, #32]
 80015c8:	e00b      	b.n	80015e2 <HAL_RCC_OscConfig+0x36e>
 80015ca:	4b5b      	ldr	r3, [pc, #364]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4a5a      	ldr	r2, [pc, #360]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6213      	str	r3, [r2, #32]
 80015d6:	4b58      	ldr	r3, [pc, #352]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4a57      	ldr	r2, [pc, #348]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	f023 0304 	bic.w	r3, r3, #4
 80015e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d015      	beq.n	8001616 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ea:	f7ff f933 	bl	8000854 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f0:	e00a      	b.n	8001608 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7ff f92f 	bl	8000854 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001600:	4293      	cmp	r3, r2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e0b1      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001608:	4b4b      	ldr	r3, [pc, #300]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0ee      	beq.n	80015f2 <HAL_RCC_OscConfig+0x37e>
 8001614:	e014      	b.n	8001640 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7ff f91d 	bl	8000854 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161c:	e00a      	b.n	8001634 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff f919 	bl	8000854 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f241 3288 	movw	r2, #5000	; 0x1388
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e09b      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001634:	4b40      	ldr	r3, [pc, #256]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1ee      	bne.n	800161e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d105      	bne.n	8001652 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001646:	4b3c      	ldr	r3, [pc, #240]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	4a3b      	ldr	r2, [pc, #236]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001650:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8087 	beq.w	800176a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800165c:	4b36      	ldr	r3, [pc, #216]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b08      	cmp	r3, #8
 8001666:	d061      	beq.n	800172c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d146      	bne.n	80016fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001670:	4b33      	ldr	r3, [pc, #204]	; (8001740 <HAL_RCC_OscConfig+0x4cc>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff f8ed 	bl	8000854 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff f8e9 	bl	8000854 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e06d      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001690:	4b29      	ldr	r3, [pc, #164]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a4:	d108      	bne.n	80016b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016a6:	4b24      	ldr	r3, [pc, #144]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	4921      	ldr	r1, [pc, #132]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a19      	ldr	r1, [r3, #32]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c8:	430b      	orrs	r3, r1
 80016ca:	491b      	ldr	r1, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x4cc>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff f8bd 	bl	8000854 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016de:	f7ff f8b9 	bl	8000854 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e03d      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x46a>
 80016fc:	e035      	b.n	800176a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_RCC_OscConfig+0x4cc>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff f8a6 	bl	8000854 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff f8a2 	bl	8000854 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e026      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x498>
 800172a:	e01e      	b.n	800176a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d107      	bne.n	8001744 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e019      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
 8001738:	40021000 	.word	0x40021000
 800173c:	40007000 	.word	0x40007000
 8001740:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_RCC_OscConfig+0x500>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	429a      	cmp	r2, r3
 8001756:	d106      	bne.n	8001766 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	429a      	cmp	r2, r3
 8001764:	d001      	beq.n	800176a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40021000 	.word	0x40021000

08001778 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0d0      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800178c:	4b6a      	ldr	r3, [pc, #424]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d910      	bls.n	80017bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b67      	ldr	r3, [pc, #412]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 0207 	bic.w	r2, r3, #7
 80017a2:	4965      	ldr	r1, [pc, #404]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	4b63      	ldr	r3, [pc, #396]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0b8      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d020      	beq.n	800180a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d4:	4b59      	ldr	r3, [pc, #356]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4a58      	ldr	r2, [pc, #352]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ec:	4b53      	ldr	r3, [pc, #332]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	4a52      	ldr	r2, [pc, #328]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f8:	4b50      	ldr	r3, [pc, #320]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	494d      	ldr	r1, [pc, #308]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	4313      	orrs	r3, r2
 8001808:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d040      	beq.n	8001898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b47      	ldr	r3, [pc, #284]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d115      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e07f      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001836:	4b41      	ldr	r3, [pc, #260]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e073      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001846:	4b3d      	ldr	r3, [pc, #244]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e06b      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001856:	4b39      	ldr	r3, [pc, #228]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f023 0203 	bic.w	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4936      	ldr	r1, [pc, #216]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001868:	f7fe fff4 	bl	8000854 <HAL_GetTick>
 800186c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	e00a      	b.n	8001886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001870:	f7fe fff0 	bl	8000854 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	; 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e053      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	4b2d      	ldr	r3, [pc, #180]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 020c 	and.w	r2, r3, #12
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	429a      	cmp	r2, r3
 8001896:	d1eb      	bne.n	8001870 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d210      	bcs.n	80018c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 0207 	bic.w	r2, r3, #7
 80018ae:	4922      	ldr	r1, [pc, #136]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e032      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	4916      	ldr	r1, [pc, #88]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d009      	beq.n	8001906 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	490e      	ldr	r1, [pc, #56]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	4313      	orrs	r3, r2
 8001904:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001906:	f000 f821 	bl	800194c <HAL_RCC_GetSysClockFreq>
 800190a:	4602      	mov	r2, r0
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	490a      	ldr	r1, [pc, #40]	; (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 8001918:	5ccb      	ldrb	r3, [r1, r3]
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	4a09      	ldr	r2, [pc, #36]	; (8001944 <HAL_RCC_ClockConfig+0x1cc>)
 8001920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_RCC_ClockConfig+0x1d0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe ff52 	bl	80007d0 <HAL_InitTick>

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40022000 	.word	0x40022000
 800193c:	40021000 	.word	0x40021000
 8001940:	08002c0c 	.word	0x08002c0c
 8001944:	20000000 	.word	0x20000000
 8001948:	20000004 	.word	0x20000004

0800194c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800194c:	b490      	push	{r4, r7}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001952:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001954:	1d3c      	adds	r4, r7, #4
 8001956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001958:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800195c:	f240 2301 	movw	r3, #513	; 0x201
 8001960:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b04      	cmp	r3, #4
 8001984:	d002      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x40>
 8001986:	2b08      	cmp	r3, #8
 8001988:	d003      	beq.n	8001992 <HAL_RCC_GetSysClockFreq+0x46>
 800198a:	e02b      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800198c:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xb4>)
 800198e:	623b      	str	r3, [r7, #32]
      break;
 8001990:	e02b      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	0c9b      	lsrs	r3, r3, #18
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3328      	adds	r3, #40	; 0x28
 800199c:	443b      	add	r3, r7
 800199e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019a2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d012      	beq.n	80019d4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019ae:	4b13      	ldr	r3, [pc, #76]	; (80019fc <HAL_RCC_GetSysClockFreq+0xb0>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	0c5b      	lsrs	r3, r3, #17
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	3328      	adds	r3, #40	; 0x28
 80019ba:	443b      	add	r3, r7
 80019bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019c6:	fb03 f202 	mul.w	r2, r3, r2
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
 80019d2:	e004      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019d8:	fb02 f303 	mul.w	r3, r2, r3
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	623b      	str	r3, [r7, #32]
      break;
 80019e2:	e002      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019e6:	623b      	str	r3, [r7, #32]
      break;
 80019e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ea:	6a3b      	ldr	r3, [r7, #32]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3728      	adds	r7, #40	; 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc90      	pop	{r4, r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	08002bfc 	.word	0x08002bfc
 80019fc:	40021000 	.word	0x40021000
 8001a00:	007a1200 	.word	0x007a1200
 8001a04:	003d0900 	.word	0x003d0900

08001a08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <RCC_Delay+0x34>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <RCC_Delay+0x38>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0a5b      	lsrs	r3, r3, #9
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a24:	bf00      	nop
  }
  while (Delay --);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1e5a      	subs	r2, r3, #1
 8001a2a:	60fa      	str	r2, [r7, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f9      	bne.n	8001a24 <RCC_Delay+0x1c>
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	10624dd3 	.word	0x10624dd3

08001a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e041      	b.n	8001ada <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7fe fdbe 	bl	80005ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3304      	adds	r3, #4
 8001a80:	4619      	mov	r1, r3
 8001a82:	4610      	mov	r0, r2
 8001a84:	f000 fd3e 	bl	8002504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e041      	b.n	8001b78 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d106      	bne.n	8001b0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f839 	bl	8001b80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2202      	movs	r2, #2
 8001b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4610      	mov	r0, r2
 8001b22:	f000 fcef 	bl	8002504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
	...

08001b94 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d109      	bne.n	8001bbc <HAL_TIM_PWM_Start_DMA+0x28>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	bf0c      	ite	eq
 8001bb4:	2301      	moveq	r3, #1
 8001bb6:	2300      	movne	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	e022      	b.n	8001c02 <HAL_TIM_PWM_Start_DMA+0x6e>
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d109      	bne.n	8001bd6 <HAL_TIM_PWM_Start_DMA+0x42>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	bf0c      	ite	eq
 8001bce:	2301      	moveq	r3, #1
 8001bd0:	2300      	movne	r3, #0
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	e015      	b.n	8001c02 <HAL_TIM_PWM_Start_DMA+0x6e>
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d109      	bne.n	8001bf0 <HAL_TIM_PWM_Start_DMA+0x5c>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	e008      	b.n	8001c02 <HAL_TIM_PWM_Start_DMA+0x6e>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	bf0c      	ite	eq
 8001bfc:	2301      	moveq	r3, #1
 8001bfe:	2300      	movne	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8001c06:	2302      	movs	r3, #2
 8001c08:	e149      	b.n	8001e9e <HAL_TIM_PWM_Start_DMA+0x30a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d109      	bne.n	8001c24 <HAL_TIM_PWM_Start_DMA+0x90>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	bf0c      	ite	eq
 8001c1c:	2301      	moveq	r3, #1
 8001c1e:	2300      	movne	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	e022      	b.n	8001c6a <HAL_TIM_PWM_Start_DMA+0xd6>
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d109      	bne.n	8001c3e <HAL_TIM_PWM_Start_DMA+0xaa>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	bf0c      	ite	eq
 8001c36:	2301      	moveq	r3, #1
 8001c38:	2300      	movne	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	e015      	b.n	8001c6a <HAL_TIM_PWM_Start_DMA+0xd6>
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d109      	bne.n	8001c58 <HAL_TIM_PWM_Start_DMA+0xc4>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	bf0c      	ite	eq
 8001c50:	2301      	moveq	r3, #1
 8001c52:	2300      	movne	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	e008      	b.n	8001c6a <HAL_TIM_PWM_Start_DMA+0xd6>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	bf0c      	ite	eq
 8001c64:	2301      	moveq	r3, #1
 8001c66:	2300      	movne	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d024      	beq.n	8001cb8 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d104      	bne.n	8001c7e <HAL_TIM_PWM_Start_DMA+0xea>
 8001c74:	887b      	ldrh	r3, [r7, #2]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e10f      	b.n	8001e9e <HAL_TIM_PWM_Start_DMA+0x30a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d104      	bne.n	8001c8e <HAL_TIM_PWM_Start_DMA+0xfa>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2202      	movs	r2, #2
 8001c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c8c:	e016      	b.n	8001cbc <HAL_TIM_PWM_Start_DMA+0x128>
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d104      	bne.n	8001c9e <HAL_TIM_PWM_Start_DMA+0x10a>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c9c:	e00e      	b.n	8001cbc <HAL_TIM_PWM_Start_DMA+0x128>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d104      	bne.n	8001cae <HAL_TIM_PWM_Start_DMA+0x11a>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cac:	e006      	b.n	8001cbc <HAL_TIM_PWM_Start_DMA+0x128>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001cb6:	e001      	b.n	8001cbc <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0f0      	b.n	8001e9e <HAL_TIM_PWM_Start_DMA+0x30a>
  }

  switch (Channel)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b0c      	cmp	r3, #12
 8001cc0:	f200 80ae 	bhi.w	8001e20 <HAL_TIM_PWM_Start_DMA+0x28c>
 8001cc4:	a201      	add	r2, pc, #4	; (adr r2, 8001ccc <HAL_TIM_PWM_Start_DMA+0x138>)
 8001cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cca:	bf00      	nop
 8001ccc:	08001d01 	.word	0x08001d01
 8001cd0:	08001e21 	.word	0x08001e21
 8001cd4:	08001e21 	.word	0x08001e21
 8001cd8:	08001e21 	.word	0x08001e21
 8001cdc:	08001d49 	.word	0x08001d49
 8001ce0:	08001e21 	.word	0x08001e21
 8001ce4:	08001e21 	.word	0x08001e21
 8001ce8:	08001e21 	.word	0x08001e21
 8001cec:	08001d91 	.word	0x08001d91
 8001cf0:	08001e21 	.word	0x08001e21
 8001cf4:	08001e21 	.word	0x08001e21
 8001cf8:	08001e21 	.word	0x08001e21
 8001cfc:	08001dd9 	.word	0x08001dd9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	4a68      	ldr	r2, [pc, #416]	; (8001ea8 <HAL_TIM_PWM_Start_DMA+0x314>)
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	4a67      	ldr	r2, [pc, #412]	; (8001eac <HAL_TIM_PWM_Start_DMA+0x318>)
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	4a66      	ldr	r2, [pc, #408]	; (8001eb0 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8001d16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3334      	adds	r3, #52	; 0x34
 8001d24:	461a      	mov	r2, r3
 8001d26:	887b      	ldrh	r3, [r7, #2]
 8001d28:	f7fe ff06 	bl	8000b38 <HAL_DMA_Start_IT>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e0b3      	b.n	8001e9e <HAL_TIM_PWM_Start_DMA+0x30a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d44:	60da      	str	r2, [r3, #12]
      break;
 8001d46:	e06c      	b.n	8001e22 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	4a56      	ldr	r2, [pc, #344]	; (8001ea8 <HAL_TIM_PWM_Start_DMA+0x314>)
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	4a55      	ldr	r2, [pc, #340]	; (8001eac <HAL_TIM_PWM_Start_DMA+0x318>)
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	4a54      	ldr	r2, [pc, #336]	; (8001eb0 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8001d5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3338      	adds	r3, #56	; 0x38
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	f7fe fee2 	bl	8000b38 <HAL_DMA_Start_IT>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e08f      	b.n	8001e9e <HAL_TIM_PWM_Start_DMA+0x30a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d8c:	60da      	str	r2, [r3, #12]
      break;
 8001d8e:	e048      	b.n	8001e22 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	4a44      	ldr	r2, [pc, #272]	; (8001ea8 <HAL_TIM_PWM_Start_DMA+0x314>)
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	4a43      	ldr	r2, [pc, #268]	; (8001eac <HAL_TIM_PWM_Start_DMA+0x318>)
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da4:	4a42      	ldr	r2, [pc, #264]	; (8001eb0 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8001da6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	333c      	adds	r3, #60	; 0x3c
 8001db4:	461a      	mov	r2, r3
 8001db6:	887b      	ldrh	r3, [r7, #2]
 8001db8:	f7fe febe 	bl	8000b38 <HAL_DMA_Start_IT>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e06b      	b.n	8001e9e <HAL_TIM_PWM_Start_DMA+0x30a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dd4:	60da      	str	r2, [r3, #12]
      break;
 8001dd6:	e024      	b.n	8001e22 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	4a32      	ldr	r2, [pc, #200]	; (8001ea8 <HAL_TIM_PWM_Start_DMA+0x314>)
 8001dde:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	4a31      	ldr	r2, [pc, #196]	; (8001eac <HAL_TIM_PWM_Start_DMA+0x318>)
 8001de6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	4a30      	ldr	r2, [pc, #192]	; (8001eb0 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	3340      	adds	r3, #64	; 0x40
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	887b      	ldrh	r3, [r7, #2]
 8001e00:	f7fe fe9a 	bl	8000b38 <HAL_DMA_Start_IT>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e047      	b.n	8001e9e <HAL_TIM_PWM_Start_DMA+0x30a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e1c:	60da      	str	r2, [r3, #12]
      break;
 8001e1e:	e000      	b.n	8001e22 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8001e20:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2201      	movs	r2, #1
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fde0 	bl	80029f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1f      	ldr	r2, [pc, #124]	; (8001eb4 <HAL_TIM_PWM_Start_DMA+0x320>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d107      	bne.n	8001e4a <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a19      	ldr	r2, [pc, #100]	; (8001eb4 <HAL_TIM_PWM_Start_DMA+0x320>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d009      	beq.n	8001e68 <HAL_TIM_PWM_Start_DMA+0x2d4>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e5c:	d004      	beq.n	8001e68 <HAL_TIM_PWM_Start_DMA+0x2d4>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a15      	ldr	r2, [pc, #84]	; (8001eb8 <HAL_TIM_PWM_Start_DMA+0x324>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d111      	bne.n	8001e8c <HAL_TIM_PWM_Start_DMA+0x2f8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d010      	beq.n	8001e9c <HAL_TIM_PWM_Start_DMA+0x308>
    {
      __HAL_TIM_ENABLE(htim);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 0201 	orr.w	r2, r2, #1
 8001e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8a:	e007      	b.n	8001e9c <HAL_TIM_PWM_Start_DMA+0x308>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	080023f3 	.word	0x080023f3
 8001eac:	0800249b 	.word	0x0800249b
 8001eb0:	08002361 	.word	0x08002361
 8001eb4:	40012c00 	.word	0x40012c00
 8001eb8:	40000400 	.word	0x40000400

08001ebc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b0c      	cmp	r3, #12
 8001eca:	d855      	bhi.n	8001f78 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8001ecc:	a201      	add	r2, pc, #4	; (adr r2, 8001ed4 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8001ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed2:	bf00      	nop
 8001ed4:	08001f09 	.word	0x08001f09
 8001ed8:	08001f79 	.word	0x08001f79
 8001edc:	08001f79 	.word	0x08001f79
 8001ee0:	08001f79 	.word	0x08001f79
 8001ee4:	08001f25 	.word	0x08001f25
 8001ee8:	08001f79 	.word	0x08001f79
 8001eec:	08001f79 	.word	0x08001f79
 8001ef0:	08001f79 	.word	0x08001f79
 8001ef4:	08001f41 	.word	0x08001f41
 8001ef8:	08001f79 	.word	0x08001f79
 8001efc:	08001f79 	.word	0x08001f79
 8001f00:	08001f79 	.word	0x08001f79
 8001f04:	08001f5d 	.word	0x08001f5d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f16:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fe6b 	bl	8000bf8 <HAL_DMA_Abort_IT>
      break;
 8001f22:	e02a      	b.n	8001f7a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f32:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fe5d 	bl	8000bf8 <HAL_DMA_Abort_IT>
      break;
 8001f3e:	e01c      	b.n	8001f7a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f4e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fe4f 	bl	8000bf8 <HAL_DMA_Abort_IT>
      break;
 8001f5a:	e00e      	b.n	8001f7a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f6a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fe41 	bl	8000bf8 <HAL_DMA_Abort_IT>
      break;
 8001f76:	e000      	b.n	8001f7a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8001f78:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	6839      	ldr	r1, [r7, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 fd34 	bl	80029f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a29      	ldr	r2, [pc, #164]	; (8002034 <HAL_TIM_PWM_Stop_DMA+0x178>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d117      	bne.n	8001fc2 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6a1a      	ldr	r2, [r3, #32]
 8001f98:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10f      	bne.n	8001fc2 <HAL_TIM_PWM_Stop_DMA+0x106>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6a1a      	ldr	r2, [r3, #32]
 8001fa8:	f240 4344 	movw	r3, #1092	; 0x444
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d107      	bne.n	8001fc2 <HAL_TIM_PWM_Stop_DMA+0x106>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6a1a      	ldr	r2, [r3, #32]
 8001fc8:	f241 1311 	movw	r3, #4369	; 0x1111
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10f      	bne.n	8001ff2 <HAL_TIM_PWM_Stop_DMA+0x136>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6a1a      	ldr	r2, [r3, #32]
 8001fd8:	f240 4344 	movw	r3, #1092	; 0x444
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d107      	bne.n	8001ff2 <HAL_TIM_PWM_Stop_DMA+0x136>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0201 	bic.w	r2, r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d104      	bne.n	8002002 <HAL_TIM_PWM_Stop_DMA+0x146>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002000:	e013      	b.n	800202a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b04      	cmp	r3, #4
 8002006:	d104      	bne.n	8002012 <HAL_TIM_PWM_Stop_DMA+0x156>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002010:	e00b      	b.n	800202a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b08      	cmp	r3, #8
 8002016:	d104      	bne.n	8002022 <HAL_TIM_PWM_Stop_DMA+0x166>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002020:	e003      	b.n	800202a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40012c00 	.word	0x40012c00

08002038 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800204e:	2302      	movs	r3, #2
 8002050:	e0ac      	b.n	80021ac <HAL_TIM_PWM_ConfigChannel+0x174>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b0c      	cmp	r3, #12
 800205e:	f200 809f 	bhi.w	80021a0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002062:	a201      	add	r2, pc, #4	; (adr r2, 8002068 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002068:	0800209d 	.word	0x0800209d
 800206c:	080021a1 	.word	0x080021a1
 8002070:	080021a1 	.word	0x080021a1
 8002074:	080021a1 	.word	0x080021a1
 8002078:	080020dd 	.word	0x080020dd
 800207c:	080021a1 	.word	0x080021a1
 8002080:	080021a1 	.word	0x080021a1
 8002084:	080021a1 	.word	0x080021a1
 8002088:	0800211f 	.word	0x0800211f
 800208c:	080021a1 	.word	0x080021a1
 8002090:	080021a1 	.word	0x080021a1
 8002094:	080021a1 	.word	0x080021a1
 8002098:	0800215f 	.word	0x0800215f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fa86 	bl	80025b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699a      	ldr	r2, [r3, #24]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0208 	orr.w	r2, r2, #8
 80020b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0204 	bic.w	r2, r2, #4
 80020c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6999      	ldr	r1, [r3, #24]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	619a      	str	r2, [r3, #24]
      break;
 80020da:	e062      	b.n	80021a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 facc 	bl	8002680 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699a      	ldr	r2, [r3, #24]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6999      	ldr	r1, [r3, #24]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	021a      	lsls	r2, r3, #8
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	619a      	str	r2, [r3, #24]
      break;
 800211c:	e041      	b.n	80021a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68b9      	ldr	r1, [r7, #8]
 8002124:	4618      	mov	r0, r3
 8002126:	f000 fb15 	bl	8002754 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	69da      	ldr	r2, [r3, #28]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0208 	orr.w	r2, r2, #8
 8002138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	69da      	ldr	r2, [r3, #28]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0204 	bic.w	r2, r2, #4
 8002148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	69d9      	ldr	r1, [r3, #28]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	61da      	str	r2, [r3, #28]
      break;
 800215c:	e021      	b.n	80021a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	4618      	mov	r0, r3
 8002166:	f000 fb5f 	bl	8002828 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	69da      	ldr	r2, [r3, #28]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	69d9      	ldr	r1, [r3, #28]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	021a      	lsls	r2, r3, #8
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	61da      	str	r2, [r3, #28]
      break;
 800219e:	e000      	b.n	80021a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80021a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_TIM_ConfigClockSource+0x18>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e0b3      	b.n	8002334 <HAL_TIM_ConfigClockSource+0x180>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002204:	d03e      	beq.n	8002284 <HAL_TIM_ConfigClockSource+0xd0>
 8002206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800220a:	f200 8087 	bhi.w	800231c <HAL_TIM_ConfigClockSource+0x168>
 800220e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002212:	f000 8085 	beq.w	8002320 <HAL_TIM_ConfigClockSource+0x16c>
 8002216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800221a:	d87f      	bhi.n	800231c <HAL_TIM_ConfigClockSource+0x168>
 800221c:	2b70      	cmp	r3, #112	; 0x70
 800221e:	d01a      	beq.n	8002256 <HAL_TIM_ConfigClockSource+0xa2>
 8002220:	2b70      	cmp	r3, #112	; 0x70
 8002222:	d87b      	bhi.n	800231c <HAL_TIM_ConfigClockSource+0x168>
 8002224:	2b60      	cmp	r3, #96	; 0x60
 8002226:	d050      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0x116>
 8002228:	2b60      	cmp	r3, #96	; 0x60
 800222a:	d877      	bhi.n	800231c <HAL_TIM_ConfigClockSource+0x168>
 800222c:	2b50      	cmp	r3, #80	; 0x50
 800222e:	d03c      	beq.n	80022aa <HAL_TIM_ConfigClockSource+0xf6>
 8002230:	2b50      	cmp	r3, #80	; 0x50
 8002232:	d873      	bhi.n	800231c <HAL_TIM_ConfigClockSource+0x168>
 8002234:	2b40      	cmp	r3, #64	; 0x40
 8002236:	d058      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x136>
 8002238:	2b40      	cmp	r3, #64	; 0x40
 800223a:	d86f      	bhi.n	800231c <HAL_TIM_ConfigClockSource+0x168>
 800223c:	2b30      	cmp	r3, #48	; 0x30
 800223e:	d064      	beq.n	800230a <HAL_TIM_ConfigClockSource+0x156>
 8002240:	2b30      	cmp	r3, #48	; 0x30
 8002242:	d86b      	bhi.n	800231c <HAL_TIM_ConfigClockSource+0x168>
 8002244:	2b20      	cmp	r3, #32
 8002246:	d060      	beq.n	800230a <HAL_TIM_ConfigClockSource+0x156>
 8002248:	2b20      	cmp	r3, #32
 800224a:	d867      	bhi.n	800231c <HAL_TIM_ConfigClockSource+0x168>
 800224c:	2b00      	cmp	r3, #0
 800224e:	d05c      	beq.n	800230a <HAL_TIM_ConfigClockSource+0x156>
 8002250:	2b10      	cmp	r3, #16
 8002252:	d05a      	beq.n	800230a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002254:	e062      	b.n	800231c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6899      	ldr	r1, [r3, #8]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f000 fba4 	bl	80029b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002278:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	609a      	str	r2, [r3, #8]
      break;
 8002282:	e04e      	b.n	8002322 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	6899      	ldr	r1, [r3, #8]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f000 fb8d 	bl	80029b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022a6:	609a      	str	r2, [r3, #8]
      break;
 80022a8:	e03b      	b.n	8002322 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6859      	ldr	r1, [r3, #4]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	461a      	mov	r2, r3
 80022b8:	f000 fb04 	bl	80028c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2150      	movs	r1, #80	; 0x50
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fb5b 	bl	800297e <TIM_ITRx_SetConfig>
      break;
 80022c8:	e02b      	b.n	8002322 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6859      	ldr	r1, [r3, #4]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	461a      	mov	r2, r3
 80022d8:	f000 fb22 	bl	8002920 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2160      	movs	r1, #96	; 0x60
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 fb4b 	bl	800297e <TIM_ITRx_SetConfig>
      break;
 80022e8:	e01b      	b.n	8002322 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	6859      	ldr	r1, [r3, #4]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	461a      	mov	r2, r3
 80022f8:	f000 fae4 	bl	80028c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2140      	movs	r1, #64	; 0x40
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fb3b 	bl	800297e <TIM_ITRx_SetConfig>
      break;
 8002308:	e00b      	b.n	8002322 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4619      	mov	r1, r3
 8002314:	4610      	mov	r0, r2
 8002316:	f000 fb32 	bl	800297e <TIM_ITRx_SetConfig>
        break;
 800231a:	e002      	b.n	8002322 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800231c:	bf00      	nop
 800231e:	e000      	b.n	8002322 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002320:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	429a      	cmp	r2, r3
 8002376:	d107      	bne.n	8002388 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2201      	movs	r2, #1
 800237c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002386:	e02a      	b.n	80023de <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	429a      	cmp	r2, r3
 8002390:	d107      	bne.n	80023a2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2202      	movs	r2, #2
 8002396:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023a0:	e01d      	b.n	80023de <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d107      	bne.n	80023bc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2204      	movs	r2, #4
 80023b0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023ba:	e010      	b.n	80023de <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d107      	bne.n	80023d6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2208      	movs	r2, #8
 80023ca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023d4:	e003      	b.n	80023de <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f7ff ffb5 	bl	800234e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	771a      	strb	r2, [r3, #28]
}
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	429a      	cmp	r2, r3
 8002408:	d10b      	bne.n	8002422 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d136      	bne.n	8002486 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002420:	e031      	b.n	8002486 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	429a      	cmp	r2, r3
 800242a:	d10b      	bne.n	8002444 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2202      	movs	r2, #2
 8002430:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d125      	bne.n	8002486 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002442:	e020      	b.n	8002486 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	429a      	cmp	r2, r3
 800244c:	d10b      	bne.n	8002466 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2204      	movs	r2, #4
 8002452:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d114      	bne.n	8002486 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002464:	e00f      	b.n	8002486 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	429a      	cmp	r2, r3
 800246e:	d10a      	bne.n	8002486 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2208      	movs	r2, #8
 8002474:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d103      	bne.n	8002486 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f7fd fe60 	bl	800014c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	771a      	strb	r2, [r3, #28]
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d103      	bne.n	80024ba <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2201      	movs	r2, #1
 80024b6:	771a      	strb	r2, [r3, #28]
 80024b8:	e019      	b.n	80024ee <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d103      	bne.n	80024cc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2202      	movs	r2, #2
 80024c8:	771a      	strb	r2, [r3, #28]
 80024ca:	e010      	b.n	80024ee <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d103      	bne.n	80024de <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2204      	movs	r2, #4
 80024da:	771a      	strb	r2, [r3, #28]
 80024dc:	e007      	b.n	80024ee <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d102      	bne.n	80024ee <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2208      	movs	r2, #8
 80024ec:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f7ff ff24 	bl	800233c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	771a      	strb	r2, [r3, #28]
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a25      	ldr	r2, [pc, #148]	; (80025ac <TIM_Base_SetConfig+0xa8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d007      	beq.n	800252c <TIM_Base_SetConfig+0x28>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002522:	d003      	beq.n	800252c <TIM_Base_SetConfig+0x28>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <TIM_Base_SetConfig+0xac>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d108      	bne.n	800253e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a1a      	ldr	r2, [pc, #104]	; (80025ac <TIM_Base_SetConfig+0xa8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <TIM_Base_SetConfig+0x52>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254c:	d003      	beq.n	8002556 <TIM_Base_SetConfig+0x52>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <TIM_Base_SetConfig+0xac>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d108      	bne.n	8002568 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800255c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a07      	ldr	r2, [pc, #28]	; (80025ac <TIM_Base_SetConfig+0xa8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d103      	bne.n	800259c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	615a      	str	r2, [r3, #20]
}
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	40012c00 	.word	0x40012c00
 80025b0:	40000400 	.word	0x40000400

080025b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	f023 0201 	bic.w	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0303 	bic.w	r3, r3, #3
 80025ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f023 0302 	bic.w	r3, r3, #2
 80025fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4313      	orrs	r3, r2
 8002606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a1c      	ldr	r2, [pc, #112]	; (800267c <TIM_OC1_SetConfig+0xc8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d10c      	bne.n	800262a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f023 0308 	bic.w	r3, r3, #8
 8002616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f023 0304 	bic.w	r3, r3, #4
 8002628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a13      	ldr	r2, [pc, #76]	; (800267c <TIM_OC1_SetConfig+0xc8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d111      	bne.n	8002656 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	621a      	str	r2, [r3, #32]
}
 8002670:	bf00      	nop
 8002672:	371c      	adds	r7, #28
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40012c00 	.word	0x40012c00

08002680 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	f023 0210 	bic.w	r2, r3, #16
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f023 0320 	bic.w	r3, r3, #32
 80026ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <TIM_OC2_SetConfig+0xd0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d10d      	bne.n	80026fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a14      	ldr	r2, [pc, #80]	; (8002750 <TIM_OC2_SetConfig+0xd0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d113      	bne.n	800272c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800270a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	621a      	str	r2, [r3, #32]
}
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	40012c00 	.word	0x40012c00

08002754 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f023 0303 	bic.w	r3, r3, #3
 800278a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800279c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <TIM_OC3_SetConfig+0xd0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d10d      	bne.n	80027ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a14      	ldr	r2, [pc, #80]	; (8002824 <TIM_OC3_SetConfig+0xd0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d113      	bne.n	80027fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	621a      	str	r2, [r3, #32]
}
 8002818:	bf00      	nop
 800281a:	371c      	adds	r7, #28
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40012c00 	.word	0x40012c00

08002828 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	031b      	lsls	r3, r3, #12
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a0f      	ldr	r2, [pc, #60]	; (80028c0 <TIM_OC4_SetConfig+0x98>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d109      	bne.n	800289c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800288e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	019b      	lsls	r3, r3, #6
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	621a      	str	r2, [r3, #32]
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	40012c00 	.word	0x40012c00

080028c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	f023 0201 	bic.w	r2, r3, #1
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f023 030a 	bic.w	r3, r3, #10
 8002900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	621a      	str	r2, [r3, #32]
}
 8002916:	bf00      	nop
 8002918:	371c      	adds	r7, #28
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f023 0210 	bic.w	r2, r3, #16
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800294a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	031b      	lsls	r3, r3, #12
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4313      	orrs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800295c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	621a      	str	r2, [r3, #32]
}
 8002974:	bf00      	nop
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800297e:	b480      	push	{r7}
 8002980:	b085      	sub	sp, #20
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	f043 0307 	orr.w	r3, r3, #7
 80029a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	609a      	str	r2, [r3, #8]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b087      	sub	sp, #28
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	021a      	lsls	r2, r3, #8
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	4313      	orrs	r3, r2
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	609a      	str	r2, [r3, #8]
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	2201      	movs	r2, #1
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a1a      	ldr	r2, [r3, #32]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	401a      	ands	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a1a      	ldr	r2, [r3, #32]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	fa01 f303 	lsl.w	r3, r1, r3
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	621a      	str	r2, [r3, #32]
}
 8002a2e:	bf00      	nop
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e041      	b.n	8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d009      	beq.n	8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9c:	d004      	beq.n	8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a10      	ldr	r2, [pc, #64]	; (8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d10c      	bne.n	8002ac2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40012c00 	.word	0x40012c00
 8002ae4:	40000400 	.word	0x40000400

08002ae8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e03d      	b.n	8002b80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
	...

08002b8c <__libc_init_array>:
 8002b8c:	b570      	push	{r4, r5, r6, lr}
 8002b8e:	2600      	movs	r6, #0
 8002b90:	4d0c      	ldr	r5, [pc, #48]	; (8002bc4 <__libc_init_array+0x38>)
 8002b92:	4c0d      	ldr	r4, [pc, #52]	; (8002bc8 <__libc_init_array+0x3c>)
 8002b94:	1b64      	subs	r4, r4, r5
 8002b96:	10a4      	asrs	r4, r4, #2
 8002b98:	42a6      	cmp	r6, r4
 8002b9a:	d109      	bne.n	8002bb0 <__libc_init_array+0x24>
 8002b9c:	f000 f822 	bl	8002be4 <_init>
 8002ba0:	2600      	movs	r6, #0
 8002ba2:	4d0a      	ldr	r5, [pc, #40]	; (8002bcc <__libc_init_array+0x40>)
 8002ba4:	4c0a      	ldr	r4, [pc, #40]	; (8002bd0 <__libc_init_array+0x44>)
 8002ba6:	1b64      	subs	r4, r4, r5
 8002ba8:	10a4      	asrs	r4, r4, #2
 8002baa:	42a6      	cmp	r6, r4
 8002bac:	d105      	bne.n	8002bba <__libc_init_array+0x2e>
 8002bae:	bd70      	pop	{r4, r5, r6, pc}
 8002bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb4:	4798      	blx	r3
 8002bb6:	3601      	adds	r6, #1
 8002bb8:	e7ee      	b.n	8002b98 <__libc_init_array+0xc>
 8002bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bbe:	4798      	blx	r3
 8002bc0:	3601      	adds	r6, #1
 8002bc2:	e7f2      	b.n	8002baa <__libc_init_array+0x1e>
 8002bc4:	08002c1c 	.word	0x08002c1c
 8002bc8:	08002c1c 	.word	0x08002c1c
 8002bcc:	08002c1c 	.word	0x08002c1c
 8002bd0:	08002c20 	.word	0x08002c20

08002bd4 <memset>:
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4402      	add	r2, r0
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d100      	bne.n	8002bde <memset+0xa>
 8002bdc:	4770      	bx	lr
 8002bde:	f803 1b01 	strb.w	r1, [r3], #1
 8002be2:	e7f9      	b.n	8002bd8 <memset+0x4>

08002be4 <_init>:
 8002be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be6:	bf00      	nop
 8002be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bea:	bc08      	pop	{r3}
 8002bec:	469e      	mov	lr, r3
 8002bee:	4770      	bx	lr

08002bf0 <_fini>:
 8002bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf2:	bf00      	nop
 8002bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf6:	bc08      	pop	{r3}
 8002bf8:	469e      	mov	lr, r3
 8002bfa:	4770      	bx	lr
