
SENSOR INTEGRATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007678  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08007848  08007848  00017848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800794c  0800794c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800794c  0800794c  0001794c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007954  08007954  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007954  08007954  00017954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007958  08007958  00017958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800795c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a64  20000074  080079d0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ad8  080079d0  00024ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019250  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003627  00000000  00000000  000392f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  0003c920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f8  00000000  00000000  0003de60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000034f6  00000000  00000000  0003f258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017bfa  00000000  00000000  0004274e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da8ca  00000000  00000000  0005a348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134c12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d14  00000000  00000000  00134c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007830 	.word	0x08007830

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007830 	.word	0x08007830

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <i2c>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void i2c(uint8_t a,uint8_t *p){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	6039      	str	r1, [r7, #0]
 80005ce:	71fb      	strb	r3, [r7, #7]
	uint8_t n[2] = {0x6b,0};
 80005d0:	236b      	movs	r3, #107	; 0x6b
 80005d2:	81bb      	strh	r3, [r7, #12]
	uint8_t m[2] = {0x1c,0};
 80005d4:	231c      	movs	r3, #28
 80005d6:	813b      	strh	r3, [r7, #8]
	uint8_t u = 0x3b;
 80005d8:	233b      	movs	r3, #59	; 0x3b
 80005da:	73fb      	strb	r3, [r7, #15]
	init3(0x68);
 80005dc:	2068      	movs	r0, #104	; 0x68
 80005de:	f006 fb31 	bl	8006c44 <init3>
	write(a,n,2);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f107 010c 	add.w	r1, r7, #12
 80005e8:	2202      	movs	r2, #2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f006 fc44 	bl	8006e78 <write>
	write(a,m,2);
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	f107 0108 	add.w	r1, r7, #8
 80005f6:	2202      	movs	r2, #2
 80005f8:	4618      	mov	r0, r3
 80005fa:	f006 fc3d 	bl	8006e78 <write>
	write(a,u,1);
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	7bf9      	ldrb	r1, [r7, #15]
 8000602:	2201      	movs	r2, #1
 8000604:	4618      	mov	r0, r3
 8000606:	f006 fc37 	bl	8006e78 <write>
	read(a,p, 6);
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2206      	movs	r2, #6
 800060e:	6839      	ldr	r1, [r7, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f006 fbad 	bl	8006d70 <read>

}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <data>:
int data(uint8_t *c,uint8_t *m){
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	6039      	str	r1, [r7, #0]

	 i2c(0x68,c);
 8000628:	6879      	ldr	r1, [r7, #4]
 800062a:	2068      	movs	r0, #104	; 0x68
 800062c:	f7ff ffca 	bl	80005c4 <i2c>
	 m[0] =  c[0]<<8|c[1];
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	021b      	lsls	r3, r3, #8
 8000636:	b25a      	sxtb	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3301      	adds	r3, #1
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	b25b      	sxtb	r3, r3
 8000640:	4313      	orrs	r3, r2
 8000642:	b25b      	sxtb	r3, r3
 8000644:	b2da      	uxtb	r2, r3
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	701a      	strb	r2, [r3, #0]
	 m[1] =  c[2]<<8|c[3];
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3302      	adds	r3, #2
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	b25a      	sxtb	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3303      	adds	r3, #3
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b25b      	sxtb	r3, r3
 800065c:	4313      	orrs	r3, r2
 800065e:	b25a      	sxtb	r2, r3
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	701a      	strb	r2, [r3, #0]
	 m[2] =  c[4]<<8|c[5];
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3304      	adds	r3, #4
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	021b      	lsls	r3, r3, #8
 8000670:	b25a      	sxtb	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	3305      	adds	r3, #5
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b25b      	sxtb	r3, r3
 800067a:	4313      	orrs	r3, r2
 800067c:	b25a      	sxtb	r2, r3
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	3302      	adds	r3, #2
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	701a      	strb	r2, [r3, #0]

	// return m;
}
 8000686:	bf00      	nop
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f000 fb72 	bl	8000d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f846 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 f8dc 	bl	8000858 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006a0:	f000 f8b0 	bl	8000804 <MX_USART2_UART_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006a4:	f002 ffee 	bl	8003684 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  // osSemaphoreDef(mutex_3);
  // mutex3 = osSemaphoreCreate(osSemaphore(mutex_3), 1);
  mutex3 = osSemaphoreNew(1, 1, NULL);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2101      	movs	r1, #1
 80006ac:	2001      	movs	r0, #1
 80006ae:	f003 f8e0 	bl	8003872 <osSemaphoreNew>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a11      	ldr	r2, [pc, #68]	; (80006fc <main+0x6c>)
 80006b6:	6013      	str	r3, [r2, #0]
  if (mutex3 == NULL) {
 80006b8:	4b10      	ldr	r3, [pc, #64]	; (80006fc <main+0x6c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d102      	bne.n	80006c6 <main+0x36>
         currentstate = 0;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <main+0x70>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
  /* Create the thread(s) */
  /* creation of defaultTask */
 // defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* creation of SensorTask */
  SensorTaskHandle = osThreadNew(Sensor_Task, NULL, &SensorTask_attributes);
 80006c6:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <main+0x74>)
 80006c8:	2100      	movs	r1, #0
 80006ca:	480f      	ldr	r0, [pc, #60]	; (8000708 <main+0x78>)
 80006cc:	f003 f824 	bl	8003718 <osThreadNew>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a0e      	ldr	r2, [pc, #56]	; (800070c <main+0x7c>)
 80006d4:	6013      	str	r3, [r2, #0]

  /* creation of UARTTask */
  UARTTaskHandle = osThreadNew(UARTTask_init, NULL, &UARTTask_attributes);
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <main+0x80>)
 80006d8:	2100      	movs	r1, #0
 80006da:	480e      	ldr	r0, [pc, #56]	; (8000714 <main+0x84>)
 80006dc:	f003 f81c 	bl	8003718 <osThreadNew>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a0d      	ldr	r2, [pc, #52]	; (8000718 <main+0x88>)
 80006e4:	6013      	str	r3, [r2, #0]

  /* creation of LEDTask */
  LEDTaskHandle = osThreadNew(LEDTask_init, NULL, &LEDTask_attributes);
 80006e6:	4a0d      	ldr	r2, [pc, #52]	; (800071c <main+0x8c>)
 80006e8:	2100      	movs	r1, #0
 80006ea:	480d      	ldr	r0, [pc, #52]	; (8000720 <main+0x90>)
 80006ec:	f003 f814 	bl	8003718 <osThreadNew>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4a0c      	ldr	r2, [pc, #48]	; (8000724 <main+0x94>)
 80006f4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006f6:	f002 ffe9 	bl	80036cc <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <main+0x6a>
 80006fc:	20000124 	.word	0x20000124
 8000700:	200000ee 	.word	0x200000ee
 8000704:	08007894 	.word	0x08007894
 8000708:	08000935 	.word	0x08000935
 800070c:	200000d4 	.word	0x200000d4
 8000710:	080078b8 	.word	0x080078b8
 8000714:	0800097d 	.word	0x0800097d
 8000718:	200000d8 	.word	0x200000d8
 800071c:	080078dc 	.word	0x080078dc
 8000720:	080009e5 	.word	0x080009e5
 8000724:	200000dc 	.word	0x200000dc

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b094      	sub	sp, #80	; 0x50
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	2234      	movs	r2, #52	; 0x34
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f006 fc12 	bl	8006f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <SystemClock_Config+0xd4>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	4a29      	ldr	r2, [pc, #164]	; (80007fc <SystemClock_Config+0xd4>)
 8000756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
 800075c:	4b27      	ldr	r3, [pc, #156]	; (80007fc <SystemClock_Config+0xd4>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000768:	2300      	movs	r3, #0
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	4b24      	ldr	r3, [pc, #144]	; (8000800 <SystemClock_Config+0xd8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000774:	4a22      	ldr	r2, [pc, #136]	; (8000800 <SystemClock_Config+0xd8>)
 8000776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b20      	ldr	r3, [pc, #128]	; (8000800 <SystemClock_Config+0xd8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000788:	2302      	movs	r3, #2
 800078a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078c:	2301      	movs	r3, #1
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000790:	2310      	movs	r3, #16
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000794:	2302      	movs	r3, #2
 8000796:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000798:	2300      	movs	r3, #0
 800079a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800079c:	2310      	movs	r3, #16
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007a6:	2304      	movs	r3, #4
 80007a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 f9c0 	bl	8001b3c <HAL_RCC_OscConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007c2:	f000 f942 	bl	8000a4a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c6:	230f      	movs	r3, #15
 80007c8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ca:	2302      	movs	r3, #2
 80007cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	2102      	movs	r1, #2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fe2e 	bl	8001444 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007ee:	f000 f92c 	bl	8000a4a <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3750      	adds	r7, #80	; 0x50
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800
 8000800:	40007000 	.word	0x40007000

08000804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MX_USART2_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000810:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800083c:	f001 feca 	bl	80025d4 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000846:	f000 f900 	bl	8000a4a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000090 	.word	0x20000090
 8000854:	40004400 	.word	0x40004400

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b2d      	ldr	r3, [pc, #180]	; (8000928 <MX_GPIO_Init+0xd0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a2c      	ldr	r2, [pc, #176]	; (8000928 <MX_GPIO_Init+0xd0>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <MX_GPIO_Init+0xd0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b26      	ldr	r3, [pc, #152]	; (8000928 <MX_GPIO_Init+0xd0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a25      	ldr	r2, [pc, #148]	; (8000928 <MX_GPIO_Init+0xd0>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <MX_GPIO_Init+0xd0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_GPIO_Init+0xd0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a1e      	ldr	r2, [pc, #120]	; (8000928 <MX_GPIO_Init+0xd0>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_GPIO_Init+0xd0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_GPIO_Init+0xd0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a17      	ldr	r2, [pc, #92]	; (8000928 <MX_GPIO_Init+0xd0>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_GPIO_Init+0xd0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2160      	movs	r1, #96	; 0x60
 80008e2:	4812      	ldr	r0, [pc, #72]	; (800092c <MX_GPIO_Init+0xd4>)
 80008e4:	f000 fd94 	bl	8001410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	480c      	ldr	r0, [pc, #48]	; (8000930 <MX_GPIO_Init+0xd8>)
 8000900:	f000 fbf2 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8000904:	2360      	movs	r3, #96	; 0x60
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_GPIO_Init+0xd4>)
 800091c:	f000 fbe4 	bl	80010e8 <HAL_GPIO_Init>

}
 8000920:	bf00      	nop
 8000922:	3728      	adds	r7, #40	; 0x28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	40020000 	.word	0x40020000
 8000930:	40020800 	.word	0x40020800

08000934 <Sensor_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensor_Task */
void Sensor_Task(void *argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sensor_Task */
  /* Infinite loop */
	while(1)
	  {
		 osSemaphoreAcquire(mutex3, osWaitForever);
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <Sensor_Task+0x38>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f04f 31ff 	mov.w	r1, #4294967295
 8000944:	4618      	mov	r0, r3
 8000946:	f003 f81d 	bl	8003984 <osSemaphoreAcquire>

		data(c, m);
 800094a:	4909      	ldr	r1, [pc, #36]	; (8000970 <Sensor_Task+0x3c>)
 800094c:	4809      	ldr	r0, [pc, #36]	; (8000974 <Sensor_Task+0x40>)
 800094e:	f7ff fe66 	bl	800061e <data>


	        osSemaphoreRelease(mutex3);
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <Sensor_Task+0x38>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4618      	mov	r0, r3
 8000958:	f003 f866 	bl	8003a28 <osSemaphoreRelease>
	        osDelay(1);
 800095c:	2001      	movs	r0, #1
 800095e:	f002 ff6d 	bl	800383c <osDelay>
	        currentstate =1 ;
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <Sensor_Task+0x44>)
 8000964:	2201      	movs	r2, #1
 8000966:	701a      	strb	r2, [r3, #0]
		 osSemaphoreAcquire(mutex3, osWaitForever);
 8000968:	e7e8      	b.n	800093c <Sensor_Task+0x8>
 800096a:	bf00      	nop
 800096c:	20000124 	.word	0x20000124
 8000970:	200000e8 	.word	0x200000e8
 8000974:	200000e0 	.word	0x200000e0
 8000978:	200000ee 	.word	0x200000ee

0800097c <UARTTask_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UARTTask_init */
void UARTTask_init(void *argument)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UARTTask_init */
  /* Infinite loop */
  while(1){


	              osSemaphoreAcquire(mutex3, osWaitForever);
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <UARTTask_init+0x50>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f04f 31ff 	mov.w	r1, #4294967295
 800098c:	4618      	mov	r0, r3
 800098e:	f002 fff9 	bl	8003984 <osSemaphoreAcquire>
	              sprintf(u, "%d\r\n", m[0]);
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <UARTTask_init+0x54>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	490e      	ldr	r1, [pc, #56]	; (80009d4 <UARTTask_init+0x58>)
 800099a:	480f      	ldr	r0, [pc, #60]	; (80009d8 <UARTTask_init+0x5c>)
 800099c:	f006 fae8 	bl	8006f70 <siprintf>
	              HAL_UART_Transmit(&huart2, (uint8_t *)u, strlen(u), 10);
 80009a0:	480d      	ldr	r0, [pc, #52]	; (80009d8 <UARTTask_init+0x5c>)
 80009a2:	f7ff fc35 	bl	8000210 <strlen>
 80009a6:	4603      	mov	r3, r0
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	230a      	movs	r3, #10
 80009ac:	490a      	ldr	r1, [pc, #40]	; (80009d8 <UARTTask_init+0x5c>)
 80009ae:	480b      	ldr	r0, [pc, #44]	; (80009dc <UARTTask_init+0x60>)
 80009b0:	f001 fe5d 	bl	800266e <HAL_UART_Transmit>
	              osSemaphoreRelease(mutex3);
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <UARTTask_init+0x50>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f003 f835 	bl	8003a28 <osSemaphoreRelease>
	              currentstate = 1;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <UARTTask_init+0x64>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
	              osDelay(1);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f002 ff39 	bl	800383c <osDelay>
  while(1){
 80009ca:	e7db      	b.n	8000984 <UARTTask_init+0x8>
 80009cc:	20000124 	.word	0x20000124
 80009d0:	200000e8 	.word	0x200000e8
 80009d4:	08007874 	.word	0x08007874
 80009d8:	200000f0 	.word	0x200000f0
 80009dc:	20000090 	.word	0x20000090
 80009e0:	200000ee 	.word	0x200000ee

080009e4 <LEDTask_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LEDTask_init */
void LEDTask_init(void *argument)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b090      	sub	sp, #64	; 0x40
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LEDTask_init */
  /* Infinite loop */
  while(1)
  {
	  char u1[50];
	  sprintf(u1, "%d\r\n", currentstate);
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <LEDTask_init+0x3c>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	490b      	ldr	r1, [pc, #44]	; (8000a24 <LEDTask_init+0x40>)
 80009f8:	4618      	mov	r0, r3
 80009fa:	f006 fab9 	bl	8006f70 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)u1, strlen(u1), 10);
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fc04 	bl	8000210 <strlen>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	f107 010c 	add.w	r1, r7, #12
 8000a10:	230a      	movs	r3, #10
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <LEDTask_init+0x44>)
 8000a14:	f001 fe2b 	bl	800266e <HAL_UART_Transmit>
    osDelay(1);
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f002 ff0f 	bl	800383c <osDelay>
  {
 8000a1e:	e7e5      	b.n	80009ec <LEDTask_init+0x8>
 8000a20:	200000ee 	.word	0x200000ee
 8000a24:	08007874 	.word	0x08007874
 8000a28:	20000090 	.word	0x20000090

08000a2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a3c:	d101      	bne.n	8000a42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a3e:	f000 f9bf 	bl	8000dc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4e:	b672      	cpsid	i
}
 8000a50:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <Error_Handler+0x8>

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_MspInit+0x54>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <HAL_MspInit+0x54>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_MspInit+0x54>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_MspInit+0x54>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_MspInit+0x54>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_MspInit+0x54>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	210f      	movs	r1, #15
 8000a96:	f06f 0001 	mvn.w	r0, #1
 8000a9a:	f000 fa69 	bl	8000f70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	; 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a1d      	ldr	r2, [pc, #116]	; (8000b40 <HAL_UART_MspInit+0x94>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d133      	bne.n	8000b36 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <HAL_UART_MspInit+0x98>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <HAL_UART_MspInit+0x98>)
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <HAL_UART_MspInit+0x98>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_UART_MspInit+0x98>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <HAL_UART_MspInit+0x98>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_UART_MspInit+0x98>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b06:	230c      	movs	r3, #12
 8000b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b16:	2307      	movs	r3, #7
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4809      	ldr	r0, [pc, #36]	; (8000b48 <HAL_UART_MspInit+0x9c>)
 8000b22:	f000 fae1 	bl	80010e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2105      	movs	r1, #5
 8000b2a:	2026      	movs	r0, #38	; 0x26
 8000b2c:	f000 fa20 	bl	8000f70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b30:	2026      	movs	r0, #38	; 0x26
 8000b32:	f000 fa39 	bl	8000fa8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40004400 	.word	0x40004400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000

08000b4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08e      	sub	sp, #56	; 0x38
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	4b34      	ldr	r3, [pc, #208]	; (8000c34 <HAL_InitTick+0xe8>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	4a33      	ldr	r2, [pc, #204]	; (8000c34 <HAL_InitTick+0xe8>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6c:	4b31      	ldr	r3, [pc, #196]	; (8000c34 <HAL_InitTick+0xe8>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b78:	f107 0210 	add.w	r2, r7, #16
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4611      	mov	r1, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 fd78 	bl	8001678 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b88:	6a3b      	ldr	r3, [r7, #32]
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d103      	bne.n	8000b9a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b92:	f000 fd49 	bl	8001628 <HAL_RCC_GetPCLK1Freq>
 8000b96:	6378      	str	r0, [r7, #52]	; 0x34
 8000b98:	e004      	b.n	8000ba4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b9a:	f000 fd45 	bl	8001628 <HAL_RCC_GetPCLK1Freq>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ba6:	4a24      	ldr	r2, [pc, #144]	; (8000c38 <HAL_InitTick+0xec>)
 8000ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bac:	0c9b      	lsrs	r3, r3, #18
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000bb2:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <HAL_InitTick+0xf0>)
 8000bb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <HAL_InitTick+0xf0>)
 8000bbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000bc2:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <HAL_InitTick+0xf0>)
 8000bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <HAL_InitTick+0xf0>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <HAL_InitTick+0xf0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <HAL_InitTick+0xf0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000bda:	4818      	ldr	r0, [pc, #96]	; (8000c3c <HAL_InitTick+0xf0>)
 8000bdc:	f001 fa4c 	bl	8002078 <HAL_TIM_Base_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000be6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d11b      	bne.n	8000c26 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000bee:	4813      	ldr	r0, [pc, #76]	; (8000c3c <HAL_InitTick+0xf0>)
 8000bf0:	f001 fa9c 	bl	800212c <HAL_TIM_Base_Start_IT>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d111      	bne.n	8000c26 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c02:	201c      	movs	r0, #28
 8000c04:	f000 f9d0 	bl	8000fa8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b0f      	cmp	r3, #15
 8000c0c:	d808      	bhi.n	8000c20 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	6879      	ldr	r1, [r7, #4]
 8000c12:	201c      	movs	r0, #28
 8000c14:	f000 f9ac 	bl	8000f70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c18:	4a09      	ldr	r2, [pc, #36]	; (8000c40 <HAL_InitTick+0xf4>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	e002      	b.n	8000c26 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3738      	adds	r7, #56	; 0x38
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	431bde83 	.word	0x431bde83
 8000c3c:	20000128 	.word	0x20000128
 8000c40:	20000004 	.word	0x20000004

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <NMI_Handler+0x4>

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <TIM2_IRQHandler+0x10>)
 8000c76:	f001 fac9 	bl	800220c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000128 	.word	0x20000128

08000c84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <USART2_IRQHandler+0x10>)
 8000c8a:	f001 fd83 	bl	8002794 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000090 	.word	0x20000090

08000c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca0:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <_sbrk+0x5c>)
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <_sbrk+0x60>)
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <_sbrk+0x64>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <_sbrk+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d207      	bcs.n	8000cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc8:	f006 f912 	bl	8006ef0 <__errno>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	220c      	movs	r2, #12
 8000cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	e009      	b.n	8000cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cde:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <_sbrk+0x64>)
 8000ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cea:	68fb      	ldr	r3, [r7, #12]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20020000 	.word	0x20020000
 8000cf8:	00000400 	.word	0x00000400
 8000cfc:	20000170 	.word	0x20000170
 8000d00:	20004ad8 	.word	0x20004ad8

08000d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2e:	490e      	ldr	r1, [pc, #56]	; (8000d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d30:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d44:	4c0b      	ldr	r4, [pc, #44]	; (8000d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d52:	f7ff ffd7 	bl	8000d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d56:	f006 f8d1 	bl	8006efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5a:	f7ff fc99 	bl	8000690 <main>
  bx  lr    
 8000d5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d6c:	0800795c 	.word	0x0800795c
  ldr r2, =_sbss
 8000d70:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d74:	20004ad8 	.word	0x20004ad8

08000d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC_IRQHandler>
	...

08000d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <HAL_Init+0x40>)
 8000d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_Init+0x40>)
 8000d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_Init+0x40>)
 8000d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f8d8 	bl	8000f5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	200f      	movs	r0, #15
 8000dac:	f7ff fece 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff fe50 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023c00 	.word	0x40023c00

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000174 	.word	0x20000174

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000174 	.word	0x20000174

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	db0b      	blt.n	8000e8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	f003 021f 	and.w	r2, r3, #31
 8000e7c:	4907      	ldr	r1, [pc, #28]	; (8000e9c <__NVIC_EnableIRQ+0x38>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	095b      	lsrs	r3, r3, #5
 8000e84:	2001      	movs	r0, #1
 8000e86:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	db0a      	blt.n	8000eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	490c      	ldr	r1, [pc, #48]	; (8000eec <__NVIC_SetPriority+0x4c>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	0112      	lsls	r2, r2, #4
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec8:	e00a      	b.n	8000ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <__NVIC_SetPriority+0x50>)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	3b04      	subs	r3, #4
 8000ed8:	0112      	lsls	r2, r2, #4
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	440b      	add	r3, r1
 8000ede:	761a      	strb	r2, [r3, #24]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000e100 	.word	0xe000e100
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f1c3 0307 	rsb	r3, r3, #7
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	bf28      	it	cs
 8000f12:	2304      	movcs	r3, #4
 8000f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	2b06      	cmp	r3, #6
 8000f1c:	d902      	bls.n	8000f24 <NVIC_EncodePriority+0x30>
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3b03      	subs	r3, #3
 8000f22:	e000      	b.n	8000f26 <NVIC_EncodePriority+0x32>
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43da      	mvns	r2, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	401a      	ands	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	43d9      	mvns	r1, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	4313      	orrs	r3, r2
         );
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3724      	adds	r7, #36	; 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ff4c 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f82:	f7ff ff61 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000f86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	68b9      	ldr	r1, [r7, #8]
 8000f8c:	6978      	ldr	r0, [r7, #20]
 8000f8e:	f7ff ffb1 	bl	8000ef4 <NVIC_EncodePriority>
 8000f92:	4602      	mov	r2, r0
 8000f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ff80 	bl	8000ea0 <__NVIC_SetPriority>
}
 8000fa0:	bf00      	nop
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff54 	bl	8000e64 <__NVIC_EnableIRQ>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fd2:	f7ff ff09 	bl	8000de8 <HAL_GetTick>
 8000fd6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d008      	beq.n	8000ff6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e052      	b.n	800109c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0216 	bic.w	r2, r2, #22
 8001004:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	695a      	ldr	r2, [r3, #20]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001014:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	2b00      	cmp	r3, #0
 800101c:	d103      	bne.n	8001026 <HAL_DMA_Abort+0x62>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001022:	2b00      	cmp	r3, #0
 8001024:	d007      	beq.n	8001036 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0208 	bic.w	r2, r2, #8
 8001034:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0201 	bic.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001046:	e013      	b.n	8001070 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001048:	f7ff fece 	bl	8000de8 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b05      	cmp	r3, #5
 8001054:	d90c      	bls.n	8001070 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2220      	movs	r2, #32
 800105a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2203      	movs	r2, #3
 8001060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e015      	b.n	800109c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1e4      	bne.n	8001048 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001082:	223f      	movs	r2, #63	; 0x3f
 8001084:	409a      	lsls	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d004      	beq.n	80010c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00c      	b.n	80010dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2205      	movs	r2, #5
 80010c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0201 	bic.w	r2, r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	e165      	b.n	80013d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	429a      	cmp	r2, r3
 800111e:	f040 8154 	bne.w	80013ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d005      	beq.n	800113a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001136:	2b02      	cmp	r3, #2
 8001138:	d130      	bne.n	800119c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001170:	2201      	movs	r2, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	f003 0201 	and.w	r2, r3, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d017      	beq.n	80011d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d123      	bne.n	800122c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	08da      	lsrs	r2, r3, #3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3208      	adds	r2, #8
 80011ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	220f      	movs	r2, #15
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	08da      	lsrs	r2, r3, #3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3208      	adds	r2, #8
 8001226:	69b9      	ldr	r1, [r7, #24]
 8001228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0203 	and.w	r2, r3, #3
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80ae 	beq.w	80013ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b5d      	ldr	r3, [pc, #372]	; (80013e8 <HAL_GPIO_Init+0x300>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a5c      	ldr	r2, [pc, #368]	; (80013e8 <HAL_GPIO_Init+0x300>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b5a      	ldr	r3, [pc, #360]	; (80013e8 <HAL_GPIO_Init+0x300>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800128a:	4a58      	ldr	r2, [pc, #352]	; (80013ec <HAL_GPIO_Init+0x304>)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3302      	adds	r3, #2
 8001292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	220f      	movs	r2, #15
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4f      	ldr	r2, [pc, #316]	; (80013f0 <HAL_GPIO_Init+0x308>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d025      	beq.n	8001302 <HAL_GPIO_Init+0x21a>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4e      	ldr	r2, [pc, #312]	; (80013f4 <HAL_GPIO_Init+0x30c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d01f      	beq.n	80012fe <HAL_GPIO_Init+0x216>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4d      	ldr	r2, [pc, #308]	; (80013f8 <HAL_GPIO_Init+0x310>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d019      	beq.n	80012fa <HAL_GPIO_Init+0x212>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4c      	ldr	r2, [pc, #304]	; (80013fc <HAL_GPIO_Init+0x314>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x20e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4b      	ldr	r2, [pc, #300]	; (8001400 <HAL_GPIO_Init+0x318>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x20a>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4a      	ldr	r2, [pc, #296]	; (8001404 <HAL_GPIO_Init+0x31c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x206>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a49      	ldr	r2, [pc, #292]	; (8001408 <HAL_GPIO_Init+0x320>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x202>
 80012e6:	2306      	movs	r3, #6
 80012e8:	e00c      	b.n	8001304 <HAL_GPIO_Init+0x21c>
 80012ea:	2307      	movs	r3, #7
 80012ec:	e00a      	b.n	8001304 <HAL_GPIO_Init+0x21c>
 80012ee:	2305      	movs	r3, #5
 80012f0:	e008      	b.n	8001304 <HAL_GPIO_Init+0x21c>
 80012f2:	2304      	movs	r3, #4
 80012f4:	e006      	b.n	8001304 <HAL_GPIO_Init+0x21c>
 80012f6:	2303      	movs	r3, #3
 80012f8:	e004      	b.n	8001304 <HAL_GPIO_Init+0x21c>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e002      	b.n	8001304 <HAL_GPIO_Init+0x21c>
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <HAL_GPIO_Init+0x21c>
 8001302:	2300      	movs	r3, #0
 8001304:	69fa      	ldr	r2, [r7, #28]
 8001306:	f002 0203 	and.w	r2, r2, #3
 800130a:	0092      	lsls	r2, r2, #2
 800130c:	4093      	lsls	r3, r2
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001314:	4935      	ldr	r1, [pc, #212]	; (80013ec <HAL_GPIO_Init+0x304>)
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3302      	adds	r3, #2
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001322:	4b3a      	ldr	r3, [pc, #232]	; (800140c <HAL_GPIO_Init+0x324>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001346:	4a31      	ldr	r2, [pc, #196]	; (800140c <HAL_GPIO_Init+0x324>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800134c:	4b2f      	ldr	r3, [pc, #188]	; (800140c <HAL_GPIO_Init+0x324>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001370:	4a26      	ldr	r2, [pc, #152]	; (800140c <HAL_GPIO_Init+0x324>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001376:	4b25      	ldr	r3, [pc, #148]	; (800140c <HAL_GPIO_Init+0x324>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800139a:	4a1c      	ldr	r2, [pc, #112]	; (800140c <HAL_GPIO_Init+0x324>)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <HAL_GPIO_Init+0x324>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013c4:	4a11      	ldr	r2, [pc, #68]	; (800140c <HAL_GPIO_Init+0x324>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3301      	adds	r3, #1
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	2b0f      	cmp	r3, #15
 80013d4:	f67f ae96 	bls.w	8001104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	3724      	adds	r7, #36	; 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40013800 	.word	0x40013800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020400 	.word	0x40020400
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40020c00 	.word	0x40020c00
 8001400:	40021000 	.word	0x40021000
 8001404:	40021400 	.word	0x40021400
 8001408:	40021800 	.word	0x40021800
 800140c:	40013c00 	.word	0x40013c00

08001410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	807b      	strh	r3, [r7, #2]
 800141c:	4613      	mov	r3, r2
 800141e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001420:	787b      	ldrb	r3, [r7, #1]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001426:	887a      	ldrh	r2, [r7, #2]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800142c:	e003      	b.n	8001436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800142e:	887b      	ldrh	r3, [r7, #2]
 8001430:	041a      	lsls	r2, r3, #16
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	619a      	str	r2, [r3, #24]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e0cc      	b.n	80015f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001458:	4b68      	ldr	r3, [pc, #416]	; (80015fc <HAL_RCC_ClockConfig+0x1b8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	d90c      	bls.n	8001480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001466:	4b65      	ldr	r3, [pc, #404]	; (80015fc <HAL_RCC_ClockConfig+0x1b8>)
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800146e:	4b63      	ldr	r3, [pc, #396]	; (80015fc <HAL_RCC_ClockConfig+0x1b8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d001      	beq.n	8001480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e0b8      	b.n	80015f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d020      	beq.n	80014ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001498:	4b59      	ldr	r3, [pc, #356]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	4a58      	ldr	r2, [pc, #352]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 800149e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014b0:	4b53      	ldr	r3, [pc, #332]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	4a52      	ldr	r2, [pc, #328]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 80014b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014bc:	4b50      	ldr	r3, [pc, #320]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	494d      	ldr	r1, [pc, #308]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d044      	beq.n	8001564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d107      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e2:	4b47      	ldr	r3, [pc, #284]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d119      	bne.n	8001522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e07f      	b.n	80015f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d003      	beq.n	8001502 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d107      	bne.n	8001512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001502:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d109      	bne.n	8001522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e06f      	b.n	80015f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001512:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e067      	b.n	80015f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001522:	4b37      	ldr	r3, [pc, #220]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f023 0203 	bic.w	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4934      	ldr	r1, [pc, #208]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 8001530:	4313      	orrs	r3, r2
 8001532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001534:	f7ff fc58 	bl	8000de8 <HAL_GetTick>
 8001538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153a:	e00a      	b.n	8001552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800153c:	f7ff fc54 	bl	8000de8 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f241 3288 	movw	r2, #5000	; 0x1388
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e04f      	b.n	80015f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001552:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 020c 	and.w	r2, r3, #12
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	429a      	cmp	r2, r3
 8001562:	d1eb      	bne.n	800153c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001564:	4b25      	ldr	r3, [pc, #148]	; (80015fc <HAL_RCC_ClockConfig+0x1b8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 030f 	and.w	r3, r3, #15
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d20c      	bcs.n	800158c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001572:	4b22      	ldr	r3, [pc, #136]	; (80015fc <HAL_RCC_ClockConfig+0x1b8>)
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157a:	4b20      	ldr	r3, [pc, #128]	; (80015fc <HAL_RCC_ClockConfig+0x1b8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d001      	beq.n	800158c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e032      	b.n	80015f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	d008      	beq.n	80015aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	4916      	ldr	r1, [pc, #88]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d009      	beq.n	80015ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015b6:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	490e      	ldr	r1, [pc, #56]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015ca:	f000 f887 	bl	80016dc <HAL_RCC_GetSysClockFreq>
 80015ce:	4602      	mov	r2, r0
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	490a      	ldr	r1, [pc, #40]	; (8001604 <HAL_RCC_ClockConfig+0x1c0>)
 80015dc:	5ccb      	ldrb	r3, [r1, r3]
 80015de:	fa22 f303 	lsr.w	r3, r2, r3
 80015e2:	4a09      	ldr	r2, [pc, #36]	; (8001608 <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_RCC_ClockConfig+0x1c8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff faae 	bl	8000b4c <HAL_InitTick>

  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023c00 	.word	0x40023c00
 8001600:	40023800 	.word	0x40023800
 8001604:	08007900 	.word	0x08007900
 8001608:	20000000 	.word	0x20000000
 800160c:	20000004 	.word	0x20000004

08001610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_RCC_GetHCLKFreq+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000000 	.word	0x20000000

08001628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800162c:	f7ff fff0 	bl	8001610 <HAL_RCC_GetHCLKFreq>
 8001630:	4602      	mov	r2, r0
 8001632:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	0a9b      	lsrs	r3, r3, #10
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	4903      	ldr	r1, [pc, #12]	; (800164c <HAL_RCC_GetPCLK1Freq+0x24>)
 800163e:	5ccb      	ldrb	r3, [r1, r3]
 8001640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001644:	4618      	mov	r0, r3
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40023800 	.word	0x40023800
 800164c:	08007910 	.word	0x08007910

08001650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001654:	f7ff ffdc 	bl	8001610 <HAL_RCC_GetHCLKFreq>
 8001658:	4602      	mov	r2, r0
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	0b5b      	lsrs	r3, r3, #13
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	4903      	ldr	r1, [pc, #12]	; (8001674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001666:	5ccb      	ldrb	r3, [r1, r3]
 8001668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800166c:	4618      	mov	r0, r3
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40023800 	.word	0x40023800
 8001674:	08007910 	.word	0x08007910

08001678 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	220f      	movs	r2, #15
 8001686:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_RCC_GetClockConfig+0x5c>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 0203 	and.w	r2, r3, #3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_RCC_GetClockConfig+0x5c>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_RCC_GetClockConfig+0x5c>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_RCC_GetClockConfig+0x5c>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	08db      	lsrs	r3, r3, #3
 80016b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80016ba:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <HAL_RCC_GetClockConfig+0x60>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 020f 	and.w	r2, r3, #15
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	601a      	str	r2, [r3, #0]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40023c00 	.word	0x40023c00

080016dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016e0:	b0ae      	sub	sp, #184	; 0xb8
 80016e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001702:	4bcb      	ldr	r3, [pc, #812]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x354>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b0c      	cmp	r3, #12
 800170c:	f200 8206 	bhi.w	8001b1c <HAL_RCC_GetSysClockFreq+0x440>
 8001710:	a201      	add	r2, pc, #4	; (adr r2, 8001718 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001716:	bf00      	nop
 8001718:	0800174d 	.word	0x0800174d
 800171c:	08001b1d 	.word	0x08001b1d
 8001720:	08001b1d 	.word	0x08001b1d
 8001724:	08001b1d 	.word	0x08001b1d
 8001728:	08001755 	.word	0x08001755
 800172c:	08001b1d 	.word	0x08001b1d
 8001730:	08001b1d 	.word	0x08001b1d
 8001734:	08001b1d 	.word	0x08001b1d
 8001738:	0800175d 	.word	0x0800175d
 800173c:	08001b1d 	.word	0x08001b1d
 8001740:	08001b1d 	.word	0x08001b1d
 8001744:	08001b1d 	.word	0x08001b1d
 8001748:	0800194d 	.word	0x0800194d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800174c:	4bb9      	ldr	r3, [pc, #740]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x358>)
 800174e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001752:	e1e7      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001754:	4bb8      	ldr	r3, [pc, #736]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800175a:	e1e3      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800175c:	4bb4      	ldr	r3, [pc, #720]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x354>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001768:	4bb1      	ldr	r3, [pc, #708]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x354>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d071      	beq.n	8001858 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001774:	4bae      	ldr	r3, [pc, #696]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x354>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	099b      	lsrs	r3, r3, #6
 800177a:	2200      	movs	r2, #0
 800177c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001780:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001784:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800178c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001796:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800179a:	4622      	mov	r2, r4
 800179c:	462b      	mov	r3, r5
 800179e:	f04f 0000 	mov.w	r0, #0
 80017a2:	f04f 0100 	mov.w	r1, #0
 80017a6:	0159      	lsls	r1, r3, #5
 80017a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017ac:	0150      	lsls	r0, r2, #5
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4621      	mov	r1, r4
 80017b4:	1a51      	subs	r1, r2, r1
 80017b6:	6439      	str	r1, [r7, #64]	; 0x40
 80017b8:	4629      	mov	r1, r5
 80017ba:	eb63 0301 	sbc.w	r3, r3, r1
 80017be:	647b      	str	r3, [r7, #68]	; 0x44
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80017cc:	4649      	mov	r1, r9
 80017ce:	018b      	lsls	r3, r1, #6
 80017d0:	4641      	mov	r1, r8
 80017d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017d6:	4641      	mov	r1, r8
 80017d8:	018a      	lsls	r2, r1, #6
 80017da:	4641      	mov	r1, r8
 80017dc:	1a51      	subs	r1, r2, r1
 80017de:	63b9      	str	r1, [r7, #56]	; 0x38
 80017e0:	4649      	mov	r1, r9
 80017e2:	eb63 0301 	sbc.w	r3, r3, r1
 80017e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80017f4:	4649      	mov	r1, r9
 80017f6:	00cb      	lsls	r3, r1, #3
 80017f8:	4641      	mov	r1, r8
 80017fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017fe:	4641      	mov	r1, r8
 8001800:	00ca      	lsls	r2, r1, #3
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	4603      	mov	r3, r0
 8001808:	4622      	mov	r2, r4
 800180a:	189b      	adds	r3, r3, r2
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
 800180e:	462b      	mov	r3, r5
 8001810:	460a      	mov	r2, r1
 8001812:	eb42 0303 	adc.w	r3, r2, r3
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001824:	4629      	mov	r1, r5
 8001826:	024b      	lsls	r3, r1, #9
 8001828:	4621      	mov	r1, r4
 800182a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800182e:	4621      	mov	r1, r4
 8001830:	024a      	lsls	r2, r1, #9
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800183a:	2200      	movs	r2, #0
 800183c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001840:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001844:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001848:	f7fe fd3a 	bl	80002c0 <__aeabi_uldivmod>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4613      	mov	r3, r2
 8001852:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001856:	e067      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001858:	4b75      	ldr	r3, [pc, #468]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x354>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	099b      	lsrs	r3, r3, #6
 800185e:	2200      	movs	r2, #0
 8001860:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001864:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001868:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800186c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001870:	67bb      	str	r3, [r7, #120]	; 0x78
 8001872:	2300      	movs	r3, #0
 8001874:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001876:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800187a:	4622      	mov	r2, r4
 800187c:	462b      	mov	r3, r5
 800187e:	f04f 0000 	mov.w	r0, #0
 8001882:	f04f 0100 	mov.w	r1, #0
 8001886:	0159      	lsls	r1, r3, #5
 8001888:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800188c:	0150      	lsls	r0, r2, #5
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4621      	mov	r1, r4
 8001894:	1a51      	subs	r1, r2, r1
 8001896:	62b9      	str	r1, [r7, #40]	; 0x28
 8001898:	4629      	mov	r1, r5
 800189a:	eb63 0301 	sbc.w	r3, r3, r1
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80018ac:	4649      	mov	r1, r9
 80018ae:	018b      	lsls	r3, r1, #6
 80018b0:	4641      	mov	r1, r8
 80018b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018b6:	4641      	mov	r1, r8
 80018b8:	018a      	lsls	r2, r1, #6
 80018ba:	4641      	mov	r1, r8
 80018bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80018c0:	4649      	mov	r1, r9
 80018c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80018d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80018d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80018da:	4692      	mov	sl, r2
 80018dc:	469b      	mov	fp, r3
 80018de:	4623      	mov	r3, r4
 80018e0:	eb1a 0303 	adds.w	r3, sl, r3
 80018e4:	623b      	str	r3, [r7, #32]
 80018e6:	462b      	mov	r3, r5
 80018e8:	eb4b 0303 	adc.w	r3, fp, r3
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018fa:	4629      	mov	r1, r5
 80018fc:	028b      	lsls	r3, r1, #10
 80018fe:	4621      	mov	r1, r4
 8001900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001904:	4621      	mov	r1, r4
 8001906:	028a      	lsls	r2, r1, #10
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001910:	2200      	movs	r2, #0
 8001912:	673b      	str	r3, [r7, #112]	; 0x70
 8001914:	677a      	str	r2, [r7, #116]	; 0x74
 8001916:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800191a:	f7fe fcd1 	bl	80002c0 <__aeabi_uldivmod>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4613      	mov	r3, r2
 8001924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001928:	4b41      	ldr	r3, [pc, #260]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x354>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	0c1b      	lsrs	r3, r3, #16
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	3301      	adds	r3, #1
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800193a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800193e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800194a:	e0eb      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800194c:	4b38      	ldr	r3, [pc, #224]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x354>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001954:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001958:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x354>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d06b      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001964:	4b32      	ldr	r3, [pc, #200]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x354>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	099b      	lsrs	r3, r3, #6
 800196a:	2200      	movs	r2, #0
 800196c:	66bb      	str	r3, [r7, #104]	; 0x68
 800196e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001970:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001976:	663b      	str	r3, [r7, #96]	; 0x60
 8001978:	2300      	movs	r3, #0
 800197a:	667b      	str	r3, [r7, #100]	; 0x64
 800197c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001980:	4622      	mov	r2, r4
 8001982:	462b      	mov	r3, r5
 8001984:	f04f 0000 	mov.w	r0, #0
 8001988:	f04f 0100 	mov.w	r1, #0
 800198c:	0159      	lsls	r1, r3, #5
 800198e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001992:	0150      	lsls	r0, r2, #5
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4621      	mov	r1, r4
 800199a:	1a51      	subs	r1, r2, r1
 800199c:	61b9      	str	r1, [r7, #24]
 800199e:	4629      	mov	r1, r5
 80019a0:	eb63 0301 	sbc.w	r3, r3, r1
 80019a4:	61fb      	str	r3, [r7, #28]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80019b2:	4659      	mov	r1, fp
 80019b4:	018b      	lsls	r3, r1, #6
 80019b6:	4651      	mov	r1, sl
 80019b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019bc:	4651      	mov	r1, sl
 80019be:	018a      	lsls	r2, r1, #6
 80019c0:	4651      	mov	r1, sl
 80019c2:	ebb2 0801 	subs.w	r8, r2, r1
 80019c6:	4659      	mov	r1, fp
 80019c8:	eb63 0901 	sbc.w	r9, r3, r1
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019e0:	4690      	mov	r8, r2
 80019e2:	4699      	mov	r9, r3
 80019e4:	4623      	mov	r3, r4
 80019e6:	eb18 0303 	adds.w	r3, r8, r3
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	462b      	mov	r3, r5
 80019ee:	eb49 0303 	adc.w	r3, r9, r3
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a00:	4629      	mov	r1, r5
 8001a02:	024b      	lsls	r3, r1, #9
 8001a04:	4621      	mov	r1, r4
 8001a06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	024a      	lsls	r2, r1, #9
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a16:	2200      	movs	r2, #0
 8001a18:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a1a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001a1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a20:	f7fe fc4e 	bl	80002c0 <__aeabi_uldivmod>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a2e:	e065      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x420>
 8001a30:	40023800 	.word	0x40023800
 8001a34:	00f42400 	.word	0x00f42400
 8001a38:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3c:	4b3d      	ldr	r3, [pc, #244]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	099b      	lsrs	r3, r3, #6
 8001a42:	2200      	movs	r2, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	4611      	mov	r1, r2
 8001a48:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a4c:	653b      	str	r3, [r7, #80]	; 0x50
 8001a4e:	2300      	movs	r3, #0
 8001a50:	657b      	str	r3, [r7, #84]	; 0x54
 8001a52:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001a56:	4642      	mov	r2, r8
 8001a58:	464b      	mov	r3, r9
 8001a5a:	f04f 0000 	mov.w	r0, #0
 8001a5e:	f04f 0100 	mov.w	r1, #0
 8001a62:	0159      	lsls	r1, r3, #5
 8001a64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a68:	0150      	lsls	r0, r2, #5
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4641      	mov	r1, r8
 8001a70:	1a51      	subs	r1, r2, r1
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	4649      	mov	r1, r9
 8001a76:	eb63 0301 	sbc.w	r3, r3, r1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001a88:	4659      	mov	r1, fp
 8001a8a:	018b      	lsls	r3, r1, #6
 8001a8c:	4651      	mov	r1, sl
 8001a8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a92:	4651      	mov	r1, sl
 8001a94:	018a      	lsls	r2, r1, #6
 8001a96:	4651      	mov	r1, sl
 8001a98:	1a54      	subs	r4, r2, r1
 8001a9a:	4659      	mov	r1, fp
 8001a9c:	eb63 0501 	sbc.w	r5, r3, r1
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	00eb      	lsls	r3, r5, #3
 8001aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aae:	00e2      	lsls	r2, r4, #3
 8001ab0:	4614      	mov	r4, r2
 8001ab2:	461d      	mov	r5, r3
 8001ab4:	4643      	mov	r3, r8
 8001ab6:	18e3      	adds	r3, r4, r3
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	464b      	mov	r3, r9
 8001abc:	eb45 0303 	adc.w	r3, r5, r3
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ace:	4629      	mov	r1, r5
 8001ad0:	028b      	lsls	r3, r1, #10
 8001ad2:	4621      	mov	r1, r4
 8001ad4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ad8:	4621      	mov	r1, r4
 8001ada:	028a      	lsls	r2, r1, #10
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ae8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001aea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001aee:	f7fe fbe7 	bl	80002c0 <__aeabi_uldivmod>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4613      	mov	r3, r2
 8001af8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x458>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	0f1b      	lsrs	r3, r3, #28
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001b0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b1a:	e003      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	37b8      	adds	r7, #184	; 0xb8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	00f42400 	.word	0x00f42400

08001b3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e28d      	b.n	800206a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8083 	beq.w	8001c62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b5c:	4b94      	ldr	r3, [pc, #592]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d019      	beq.n	8001b9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b68:	4b91      	ldr	r3, [pc, #580]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b74:	4b8e      	ldr	r3, [pc, #568]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b80:	d00c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b82:	4b8b      	ldr	r3, [pc, #556]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d112      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b8e:	4b88      	ldr	r3, [pc, #544]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b9a:	d10b      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9c:	4b84      	ldr	r3, [pc, #528]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d05b      	beq.n	8001c60 <HAL_RCC_OscConfig+0x124>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d157      	bne.n	8001c60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e25a      	b.n	800206a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bbc:	d106      	bne.n	8001bcc <HAL_RCC_OscConfig+0x90>
 8001bbe:	4b7c      	ldr	r3, [pc, #496]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a7b      	ldr	r2, [pc, #492]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e01d      	b.n	8001c08 <HAL_RCC_OscConfig+0xcc>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0xb4>
 8001bd6:	4b76      	ldr	r3, [pc, #472]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a75      	ldr	r2, [pc, #468]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b73      	ldr	r3, [pc, #460]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a72      	ldr	r2, [pc, #456]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e00b      	b.n	8001c08 <HAL_RCC_OscConfig+0xcc>
 8001bf0:	4b6f      	ldr	r3, [pc, #444]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a6e      	ldr	r2, [pc, #440]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b6c      	ldr	r3, [pc, #432]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a6b      	ldr	r2, [pc, #428]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d013      	beq.n	8001c38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7ff f8ea 	bl	8000de8 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c18:	f7ff f8e6 	bl	8000de8 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	; 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e21f      	b.n	800206a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	4b61      	ldr	r3, [pc, #388]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0xdc>
 8001c36:	e014      	b.n	8001c62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff f8d6 	bl	8000de8 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff f8d2 	bl	8000de8 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	; 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e20b      	b.n	800206a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c52:	4b57      	ldr	r3, [pc, #348]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x104>
 8001c5e:	e000      	b.n	8001c62 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d06f      	beq.n	8001d4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c6e:	4b50      	ldr	r3, [pc, #320]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d017      	beq.n	8001caa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c7a:	4b4d      	ldr	r3, [pc, #308]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d105      	bne.n	8001c92 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c86:	4b4a      	ldr	r3, [pc, #296]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00b      	beq.n	8001caa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c92:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c9a:	2b0c      	cmp	r3, #12
 8001c9c:	d11c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c9e:	4b44      	ldr	r3, [pc, #272]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d116      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	4b41      	ldr	r3, [pc, #260]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x186>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d001      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e1d3      	b.n	800206a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc2:	4b3b      	ldr	r3, [pc, #236]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4937      	ldr	r1, [pc, #220]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd6:	e03a      	b.n	8001d4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d020      	beq.n	8001d22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce0:	4b34      	ldr	r3, [pc, #208]	; (8001db4 <HAL_RCC_OscConfig+0x278>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7ff f87f 	bl	8000de8 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cee:	f7ff f87b 	bl	8000de8 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e1b4      	b.n	800206a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d00:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0c:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4925      	ldr	r1, [pc, #148]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]
 8001d20:	e015      	b.n	8001d4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d22:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <HAL_RCC_OscConfig+0x278>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff f85e 	bl	8000de8 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d30:	f7ff f85a 	bl	8000de8 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e193      	b.n	800206a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d42:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d036      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d016      	beq.n	8001d90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7ff f83e 	bl	8000de8 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d70:	f7ff f83a 	bl	8000de8 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e173      	b.n	800206a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0x234>
 8001d8e:	e01b      	b.n	8001dc8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f827 	bl	8000de8 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9c:	e00e      	b.n	8001dbc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9e:	f7ff f823 	bl	8000de8 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d907      	bls.n	8001dbc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e15c      	b.n	800206a <HAL_RCC_OscConfig+0x52e>
 8001db0:	40023800 	.word	0x40023800
 8001db4:	42470000 	.word	0x42470000
 8001db8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dbc:	4b8a      	ldr	r3, [pc, #552]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1ea      	bne.n	8001d9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 8097 	beq.w	8001f04 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dda:	4b83      	ldr	r3, [pc, #524]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10f      	bne.n	8001e06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	4b7f      	ldr	r3, [pc, #508]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	4a7e      	ldr	r2, [pc, #504]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df4:	6413      	str	r3, [r2, #64]	; 0x40
 8001df6:	4b7c      	ldr	r3, [pc, #496]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e02:	2301      	movs	r3, #1
 8001e04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e06:	4b79      	ldr	r3, [pc, #484]	; (8001fec <HAL_RCC_OscConfig+0x4b0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d118      	bne.n	8001e44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e12:	4b76      	ldr	r3, [pc, #472]	; (8001fec <HAL_RCC_OscConfig+0x4b0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a75      	ldr	r2, [pc, #468]	; (8001fec <HAL_RCC_OscConfig+0x4b0>)
 8001e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e1e:	f7fe ffe3 	bl	8000de8 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e26:	f7fe ffdf 	bl	8000de8 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e118      	b.n	800206a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	4b6c      	ldr	r3, [pc, #432]	; (8001fec <HAL_RCC_OscConfig+0x4b0>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d106      	bne.n	8001e5a <HAL_RCC_OscConfig+0x31e>
 8001e4c:	4b66      	ldr	r3, [pc, #408]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e50:	4a65      	ldr	r2, [pc, #404]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6713      	str	r3, [r2, #112]	; 0x70
 8001e58:	e01c      	b.n	8001e94 <HAL_RCC_OscConfig+0x358>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b05      	cmp	r3, #5
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x340>
 8001e62:	4b61      	ldr	r3, [pc, #388]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e66:	4a60      	ldr	r2, [pc, #384]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6e:	4b5e      	ldr	r3, [pc, #376]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e72:	4a5d      	ldr	r2, [pc, #372]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7a:	e00b      	b.n	8001e94 <HAL_RCC_OscConfig+0x358>
 8001e7c:	4b5a      	ldr	r3, [pc, #360]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e80:	4a59      	ldr	r2, [pc, #356]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001e82:	f023 0301 	bic.w	r3, r3, #1
 8001e86:	6713      	str	r3, [r2, #112]	; 0x70
 8001e88:	4b57      	ldr	r3, [pc, #348]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8c:	4a56      	ldr	r2, [pc, #344]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001e8e:	f023 0304 	bic.w	r3, r3, #4
 8001e92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d015      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9c:	f7fe ffa4 	bl	8000de8 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea4:	f7fe ffa0 	bl	8000de8 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e0d7      	b.n	800206a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eba:	4b4b      	ldr	r3, [pc, #300]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0ee      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x368>
 8001ec6:	e014      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec8:	f7fe ff8e 	bl	8000de8 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ece:	e00a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed0:	f7fe ff8a 	bl	8000de8 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e0c1      	b.n	800206a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee6:	4b40      	ldr	r3, [pc, #256]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1ee      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d105      	bne.n	8001f04 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef8:	4b3b      	ldr	r3, [pc, #236]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	4a3a      	ldr	r2, [pc, #232]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80ad 	beq.w	8002068 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f0e:	4b36      	ldr	r3, [pc, #216]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d060      	beq.n	8001fdc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d145      	bne.n	8001fae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	4b33      	ldr	r3, [pc, #204]	; (8001ff0 <HAL_RCC_OscConfig+0x4b4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7fe ff5e 	bl	8000de8 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f30:	f7fe ff5a 	bl	8000de8 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e093      	b.n	800206a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f42:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69da      	ldr	r2, [r3, #28]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	019b      	lsls	r3, r3, #6
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	085b      	lsrs	r3, r3, #1
 8001f66:	3b01      	subs	r3, #1
 8001f68:	041b      	lsls	r3, r3, #16
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	061b      	lsls	r3, r3, #24
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	071b      	lsls	r3, r3, #28
 8001f7a:	491b      	ldr	r1, [pc, #108]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_RCC_OscConfig+0x4b4>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7fe ff2f 	bl	8000de8 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8e:	f7fe ff2b 	bl	8000de8 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e064      	b.n	800206a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x452>
 8001fac:	e05c      	b.n	8002068 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <HAL_RCC_OscConfig+0x4b4>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb4:	f7fe ff18 	bl	8000de8 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fbc:	f7fe ff14 	bl	8000de8 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e04d      	b.n	800206a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_RCC_OscConfig+0x4ac>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x480>
 8001fda:	e045      	b.n	8002068 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d107      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e040      	b.n	800206a <HAL_RCC_OscConfig+0x52e>
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40007000 	.word	0x40007000
 8001ff0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ff4:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <HAL_RCC_OscConfig+0x538>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d030      	beq.n	8002064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d129      	bne.n	8002064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201a:	429a      	cmp	r2, r3
 800201c:	d122      	bne.n	8002064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002024:	4013      	ands	r3, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800202a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800202c:	4293      	cmp	r3, r2
 800202e:	d119      	bne.n	8002064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	085b      	lsrs	r3, r3, #1
 800203c:	3b01      	subs	r3, #1
 800203e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002040:	429a      	cmp	r2, r3
 8002042:	d10f      	bne.n	8002064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002050:	429a      	cmp	r2, r3
 8002052:	d107      	bne.n	8002064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800

08002078 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e041      	b.n	800210e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d106      	bne.n	80020a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f839 	bl	8002116 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3304      	adds	r3, #4
 80020b4:	4619      	mov	r1, r3
 80020b6:	4610      	mov	r0, r2
 80020b8:	f000 f9d8 	bl	800246c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d001      	beq.n	8002144 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e04e      	b.n	80021e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2202      	movs	r2, #2
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a23      	ldr	r2, [pc, #140]	; (80021f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d022      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x80>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216e:	d01d      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x80>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1f      	ldr	r2, [pc, #124]	; (80021f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d018      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x80>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1e      	ldr	r2, [pc, #120]	; (80021f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d013      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x80>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1c      	ldr	r2, [pc, #112]	; (80021fc <HAL_TIM_Base_Start_IT+0xd0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00e      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x80>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1b      	ldr	r2, [pc, #108]	; (8002200 <HAL_TIM_Base_Start_IT+0xd4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d009      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x80>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a19      	ldr	r2, [pc, #100]	; (8002204 <HAL_TIM_Base_Start_IT+0xd8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d004      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x80>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a18      	ldr	r2, [pc, #96]	; (8002208 <HAL_TIM_Base_Start_IT+0xdc>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d111      	bne.n	80021d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b06      	cmp	r3, #6
 80021bc:	d010      	beq.n	80021e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0201 	orr.w	r2, r2, #1
 80021cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ce:	e007      	b.n	80021e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40010000 	.word	0x40010000
 80021f4:	40000400 	.word	0x40000400
 80021f8:	40000800 	.word	0x40000800
 80021fc:	40000c00 	.word	0x40000c00
 8002200:	40010400 	.word	0x40010400
 8002204:	40014000 	.word	0x40014000
 8002208:	40001800 	.word	0x40001800

0800220c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b02      	cmp	r3, #2
 8002220:	d122      	bne.n	8002268 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b02      	cmp	r3, #2
 800222e:	d11b      	bne.n	8002268 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0202 	mvn.w	r2, #2
 8002238:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f8ee 	bl	8002430 <HAL_TIM_IC_CaptureCallback>
 8002254:	e005      	b.n	8002262 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f8e0 	bl	800241c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f8f1 	bl	8002444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b04      	cmp	r3, #4
 8002274:	d122      	bne.n	80022bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b04      	cmp	r3, #4
 8002282:	d11b      	bne.n	80022bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0204 	mvn.w	r2, #4
 800228c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2202      	movs	r2, #2
 8002292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f8c4 	bl	8002430 <HAL_TIM_IC_CaptureCallback>
 80022a8:	e005      	b.n	80022b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f8b6 	bl	800241c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f8c7 	bl	8002444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d122      	bne.n	8002310 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d11b      	bne.n	8002310 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0208 	mvn.w	r2, #8
 80022e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2204      	movs	r2, #4
 80022e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f89a 	bl	8002430 <HAL_TIM_IC_CaptureCallback>
 80022fc:	e005      	b.n	800230a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f88c 	bl	800241c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f89d 	bl	8002444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b10      	cmp	r3, #16
 800231c:	d122      	bne.n	8002364 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b10      	cmp	r3, #16
 800232a:	d11b      	bne.n	8002364 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0210 	mvn.w	r2, #16
 8002334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2208      	movs	r2, #8
 800233a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f870 	bl	8002430 <HAL_TIM_IC_CaptureCallback>
 8002350:	e005      	b.n	800235e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f862 	bl	800241c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f873 	bl	8002444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b01      	cmp	r3, #1
 8002370:	d10e      	bne.n	8002390 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b01      	cmp	r3, #1
 800237e:	d107      	bne.n	8002390 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0201 	mvn.w	r2, #1
 8002388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe fb4e 	bl	8000a2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239a:	2b80      	cmp	r3, #128	; 0x80
 800239c:	d10e      	bne.n	80023bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a8:	2b80      	cmp	r3, #128	; 0x80
 80023aa:	d107      	bne.n	80023bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f902 	bl	80025c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c6:	2b40      	cmp	r3, #64	; 0x40
 80023c8:	d10e      	bne.n	80023e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d4:	2b40      	cmp	r3, #64	; 0x40
 80023d6:	d107      	bne.n	80023e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f838 	bl	8002458 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f003 0320 	and.w	r3, r3, #32
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	d10e      	bne.n	8002414 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b20      	cmp	r3, #32
 8002402:	d107      	bne.n	8002414 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0220 	mvn.w	r2, #32
 800240c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f8cc 	bl	80025ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a40      	ldr	r2, [pc, #256]	; (8002580 <TIM_Base_SetConfig+0x114>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d013      	beq.n	80024ac <TIM_Base_SetConfig+0x40>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800248a:	d00f      	beq.n	80024ac <TIM_Base_SetConfig+0x40>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a3d      	ldr	r2, [pc, #244]	; (8002584 <TIM_Base_SetConfig+0x118>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d00b      	beq.n	80024ac <TIM_Base_SetConfig+0x40>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a3c      	ldr	r2, [pc, #240]	; (8002588 <TIM_Base_SetConfig+0x11c>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d007      	beq.n	80024ac <TIM_Base_SetConfig+0x40>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a3b      	ldr	r2, [pc, #236]	; (800258c <TIM_Base_SetConfig+0x120>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d003      	beq.n	80024ac <TIM_Base_SetConfig+0x40>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a3a      	ldr	r2, [pc, #232]	; (8002590 <TIM_Base_SetConfig+0x124>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d108      	bne.n	80024be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a2f      	ldr	r2, [pc, #188]	; (8002580 <TIM_Base_SetConfig+0x114>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d02b      	beq.n	800251e <TIM_Base_SetConfig+0xb2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024cc:	d027      	beq.n	800251e <TIM_Base_SetConfig+0xb2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a2c      	ldr	r2, [pc, #176]	; (8002584 <TIM_Base_SetConfig+0x118>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d023      	beq.n	800251e <TIM_Base_SetConfig+0xb2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a2b      	ldr	r2, [pc, #172]	; (8002588 <TIM_Base_SetConfig+0x11c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d01f      	beq.n	800251e <TIM_Base_SetConfig+0xb2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a2a      	ldr	r2, [pc, #168]	; (800258c <TIM_Base_SetConfig+0x120>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d01b      	beq.n	800251e <TIM_Base_SetConfig+0xb2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a29      	ldr	r2, [pc, #164]	; (8002590 <TIM_Base_SetConfig+0x124>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d017      	beq.n	800251e <TIM_Base_SetConfig+0xb2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a28      	ldr	r2, [pc, #160]	; (8002594 <TIM_Base_SetConfig+0x128>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <TIM_Base_SetConfig+0xb2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a27      	ldr	r2, [pc, #156]	; (8002598 <TIM_Base_SetConfig+0x12c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00f      	beq.n	800251e <TIM_Base_SetConfig+0xb2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a26      	ldr	r2, [pc, #152]	; (800259c <TIM_Base_SetConfig+0x130>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00b      	beq.n	800251e <TIM_Base_SetConfig+0xb2>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a25      	ldr	r2, [pc, #148]	; (80025a0 <TIM_Base_SetConfig+0x134>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d007      	beq.n	800251e <TIM_Base_SetConfig+0xb2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a24      	ldr	r2, [pc, #144]	; (80025a4 <TIM_Base_SetConfig+0x138>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d003      	beq.n	800251e <TIM_Base_SetConfig+0xb2>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a23      	ldr	r2, [pc, #140]	; (80025a8 <TIM_Base_SetConfig+0x13c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d108      	bne.n	8002530 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <TIM_Base_SetConfig+0x114>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d003      	beq.n	8002564 <TIM_Base_SetConfig+0xf8>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a0c      	ldr	r2, [pc, #48]	; (8002590 <TIM_Base_SetConfig+0x124>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d103      	bne.n	800256c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	615a      	str	r2, [r3, #20]
}
 8002572:	bf00      	nop
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40010000 	.word	0x40010000
 8002584:	40000400 	.word	0x40000400
 8002588:	40000800 	.word	0x40000800
 800258c:	40000c00 	.word	0x40000c00
 8002590:	40010400 	.word	0x40010400
 8002594:	40014000 	.word	0x40014000
 8002598:	40014400 	.word	0x40014400
 800259c:	40014800 	.word	0x40014800
 80025a0:	40001800 	.word	0x40001800
 80025a4:	40001c00 	.word	0x40001c00
 80025a8:	40002000 	.word	0x40002000

080025ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e03f      	b.n	8002666 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7fe fa56 	bl	8000aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2224      	movs	r2, #36	; 0x24
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002616:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fd7b 	bl	8003114 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800262c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800263c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800264c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b08a      	sub	sp, #40	; 0x28
 8002672:	af02      	add	r7, sp, #8
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	603b      	str	r3, [r7, #0]
 800267a:	4613      	mov	r3, r2
 800267c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b20      	cmp	r3, #32
 800268c:	d17c      	bne.n	8002788 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <HAL_UART_Transmit+0x2c>
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e075      	b.n	800278a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_UART_Transmit+0x3e>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e06e      	b.n	800278a <HAL_UART_Transmit+0x11c>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2221      	movs	r2, #33	; 0x21
 80026be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026c2:	f7fe fb91 	bl	8000de8 <HAL_GetTick>
 80026c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	88fa      	ldrh	r2, [r7, #6]
 80026cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	88fa      	ldrh	r2, [r7, #6]
 80026d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026dc:	d108      	bne.n	80026f0 <HAL_UART_Transmit+0x82>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d104      	bne.n	80026f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	e003      	b.n	80026f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002700:	e02a      	b.n	8002758 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2200      	movs	r2, #0
 800270a:	2180      	movs	r1, #128	; 0x80
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 faf9 	bl	8002d04 <UART_WaitOnFlagUntilTimeout>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e036      	b.n	800278a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10b      	bne.n	800273a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002730:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	3302      	adds	r3, #2
 8002736:	61bb      	str	r3, [r7, #24]
 8002738:	e007      	b.n	800274a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	781a      	ldrb	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	3301      	adds	r3, #1
 8002748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1cf      	bne.n	8002702 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2200      	movs	r2, #0
 800276a:	2140      	movs	r1, #64	; 0x40
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 fac9 	bl	8002d04 <UART_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e006      	b.n	800278a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	e000      	b.n	800278a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002788:	2302      	movs	r3, #2
  }
}
 800278a:	4618      	mov	r0, r3
 800278c:	3720      	adds	r7, #32
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b0ba      	sub	sp, #232	; 0xe8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80027d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10f      	bne.n	80027fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d009      	beq.n	80027fa <HAL_UART_IRQHandler+0x66>
 80027e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ea:	f003 0320 	and.w	r3, r3, #32
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fbd3 	bl	8002f9e <UART_Receive_IT>
      return;
 80027f8:	e256      	b.n	8002ca8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 80de 	beq.w	80029c0 <HAL_UART_IRQHandler+0x22c>
 8002804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d106      	bne.n	800281e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002814:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80d1 	beq.w	80029c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800281e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00b      	beq.n	8002842 <HAL_UART_IRQHandler+0xae>
 800282a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800282e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002832:	2b00      	cmp	r3, #0
 8002834:	d005      	beq.n	8002842 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f043 0201 	orr.w	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <HAL_UART_IRQHandler+0xd2>
 800284e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f043 0202 	orr.w	r2, r3, #2
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00b      	beq.n	800288a <HAL_UART_IRQHandler+0xf6>
 8002872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f043 0204 	orr.w	r2, r3, #4
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800288a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d011      	beq.n	80028ba <HAL_UART_IRQHandler+0x126>
 8002896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d105      	bne.n	80028ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d005      	beq.n	80028ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f043 0208 	orr.w	r2, r3, #8
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 81ed 	beq.w	8002c9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028c8:	f003 0320 	and.w	r3, r3, #32
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_UART_IRQHandler+0x14e>
 80028d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fb5e 	bl	8002f9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ec:	2b40      	cmp	r3, #64	; 0x40
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d103      	bne.n	800290e <HAL_UART_IRQHandler+0x17a>
 8002906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800290a:	2b00      	cmp	r3, #0
 800290c:	d04f      	beq.n	80029ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 fa66 	bl	8002de0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d141      	bne.n	80029a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	3314      	adds	r3, #20
 8002928:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002930:	e853 3f00 	ldrex	r3, [r3]
 8002934:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002938:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800293c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002940:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3314      	adds	r3, #20
 800294a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800294e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002952:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002956:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800295a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800295e:	e841 2300 	strex	r3, r2, [r1]
 8002962:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002966:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1d9      	bne.n	8002922 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002972:	2b00      	cmp	r3, #0
 8002974:	d013      	beq.n	800299e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	4a7d      	ldr	r2, [pc, #500]	; (8002b70 <HAL_UART_IRQHandler+0x3dc>)
 800297c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fb8e 	bl	80010a4 <HAL_DMA_Abort_IT>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d016      	beq.n	80029bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002998:	4610      	mov	r0, r2
 800299a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800299c:	e00e      	b.n	80029bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f99a 	bl	8002cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a4:	e00a      	b.n	80029bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f996 	bl	8002cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ac:	e006      	b.n	80029bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f992 	bl	8002cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80029ba:	e170      	b.n	8002c9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029bc:	bf00      	nop
    return;
 80029be:	e16e      	b.n	8002c9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	f040 814a 	bne.w	8002c5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 8143 	beq.w	8002c5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 813c 	beq.w	8002c5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a06:	2b40      	cmp	r3, #64	; 0x40
 8002a08:	f040 80b4 	bne.w	8002b74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8140 	beq.w	8002ca2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	f080 8139 	bcs.w	8002ca2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a42:	f000 8088 	beq.w	8002b56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	330c      	adds	r3, #12
 8002a4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a54:	e853 3f00 	ldrex	r3, [r3]
 8002a58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	330c      	adds	r3, #12
 8002a6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a82:	e841 2300 	strex	r3, r2, [r1]
 8002a86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1d9      	bne.n	8002a46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	3314      	adds	r3, #20
 8002a98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a9c:	e853 3f00 	ldrex	r3, [r3]
 8002aa0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	3314      	adds	r3, #20
 8002ab2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ab6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002aba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002abe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ac2:	e841 2300 	strex	r3, r2, [r1]
 8002ac6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1e1      	bne.n	8002a92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	3314      	adds	r3, #20
 8002ad4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ad8:	e853 3f00 	ldrex	r3, [r3]
 8002adc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	3314      	adds	r3, #20
 8002aee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002af2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002af4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002af8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002afa:	e841 2300 	strex	r3, r2, [r1]
 8002afe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1e3      	bne.n	8002ace <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	330c      	adds	r3, #12
 8002b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b1e:	e853 3f00 	ldrex	r3, [r3]
 8002b22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b26:	f023 0310 	bic.w	r3, r3, #16
 8002b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	330c      	adds	r3, #12
 8002b34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b38:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b40:	e841 2300 	strex	r3, r2, [r1]
 8002b44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e3      	bne.n	8002b14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe fa37 	bl	8000fc4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	4619      	mov	r1, r3
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f8c0 	bl	8002cec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b6c:	e099      	b.n	8002ca2 <HAL_UART_IRQHandler+0x50e>
 8002b6e:	bf00      	nop
 8002b70:	08002ea7 	.word	0x08002ea7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 808b 	beq.w	8002ca6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002b90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8086 	beq.w	8002ca6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	330c      	adds	r3, #12
 8002ba0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba4:	e853 3f00 	ldrex	r3, [r3]
 8002ba8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	330c      	adds	r3, #12
 8002bba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002bbe:	647a      	str	r2, [r7, #68]	; 0x44
 8002bc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bc6:	e841 2300 	strex	r3, r2, [r1]
 8002bca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1e3      	bne.n	8002b9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3314      	adds	r3, #20
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	e853 3f00 	ldrex	r3, [r3]
 8002be0:	623b      	str	r3, [r7, #32]
   return(result);
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	f023 0301 	bic.w	r3, r3, #1
 8002be8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3314      	adds	r3, #20
 8002bf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002bf6:	633a      	str	r2, [r7, #48]	; 0x30
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bfe:	e841 2300 	strex	r3, r2, [r1]
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1e3      	bne.n	8002bd2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	330c      	adds	r3, #12
 8002c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	e853 3f00 	ldrex	r3, [r3]
 8002c26:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f023 0310 	bic.w	r3, r3, #16
 8002c2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	330c      	adds	r3, #12
 8002c38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c3c:	61fa      	str	r2, [r7, #28]
 8002c3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c40:	69b9      	ldr	r1, [r7, #24]
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	e841 2300 	strex	r3, r2, [r1]
 8002c48:	617b      	str	r3, [r7, #20]
   return(result);
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1e3      	bne.n	8002c18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c54:	4619      	mov	r1, r3
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f848 	bl	8002cec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c5c:	e023      	b.n	8002ca6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d009      	beq.n	8002c7e <HAL_UART_IRQHandler+0x4ea>
 8002c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f929 	bl	8002ece <UART_Transmit_IT>
    return;
 8002c7c:	e014      	b.n	8002ca8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00e      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x514>
 8002c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f969 	bl	8002f6e <UART_EndTransmit_IT>
    return;
 8002c9c:	e004      	b.n	8002ca8 <HAL_UART_IRQHandler+0x514>
    return;
 8002c9e:	bf00      	nop
 8002ca0:	e002      	b.n	8002ca8 <HAL_UART_IRQHandler+0x514>
      return;
 8002ca2:	bf00      	nop
 8002ca4:	e000      	b.n	8002ca8 <HAL_UART_IRQHandler+0x514>
      return;
 8002ca6:	bf00      	nop
  }
}
 8002ca8:	37e8      	adds	r7, #232	; 0xe8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop

08002cb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b090      	sub	sp, #64	; 0x40
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	4613      	mov	r3, r2
 8002d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d14:	e050      	b.n	8002db8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1c:	d04c      	beq.n	8002db8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d007      	beq.n	8002d34 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d24:	f7fe f860 	bl	8000de8 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d241      	bcs.n	8002db8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	330c      	adds	r3, #12
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3e:	e853 3f00 	ldrex	r3, [r3]
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	330c      	adds	r3, #12
 8002d52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d54:	637a      	str	r2, [r7, #52]	; 0x34
 8002d56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d5c:	e841 2300 	strex	r3, r2, [r1]
 8002d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1e5      	bne.n	8002d34 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3314      	adds	r3, #20
 8002d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	e853 3f00 	ldrex	r3, [r3]
 8002d76:	613b      	str	r3, [r7, #16]
   return(result);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f023 0301 	bic.w	r3, r3, #1
 8002d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3314      	adds	r3, #20
 8002d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d88:	623a      	str	r2, [r7, #32]
 8002d8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	69f9      	ldr	r1, [r7, #28]
 8002d8e:	6a3a      	ldr	r2, [r7, #32]
 8002d90:	e841 2300 	strex	r3, r2, [r1]
 8002d94:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e5      	bne.n	8002d68 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e00f      	b.n	8002dd8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	bf0c      	ite	eq
 8002dc8:	2301      	moveq	r3, #1
 8002dca:	2300      	movne	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d09f      	beq.n	8002d16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3740      	adds	r7, #64	; 0x40
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b095      	sub	sp, #84	; 0x54
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	330c      	adds	r3, #12
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df2:	e853 3f00 	ldrex	r3, [r3]
 8002df6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	330c      	adds	r3, #12
 8002e06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e08:	643a      	str	r2, [r7, #64]	; 0x40
 8002e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e10:	e841 2300 	strex	r3, r2, [r1]
 8002e14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e5      	bne.n	8002de8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3314      	adds	r3, #20
 8002e22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	e853 3f00 	ldrex	r3, [r3]
 8002e2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f023 0301 	bic.w	r3, r3, #1
 8002e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3314      	adds	r3, #20
 8002e3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e44:	e841 2300 	strex	r3, r2, [r1]
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1e5      	bne.n	8002e1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d119      	bne.n	8002e8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	330c      	adds	r3, #12
 8002e5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	e853 3f00 	ldrex	r3, [r3]
 8002e66:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f023 0310 	bic.w	r3, r3, #16
 8002e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	330c      	adds	r3, #12
 8002e76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e78:	61ba      	str	r2, [r7, #24]
 8002e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7c:	6979      	ldr	r1, [r7, #20]
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	e841 2300 	strex	r3, r2, [r1]
 8002e84:	613b      	str	r3, [r7, #16]
   return(result);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e5      	bne.n	8002e58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e9a:	bf00      	nop
 8002e9c:	3754      	adds	r7, #84	; 0x54
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f7ff ff09 	bl	8002cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b085      	sub	sp, #20
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b21      	cmp	r3, #33	; 0x21
 8002ee0:	d13e      	bne.n	8002f60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eea:	d114      	bne.n	8002f16 <UART_Transmit_IT+0x48>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d110      	bne.n	8002f16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	1c9a      	adds	r2, r3, #2
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	621a      	str	r2, [r3, #32]
 8002f14:	e008      	b.n	8002f28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	1c59      	adds	r1, r3, #1
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6211      	str	r1, [r2, #32]
 8002f20:	781a      	ldrb	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	4619      	mov	r1, r3
 8002f36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10f      	bne.n	8002f5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	e000      	b.n	8002f62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f60:	2302      	movs	r3, #2
  }
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff fe8e 	bl	8002cb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b08c      	sub	sp, #48	; 0x30
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b22      	cmp	r3, #34	; 0x22
 8002fb0:	f040 80ab 	bne.w	800310a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fbc:	d117      	bne.n	8002fee <UART_Receive_IT+0x50>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d113      	bne.n	8002fee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe6:	1c9a      	adds	r2, r3, #2
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	629a      	str	r2, [r3, #40]	; 0x28
 8002fec:	e026      	b.n	800303c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003000:	d007      	beq.n	8003012 <UART_Receive_IT+0x74>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10a      	bne.n	8003020 <UART_Receive_IT+0x82>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	701a      	strb	r2, [r3, #0]
 800301e:	e008      	b.n	8003032 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800302c:	b2da      	uxtb	r2, r3
 800302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003030:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003040:	b29b      	uxth	r3, r3
 8003042:	3b01      	subs	r3, #1
 8003044:	b29b      	uxth	r3, r3
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4619      	mov	r1, r3
 800304a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800304c:	2b00      	cmp	r3, #0
 800304e:	d15a      	bne.n	8003106 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0220 	bic.w	r2, r2, #32
 800305e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800306e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	2b01      	cmp	r3, #1
 800308e:	d135      	bne.n	80030fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	330c      	adds	r3, #12
 800309c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	e853 3f00 	ldrex	r3, [r3]
 80030a4:	613b      	str	r3, [r7, #16]
   return(result);
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f023 0310 	bic.w	r3, r3, #16
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	330c      	adds	r3, #12
 80030b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b6:	623a      	str	r2, [r7, #32]
 80030b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	69f9      	ldr	r1, [r7, #28]
 80030bc:	6a3a      	ldr	r2, [r7, #32]
 80030be:	e841 2300 	strex	r3, r2, [r1]
 80030c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1e5      	bne.n	8003096 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d10a      	bne.n	80030ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030f2:	4619      	mov	r1, r3
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff fdf9 	bl	8002cec <HAL_UARTEx_RxEventCallback>
 80030fa:	e002      	b.n	8003102 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff fde1 	bl	8002cc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	e002      	b.n	800310c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	e000      	b.n	800310c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800310a:	2302      	movs	r3, #2
  }
}
 800310c:	4618      	mov	r0, r3
 800310e:	3730      	adds	r7, #48	; 0x30
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003118:	b0c0      	sub	sp, #256	; 0x100
 800311a:	af00      	add	r7, sp, #0
 800311c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800312c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003130:	68d9      	ldr	r1, [r3, #12]
 8003132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	ea40 0301 	orr.w	r3, r0, r1
 800313c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800313e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	431a      	orrs	r2, r3
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	431a      	orrs	r2, r3
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800316c:	f021 010c 	bic.w	r1, r1, #12
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800317a:	430b      	orrs	r3, r1
 800317c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800317e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800318a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318e:	6999      	ldr	r1, [r3, #24]
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	ea40 0301 	orr.w	r3, r0, r1
 800319a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	4b8f      	ldr	r3, [pc, #572]	; (80033e0 <UART_SetConfig+0x2cc>)
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d005      	beq.n	80031b4 <UART_SetConfig+0xa0>
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	4b8d      	ldr	r3, [pc, #564]	; (80033e4 <UART_SetConfig+0x2d0>)
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d104      	bne.n	80031be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031b4:	f7fe fa4c 	bl	8001650 <HAL_RCC_GetPCLK2Freq>
 80031b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031bc:	e003      	b.n	80031c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031be:	f7fe fa33 	bl	8001628 <HAL_RCC_GetPCLK1Freq>
 80031c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031d0:	f040 810c 	bne.w	80033ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031d8:	2200      	movs	r2, #0
 80031da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031e6:	4622      	mov	r2, r4
 80031e8:	462b      	mov	r3, r5
 80031ea:	1891      	adds	r1, r2, r2
 80031ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80031ee:	415b      	adcs	r3, r3
 80031f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031f6:	4621      	mov	r1, r4
 80031f8:	eb12 0801 	adds.w	r8, r2, r1
 80031fc:	4629      	mov	r1, r5
 80031fe:	eb43 0901 	adc.w	r9, r3, r1
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800320e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003216:	4690      	mov	r8, r2
 8003218:	4699      	mov	r9, r3
 800321a:	4623      	mov	r3, r4
 800321c:	eb18 0303 	adds.w	r3, r8, r3
 8003220:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003224:	462b      	mov	r3, r5
 8003226:	eb49 0303 	adc.w	r3, r9, r3
 800322a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800322e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800323a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800323e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003242:	460b      	mov	r3, r1
 8003244:	18db      	adds	r3, r3, r3
 8003246:	653b      	str	r3, [r7, #80]	; 0x50
 8003248:	4613      	mov	r3, r2
 800324a:	eb42 0303 	adc.w	r3, r2, r3
 800324e:	657b      	str	r3, [r7, #84]	; 0x54
 8003250:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003254:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003258:	f7fd f832 	bl	80002c0 <__aeabi_uldivmod>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4b61      	ldr	r3, [pc, #388]	; (80033e8 <UART_SetConfig+0x2d4>)
 8003262:	fba3 2302 	umull	r2, r3, r3, r2
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	011c      	lsls	r4, r3, #4
 800326a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800326e:	2200      	movs	r2, #0
 8003270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003274:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003278:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800327c:	4642      	mov	r2, r8
 800327e:	464b      	mov	r3, r9
 8003280:	1891      	adds	r1, r2, r2
 8003282:	64b9      	str	r1, [r7, #72]	; 0x48
 8003284:	415b      	adcs	r3, r3
 8003286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003288:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800328c:	4641      	mov	r1, r8
 800328e:	eb12 0a01 	adds.w	sl, r2, r1
 8003292:	4649      	mov	r1, r9
 8003294:	eb43 0b01 	adc.w	fp, r3, r1
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032ac:	4692      	mov	sl, r2
 80032ae:	469b      	mov	fp, r3
 80032b0:	4643      	mov	r3, r8
 80032b2:	eb1a 0303 	adds.w	r3, sl, r3
 80032b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032ba:	464b      	mov	r3, r9
 80032bc:	eb4b 0303 	adc.w	r3, fp, r3
 80032c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032d8:	460b      	mov	r3, r1
 80032da:	18db      	adds	r3, r3, r3
 80032dc:	643b      	str	r3, [r7, #64]	; 0x40
 80032de:	4613      	mov	r3, r2
 80032e0:	eb42 0303 	adc.w	r3, r2, r3
 80032e4:	647b      	str	r3, [r7, #68]	; 0x44
 80032e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032ee:	f7fc ffe7 	bl	80002c0 <__aeabi_uldivmod>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4611      	mov	r1, r2
 80032f8:	4b3b      	ldr	r3, [pc, #236]	; (80033e8 <UART_SetConfig+0x2d4>)
 80032fa:	fba3 2301 	umull	r2, r3, r3, r1
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	2264      	movs	r2, #100	; 0x64
 8003302:	fb02 f303 	mul.w	r3, r2, r3
 8003306:	1acb      	subs	r3, r1, r3
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800330e:	4b36      	ldr	r3, [pc, #216]	; (80033e8 <UART_SetConfig+0x2d4>)
 8003310:	fba3 2302 	umull	r2, r3, r3, r2
 8003314:	095b      	lsrs	r3, r3, #5
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800331c:	441c      	add	r4, r3
 800331e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003322:	2200      	movs	r2, #0
 8003324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003328:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800332c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003330:	4642      	mov	r2, r8
 8003332:	464b      	mov	r3, r9
 8003334:	1891      	adds	r1, r2, r2
 8003336:	63b9      	str	r1, [r7, #56]	; 0x38
 8003338:	415b      	adcs	r3, r3
 800333a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800333c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003340:	4641      	mov	r1, r8
 8003342:	1851      	adds	r1, r2, r1
 8003344:	6339      	str	r1, [r7, #48]	; 0x30
 8003346:	4649      	mov	r1, r9
 8003348:	414b      	adcs	r3, r1
 800334a:	637b      	str	r3, [r7, #52]	; 0x34
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003358:	4659      	mov	r1, fp
 800335a:	00cb      	lsls	r3, r1, #3
 800335c:	4651      	mov	r1, sl
 800335e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003362:	4651      	mov	r1, sl
 8003364:	00ca      	lsls	r2, r1, #3
 8003366:	4610      	mov	r0, r2
 8003368:	4619      	mov	r1, r3
 800336a:	4603      	mov	r3, r0
 800336c:	4642      	mov	r2, r8
 800336e:	189b      	adds	r3, r3, r2
 8003370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003374:	464b      	mov	r3, r9
 8003376:	460a      	mov	r2, r1
 8003378:	eb42 0303 	adc.w	r3, r2, r3
 800337c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800338c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003390:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003394:	460b      	mov	r3, r1
 8003396:	18db      	adds	r3, r3, r3
 8003398:	62bb      	str	r3, [r7, #40]	; 0x28
 800339a:	4613      	mov	r3, r2
 800339c:	eb42 0303 	adc.w	r3, r2, r3
 80033a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80033aa:	f7fc ff89 	bl	80002c0 <__aeabi_uldivmod>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <UART_SetConfig+0x2d4>)
 80033b4:	fba3 1302 	umull	r1, r3, r3, r2
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	2164      	movs	r1, #100	; 0x64
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	3332      	adds	r3, #50	; 0x32
 80033c6:	4a08      	ldr	r2, [pc, #32]	; (80033e8 <UART_SetConfig+0x2d4>)
 80033c8:	fba2 2303 	umull	r2, r3, r2, r3
 80033cc:	095b      	lsrs	r3, r3, #5
 80033ce:	f003 0207 	and.w	r2, r3, #7
 80033d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4422      	add	r2, r4
 80033da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033dc:	e105      	b.n	80035ea <UART_SetConfig+0x4d6>
 80033de:	bf00      	nop
 80033e0:	40011000 	.word	0x40011000
 80033e4:	40011400 	.word	0x40011400
 80033e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033f0:	2200      	movs	r2, #0
 80033f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033fe:	4642      	mov	r2, r8
 8003400:	464b      	mov	r3, r9
 8003402:	1891      	adds	r1, r2, r2
 8003404:	6239      	str	r1, [r7, #32]
 8003406:	415b      	adcs	r3, r3
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
 800340a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800340e:	4641      	mov	r1, r8
 8003410:	1854      	adds	r4, r2, r1
 8003412:	4649      	mov	r1, r9
 8003414:	eb43 0501 	adc.w	r5, r3, r1
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	00eb      	lsls	r3, r5, #3
 8003422:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003426:	00e2      	lsls	r2, r4, #3
 8003428:	4614      	mov	r4, r2
 800342a:	461d      	mov	r5, r3
 800342c:	4643      	mov	r3, r8
 800342e:	18e3      	adds	r3, r4, r3
 8003430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003434:	464b      	mov	r3, r9
 8003436:	eb45 0303 	adc.w	r3, r5, r3
 800343a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800344a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800345a:	4629      	mov	r1, r5
 800345c:	008b      	lsls	r3, r1, #2
 800345e:	4621      	mov	r1, r4
 8003460:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003464:	4621      	mov	r1, r4
 8003466:	008a      	lsls	r2, r1, #2
 8003468:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800346c:	f7fc ff28 	bl	80002c0 <__aeabi_uldivmod>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4b60      	ldr	r3, [pc, #384]	; (80035f8 <UART_SetConfig+0x4e4>)
 8003476:	fba3 2302 	umull	r2, r3, r3, r2
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	011c      	lsls	r4, r3, #4
 800347e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003482:	2200      	movs	r2, #0
 8003484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003488:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800348c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003490:	4642      	mov	r2, r8
 8003492:	464b      	mov	r3, r9
 8003494:	1891      	adds	r1, r2, r2
 8003496:	61b9      	str	r1, [r7, #24]
 8003498:	415b      	adcs	r3, r3
 800349a:	61fb      	str	r3, [r7, #28]
 800349c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034a0:	4641      	mov	r1, r8
 80034a2:	1851      	adds	r1, r2, r1
 80034a4:	6139      	str	r1, [r7, #16]
 80034a6:	4649      	mov	r1, r9
 80034a8:	414b      	adcs	r3, r1
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034b8:	4659      	mov	r1, fp
 80034ba:	00cb      	lsls	r3, r1, #3
 80034bc:	4651      	mov	r1, sl
 80034be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034c2:	4651      	mov	r1, sl
 80034c4:	00ca      	lsls	r2, r1, #3
 80034c6:	4610      	mov	r0, r2
 80034c8:	4619      	mov	r1, r3
 80034ca:	4603      	mov	r3, r0
 80034cc:	4642      	mov	r2, r8
 80034ce:	189b      	adds	r3, r3, r2
 80034d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034d4:	464b      	mov	r3, r9
 80034d6:	460a      	mov	r2, r1
 80034d8:	eb42 0303 	adc.w	r3, r2, r3
 80034dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80034ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034f8:	4649      	mov	r1, r9
 80034fa:	008b      	lsls	r3, r1, #2
 80034fc:	4641      	mov	r1, r8
 80034fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003502:	4641      	mov	r1, r8
 8003504:	008a      	lsls	r2, r1, #2
 8003506:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800350a:	f7fc fed9 	bl	80002c0 <__aeabi_uldivmod>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4b39      	ldr	r3, [pc, #228]	; (80035f8 <UART_SetConfig+0x4e4>)
 8003514:	fba3 1302 	umull	r1, r3, r3, r2
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	2164      	movs	r1, #100	; 0x64
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	3332      	adds	r3, #50	; 0x32
 8003526:	4a34      	ldr	r2, [pc, #208]	; (80035f8 <UART_SetConfig+0x4e4>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003532:	441c      	add	r4, r3
 8003534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003538:	2200      	movs	r2, #0
 800353a:	673b      	str	r3, [r7, #112]	; 0x70
 800353c:	677a      	str	r2, [r7, #116]	; 0x74
 800353e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003542:	4642      	mov	r2, r8
 8003544:	464b      	mov	r3, r9
 8003546:	1891      	adds	r1, r2, r2
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	415b      	adcs	r3, r3
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003552:	4641      	mov	r1, r8
 8003554:	1851      	adds	r1, r2, r1
 8003556:	6039      	str	r1, [r7, #0]
 8003558:	4649      	mov	r1, r9
 800355a:	414b      	adcs	r3, r1
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800356a:	4659      	mov	r1, fp
 800356c:	00cb      	lsls	r3, r1, #3
 800356e:	4651      	mov	r1, sl
 8003570:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003574:	4651      	mov	r1, sl
 8003576:	00ca      	lsls	r2, r1, #3
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	4603      	mov	r3, r0
 800357e:	4642      	mov	r2, r8
 8003580:	189b      	adds	r3, r3, r2
 8003582:	66bb      	str	r3, [r7, #104]	; 0x68
 8003584:	464b      	mov	r3, r9
 8003586:	460a      	mov	r2, r1
 8003588:	eb42 0303 	adc.w	r3, r2, r3
 800358c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800358e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	663b      	str	r3, [r7, #96]	; 0x60
 8003598:	667a      	str	r2, [r7, #100]	; 0x64
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80035a6:	4649      	mov	r1, r9
 80035a8:	008b      	lsls	r3, r1, #2
 80035aa:	4641      	mov	r1, r8
 80035ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035b0:	4641      	mov	r1, r8
 80035b2:	008a      	lsls	r2, r1, #2
 80035b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035b8:	f7fc fe82 	bl	80002c0 <__aeabi_uldivmod>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <UART_SetConfig+0x4e4>)
 80035c2:	fba3 1302 	umull	r1, r3, r3, r2
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	2164      	movs	r1, #100	; 0x64
 80035ca:	fb01 f303 	mul.w	r3, r1, r3
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	3332      	adds	r3, #50	; 0x32
 80035d4:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <UART_SetConfig+0x4e4>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	f003 020f 	and.w	r2, r3, #15
 80035e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4422      	add	r2, r4
 80035e8:	609a      	str	r2, [r3, #8]
}
 80035ea:	bf00      	nop
 80035ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035f0:	46bd      	mov	sp, r7
 80035f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035f6:	bf00      	nop
 80035f8:	51eb851f 	.word	0x51eb851f

080035fc <__NVIC_SetPriority>:
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	6039      	str	r1, [r7, #0]
 8003606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360c:	2b00      	cmp	r3, #0
 800360e:	db0a      	blt.n	8003626 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	490c      	ldr	r1, [pc, #48]	; (8003648 <__NVIC_SetPriority+0x4c>)
 8003616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361a:	0112      	lsls	r2, r2, #4
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	440b      	add	r3, r1
 8003620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003624:	e00a      	b.n	800363c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	b2da      	uxtb	r2, r3
 800362a:	4908      	ldr	r1, [pc, #32]	; (800364c <__NVIC_SetPriority+0x50>)
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	3b04      	subs	r3, #4
 8003634:	0112      	lsls	r2, r2, #4
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	440b      	add	r3, r1
 800363a:	761a      	strb	r2, [r3, #24]
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000e100 	.word	0xe000e100
 800364c:	e000ed00 	.word	0xe000ed00

08003650 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <SysTick_Handler+0x1c>)
 8003656:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003658:	f002 f93e 	bl	80058d8 <xTaskGetSchedulerState>
 800365c:	4603      	mov	r3, r0
 800365e:	2b01      	cmp	r3, #1
 8003660:	d001      	beq.n	8003666 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003662:	f003 f821 	bl	80066a8 <xPortSysTickHandler>
  }
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	e000e010 	.word	0xe000e010

08003670 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003674:	2100      	movs	r1, #0
 8003676:	f06f 0004 	mvn.w	r0, #4
 800367a:	f7ff ffbf 	bl	80035fc <__NVIC_SetPriority>
#endif
}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800368a:	f3ef 8305 	mrs	r3, IPSR
 800368e:	603b      	str	r3, [r7, #0]
  return(result);
 8003690:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003696:	f06f 0305 	mvn.w	r3, #5
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	e00c      	b.n	80036b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800369e:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <osKernelInitialize+0x44>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d105      	bne.n	80036b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80036a6:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <osKernelInitialize+0x44>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	607b      	str	r3, [r7, #4]
 80036b0:	e002      	b.n	80036b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80036b2:	f04f 33ff 	mov.w	r3, #4294967295
 80036b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80036b8:	687b      	ldr	r3, [r7, #4]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	20000178 	.word	0x20000178

080036cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036d2:	f3ef 8305 	mrs	r3, IPSR
 80036d6:	603b      	str	r3, [r7, #0]
  return(result);
 80036d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80036de:	f06f 0305 	mvn.w	r3, #5
 80036e2:	607b      	str	r3, [r7, #4]
 80036e4:	e010      	b.n	8003708 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80036e6:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <osKernelStart+0x48>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d109      	bne.n	8003702 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80036ee:	f7ff ffbf 	bl	8003670 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80036f2:	4b08      	ldr	r3, [pc, #32]	; (8003714 <osKernelStart+0x48>)
 80036f4:	2202      	movs	r2, #2
 80036f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80036f8:	f001 fca6 	bl	8005048 <vTaskStartScheduler>
      stat = osOK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	607b      	str	r3, [r7, #4]
 8003700:	e002      	b.n	8003708 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003702:	f04f 33ff 	mov.w	r3, #4294967295
 8003706:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003708:	687b      	ldr	r3, [r7, #4]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000178 	.word	0x20000178

08003718 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003718:	b580      	push	{r7, lr}
 800371a:	b08e      	sub	sp, #56	; 0x38
 800371c:	af04      	add	r7, sp, #16
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003724:	2300      	movs	r3, #0
 8003726:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003728:	f3ef 8305 	mrs	r3, IPSR
 800372c:	617b      	str	r3, [r7, #20]
  return(result);
 800372e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003730:	2b00      	cmp	r3, #0
 8003732:	d17e      	bne.n	8003832 <osThreadNew+0x11a>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d07b      	beq.n	8003832 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800373e:	2318      	movs	r3, #24
 8003740:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003742:	2300      	movs	r3, #0
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003746:	f04f 33ff 	mov.w	r3, #4294967295
 800374a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d045      	beq.n	80037de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <osThreadNew+0x48>
        name = attr->name;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <osThreadNew+0x6e>
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b38      	cmp	r3, #56	; 0x38
 8003778:	d805      	bhi.n	8003786 <osThreadNew+0x6e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <osThreadNew+0x72>
        return (NULL);
 8003786:	2300      	movs	r3, #0
 8003788:	e054      	b.n	8003834 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	089b      	lsrs	r3, r3, #2
 8003798:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00e      	beq.n	80037c0 <osThreadNew+0xa8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	2b5b      	cmp	r3, #91	; 0x5b
 80037a8:	d90a      	bls.n	80037c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d006      	beq.n	80037c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <osThreadNew+0xa8>
        mem = 1;
 80037ba:	2301      	movs	r3, #1
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	e010      	b.n	80037e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10c      	bne.n	80037e2 <osThreadNew+0xca>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d108      	bne.n	80037e2 <osThreadNew+0xca>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d104      	bne.n	80037e2 <osThreadNew+0xca>
          mem = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	61bb      	str	r3, [r7, #24]
 80037dc:	e001      	b.n	80037e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d110      	bne.n	800380a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037f0:	9202      	str	r2, [sp, #8]
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	6a3a      	ldr	r2, [r7, #32]
 80037fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f001 fa4c 	bl	8004c9c <xTaskCreateStatic>
 8003804:	4603      	mov	r3, r0
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	e013      	b.n	8003832 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d110      	bne.n	8003832 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	b29a      	uxth	r2, r3
 8003814:	f107 0310 	add.w	r3, r7, #16
 8003818:	9301      	str	r3, [sp, #4]
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f001 fa97 	bl	8004d56 <xTaskCreate>
 8003828:	4603      	mov	r3, r0
 800382a:	2b01      	cmp	r3, #1
 800382c:	d001      	beq.n	8003832 <osThreadNew+0x11a>
            hTask = NULL;
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003832:	693b      	ldr	r3, [r7, #16]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3728      	adds	r7, #40	; 0x28
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003844:	f3ef 8305 	mrs	r3, IPSR
 8003848:	60bb      	str	r3, [r7, #8]
  return(result);
 800384a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <osDelay+0x1c>
    stat = osErrorISR;
 8003850:	f06f 0305 	mvn.w	r3, #5
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	e007      	b.n	8003868 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f001 fbbc 	bl	8004fe0 <vTaskDelay>
    }
  }

  return (stat);
 8003868:	68fb      	ldr	r3, [r7, #12]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003872:	b580      	push	{r7, lr}
 8003874:	b08a      	sub	sp, #40	; 0x28
 8003876:	af02      	add	r7, sp, #8
 8003878:	60f8      	str	r0, [r7, #12]
 800387a:	60b9      	str	r1, [r7, #8]
 800387c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003882:	f3ef 8305 	mrs	r3, IPSR
 8003886:	613b      	str	r3, [r7, #16]
  return(result);
 8003888:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800388a:	2b00      	cmp	r3, #0
 800388c:	d175      	bne.n	800397a <osSemaphoreNew+0x108>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d072      	beq.n	800397a <osSemaphoreNew+0x108>
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	429a      	cmp	r2, r3
 800389a:	d86e      	bhi.n	800397a <osSemaphoreNew+0x108>
    mem = -1;
 800389c:	f04f 33ff 	mov.w	r3, #4294967295
 80038a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d015      	beq.n	80038d4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d006      	beq.n	80038be <osSemaphoreNew+0x4c>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b4f      	cmp	r3, #79	; 0x4f
 80038b6:	d902      	bls.n	80038be <osSemaphoreNew+0x4c>
        mem = 1;
 80038b8:	2301      	movs	r3, #1
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	e00c      	b.n	80038d8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d108      	bne.n	80038d8 <osSemaphoreNew+0x66>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d104      	bne.n	80038d8 <osSemaphoreNew+0x66>
          mem = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61bb      	str	r3, [r7, #24]
 80038d2:	e001      	b.n	80038d8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d04c      	beq.n	800397a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d128      	bne.n	8003938 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d10a      	bne.n	8003902 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2203      	movs	r2, #3
 80038f2:	9200      	str	r2, [sp, #0]
 80038f4:	2200      	movs	r2, #0
 80038f6:	2100      	movs	r1, #0
 80038f8:	2001      	movs	r0, #1
 80038fa:	f000 fa29 	bl	8003d50 <xQueueGenericCreateStatic>
 80038fe:	61f8      	str	r0, [r7, #28]
 8003900:	e005      	b.n	800390e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003902:	2203      	movs	r2, #3
 8003904:	2100      	movs	r1, #0
 8003906:	2001      	movs	r0, #1
 8003908:	f000 fa9a 	bl	8003e40 <xQueueGenericCreate>
 800390c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d022      	beq.n	800395a <osSemaphoreNew+0xe8>
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d01f      	beq.n	800395a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800391a:	2300      	movs	r3, #0
 800391c:	2200      	movs	r2, #0
 800391e:	2100      	movs	r1, #0
 8003920:	69f8      	ldr	r0, [r7, #28]
 8003922:	f000 fb55 	bl	8003fd0 <xQueueGenericSend>
 8003926:	4603      	mov	r3, r0
 8003928:	2b01      	cmp	r3, #1
 800392a:	d016      	beq.n	800395a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800392c:	69f8      	ldr	r0, [r7, #28]
 800392e:	f000 ffe1 	bl	80048f4 <vQueueDelete>
            hSemaphore = NULL;
 8003932:	2300      	movs	r3, #0
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	e010      	b.n	800395a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d108      	bne.n	8003950 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	461a      	mov	r2, r3
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 fad7 	bl	8003efa <xQueueCreateCountingSemaphoreStatic>
 800394c:	61f8      	str	r0, [r7, #28]
 800394e:	e004      	b.n	800395a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 fb08 	bl	8003f68 <xQueueCreateCountingSemaphore>
 8003958:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00c      	beq.n	800397a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <osSemaphoreNew+0xfc>
          name = attr->name;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	e001      	b.n	8003972 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003972:	6979      	ldr	r1, [r7, #20]
 8003974:	69f8      	ldr	r0, [r7, #28]
 8003976:	f001 f909 	bl	8004b8c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800397a:	69fb      	ldr	r3, [r7, #28]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3720      	adds	r7, #32
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d103      	bne.n	80039a4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800399c:	f06f 0303 	mvn.w	r3, #3
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	e039      	b.n	8003a18 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039a4:	f3ef 8305 	mrs	r3, IPSR
 80039a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80039aa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d022      	beq.n	80039f6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80039b6:	f06f 0303 	mvn.w	r3, #3
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	e02c      	b.n	8003a18 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80039be:	2300      	movs	r3, #0
 80039c0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80039c2:	f107 0308 	add.w	r3, r7, #8
 80039c6:	461a      	mov	r2, r3
 80039c8:	2100      	movs	r1, #0
 80039ca:	6938      	ldr	r0, [r7, #16]
 80039cc:	f000 ff12 	bl	80047f4 <xQueueReceiveFromISR>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d003      	beq.n	80039de <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80039d6:	f06f 0302 	mvn.w	r3, #2
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	e01c      	b.n	8003a18 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d019      	beq.n	8003a18 <osSemaphoreAcquire+0x94>
 80039e4:	4b0f      	ldr	r3, [pc, #60]	; (8003a24 <osSemaphoreAcquire+0xa0>)
 80039e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	e010      	b.n	8003a18 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80039f6:	6839      	ldr	r1, [r7, #0]
 80039f8:	6938      	ldr	r0, [r7, #16]
 80039fa:	f000 fdef 	bl	80045dc <xQueueSemaphoreTake>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d009      	beq.n	8003a18 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003a0a:	f06f 0301 	mvn.w	r3, #1
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	e002      	b.n	8003a18 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003a12:	f06f 0302 	mvn.w	r3, #2
 8003a16:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003a18:	697b      	ldr	r3, [r7, #20]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	e000ed04 	.word	0xe000ed04

08003a28 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d103      	bne.n	8003a46 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003a3e:	f06f 0303 	mvn.w	r3, #3
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	e02c      	b.n	8003aa0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a46:	f3ef 8305 	mrs	r3, IPSR
 8003a4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d01a      	beq.n	8003a88 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003a56:	f107 0308 	add.w	r3, r7, #8
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	6938      	ldr	r0, [r7, #16]
 8003a5e:	f000 fc50 	bl	8004302 <xQueueGiveFromISR>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d003      	beq.n	8003a70 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003a68:	f06f 0302 	mvn.w	r3, #2
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	e017      	b.n	8003aa0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d014      	beq.n	8003aa0 <osSemaphoreRelease+0x78>
 8003a76:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <osSemaphoreRelease+0x84>)
 8003a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	e00b      	b.n	8003aa0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003a88:	2300      	movs	r3, #0
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	6938      	ldr	r0, [r7, #16]
 8003a90:	f000 fa9e 	bl	8003fd0 <xQueueGenericSend>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d002      	beq.n	8003aa0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003a9a:	f06f 0302 	mvn.w	r3, #2
 8003a9e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003aa0:	697b      	ldr	r3, [r7, #20]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	e000ed04 	.word	0xe000ed04

08003ab0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a07      	ldr	r2, [pc, #28]	; (8003adc <vApplicationGetIdleTaskMemory+0x2c>)
 8003ac0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	4a06      	ldr	r2, [pc, #24]	; (8003ae0 <vApplicationGetIdleTaskMemory+0x30>)
 8003ac6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2280      	movs	r2, #128	; 0x80
 8003acc:	601a      	str	r2, [r3, #0]
}
 8003ace:	bf00      	nop
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	2000017c 	.word	0x2000017c
 8003ae0:	200001d8 	.word	0x200001d8

08003ae4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a07      	ldr	r2, [pc, #28]	; (8003b10 <vApplicationGetTimerTaskMemory+0x2c>)
 8003af4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	4a06      	ldr	r2, [pc, #24]	; (8003b14 <vApplicationGetTimerTaskMemory+0x30>)
 8003afa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b02:	601a      	str	r2, [r3, #0]
}
 8003b04:	bf00      	nop
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	200003d8 	.word	0x200003d8
 8003b14:	20000434 	.word	0x20000434

08003b18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f103 0208 	add.w	r2, r3, #8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f103 0208 	add.w	r2, r3, #8
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f103 0208 	add.w	r2, r3, #8
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b72:	b480      	push	{r7}
 8003b74:	b085      	sub	sp, #20
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	601a      	str	r2, [r3, #0]
}
 8003bae:	bf00      	nop
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b085      	sub	sp, #20
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d103      	bne.n	8003bda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	e00c      	b.n	8003bf4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3308      	adds	r3, #8
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	e002      	b.n	8003be8 <vListInsert+0x2e>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d2f6      	bcs.n	8003be2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	601a      	str	r2, [r3, #0]
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6892      	ldr	r2, [r2, #8]
 8003c42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6852      	ldr	r2, [r2, #4]
 8003c4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d103      	bne.n	8003c60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	1e5a      	subs	r2, r3, #1
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ca6:	bf00      	nop
 8003ca8:	e7fe      	b.n	8003ca8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003caa:	f002 fc6b 	bl	8006584 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb6:	68f9      	ldr	r1, [r7, #12]
 8003cb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003cba:	fb01 f303 	mul.w	r3, r1, r3
 8003cbe:	441a      	add	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	68f9      	ldr	r1, [r7, #12]
 8003cde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ce0:	fb01 f303 	mul.w	r3, r1, r3
 8003ce4:	441a      	add	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	22ff      	movs	r2, #255	; 0xff
 8003cee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	22ff      	movs	r2, #255	; 0xff
 8003cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d114      	bne.n	8003d2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01a      	beq.n	8003d3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	3310      	adds	r3, #16
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f001 fc25 	bl	800555c <xTaskRemoveFromEventList>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d012      	beq.n	8003d3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d18:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <xQueueGenericReset+0xcc>)
 8003d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	e009      	b.n	8003d3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3310      	adds	r3, #16
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff fef2 	bl	8003b18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	3324      	adds	r3, #36	; 0x24
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff feed 	bl	8003b18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d3e:	f002 fc51 	bl	80065e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d42:	2301      	movs	r3, #1
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	e000ed04 	.word	0xe000ed04

08003d50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08e      	sub	sp, #56	; 0x38
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10a      	bne.n	8003d7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d76:	bf00      	nop
 8003d78:	e7fe      	b.n	8003d78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10a      	bne.n	8003d96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d92:	bf00      	nop
 8003d94:	e7fe      	b.n	8003d94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <xQueueGenericCreateStatic+0x52>
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <xQueueGenericCreateStatic+0x56>
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <xQueueGenericCreateStatic+0x58>
 8003da6:	2300      	movs	r3, #0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10a      	bne.n	8003dc2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	623b      	str	r3, [r7, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	e7fe      	b.n	8003dc0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d102      	bne.n	8003dce <xQueueGenericCreateStatic+0x7e>
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <xQueueGenericCreateStatic+0x82>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <xQueueGenericCreateStatic+0x84>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10a      	bne.n	8003dee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	61fb      	str	r3, [r7, #28]
}
 8003dea:	bf00      	nop
 8003dec:	e7fe      	b.n	8003dec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003dee:	2350      	movs	r3, #80	; 0x50
 8003df0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2b50      	cmp	r3, #80	; 0x50
 8003df6:	d00a      	beq.n	8003e0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfc:	f383 8811 	msr	BASEPRI, r3
 8003e00:	f3bf 8f6f 	isb	sy
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	61bb      	str	r3, [r7, #24]
}
 8003e0a:	bf00      	nop
 8003e0c:	e7fe      	b.n	8003e0c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e0e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00d      	beq.n	8003e36 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f83f 	bl	8003eb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3730      	adds	r7, #48	; 0x30
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08a      	sub	sp, #40	; 0x28
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10a      	bne.n	8003e6a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	613b      	str	r3, [r7, #16]
}
 8003e66:	bf00      	nop
 8003e68:	e7fe      	b.n	8003e68 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	fb02 f303 	mul.w	r3, r2, r3
 8003e72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	3350      	adds	r3, #80	; 0x50
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f002 fca5 	bl	80067c8 <pvPortMalloc>
 8003e7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d011      	beq.n	8003eaa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	3350      	adds	r3, #80	; 0x50
 8003e8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e98:	79fa      	ldrb	r2, [r7, #7]
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 f805 	bl	8003eb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003eaa:	69bb      	ldr	r3, [r7, #24]
	}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3720      	adds	r7, #32
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d103      	bne.n	8003ed0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	e002      	b.n	8003ed6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	69b8      	ldr	r0, [r7, #24]
 8003ee6:	f7ff fecb 	bl	8003c80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	78fa      	ldrb	r2, [r7, #3]
 8003eee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ef2:	bf00      	nop
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b08a      	sub	sp, #40	; 0x28
 8003efe:	af02      	add	r7, sp, #8
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	61bb      	str	r3, [r7, #24]
}
 8003f1e:	bf00      	nop
 8003f20:	e7fe      	b.n	8003f20 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d90a      	bls.n	8003f40 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8003f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	617b      	str	r3, [r7, #20]
}
 8003f3c:	bf00      	nop
 8003f3e:	e7fe      	b.n	8003f3e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003f40:	2302      	movs	r3, #2
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	2100      	movs	r1, #0
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7ff ff00 	bl	8003d50 <xQueueGenericCreateStatic>
 8003f50:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003f5e:	69fb      	ldr	r3, [r7, #28]
	}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3720      	adds	r7, #32
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7c:	f383 8811 	msr	BASEPRI, r3
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	613b      	str	r3, [r7, #16]
}
 8003f8a:	bf00      	nop
 8003f8c:	e7fe      	b.n	8003f8c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d90a      	bls.n	8003fac <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	60fb      	str	r3, [r7, #12]
}
 8003fa8:	bf00      	nop
 8003faa:	e7fe      	b.n	8003faa <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003fac:	2202      	movs	r2, #2
 8003fae:	2100      	movs	r1, #0
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff ff45 	bl	8003e40 <xQueueGenericCreate>
 8003fb6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003fc4:	697b      	ldr	r3, [r7, #20]
	}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08e      	sub	sp, #56	; 0x38
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10a      	bne.n	8004002 <xQueueGenericSend+0x32>
	__asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ffe:	bf00      	nop
 8004000:	e7fe      	b.n	8004000 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d103      	bne.n	8004010 <xQueueGenericSend+0x40>
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <xQueueGenericSend+0x44>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <xQueueGenericSend+0x46>
 8004014:	2300      	movs	r3, #0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10a      	bne.n	8004030 <xQueueGenericSend+0x60>
	__asm volatile
 800401a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800402c:	bf00      	nop
 800402e:	e7fe      	b.n	800402e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d103      	bne.n	800403e <xQueueGenericSend+0x6e>
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <xQueueGenericSend+0x72>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <xQueueGenericSend+0x74>
 8004042:	2300      	movs	r3, #0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10a      	bne.n	800405e <xQueueGenericSend+0x8e>
	__asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	623b      	str	r3, [r7, #32]
}
 800405a:	bf00      	nop
 800405c:	e7fe      	b.n	800405c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800405e:	f001 fc3b 	bl	80058d8 <xTaskGetSchedulerState>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d102      	bne.n	800406e <xQueueGenericSend+0x9e>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <xQueueGenericSend+0xa2>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <xQueueGenericSend+0xa4>
 8004072:	2300      	movs	r3, #0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10a      	bne.n	800408e <xQueueGenericSend+0xbe>
	__asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	61fb      	str	r3, [r7, #28]
}
 800408a:	bf00      	nop
 800408c:	e7fe      	b.n	800408c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800408e:	f002 fa79 	bl	8006584 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409a:	429a      	cmp	r2, r3
 800409c:	d302      	bcc.n	80040a4 <xQueueGenericSend+0xd4>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d129      	bne.n	80040f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040aa:	f000 fc5e 	bl	800496a <prvCopyDataToQueue>
 80040ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d010      	beq.n	80040da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ba:	3324      	adds	r3, #36	; 0x24
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 fa4d 	bl	800555c <xTaskRemoveFromEventList>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d013      	beq.n	80040f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80040c8:	4b3f      	ldr	r3, [pc, #252]	; (80041c8 <xQueueGenericSend+0x1f8>)
 80040ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	e00a      	b.n	80040f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80040da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d007      	beq.n	80040f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80040e0:	4b39      	ldr	r3, [pc, #228]	; (80041c8 <xQueueGenericSend+0x1f8>)
 80040e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80040f0:	f002 fa78 	bl	80065e4 <vPortExitCritical>
				return pdPASS;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e063      	b.n	80041c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d103      	bne.n	8004106 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040fe:	f002 fa71 	bl	80065e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004102:	2300      	movs	r3, #0
 8004104:	e05c      	b.n	80041c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004108:	2b00      	cmp	r3, #0
 800410a:	d106      	bne.n	800411a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800410c:	f107 0314 	add.w	r3, r7, #20
 8004110:	4618      	mov	r0, r3
 8004112:	f001 fa87 	bl	8005624 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004116:	2301      	movs	r3, #1
 8004118:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800411a:	f002 fa63 	bl	80065e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800411e:	f000 fff9 	bl	8005114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004122:	f002 fa2f 	bl	8006584 <vPortEnterCritical>
 8004126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004128:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800412c:	b25b      	sxtb	r3, r3
 800412e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004132:	d103      	bne.n	800413c <xQueueGenericSend+0x16c>
 8004134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004142:	b25b      	sxtb	r3, r3
 8004144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004148:	d103      	bne.n	8004152 <xQueueGenericSend+0x182>
 800414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004152:	f002 fa47 	bl	80065e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004156:	1d3a      	adds	r2, r7, #4
 8004158:	f107 0314 	add.w	r3, r7, #20
 800415c:	4611      	mov	r1, r2
 800415e:	4618      	mov	r0, r3
 8004160:	f001 fa76 	bl	8005650 <xTaskCheckForTimeOut>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d124      	bne.n	80041b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800416a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800416c:	f000 fcf5 	bl	8004b5a <prvIsQueueFull>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d018      	beq.n	80041a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004178:	3310      	adds	r3, #16
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	4611      	mov	r1, r2
 800417e:	4618      	mov	r0, r3
 8004180:	f001 f99c 	bl	80054bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004186:	f000 fc80 	bl	8004a8a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800418a:	f000 ffd1 	bl	8005130 <xTaskResumeAll>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	f47f af7c 	bne.w	800408e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004196:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <xQueueGenericSend+0x1f8>)
 8004198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	e772      	b.n	800408e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80041a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041aa:	f000 fc6e 	bl	8004a8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041ae:	f000 ffbf 	bl	8005130 <xTaskResumeAll>
 80041b2:	e76c      	b.n	800408e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80041b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041b6:	f000 fc68 	bl	8004a8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041ba:	f000 ffb9 	bl	8005130 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80041be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3738      	adds	r7, #56	; 0x38
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	e000ed04 	.word	0xe000ed04

080041cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b090      	sub	sp, #64	; 0x40
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80041de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041f6:	bf00      	nop
 80041f8:	e7fe      	b.n	80041f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d103      	bne.n	8004208 <xQueueGenericSendFromISR+0x3c>
 8004200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <xQueueGenericSendFromISR+0x40>
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <xQueueGenericSendFromISR+0x42>
 800420c:	2300      	movs	r3, #0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004224:	bf00      	nop
 8004226:	e7fe      	b.n	8004226 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d103      	bne.n	8004236 <xQueueGenericSendFromISR+0x6a>
 800422e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <xQueueGenericSendFromISR+0x6e>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <xQueueGenericSendFromISR+0x70>
 800423a:	2300      	movs	r3, #0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	623b      	str	r3, [r7, #32]
}
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004256:	f002 fa77 	bl	8006748 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800425a:	f3ef 8211 	mrs	r2, BASEPRI
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	61fa      	str	r2, [r7, #28]
 8004270:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004272:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004274:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800427a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427e:	429a      	cmp	r2, r3
 8004280:	d302      	bcc.n	8004288 <xQueueGenericSendFromISR+0xbc>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d12f      	bne.n	80042e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800428e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004296:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	68b9      	ldr	r1, [r7, #8]
 800429c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800429e:	f000 fb64 	bl	800496a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80042a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042aa:	d112      	bne.n	80042d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d016      	beq.n	80042e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b6:	3324      	adds	r3, #36	; 0x24
 80042b8:	4618      	mov	r0, r3
 80042ba:	f001 f94f 	bl	800555c <xTaskRemoveFromEventList>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00e      	beq.n	80042e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00b      	beq.n	80042e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	e007      	b.n	80042e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80042d6:	3301      	adds	r3, #1
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	b25a      	sxtb	r2, r3
 80042dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80042e2:	2301      	movs	r3, #1
 80042e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80042e6:	e001      	b.n	80042ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80042f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3740      	adds	r7, #64	; 0x40
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b08e      	sub	sp, #56	; 0x38
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10a      	bne.n	800432c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	623b      	str	r3, [r7, #32]
}
 8004328:	bf00      	nop
 800432a:	e7fe      	b.n	800432a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <xQueueGiveFromISR+0x48>
	__asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	61fb      	str	r3, [r7, #28]
}
 8004346:	bf00      	nop
 8004348:	e7fe      	b.n	8004348 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d103      	bne.n	800435a <xQueueGiveFromISR+0x58>
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <xQueueGiveFromISR+0x5c>
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <xQueueGiveFromISR+0x5e>
 800435e:	2300      	movs	r3, #0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10a      	bne.n	800437a <xQueueGiveFromISR+0x78>
	__asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	61bb      	str	r3, [r7, #24]
}
 8004376:	bf00      	nop
 8004378:	e7fe      	b.n	8004378 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800437a:	f002 f9e5 	bl	8006748 <vPortValidateInterruptPriority>
	__asm volatile
 800437e:	f3ef 8211 	mrs	r2, BASEPRI
 8004382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	617a      	str	r2, [r7, #20]
 8004394:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004396:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004398:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80043a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d22b      	bcs.n	8004402 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80043bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d112      	bne.n	80043ec <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d016      	beq.n	80043fc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d0:	3324      	adds	r3, #36	; 0x24
 80043d2:	4618      	mov	r0, r3
 80043d4:	f001 f8c2 	bl	800555c <xTaskRemoveFromEventList>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00e      	beq.n	80043fc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00b      	beq.n	80043fc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	e007      	b.n	80043fc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80043ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043f0:	3301      	adds	r3, #1
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	b25a      	sxtb	r2, r3
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80043fc:	2301      	movs	r3, #1
 80043fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004400:	e001      	b.n	8004406 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004402:	2300      	movs	r3, #0
 8004404:	637b      	str	r3, [r7, #52]	; 0x34
 8004406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004408:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f383 8811 	msr	BASEPRI, r3
}
 8004410:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004414:	4618      	mov	r0, r3
 8004416:	3738      	adds	r7, #56	; 0x38
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08c      	sub	sp, #48	; 0x30
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004428:	2300      	movs	r3, #0
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10a      	bne.n	800444c <xQueueReceive+0x30>
	__asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	623b      	str	r3, [r7, #32]
}
 8004448:	bf00      	nop
 800444a:	e7fe      	b.n	800444a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d103      	bne.n	800445a <xQueueReceive+0x3e>
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <xQueueReceive+0x42>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <xQueueReceive+0x44>
 800445e:	2300      	movs	r3, #0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10a      	bne.n	800447a <xQueueReceive+0x5e>
	__asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	61fb      	str	r3, [r7, #28]
}
 8004476:	bf00      	nop
 8004478:	e7fe      	b.n	8004478 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800447a:	f001 fa2d 	bl	80058d8 <xTaskGetSchedulerState>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <xQueueReceive+0x6e>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <xQueueReceive+0x72>
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <xQueueReceive+0x74>
 800448e:	2300      	movs	r3, #0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10a      	bne.n	80044aa <xQueueReceive+0x8e>
	__asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	61bb      	str	r3, [r7, #24]
}
 80044a6:	bf00      	nop
 80044a8:	e7fe      	b.n	80044a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044aa:	f002 f86b 	bl	8006584 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d01f      	beq.n	80044fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044ba:	68b9      	ldr	r1, [r7, #8]
 80044bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044be:	f000 fabe 	bl	8004a3e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	1e5a      	subs	r2, r3, #1
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00f      	beq.n	80044f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d4:	3310      	adds	r3, #16
 80044d6:	4618      	mov	r0, r3
 80044d8:	f001 f840 	bl	800555c <xTaskRemoveFromEventList>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80044e2:	4b3d      	ldr	r3, [pc, #244]	; (80045d8 <xQueueReceive+0x1bc>)
 80044e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80044f2:	f002 f877 	bl	80065e4 <vPortExitCritical>
				return pdPASS;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e069      	b.n	80045ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d103      	bne.n	8004508 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004500:	f002 f870 	bl	80065e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004504:	2300      	movs	r3, #0
 8004506:	e062      	b.n	80045ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450a:	2b00      	cmp	r3, #0
 800450c:	d106      	bne.n	800451c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800450e:	f107 0310 	add.w	r3, r7, #16
 8004512:	4618      	mov	r0, r3
 8004514:	f001 f886 	bl	8005624 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004518:	2301      	movs	r3, #1
 800451a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800451c:	f002 f862 	bl	80065e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004520:	f000 fdf8 	bl	8005114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004524:	f002 f82e 	bl	8006584 <vPortEnterCritical>
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800452e:	b25b      	sxtb	r3, r3
 8004530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004534:	d103      	bne.n	800453e <xQueueReceive+0x122>
 8004536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004544:	b25b      	sxtb	r3, r3
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454a:	d103      	bne.n	8004554 <xQueueReceive+0x138>
 800454c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004554:	f002 f846 	bl	80065e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004558:	1d3a      	adds	r2, r7, #4
 800455a:	f107 0310 	add.w	r3, r7, #16
 800455e:	4611      	mov	r1, r2
 8004560:	4618      	mov	r0, r3
 8004562:	f001 f875 	bl	8005650 <xTaskCheckForTimeOut>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d123      	bne.n	80045b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800456c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800456e:	f000 fade 	bl	8004b2e <prvIsQueueEmpty>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d017      	beq.n	80045a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457a:	3324      	adds	r3, #36	; 0x24
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	4611      	mov	r1, r2
 8004580:	4618      	mov	r0, r3
 8004582:	f000 ff9b 	bl	80054bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004588:	f000 fa7f 	bl	8004a8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800458c:	f000 fdd0 	bl	8005130 <xTaskResumeAll>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d189      	bne.n	80044aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004596:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <xQueueReceive+0x1bc>)
 8004598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	e780      	b.n	80044aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045aa:	f000 fa6e 	bl	8004a8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045ae:	f000 fdbf 	bl	8005130 <xTaskResumeAll>
 80045b2:	e77a      	b.n	80044aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80045b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045b6:	f000 fa68 	bl	8004a8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045ba:	f000 fdb9 	bl	8005130 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045c0:	f000 fab5 	bl	8004b2e <prvIsQueueEmpty>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f43f af6f 	beq.w	80044aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80045cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3730      	adds	r7, #48	; 0x30
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	e000ed04 	.word	0xe000ed04

080045dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08e      	sub	sp, #56	; 0x38
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80045ee:	2300      	movs	r3, #0
 80045f0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80045f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10a      	bne.n	800460e <xQueueSemaphoreTake+0x32>
	__asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	623b      	str	r3, [r7, #32]
}
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	61fb      	str	r3, [r7, #28]
}
 8004628:	bf00      	nop
 800462a:	e7fe      	b.n	800462a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800462c:	f001 f954 	bl	80058d8 <xTaskGetSchedulerState>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <xQueueSemaphoreTake+0x60>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <xQueueSemaphoreTake+0x64>
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <xQueueSemaphoreTake+0x66>
 8004640:	2300      	movs	r3, #0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10a      	bne.n	800465c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464a:	f383 8811 	msr	BASEPRI, r3
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	61bb      	str	r3, [r7, #24]
}
 8004658:	bf00      	nop
 800465a:	e7fe      	b.n	800465a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800465c:	f001 ff92 	bl	8006584 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	2b00      	cmp	r3, #0
 800466a:	d024      	beq.n	80046b6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466e:	1e5a      	subs	r2, r3, #1
 8004670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004672:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d104      	bne.n	8004686 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800467c:	f001 faa2 	bl	8005bc4 <pvTaskIncrementMutexHeldCount>
 8004680:	4602      	mov	r2, r0
 8004682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004684:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00f      	beq.n	80046ae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004690:	3310      	adds	r3, #16
 8004692:	4618      	mov	r0, r3
 8004694:	f000 ff62 	bl	800555c <xTaskRemoveFromEventList>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800469e:	4b54      	ldr	r3, [pc, #336]	; (80047f0 <xQueueSemaphoreTake+0x214>)
 80046a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80046ae:	f001 ff99 	bl	80065e4 <vPortExitCritical>
				return pdPASS;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e097      	b.n	80047e6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d111      	bne.n	80046e0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	617b      	str	r3, [r7, #20]
}
 80046d4:	bf00      	nop
 80046d6:	e7fe      	b.n	80046d6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80046d8:	f001 ff84 	bl	80065e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80046dc:	2300      	movs	r3, #0
 80046de:	e082      	b.n	80047e6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046e6:	f107 030c 	add.w	r3, r7, #12
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 ff9a 	bl	8005624 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046f0:	2301      	movs	r3, #1
 80046f2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046f4:	f001 ff76 	bl	80065e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046f8:	f000 fd0c 	bl	8005114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046fc:	f001 ff42 	bl	8006584 <vPortEnterCritical>
 8004700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004702:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004706:	b25b      	sxtb	r3, r3
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470c:	d103      	bne.n	8004716 <xQueueSemaphoreTake+0x13a>
 800470e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004718:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800471c:	b25b      	sxtb	r3, r3
 800471e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004722:	d103      	bne.n	800472c <xQueueSemaphoreTake+0x150>
 8004724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800472c:	f001 ff5a 	bl	80065e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004730:	463a      	mov	r2, r7
 8004732:	f107 030c 	add.w	r3, r7, #12
 8004736:	4611      	mov	r1, r2
 8004738:	4618      	mov	r0, r3
 800473a:	f000 ff89 	bl	8005650 <xTaskCheckForTimeOut>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d132      	bne.n	80047aa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004744:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004746:	f000 f9f2 	bl	8004b2e <prvIsQueueEmpty>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d026      	beq.n	800479e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d109      	bne.n	800476c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004758:	f001 ff14 	bl	8006584 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800475c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	4618      	mov	r0, r3
 8004762:	f001 f8d7 	bl	8005914 <xTaskPriorityInherit>
 8004766:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004768:	f001 ff3c 	bl	80065e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800476c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476e:	3324      	adds	r3, #36	; 0x24
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	4611      	mov	r1, r2
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fea1 	bl	80054bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800477a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800477c:	f000 f985 	bl	8004a8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004780:	f000 fcd6 	bl	8005130 <xTaskResumeAll>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	f47f af68 	bne.w	800465c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800478c:	4b18      	ldr	r3, [pc, #96]	; (80047f0 <xQueueSemaphoreTake+0x214>)
 800478e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	e75e      	b.n	800465c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800479e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047a0:	f000 f973 	bl	8004a8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047a4:	f000 fcc4 	bl	8005130 <xTaskResumeAll>
 80047a8:	e758      	b.n	800465c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80047aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047ac:	f000 f96d 	bl	8004a8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047b0:	f000 fcbe 	bl	8005130 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047b6:	f000 f9ba 	bl	8004b2e <prvIsQueueEmpty>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f43f af4d 	beq.w	800465c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00d      	beq.n	80047e4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80047c8:	f001 fedc 	bl	8006584 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80047cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047ce:	f000 f8b4 	bl	800493a <prvGetDisinheritPriorityAfterTimeout>
 80047d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047da:	4618      	mov	r0, r3
 80047dc:	f001 f970 	bl	8005ac0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80047e0:	f001 ff00 	bl	80065e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3738      	adds	r7, #56	; 0x38
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	e000ed04 	.word	0xe000ed04

080047f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08e      	sub	sp, #56	; 0x38
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10a      	bne.n	8004820 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	623b      	str	r3, [r7, #32]
}
 800481c:	bf00      	nop
 800481e:	e7fe      	b.n	800481e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d103      	bne.n	800482e <xQueueReceiveFromISR+0x3a>
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <xQueueReceiveFromISR+0x3e>
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <xQueueReceiveFromISR+0x40>
 8004832:	2300      	movs	r3, #0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	61fb      	str	r3, [r7, #28]
}
 800484a:	bf00      	nop
 800484c:	e7fe      	b.n	800484c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800484e:	f001 ff7b 	bl	8006748 <vPortValidateInterruptPriority>
	__asm volatile
 8004852:	f3ef 8211 	mrs	r2, BASEPRI
 8004856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	61ba      	str	r2, [r7, #24]
 8004868:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800486a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800486c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	2b00      	cmp	r3, #0
 8004878:	d02f      	beq.n	80048da <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004884:	68b9      	ldr	r1, [r7, #8]
 8004886:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004888:	f000 f8d9 	bl	8004a3e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	1e5a      	subs	r2, r3, #1
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004894:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489c:	d112      	bne.n	80048c4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800489e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d016      	beq.n	80048d4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a8:	3310      	adds	r3, #16
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fe56 	bl	800555c <xTaskRemoveFromEventList>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00e      	beq.n	80048d4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00b      	beq.n	80048d4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	e007      	b.n	80048d4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80048c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048c8:	3301      	adds	r3, #1
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	b25a      	sxtb	r2, r3
 80048ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80048d4:	2301      	movs	r3, #1
 80048d6:	637b      	str	r3, [r7, #52]	; 0x34
 80048d8:	e001      	b.n	80048de <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80048da:	2300      	movs	r3, #0
 80048dc:	637b      	str	r3, [r7, #52]	; 0x34
 80048de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f383 8811 	msr	BASEPRI, r3
}
 80048e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3738      	adds	r7, #56	; 0x38
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10a      	bne.n	800491c <vQueueDelete+0x28>
	__asm volatile
 8004906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	60bb      	str	r3, [r7, #8]
}
 8004918:	bf00      	nop
 800491a:	e7fe      	b.n	800491a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 f95f 	bl	8004be0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f002 f817 	bl	8006960 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004932:	bf00      	nop
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800493a:	b480      	push	{r7}
 800493c:	b085      	sub	sp, #20
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	2b00      	cmp	r3, #0
 8004948:	d006      	beq.n	8004958 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	e001      	b.n	800495c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800495c:	68fb      	ldr	r3, [r7, #12]
	}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b086      	sub	sp, #24
 800496e:	af00      	add	r7, sp, #0
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10d      	bne.n	80049a4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d14d      	bne.n	8004a2c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	4618      	mov	r0, r3
 8004996:	f001 f825 	bl	80059e4 <xTaskPriorityDisinherit>
 800499a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	609a      	str	r2, [r3, #8]
 80049a2:	e043      	b.n	8004a2c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d119      	bne.n	80049de <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6858      	ldr	r0, [r3, #4]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	461a      	mov	r2, r3
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	f002 fac5 	bl	8006f44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	441a      	add	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d32b      	bcc.n	8004a2c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	605a      	str	r2, [r3, #4]
 80049dc:	e026      	b.n	8004a2c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	68d8      	ldr	r0, [r3, #12]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	461a      	mov	r2, r3
 80049e8:	68b9      	ldr	r1, [r7, #8]
 80049ea:	f002 faab 	bl	8006f44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	425b      	negs	r3, r3
 80049f8:	441a      	add	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	68da      	ldr	r2, [r3, #12]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d207      	bcs.n	8004a1a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	425b      	negs	r3, r3
 8004a14:	441a      	add	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d105      	bne.n	8004a2c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004a34:	697b      	ldr	r3, [r7, #20]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b082      	sub	sp, #8
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d018      	beq.n	8004a82 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	441a      	add	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d303      	bcc.n	8004a72 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68d9      	ldr	r1, [r3, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	6838      	ldr	r0, [r7, #0]
 8004a7e:	f002 fa61 	bl	8006f44 <memcpy>
	}
}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a92:	f001 fd77 	bl	8006584 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a9c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a9e:	e011      	b.n	8004ac4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d012      	beq.n	8004ace <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3324      	adds	r3, #36	; 0x24
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 fd55 	bl	800555c <xTaskRemoveFromEventList>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ab8:	f000 fe2c 	bl	8005714 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	dce9      	bgt.n	8004aa0 <prvUnlockQueue+0x16>
 8004acc:	e000      	b.n	8004ad0 <prvUnlockQueue+0x46>
					break;
 8004ace:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	22ff      	movs	r2, #255	; 0xff
 8004ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ad8:	f001 fd84 	bl	80065e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004adc:	f001 fd52 	bl	8006584 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ae6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ae8:	e011      	b.n	8004b0e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d012      	beq.n	8004b18 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3310      	adds	r3, #16
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fd30 	bl	800555c <xTaskRemoveFromEventList>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b02:	f000 fe07 	bl	8005714 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b06:	7bbb      	ldrb	r3, [r7, #14]
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	dce9      	bgt.n	8004aea <prvUnlockQueue+0x60>
 8004b16:	e000      	b.n	8004b1a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b18:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	22ff      	movs	r2, #255	; 0xff
 8004b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b22:	f001 fd5f 	bl	80065e4 <vPortExitCritical>
}
 8004b26:	bf00      	nop
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b084      	sub	sp, #16
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b36:	f001 fd25 	bl	8006584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d102      	bne.n	8004b48 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b42:	2301      	movs	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	e001      	b.n	8004b4c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b4c:	f001 fd4a 	bl	80065e4 <vPortExitCritical>

	return xReturn;
 8004b50:	68fb      	ldr	r3, [r7, #12]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b62:	f001 fd0f 	bl	8006584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d102      	bne.n	8004b78 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b72:	2301      	movs	r3, #1
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	e001      	b.n	8004b7c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b7c:	f001 fd32 	bl	80065e4 <vPortExitCritical>

	return xReturn;
 8004b80:	68fb      	ldr	r3, [r7, #12]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	e014      	b.n	8004bc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b9c:	4a0f      	ldr	r2, [pc, #60]	; (8004bdc <vQueueAddToRegistry+0x50>)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10b      	bne.n	8004bc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ba8:	490c      	ldr	r1, [pc, #48]	; (8004bdc <vQueueAddToRegistry+0x50>)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004bb2:	4a0a      	ldr	r2, [pc, #40]	; (8004bdc <vQueueAddToRegistry+0x50>)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	4413      	add	r3, r2
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004bbe:	e006      	b.n	8004bce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b07      	cmp	r3, #7
 8004bca:	d9e7      	bls.n	8004b9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004bcc:	bf00      	nop
 8004bce:	bf00      	nop
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	20000834 	.word	0x20000834

08004be0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	e016      	b.n	8004c1c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004bee:	4a10      	ldr	r2, [pc, #64]	; (8004c30 <vQueueUnregisterQueue+0x50>)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d10b      	bne.n	8004c16 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004bfe:	4a0c      	ldr	r2, [pc, #48]	; (8004c30 <vQueueUnregisterQueue+0x50>)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2100      	movs	r1, #0
 8004c04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004c08:	4a09      	ldr	r2, [pc, #36]	; (8004c30 <vQueueUnregisterQueue+0x50>)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	4413      	add	r3, r2
 8004c10:	2200      	movs	r2, #0
 8004c12:	605a      	str	r2, [r3, #4]
				break;
 8004c14:	e006      	b.n	8004c24 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b07      	cmp	r3, #7
 8004c20:	d9e5      	bls.n	8004bee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004c22:	bf00      	nop
 8004c24:	bf00      	nop
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	20000834 	.word	0x20000834

08004c34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c44:	f001 fc9e 	bl	8006584 <vPortEnterCritical>
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c4e:	b25b      	sxtb	r3, r3
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	d103      	bne.n	8004c5e <vQueueWaitForMessageRestricted+0x2a>
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c64:	b25b      	sxtb	r3, r3
 8004c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6a:	d103      	bne.n	8004c74 <vQueueWaitForMessageRestricted+0x40>
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c74:	f001 fcb6 	bl	80065e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d106      	bne.n	8004c8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	3324      	adds	r3, #36	; 0x24
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 fc3b 	bl	8005504 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c8e:	6978      	ldr	r0, [r7, #20]
 8004c90:	f7ff fefb 	bl	8004a8a <prvUnlockQueue>
	}
 8004c94:	bf00      	nop
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08e      	sub	sp, #56	; 0x38
 8004ca0:	af04      	add	r7, sp, #16
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	623b      	str	r3, [r7, #32]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10a      	bne.n	8004ce2 <xTaskCreateStatic+0x46>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	61fb      	str	r3, [r7, #28]
}
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ce2:	235c      	movs	r3, #92	; 0x5c
 8004ce4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	2b5c      	cmp	r3, #92	; 0x5c
 8004cea:	d00a      	beq.n	8004d02 <xTaskCreateStatic+0x66>
	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	61bb      	str	r3, [r7, #24]
}
 8004cfe:	bf00      	nop
 8004d00:	e7fe      	b.n	8004d00 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d01e      	beq.n	8004d48 <xTaskCreateStatic+0xac>
 8004d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01b      	beq.n	8004d48 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d22:	2300      	movs	r3, #0
 8004d24:	9303      	str	r3, [sp, #12]
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	9302      	str	r3, [sp, #8]
 8004d2a:	f107 0314 	add.w	r3, r7, #20
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f850 	bl	8004de0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d42:	f000 f8dd 	bl	8004f00 <prvAddNewTaskToReadyList>
 8004d46:	e001      	b.n	8004d4c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d4c:	697b      	ldr	r3, [r7, #20]
	}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3728      	adds	r7, #40	; 0x28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b08c      	sub	sp, #48	; 0x30
 8004d5a:	af04      	add	r7, sp, #16
 8004d5c:	60f8      	str	r0, [r7, #12]
 8004d5e:	60b9      	str	r1, [r7, #8]
 8004d60:	603b      	str	r3, [r7, #0]
 8004d62:	4613      	mov	r3, r2
 8004d64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d66:	88fb      	ldrh	r3, [r7, #6]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f001 fd2c 	bl	80067c8 <pvPortMalloc>
 8004d70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00e      	beq.n	8004d96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d78:	205c      	movs	r0, #92	; 0x5c
 8004d7a:	f001 fd25 	bl	80067c8 <pvPortMalloc>
 8004d7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	631a      	str	r2, [r3, #48]	; 0x30
 8004d8c:	e005      	b.n	8004d9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d8e:	6978      	ldr	r0, [r7, #20]
 8004d90:	f001 fde6 	bl	8006960 <vPortFree>
 8004d94:	e001      	b.n	8004d9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d96:	2300      	movs	r3, #0
 8004d98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d017      	beq.n	8004dd0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004da8:	88fa      	ldrh	r2, [r7, #6]
 8004daa:	2300      	movs	r3, #0
 8004dac:	9303      	str	r3, [sp, #12]
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	9302      	str	r3, [sp, #8]
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	9301      	str	r3, [sp, #4]
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68b9      	ldr	r1, [r7, #8]
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 f80e 	bl	8004de0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dc4:	69f8      	ldr	r0, [r7, #28]
 8004dc6:	f000 f89b 	bl	8004f00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	61bb      	str	r3, [r7, #24]
 8004dce:	e002      	b.n	8004dd6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004dd6:	69bb      	ldr	r3, [r7, #24]
	}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3720      	adds	r7, #32
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	461a      	mov	r2, r3
 8004df8:	21a5      	movs	r1, #165	; 0xa5
 8004dfa:	f002 f8b1 	bl	8006f60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	f023 0307 	bic.w	r3, r3, #7
 8004e16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	617b      	str	r3, [r7, #20]
}
 8004e34:	bf00      	nop
 8004e36:	e7fe      	b.n	8004e36 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d01f      	beq.n	8004e7e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61fb      	str	r3, [r7, #28]
 8004e42:	e012      	b.n	8004e6a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	4413      	add	r3, r2
 8004e4a:	7819      	ldrb	r1, [r3, #0]
 8004e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	3334      	adds	r3, #52	; 0x34
 8004e54:	460a      	mov	r2, r1
 8004e56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d006      	beq.n	8004e72 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	3301      	adds	r3, #1
 8004e68:	61fb      	str	r3, [r7, #28]
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	2b0f      	cmp	r3, #15
 8004e6e:	d9e9      	bls.n	8004e44 <prvInitialiseNewTask+0x64>
 8004e70:	e000      	b.n	8004e74 <prvInitialiseNewTask+0x94>
			{
				break;
 8004e72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e7c:	e003      	b.n	8004e86 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e88:	2b37      	cmp	r3, #55	; 0x37
 8004e8a:	d901      	bls.n	8004e90 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e8c:	2337      	movs	r3, #55	; 0x37
 8004e8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fe fe56 	bl	8003b58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	3318      	adds	r3, #24
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fe fe51 	bl	8003b58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ece:	2200      	movs	r2, #0
 8004ed0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	68f9      	ldr	r1, [r7, #12]
 8004ede:	69b8      	ldr	r0, [r7, #24]
 8004ee0:	f001 fa26 	bl	8006330 <pxPortInitialiseStack>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ef6:	bf00      	nop
 8004ef8:	3720      	adds	r7, #32
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f08:	f001 fb3c 	bl	8006584 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f0c:	4b2d      	ldr	r3, [pc, #180]	; (8004fc4 <prvAddNewTaskToReadyList+0xc4>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3301      	adds	r3, #1
 8004f12:	4a2c      	ldr	r2, [pc, #176]	; (8004fc4 <prvAddNewTaskToReadyList+0xc4>)
 8004f14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f16:	4b2c      	ldr	r3, [pc, #176]	; (8004fc8 <prvAddNewTaskToReadyList+0xc8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d109      	bne.n	8004f32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f1e:	4a2a      	ldr	r2, [pc, #168]	; (8004fc8 <prvAddNewTaskToReadyList+0xc8>)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f24:	4b27      	ldr	r3, [pc, #156]	; (8004fc4 <prvAddNewTaskToReadyList+0xc4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d110      	bne.n	8004f4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f2c:	f000 fc16 	bl	800575c <prvInitialiseTaskLists>
 8004f30:	e00d      	b.n	8004f4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f32:	4b26      	ldr	r3, [pc, #152]	; (8004fcc <prvAddNewTaskToReadyList+0xcc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d109      	bne.n	8004f4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f3a:	4b23      	ldr	r3, [pc, #140]	; (8004fc8 <prvAddNewTaskToReadyList+0xc8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d802      	bhi.n	8004f4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f48:	4a1f      	ldr	r2, [pc, #124]	; (8004fc8 <prvAddNewTaskToReadyList+0xc8>)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f4e:	4b20      	ldr	r3, [pc, #128]	; (8004fd0 <prvAddNewTaskToReadyList+0xd0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3301      	adds	r3, #1
 8004f54:	4a1e      	ldr	r2, [pc, #120]	; (8004fd0 <prvAddNewTaskToReadyList+0xd0>)
 8004f56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f58:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <prvAddNewTaskToReadyList+0xd0>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f64:	4b1b      	ldr	r3, [pc, #108]	; (8004fd4 <prvAddNewTaskToReadyList+0xd4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d903      	bls.n	8004f74 <prvAddNewTaskToReadyList+0x74>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	4a18      	ldr	r2, [pc, #96]	; (8004fd4 <prvAddNewTaskToReadyList+0xd4>)
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4a15      	ldr	r2, [pc, #84]	; (8004fd8 <prvAddNewTaskToReadyList+0xd8>)
 8004f82:	441a      	add	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3304      	adds	r3, #4
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	f7fe fdf1 	bl	8003b72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f90:	f001 fb28 	bl	80065e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f94:	4b0d      	ldr	r3, [pc, #52]	; (8004fcc <prvAddNewTaskToReadyList+0xcc>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00e      	beq.n	8004fba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f9c:	4b0a      	ldr	r3, [pc, #40]	; (8004fc8 <prvAddNewTaskToReadyList+0xc8>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d207      	bcs.n	8004fba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004faa:	4b0c      	ldr	r3, [pc, #48]	; (8004fdc <prvAddNewTaskToReadyList+0xdc>)
 8004fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fba:	bf00      	nop
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20000d48 	.word	0x20000d48
 8004fc8:	20000874 	.word	0x20000874
 8004fcc:	20000d54 	.word	0x20000d54
 8004fd0:	20000d64 	.word	0x20000d64
 8004fd4:	20000d50 	.word	0x20000d50
 8004fd8:	20000878 	.word	0x20000878
 8004fdc:	e000ed04 	.word	0xe000ed04

08004fe0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d017      	beq.n	8005022 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ff2:	4b13      	ldr	r3, [pc, #76]	; (8005040 <vTaskDelay+0x60>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <vTaskDelay+0x30>
	__asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	60bb      	str	r3, [r7, #8]
}
 800500c:	bf00      	nop
 800500e:	e7fe      	b.n	800500e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005010:	f000 f880 	bl	8005114 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005014:	2100      	movs	r1, #0
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fde8 	bl	8005bec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800501c:	f000 f888 	bl	8005130 <xTaskResumeAll>
 8005020:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d107      	bne.n	8005038 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005028:	4b06      	ldr	r3, [pc, #24]	; (8005044 <vTaskDelay+0x64>)
 800502a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005038:	bf00      	nop
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	20000d70 	.word	0x20000d70
 8005044:	e000ed04 	.word	0xe000ed04

08005048 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08a      	sub	sp, #40	; 0x28
 800504c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005052:	2300      	movs	r3, #0
 8005054:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005056:	463a      	mov	r2, r7
 8005058:	1d39      	adds	r1, r7, #4
 800505a:	f107 0308 	add.w	r3, r7, #8
 800505e:	4618      	mov	r0, r3
 8005060:	f7fe fd26 	bl	8003ab0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005064:	6839      	ldr	r1, [r7, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	9202      	str	r2, [sp, #8]
 800506c:	9301      	str	r3, [sp, #4]
 800506e:	2300      	movs	r3, #0
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	2300      	movs	r3, #0
 8005074:	460a      	mov	r2, r1
 8005076:	4921      	ldr	r1, [pc, #132]	; (80050fc <vTaskStartScheduler+0xb4>)
 8005078:	4821      	ldr	r0, [pc, #132]	; (8005100 <vTaskStartScheduler+0xb8>)
 800507a:	f7ff fe0f 	bl	8004c9c <xTaskCreateStatic>
 800507e:	4603      	mov	r3, r0
 8005080:	4a20      	ldr	r2, [pc, #128]	; (8005104 <vTaskStartScheduler+0xbc>)
 8005082:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005084:	4b1f      	ldr	r3, [pc, #124]	; (8005104 <vTaskStartScheduler+0xbc>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800508c:	2301      	movs	r3, #1
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	e001      	b.n	8005096 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005092:	2300      	movs	r3, #0
 8005094:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d102      	bne.n	80050a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800509c:	f000 fdfa 	bl	8005c94 <xTimerCreateTimerTask>
 80050a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d116      	bne.n	80050d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	613b      	str	r3, [r7, #16]
}
 80050ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050bc:	4b12      	ldr	r3, [pc, #72]	; (8005108 <vTaskStartScheduler+0xc0>)
 80050be:	f04f 32ff 	mov.w	r2, #4294967295
 80050c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050c4:	4b11      	ldr	r3, [pc, #68]	; (800510c <vTaskStartScheduler+0xc4>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80050ca:	4b11      	ldr	r3, [pc, #68]	; (8005110 <vTaskStartScheduler+0xc8>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050d0:	f001 f9b6 	bl	8006440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050d4:	e00e      	b.n	80050f4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d10a      	bne.n	80050f4 <vTaskStartScheduler+0xac>
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	60fb      	str	r3, [r7, #12]
}
 80050f0:	bf00      	nop
 80050f2:	e7fe      	b.n	80050f2 <vTaskStartScheduler+0xaa>
}
 80050f4:	bf00      	nop
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	0800787c 	.word	0x0800787c
 8005100:	0800572d 	.word	0x0800572d
 8005104:	20000d6c 	.word	0x20000d6c
 8005108:	20000d68 	.word	0x20000d68
 800510c:	20000d54 	.word	0x20000d54
 8005110:	20000d4c 	.word	0x20000d4c

08005114 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005118:	4b04      	ldr	r3, [pc, #16]	; (800512c <vTaskSuspendAll+0x18>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3301      	adds	r3, #1
 800511e:	4a03      	ldr	r2, [pc, #12]	; (800512c <vTaskSuspendAll+0x18>)
 8005120:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005122:	bf00      	nop
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	20000d70 	.word	0x20000d70

08005130 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800513a:	2300      	movs	r3, #0
 800513c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800513e:	4b42      	ldr	r3, [pc, #264]	; (8005248 <xTaskResumeAll+0x118>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10a      	bne.n	800515c <xTaskResumeAll+0x2c>
	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	603b      	str	r3, [r7, #0]
}
 8005158:	bf00      	nop
 800515a:	e7fe      	b.n	800515a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800515c:	f001 fa12 	bl	8006584 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005160:	4b39      	ldr	r3, [pc, #228]	; (8005248 <xTaskResumeAll+0x118>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3b01      	subs	r3, #1
 8005166:	4a38      	ldr	r2, [pc, #224]	; (8005248 <xTaskResumeAll+0x118>)
 8005168:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800516a:	4b37      	ldr	r3, [pc, #220]	; (8005248 <xTaskResumeAll+0x118>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d162      	bne.n	8005238 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005172:	4b36      	ldr	r3, [pc, #216]	; (800524c <xTaskResumeAll+0x11c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d05e      	beq.n	8005238 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800517a:	e02f      	b.n	80051dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800517c:	4b34      	ldr	r3, [pc, #208]	; (8005250 <xTaskResumeAll+0x120>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3318      	adds	r3, #24
 8005188:	4618      	mov	r0, r3
 800518a:	f7fe fd4f 	bl	8003c2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3304      	adds	r3, #4
 8005192:	4618      	mov	r0, r3
 8005194:	f7fe fd4a 	bl	8003c2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519c:	4b2d      	ldr	r3, [pc, #180]	; (8005254 <xTaskResumeAll+0x124>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d903      	bls.n	80051ac <xTaskResumeAll+0x7c>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	4a2a      	ldr	r2, [pc, #168]	; (8005254 <xTaskResumeAll+0x124>)
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b0:	4613      	mov	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4a27      	ldr	r2, [pc, #156]	; (8005258 <xTaskResumeAll+0x128>)
 80051ba:	441a      	add	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	3304      	adds	r3, #4
 80051c0:	4619      	mov	r1, r3
 80051c2:	4610      	mov	r0, r2
 80051c4:	f7fe fcd5 	bl	8003b72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051cc:	4b23      	ldr	r3, [pc, #140]	; (800525c <xTaskResumeAll+0x12c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d302      	bcc.n	80051dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80051d6:	4b22      	ldr	r3, [pc, #136]	; (8005260 <xTaskResumeAll+0x130>)
 80051d8:	2201      	movs	r2, #1
 80051da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051dc:	4b1c      	ldr	r3, [pc, #112]	; (8005250 <xTaskResumeAll+0x120>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1cb      	bne.n	800517c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051ea:	f000 fb55 	bl	8005898 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80051ee:	4b1d      	ldr	r3, [pc, #116]	; (8005264 <xTaskResumeAll+0x134>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d010      	beq.n	800521c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051fa:	f000 f847 	bl	800528c <xTaskIncrementTick>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005204:	4b16      	ldr	r3, [pc, #88]	; (8005260 <xTaskResumeAll+0x130>)
 8005206:	2201      	movs	r2, #1
 8005208:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	3b01      	subs	r3, #1
 800520e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f1      	bne.n	80051fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005216:	4b13      	ldr	r3, [pc, #76]	; (8005264 <xTaskResumeAll+0x134>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800521c:	4b10      	ldr	r3, [pc, #64]	; (8005260 <xTaskResumeAll+0x130>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d009      	beq.n	8005238 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005224:	2301      	movs	r3, #1
 8005226:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005228:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <xTaskResumeAll+0x138>)
 800522a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005238:	f001 f9d4 	bl	80065e4 <vPortExitCritical>

	return xAlreadyYielded;
 800523c:	68bb      	ldr	r3, [r7, #8]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000d70 	.word	0x20000d70
 800524c:	20000d48 	.word	0x20000d48
 8005250:	20000d08 	.word	0x20000d08
 8005254:	20000d50 	.word	0x20000d50
 8005258:	20000878 	.word	0x20000878
 800525c:	20000874 	.word	0x20000874
 8005260:	20000d5c 	.word	0x20000d5c
 8005264:	20000d58 	.word	0x20000d58
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005272:	4b05      	ldr	r3, [pc, #20]	; (8005288 <xTaskGetTickCount+0x1c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005278:	687b      	ldr	r3, [r7, #4]
}
 800527a:	4618      	mov	r0, r3
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	20000d4c 	.word	0x20000d4c

0800528c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005296:	4b4f      	ldr	r3, [pc, #316]	; (80053d4 <xTaskIncrementTick+0x148>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	f040 808f 	bne.w	80053be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052a0:	4b4d      	ldr	r3, [pc, #308]	; (80053d8 <xTaskIncrementTick+0x14c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3301      	adds	r3, #1
 80052a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052a8:	4a4b      	ldr	r2, [pc, #300]	; (80053d8 <xTaskIncrementTick+0x14c>)
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d120      	bne.n	80052f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80052b4:	4b49      	ldr	r3, [pc, #292]	; (80053dc <xTaskIncrementTick+0x150>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	603b      	str	r3, [r7, #0]
}
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <xTaskIncrementTick+0x46>
 80052d4:	4b41      	ldr	r3, [pc, #260]	; (80053dc <xTaskIncrementTick+0x150>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	4b41      	ldr	r3, [pc, #260]	; (80053e0 <xTaskIncrementTick+0x154>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a3f      	ldr	r2, [pc, #252]	; (80053dc <xTaskIncrementTick+0x150>)
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	4a3f      	ldr	r2, [pc, #252]	; (80053e0 <xTaskIncrementTick+0x154>)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	4b3e      	ldr	r3, [pc, #248]	; (80053e4 <xTaskIncrementTick+0x158>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3301      	adds	r3, #1
 80052ee:	4a3d      	ldr	r2, [pc, #244]	; (80053e4 <xTaskIncrementTick+0x158>)
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	f000 fad1 	bl	8005898 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052f6:	4b3c      	ldr	r3, [pc, #240]	; (80053e8 <xTaskIncrementTick+0x15c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d349      	bcc.n	8005394 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005300:	4b36      	ldr	r3, [pc, #216]	; (80053dc <xTaskIncrementTick+0x150>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d104      	bne.n	8005314 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800530a:	4b37      	ldr	r3, [pc, #220]	; (80053e8 <xTaskIncrementTick+0x15c>)
 800530c:	f04f 32ff 	mov.w	r2, #4294967295
 8005310:	601a      	str	r2, [r3, #0]
					break;
 8005312:	e03f      	b.n	8005394 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005314:	4b31      	ldr	r3, [pc, #196]	; (80053dc <xTaskIncrementTick+0x150>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	429a      	cmp	r2, r3
 800532a:	d203      	bcs.n	8005334 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800532c:	4a2e      	ldr	r2, [pc, #184]	; (80053e8 <xTaskIncrementTick+0x15c>)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005332:	e02f      	b.n	8005394 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	3304      	adds	r3, #4
 8005338:	4618      	mov	r0, r3
 800533a:	f7fe fc77 	bl	8003c2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	2b00      	cmp	r3, #0
 8005344:	d004      	beq.n	8005350 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	3318      	adds	r3, #24
 800534a:	4618      	mov	r0, r3
 800534c:	f7fe fc6e 	bl	8003c2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005354:	4b25      	ldr	r3, [pc, #148]	; (80053ec <xTaskIncrementTick+0x160>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d903      	bls.n	8005364 <xTaskIncrementTick+0xd8>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	4a22      	ldr	r2, [pc, #136]	; (80053ec <xTaskIncrementTick+0x160>)
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4a1f      	ldr	r2, [pc, #124]	; (80053f0 <xTaskIncrementTick+0x164>)
 8005372:	441a      	add	r2, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	3304      	adds	r3, #4
 8005378:	4619      	mov	r1, r3
 800537a:	4610      	mov	r0, r2
 800537c:	f7fe fbf9 	bl	8003b72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005384:	4b1b      	ldr	r3, [pc, #108]	; (80053f4 <xTaskIncrementTick+0x168>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	429a      	cmp	r2, r3
 800538c:	d3b8      	bcc.n	8005300 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800538e:	2301      	movs	r3, #1
 8005390:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005392:	e7b5      	b.n	8005300 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005394:	4b17      	ldr	r3, [pc, #92]	; (80053f4 <xTaskIncrementTick+0x168>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539a:	4915      	ldr	r1, [pc, #84]	; (80053f0 <xTaskIncrementTick+0x164>)
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d901      	bls.n	80053b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80053ac:	2301      	movs	r3, #1
 80053ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80053b0:	4b11      	ldr	r3, [pc, #68]	; (80053f8 <xTaskIncrementTick+0x16c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d007      	beq.n	80053c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80053b8:	2301      	movs	r3, #1
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	e004      	b.n	80053c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80053be:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <xTaskIncrementTick+0x170>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3301      	adds	r3, #1
 80053c4:	4a0d      	ldr	r2, [pc, #52]	; (80053fc <xTaskIncrementTick+0x170>)
 80053c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80053c8:	697b      	ldr	r3, [r7, #20]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20000d70 	.word	0x20000d70
 80053d8:	20000d4c 	.word	0x20000d4c
 80053dc:	20000d00 	.word	0x20000d00
 80053e0:	20000d04 	.word	0x20000d04
 80053e4:	20000d60 	.word	0x20000d60
 80053e8:	20000d68 	.word	0x20000d68
 80053ec:	20000d50 	.word	0x20000d50
 80053f0:	20000878 	.word	0x20000878
 80053f4:	20000874 	.word	0x20000874
 80053f8:	20000d5c 	.word	0x20000d5c
 80053fc:	20000d58 	.word	0x20000d58

08005400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005406:	4b28      	ldr	r3, [pc, #160]	; (80054a8 <vTaskSwitchContext+0xa8>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800540e:	4b27      	ldr	r3, [pc, #156]	; (80054ac <vTaskSwitchContext+0xac>)
 8005410:	2201      	movs	r2, #1
 8005412:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005414:	e041      	b.n	800549a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005416:	4b25      	ldr	r3, [pc, #148]	; (80054ac <vTaskSwitchContext+0xac>)
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800541c:	4b24      	ldr	r3, [pc, #144]	; (80054b0 <vTaskSwitchContext+0xb0>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	e010      	b.n	8005446 <vTaskSwitchContext+0x46>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10a      	bne.n	8005440 <vTaskSwitchContext+0x40>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	607b      	str	r3, [r7, #4]
}
 800543c:	bf00      	nop
 800543e:	e7fe      	b.n	800543e <vTaskSwitchContext+0x3e>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3b01      	subs	r3, #1
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	491b      	ldr	r1, [pc, #108]	; (80054b4 <vTaskSwitchContext+0xb4>)
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4613      	mov	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	440b      	add	r3, r1
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0e4      	beq.n	8005424 <vTaskSwitchContext+0x24>
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4a13      	ldr	r2, [pc, #76]	; (80054b4 <vTaskSwitchContext+0xb4>)
 8005466:	4413      	add	r3, r2
 8005468:	60bb      	str	r3, [r7, #8]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	605a      	str	r2, [r3, #4]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	3308      	adds	r3, #8
 800547c:	429a      	cmp	r2, r3
 800547e:	d104      	bne.n	800548a <vTaskSwitchContext+0x8a>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	605a      	str	r2, [r3, #4]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	4a09      	ldr	r2, [pc, #36]	; (80054b8 <vTaskSwitchContext+0xb8>)
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	4a06      	ldr	r2, [pc, #24]	; (80054b0 <vTaskSwitchContext+0xb0>)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6013      	str	r3, [r2, #0]
}
 800549a:	bf00      	nop
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	20000d70 	.word	0x20000d70
 80054ac:	20000d5c 	.word	0x20000d5c
 80054b0:	20000d50 	.word	0x20000d50
 80054b4:	20000878 	.word	0x20000878
 80054b8:	20000874 	.word	0x20000874

080054bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10a      	bne.n	80054e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	60fb      	str	r3, [r7, #12]
}
 80054de:	bf00      	nop
 80054e0:	e7fe      	b.n	80054e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054e2:	4b07      	ldr	r3, [pc, #28]	; (8005500 <vTaskPlaceOnEventList+0x44>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3318      	adds	r3, #24
 80054e8:	4619      	mov	r1, r3
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fe fb65 	bl	8003bba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054f0:	2101      	movs	r1, #1
 80054f2:	6838      	ldr	r0, [r7, #0]
 80054f4:	f000 fb7a 	bl	8005bec <prvAddCurrentTaskToDelayedList>
}
 80054f8:	bf00      	nop
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20000874 	.word	0x20000874

08005504 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10a      	bne.n	800552c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	617b      	str	r3, [r7, #20]
}
 8005528:	bf00      	nop
 800552a:	e7fe      	b.n	800552a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800552c:	4b0a      	ldr	r3, [pc, #40]	; (8005558 <vTaskPlaceOnEventListRestricted+0x54>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3318      	adds	r3, #24
 8005532:	4619      	mov	r1, r3
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f7fe fb1c 	bl	8003b72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005540:	f04f 33ff 	mov.w	r3, #4294967295
 8005544:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	68b8      	ldr	r0, [r7, #8]
 800554a:	f000 fb4f 	bl	8005bec <prvAddCurrentTaskToDelayedList>
	}
 800554e:	bf00      	nop
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20000874 	.word	0x20000874

0800555c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10a      	bne.n	8005588 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	60fb      	str	r3, [r7, #12]
}
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	3318      	adds	r3, #24
 800558c:	4618      	mov	r0, r3
 800558e:	f7fe fb4d 	bl	8003c2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005592:	4b1e      	ldr	r3, [pc, #120]	; (800560c <xTaskRemoveFromEventList+0xb0>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d11d      	bne.n	80055d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	3304      	adds	r3, #4
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fe fb44 	bl	8003c2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a8:	4b19      	ldr	r3, [pc, #100]	; (8005610 <xTaskRemoveFromEventList+0xb4>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d903      	bls.n	80055b8 <xTaskRemoveFromEventList+0x5c>
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	4a16      	ldr	r2, [pc, #88]	; (8005610 <xTaskRemoveFromEventList+0xb4>)
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055bc:	4613      	mov	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4a13      	ldr	r2, [pc, #76]	; (8005614 <xTaskRemoveFromEventList+0xb8>)
 80055c6:	441a      	add	r2, r3
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	3304      	adds	r3, #4
 80055cc:	4619      	mov	r1, r3
 80055ce:	4610      	mov	r0, r2
 80055d0:	f7fe facf 	bl	8003b72 <vListInsertEnd>
 80055d4:	e005      	b.n	80055e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	3318      	adds	r3, #24
 80055da:	4619      	mov	r1, r3
 80055dc:	480e      	ldr	r0, [pc, #56]	; (8005618 <xTaskRemoveFromEventList+0xbc>)
 80055de:	f7fe fac8 	bl	8003b72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e6:	4b0d      	ldr	r3, [pc, #52]	; (800561c <xTaskRemoveFromEventList+0xc0>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d905      	bls.n	80055fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80055f0:	2301      	movs	r3, #1
 80055f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055f4:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <xTaskRemoveFromEventList+0xc4>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	e001      	b.n	8005600 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80055fc:	2300      	movs	r3, #0
 80055fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005600:	697b      	ldr	r3, [r7, #20]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000d70 	.word	0x20000d70
 8005610:	20000d50 	.word	0x20000d50
 8005614:	20000878 	.word	0x20000878
 8005618:	20000d08 	.word	0x20000d08
 800561c:	20000874 	.word	0x20000874
 8005620:	20000d5c 	.word	0x20000d5c

08005624 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800562c:	4b06      	ldr	r3, [pc, #24]	; (8005648 <vTaskInternalSetTimeOutState+0x24>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005634:	4b05      	ldr	r3, [pc, #20]	; (800564c <vTaskInternalSetTimeOutState+0x28>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	605a      	str	r2, [r3, #4]
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	20000d60 	.word	0x20000d60
 800564c:	20000d4c 	.word	0x20000d4c

08005650 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10a      	bne.n	8005676 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	613b      	str	r3, [r7, #16]
}
 8005672:	bf00      	nop
 8005674:	e7fe      	b.n	8005674 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10a      	bne.n	8005692 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	60fb      	str	r3, [r7, #12]
}
 800568e:	bf00      	nop
 8005690:	e7fe      	b.n	8005690 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005692:	f000 ff77 	bl	8006584 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005696:	4b1d      	ldr	r3, [pc, #116]	; (800570c <xTaskCheckForTimeOut+0xbc>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ae:	d102      	bne.n	80056b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61fb      	str	r3, [r7, #28]
 80056b4:	e023      	b.n	80056fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	4b15      	ldr	r3, [pc, #84]	; (8005710 <xTaskCheckForTimeOut+0xc0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d007      	beq.n	80056d2 <xTaskCheckForTimeOut+0x82>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d302      	bcc.n	80056d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056cc:	2301      	movs	r3, #1
 80056ce:	61fb      	str	r3, [r7, #28]
 80056d0:	e015      	b.n	80056fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d20b      	bcs.n	80056f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	1ad2      	subs	r2, r2, r3
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff ff9b 	bl	8005624 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61fb      	str	r3, [r7, #28]
 80056f2:	e004      	b.n	80056fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056fa:	2301      	movs	r3, #1
 80056fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056fe:	f000 ff71 	bl	80065e4 <vPortExitCritical>

	return xReturn;
 8005702:	69fb      	ldr	r3, [r7, #28]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3720      	adds	r7, #32
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	20000d4c 	.word	0x20000d4c
 8005710:	20000d60 	.word	0x20000d60

08005714 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005718:	4b03      	ldr	r3, [pc, #12]	; (8005728 <vTaskMissedYield+0x14>)
 800571a:	2201      	movs	r2, #1
 800571c:	601a      	str	r2, [r3, #0]
}
 800571e:	bf00      	nop
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	20000d5c 	.word	0x20000d5c

0800572c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005734:	f000 f852 	bl	80057dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005738:	4b06      	ldr	r3, [pc, #24]	; (8005754 <prvIdleTask+0x28>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d9f9      	bls.n	8005734 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005740:	4b05      	ldr	r3, [pc, #20]	; (8005758 <prvIdleTask+0x2c>)
 8005742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005750:	e7f0      	b.n	8005734 <prvIdleTask+0x8>
 8005752:	bf00      	nop
 8005754:	20000878 	.word	0x20000878
 8005758:	e000ed04 	.word	0xe000ed04

0800575c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005762:	2300      	movs	r3, #0
 8005764:	607b      	str	r3, [r7, #4]
 8005766:	e00c      	b.n	8005782 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4a12      	ldr	r2, [pc, #72]	; (80057bc <prvInitialiseTaskLists+0x60>)
 8005774:	4413      	add	r3, r2
 8005776:	4618      	mov	r0, r3
 8005778:	f7fe f9ce 	bl	8003b18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3301      	adds	r3, #1
 8005780:	607b      	str	r3, [r7, #4]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b37      	cmp	r3, #55	; 0x37
 8005786:	d9ef      	bls.n	8005768 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005788:	480d      	ldr	r0, [pc, #52]	; (80057c0 <prvInitialiseTaskLists+0x64>)
 800578a:	f7fe f9c5 	bl	8003b18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800578e:	480d      	ldr	r0, [pc, #52]	; (80057c4 <prvInitialiseTaskLists+0x68>)
 8005790:	f7fe f9c2 	bl	8003b18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005794:	480c      	ldr	r0, [pc, #48]	; (80057c8 <prvInitialiseTaskLists+0x6c>)
 8005796:	f7fe f9bf 	bl	8003b18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800579a:	480c      	ldr	r0, [pc, #48]	; (80057cc <prvInitialiseTaskLists+0x70>)
 800579c:	f7fe f9bc 	bl	8003b18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057a0:	480b      	ldr	r0, [pc, #44]	; (80057d0 <prvInitialiseTaskLists+0x74>)
 80057a2:	f7fe f9b9 	bl	8003b18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057a6:	4b0b      	ldr	r3, [pc, #44]	; (80057d4 <prvInitialiseTaskLists+0x78>)
 80057a8:	4a05      	ldr	r2, [pc, #20]	; (80057c0 <prvInitialiseTaskLists+0x64>)
 80057aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057ac:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <prvInitialiseTaskLists+0x7c>)
 80057ae:	4a05      	ldr	r2, [pc, #20]	; (80057c4 <prvInitialiseTaskLists+0x68>)
 80057b0:	601a      	str	r2, [r3, #0]
}
 80057b2:	bf00      	nop
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	20000878 	.word	0x20000878
 80057c0:	20000cd8 	.word	0x20000cd8
 80057c4:	20000cec 	.word	0x20000cec
 80057c8:	20000d08 	.word	0x20000d08
 80057cc:	20000d1c 	.word	0x20000d1c
 80057d0:	20000d34 	.word	0x20000d34
 80057d4:	20000d00 	.word	0x20000d00
 80057d8:	20000d04 	.word	0x20000d04

080057dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057e2:	e019      	b.n	8005818 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057e4:	f000 fece 	bl	8006584 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057e8:	4b10      	ldr	r3, [pc, #64]	; (800582c <prvCheckTasksWaitingTermination+0x50>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3304      	adds	r3, #4
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fe fa19 	bl	8003c2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057fa:	4b0d      	ldr	r3, [pc, #52]	; (8005830 <prvCheckTasksWaitingTermination+0x54>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3b01      	subs	r3, #1
 8005800:	4a0b      	ldr	r2, [pc, #44]	; (8005830 <prvCheckTasksWaitingTermination+0x54>)
 8005802:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005804:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <prvCheckTasksWaitingTermination+0x58>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3b01      	subs	r3, #1
 800580a:	4a0a      	ldr	r2, [pc, #40]	; (8005834 <prvCheckTasksWaitingTermination+0x58>)
 800580c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800580e:	f000 fee9 	bl	80065e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f810 	bl	8005838 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005818:	4b06      	ldr	r3, [pc, #24]	; (8005834 <prvCheckTasksWaitingTermination+0x58>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e1      	bne.n	80057e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005820:	bf00      	nop
 8005822:	bf00      	nop
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20000d1c 	.word	0x20000d1c
 8005830:	20000d48 	.word	0x20000d48
 8005834:	20000d30 	.word	0x20000d30

08005838 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005846:	2b00      	cmp	r3, #0
 8005848:	d108      	bne.n	800585c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584e:	4618      	mov	r0, r3
 8005850:	f001 f886 	bl	8006960 <vPortFree>
				vPortFree( pxTCB );
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f001 f883 	bl	8006960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800585a:	e018      	b.n	800588e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005862:	2b01      	cmp	r3, #1
 8005864:	d103      	bne.n	800586e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f001 f87a 	bl	8006960 <vPortFree>
	}
 800586c:	e00f      	b.n	800588e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005874:	2b02      	cmp	r3, #2
 8005876:	d00a      	beq.n	800588e <prvDeleteTCB+0x56>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	60fb      	str	r3, [r7, #12]
}
 800588a:	bf00      	nop
 800588c:	e7fe      	b.n	800588c <prvDeleteTCB+0x54>
	}
 800588e:	bf00      	nop
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800589e:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <prvResetNextTaskUnblockTime+0x38>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d104      	bne.n	80058b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058a8:	4b0a      	ldr	r3, [pc, #40]	; (80058d4 <prvResetNextTaskUnblockTime+0x3c>)
 80058aa:	f04f 32ff 	mov.w	r2, #4294967295
 80058ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058b0:	e008      	b.n	80058c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058b2:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <prvResetNextTaskUnblockTime+0x38>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	4a04      	ldr	r2, [pc, #16]	; (80058d4 <prvResetNextTaskUnblockTime+0x3c>)
 80058c2:	6013      	str	r3, [r2, #0]
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	20000d00 	.word	0x20000d00
 80058d4:	20000d68 	.word	0x20000d68

080058d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058de:	4b0b      	ldr	r3, [pc, #44]	; (800590c <xTaskGetSchedulerState+0x34>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d102      	bne.n	80058ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058e6:	2301      	movs	r3, #1
 80058e8:	607b      	str	r3, [r7, #4]
 80058ea:	e008      	b.n	80058fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058ec:	4b08      	ldr	r3, [pc, #32]	; (8005910 <xTaskGetSchedulerState+0x38>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d102      	bne.n	80058fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058f4:	2302      	movs	r3, #2
 80058f6:	607b      	str	r3, [r7, #4]
 80058f8:	e001      	b.n	80058fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058fa:	2300      	movs	r3, #0
 80058fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058fe:	687b      	ldr	r3, [r7, #4]
	}
 8005900:	4618      	mov	r0, r3
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	20000d54 	.word	0x20000d54
 8005910:	20000d70 	.word	0x20000d70

08005914 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005920:	2300      	movs	r3, #0
 8005922:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d051      	beq.n	80059ce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592e:	4b2a      	ldr	r3, [pc, #168]	; (80059d8 <xTaskPriorityInherit+0xc4>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005934:	429a      	cmp	r2, r3
 8005936:	d241      	bcs.n	80059bc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	2b00      	cmp	r3, #0
 800593e:	db06      	blt.n	800594e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005940:	4b25      	ldr	r3, [pc, #148]	; (80059d8 <xTaskPriorityInherit+0xc4>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005946:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	6959      	ldr	r1, [r3, #20]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005956:	4613      	mov	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4a1f      	ldr	r2, [pc, #124]	; (80059dc <xTaskPriorityInherit+0xc8>)
 8005960:	4413      	add	r3, r2
 8005962:	4299      	cmp	r1, r3
 8005964:	d122      	bne.n	80059ac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	3304      	adds	r3, #4
 800596a:	4618      	mov	r0, r3
 800596c:	f7fe f95e 	bl	8003c2c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005970:	4b19      	ldr	r3, [pc, #100]	; (80059d8 <xTaskPriorityInherit+0xc4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597e:	4b18      	ldr	r3, [pc, #96]	; (80059e0 <xTaskPriorityInherit+0xcc>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d903      	bls.n	800598e <xTaskPriorityInherit+0x7a>
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598a:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <xTaskPriorityInherit+0xcc>)
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4a10      	ldr	r2, [pc, #64]	; (80059dc <xTaskPriorityInherit+0xc8>)
 800599c:	441a      	add	r2, r3
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	3304      	adds	r3, #4
 80059a2:	4619      	mov	r1, r3
 80059a4:	4610      	mov	r0, r2
 80059a6:	f7fe f8e4 	bl	8003b72 <vListInsertEnd>
 80059aa:	e004      	b.n	80059b6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059ac:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <xTaskPriorityInherit+0xc4>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80059b6:	2301      	movs	r3, #1
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	e008      	b.n	80059ce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059c0:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <xTaskPriorityInherit+0xc4>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d201      	bcs.n	80059ce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80059ca:	2301      	movs	r3, #1
 80059cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059ce:	68fb      	ldr	r3, [r7, #12]
	}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	20000874 	.word	0x20000874
 80059dc:	20000878 	.word	0x20000878
 80059e0:	20000d50 	.word	0x20000d50

080059e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d056      	beq.n	8005aa8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80059fa:	4b2e      	ldr	r3, [pc, #184]	; (8005ab4 <xTaskPriorityDisinherit+0xd0>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d00a      	beq.n	8005a1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	60fb      	str	r3, [r7, #12]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10a      	bne.n	8005a38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	60bb      	str	r3, [r7, #8]
}
 8005a34:	bf00      	nop
 8005a36:	e7fe      	b.n	8005a36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3c:	1e5a      	subs	r2, r3, #1
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d02c      	beq.n	8005aa8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d128      	bne.n	8005aa8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe f8e6 	bl	8003c2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a78:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <xTaskPriorityDisinherit+0xd4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d903      	bls.n	8005a88 <xTaskPriorityDisinherit+0xa4>
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	4a0c      	ldr	r2, [pc, #48]	; (8005ab8 <xTaskPriorityDisinherit+0xd4>)
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4a09      	ldr	r2, [pc, #36]	; (8005abc <xTaskPriorityDisinherit+0xd8>)
 8005a96:	441a      	add	r2, r3
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	f7fe f867 	bl	8003b72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005aa8:	697b      	ldr	r3, [r7, #20]
	}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000874 	.word	0x20000874
 8005ab8:	20000d50 	.word	0x20000d50
 8005abc:	20000878 	.word	0x20000878

08005ac0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d06a      	beq.n	8005bae <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	60fb      	str	r3, [r7, #12]
}
 8005af2:	bf00      	nop
 8005af4:	e7fe      	b.n	8005af4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d902      	bls.n	8005b06 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	61fb      	str	r3, [r7, #28]
 8005b04:	e002      	b.n	8005b0c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	69fa      	ldr	r2, [r7, #28]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d04b      	beq.n	8005bae <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d146      	bne.n	8005bae <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005b20:	4b25      	ldr	r3, [pc, #148]	; (8005bb8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d10a      	bne.n	8005b40 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	60bb      	str	r3, [r7, #8]
}
 8005b3c:	bf00      	nop
 8005b3e:	e7fe      	b.n	8005b3e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	69fa      	ldr	r2, [r7, #28]
 8005b4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	db04      	blt.n	8005b5e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	6959      	ldr	r1, [r3, #20]
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4a13      	ldr	r2, [pc, #76]	; (8005bbc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005b6e:	4413      	add	r3, r2
 8005b70:	4299      	cmp	r1, r3
 8005b72:	d11c      	bne.n	8005bae <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	3304      	adds	r3, #4
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fe f857 	bl	8003c2c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b82:	4b0f      	ldr	r3, [pc, #60]	; (8005bc0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d903      	bls.n	8005b92 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	4a0c      	ldr	r2, [pc, #48]	; (8005bc0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b96:	4613      	mov	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4a07      	ldr	r2, [pc, #28]	; (8005bbc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005ba0:	441a      	add	r2, r3
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	4610      	mov	r0, r2
 8005baa:	f7fd ffe2 	bl	8003b72 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bae:	bf00      	nop
 8005bb0:	3720      	adds	r7, #32
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20000874 	.word	0x20000874
 8005bbc:	20000878 	.word	0x20000878
 8005bc0:	20000d50 	.word	0x20000d50

08005bc4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005bc8:	4b07      	ldr	r3, [pc, #28]	; (8005be8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d004      	beq.n	8005bda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005bd0:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bd6:	3201      	adds	r2, #1
 8005bd8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005bda:	4b03      	ldr	r3, [pc, #12]	; (8005be8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
	}
 8005bde:	4618      	mov	r0, r3
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	20000874 	.word	0x20000874

08005bec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005bf6:	4b21      	ldr	r3, [pc, #132]	; (8005c7c <prvAddCurrentTaskToDelayedList+0x90>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bfc:	4b20      	ldr	r3, [pc, #128]	; (8005c80 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3304      	adds	r3, #4
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fe f812 	bl	8003c2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d10a      	bne.n	8005c26 <prvAddCurrentTaskToDelayedList+0x3a>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d007      	beq.n	8005c26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c16:	4b1a      	ldr	r3, [pc, #104]	; (8005c80 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4819      	ldr	r0, [pc, #100]	; (8005c84 <prvAddCurrentTaskToDelayedList+0x98>)
 8005c20:	f7fd ffa7 	bl	8003b72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c24:	e026      	b.n	8005c74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c2e:	4b14      	ldr	r3, [pc, #80]	; (8005c80 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d209      	bcs.n	8005c52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c3e:	4b12      	ldr	r3, [pc, #72]	; (8005c88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	4b0f      	ldr	r3, [pc, #60]	; (8005c80 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3304      	adds	r3, #4
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	f7fd ffb5 	bl	8003bba <vListInsert>
}
 8005c50:	e010      	b.n	8005c74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c52:	4b0e      	ldr	r3, [pc, #56]	; (8005c8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	4b0a      	ldr	r3, [pc, #40]	; (8005c80 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4610      	mov	r0, r2
 8005c60:	f7fd ffab 	bl	8003bba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c64:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d202      	bcs.n	8005c74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c6e:	4a08      	ldr	r2, [pc, #32]	; (8005c90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	6013      	str	r3, [r2, #0]
}
 8005c74:	bf00      	nop
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20000d4c 	.word	0x20000d4c
 8005c80:	20000874 	.word	0x20000874
 8005c84:	20000d34 	.word	0x20000d34
 8005c88:	20000d04 	.word	0x20000d04
 8005c8c:	20000d00 	.word	0x20000d00
 8005c90:	20000d68 	.word	0x20000d68

08005c94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08a      	sub	sp, #40	; 0x28
 8005c98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c9e:	f000 fb07 	bl	80062b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005ca2:	4b1c      	ldr	r3, [pc, #112]	; (8005d14 <xTimerCreateTimerTask+0x80>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d021      	beq.n	8005cee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005cb2:	1d3a      	adds	r2, r7, #4
 8005cb4:	f107 0108 	add.w	r1, r7, #8
 8005cb8:	f107 030c 	add.w	r3, r7, #12
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fd ff11 	bl	8003ae4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005cc2:	6879      	ldr	r1, [r7, #4]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	9202      	str	r2, [sp, #8]
 8005cca:	9301      	str	r3, [sp, #4]
 8005ccc:	2302      	movs	r3, #2
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	460a      	mov	r2, r1
 8005cd4:	4910      	ldr	r1, [pc, #64]	; (8005d18 <xTimerCreateTimerTask+0x84>)
 8005cd6:	4811      	ldr	r0, [pc, #68]	; (8005d1c <xTimerCreateTimerTask+0x88>)
 8005cd8:	f7fe ffe0 	bl	8004c9c <xTaskCreateStatic>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	4a10      	ldr	r2, [pc, #64]	; (8005d20 <xTimerCreateTimerTask+0x8c>)
 8005ce0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ce2:	4b0f      	ldr	r3, [pc, #60]	; (8005d20 <xTimerCreateTimerTask+0x8c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005cea:	2301      	movs	r3, #1
 8005cec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	613b      	str	r3, [r7, #16]
}
 8005d06:	bf00      	nop
 8005d08:	e7fe      	b.n	8005d08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005d0a:	697b      	ldr	r3, [r7, #20]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	20000da4 	.word	0x20000da4
 8005d18:	08007884 	.word	0x08007884
 8005d1c:	08005e59 	.word	0x08005e59
 8005d20:	20000da8 	.word	0x20000da8

08005d24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08a      	sub	sp, #40	; 0x28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10a      	bne.n	8005d52 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	623b      	str	r3, [r7, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	e7fe      	b.n	8005d50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d52:	4b1a      	ldr	r3, [pc, #104]	; (8005dbc <xTimerGenericCommand+0x98>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d02a      	beq.n	8005db0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b05      	cmp	r3, #5
 8005d6a:	dc18      	bgt.n	8005d9e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d6c:	f7ff fdb4 	bl	80058d8 <xTaskGetSchedulerState>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d109      	bne.n	8005d8a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d76:	4b11      	ldr	r3, [pc, #68]	; (8005dbc <xTimerGenericCommand+0x98>)
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	f107 0110 	add.w	r1, r7, #16
 8005d7e:	2300      	movs	r3, #0
 8005d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d82:	f7fe f925 	bl	8003fd0 <xQueueGenericSend>
 8005d86:	6278      	str	r0, [r7, #36]	; 0x24
 8005d88:	e012      	b.n	8005db0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d8a:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <xTimerGenericCommand+0x98>)
 8005d8c:	6818      	ldr	r0, [r3, #0]
 8005d8e:	f107 0110 	add.w	r1, r7, #16
 8005d92:	2300      	movs	r3, #0
 8005d94:	2200      	movs	r2, #0
 8005d96:	f7fe f91b 	bl	8003fd0 <xQueueGenericSend>
 8005d9a:	6278      	str	r0, [r7, #36]	; 0x24
 8005d9c:	e008      	b.n	8005db0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d9e:	4b07      	ldr	r3, [pc, #28]	; (8005dbc <xTimerGenericCommand+0x98>)
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	f107 0110 	add.w	r1, r7, #16
 8005da6:	2300      	movs	r3, #0
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	f7fe fa0f 	bl	80041cc <xQueueGenericSendFromISR>
 8005dae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3728      	adds	r7, #40	; 0x28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20000da4 	.word	0x20000da4

08005dc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b088      	sub	sp, #32
 8005dc4:	af02      	add	r7, sp, #8
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dca:	4b22      	ldr	r3, [pc, #136]	; (8005e54 <prvProcessExpiredTimer+0x94>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fd ff27 	bl	8003c2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d022      	beq.n	8005e32 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	699a      	ldr	r2, [r3, #24]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	18d1      	adds	r1, r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	6978      	ldr	r0, [r7, #20]
 8005dfa:	f000 f8d1 	bl	8005fa0 <prvInsertTimerInActiveList>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d01f      	beq.n	8005e44 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e04:	2300      	movs	r3, #0
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	6978      	ldr	r0, [r7, #20]
 8005e10:	f7ff ff88 	bl	8005d24 <xTimerGenericCommand>
 8005e14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d113      	bne.n	8005e44 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e20:	f383 8811 	msr	BASEPRI, r3
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	60fb      	str	r3, [r7, #12]
}
 8005e2e:	bf00      	nop
 8005e30:	e7fe      	b.n	8005e30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e38:	f023 0301 	bic.w	r3, r3, #1
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	6978      	ldr	r0, [r7, #20]
 8005e4a:	4798      	blx	r3
}
 8005e4c:	bf00      	nop
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	20000d9c 	.word	0x20000d9c

08005e58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e60:	f107 0308 	add.w	r3, r7, #8
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 f857 	bl	8005f18 <prvGetNextExpireTime>
 8005e6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 f803 	bl	8005e7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e76:	f000 f8d5 	bl	8006024 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e7a:	e7f1      	b.n	8005e60 <prvTimerTask+0x8>

08005e7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e86:	f7ff f945 	bl	8005114 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e8a:	f107 0308 	add.w	r3, r7, #8
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 f866 	bl	8005f60 <prvSampleTimeNow>
 8005e94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d130      	bne.n	8005efe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10a      	bne.n	8005eb8 <prvProcessTimerOrBlockTask+0x3c>
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d806      	bhi.n	8005eb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005eaa:	f7ff f941 	bl	8005130 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005eae:	68f9      	ldr	r1, [r7, #12]
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7ff ff85 	bl	8005dc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005eb6:	e024      	b.n	8005f02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d008      	beq.n	8005ed0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ebe:	4b13      	ldr	r3, [pc, #76]	; (8005f0c <prvProcessTimerOrBlockTask+0x90>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <prvProcessTimerOrBlockTask+0x50>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e000      	b.n	8005ece <prvProcessTimerOrBlockTask+0x52>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ed0:	4b0f      	ldr	r3, [pc, #60]	; (8005f10 <prvProcessTimerOrBlockTask+0x94>)
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	4619      	mov	r1, r3
 8005ede:	f7fe fea9 	bl	8004c34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ee2:	f7ff f925 	bl	8005130 <xTaskResumeAll>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10a      	bne.n	8005f02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005eec:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <prvProcessTimerOrBlockTask+0x98>)
 8005eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	f3bf 8f6f 	isb	sy
}
 8005efc:	e001      	b.n	8005f02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005efe:	f7ff f917 	bl	8005130 <xTaskResumeAll>
}
 8005f02:	bf00      	nop
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	20000da0 	.word	0x20000da0
 8005f10:	20000da4 	.word	0x20000da4
 8005f14:	e000ed04 	.word	0xe000ed04

08005f18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f20:	4b0e      	ldr	r3, [pc, #56]	; (8005f5c <prvGetNextExpireTime+0x44>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <prvGetNextExpireTime+0x16>
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	e000      	b.n	8005f30 <prvGetNextExpireTime+0x18>
 8005f2e:	2200      	movs	r2, #0
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d105      	bne.n	8005f48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f3c:	4b07      	ldr	r3, [pc, #28]	; (8005f5c <prvGetNextExpireTime+0x44>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	60fb      	str	r3, [r7, #12]
 8005f46:	e001      	b.n	8005f4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	20000d9c 	.word	0x20000d9c

08005f60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f68:	f7ff f980 	bl	800526c <xTaskGetTickCount>
 8005f6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f6e:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <prvSampleTimeNow+0x3c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d205      	bcs.n	8005f84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f78:	f000 f936 	bl	80061e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	e002      	b.n	8005f8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f8a:	4a04      	ldr	r2, [pc, #16]	; (8005f9c <prvSampleTimeNow+0x3c>)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f90:	68fb      	ldr	r3, [r7, #12]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000dac 	.word	0x20000dac

08005fa0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d812      	bhi.n	8005fec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	1ad2      	subs	r2, r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d302      	bcc.n	8005fda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	e01b      	b.n	8006012 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005fda:	4b10      	ldr	r3, [pc, #64]	; (800601c <prvInsertTimerInActiveList+0x7c>)
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	f7fd fde8 	bl	8003bba <vListInsert>
 8005fea:	e012      	b.n	8006012 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d206      	bcs.n	8006002 <prvInsertTimerInActiveList+0x62>
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d302      	bcc.n	8006002 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	e007      	b.n	8006012 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006002:	4b07      	ldr	r3, [pc, #28]	; (8006020 <prvInsertTimerInActiveList+0x80>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3304      	adds	r3, #4
 800600a:	4619      	mov	r1, r3
 800600c:	4610      	mov	r0, r2
 800600e:	f7fd fdd4 	bl	8003bba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006012:	697b      	ldr	r3, [r7, #20]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	20000da0 	.word	0x20000da0
 8006020:	20000d9c 	.word	0x20000d9c

08006024 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08e      	sub	sp, #56	; 0x38
 8006028:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800602a:	e0ca      	b.n	80061c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	da18      	bge.n	8006064 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006032:	1d3b      	adds	r3, r7, #4
 8006034:	3304      	adds	r3, #4
 8006036:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10a      	bne.n	8006054 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	61fb      	str	r3, [r7, #28]
}
 8006050:	bf00      	nop
 8006052:	e7fe      	b.n	8006052 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800605a:	6850      	ldr	r0, [r2, #4]
 800605c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800605e:	6892      	ldr	r2, [r2, #8]
 8006060:	4611      	mov	r1, r2
 8006062:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	f2c0 80aa 	blt.w	80061c0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d004      	beq.n	8006082 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	3304      	adds	r3, #4
 800607c:	4618      	mov	r0, r3
 800607e:	f7fd fdd5 	bl	8003c2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006082:	463b      	mov	r3, r7
 8006084:	4618      	mov	r0, r3
 8006086:	f7ff ff6b 	bl	8005f60 <prvSampleTimeNow>
 800608a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b09      	cmp	r3, #9
 8006090:	f200 8097 	bhi.w	80061c2 <prvProcessReceivedCommands+0x19e>
 8006094:	a201      	add	r2, pc, #4	; (adr r2, 800609c <prvProcessReceivedCommands+0x78>)
 8006096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609a:	bf00      	nop
 800609c:	080060c5 	.word	0x080060c5
 80060a0:	080060c5 	.word	0x080060c5
 80060a4:	080060c5 	.word	0x080060c5
 80060a8:	08006139 	.word	0x08006139
 80060ac:	0800614d 	.word	0x0800614d
 80060b0:	08006197 	.word	0x08006197
 80060b4:	080060c5 	.word	0x080060c5
 80060b8:	080060c5 	.word	0x080060c5
 80060bc:	08006139 	.word	0x08006139
 80060c0:	0800614d 	.word	0x0800614d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ca:	f043 0301 	orr.w	r3, r3, #1
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	18d1      	adds	r1, r2, r3
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060e4:	f7ff ff5c 	bl	8005fa0 <prvInsertTimerInActiveList>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d069      	beq.n	80061c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d05e      	beq.n	80061c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	441a      	add	r2, r3
 800610c:	2300      	movs	r3, #0
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	2300      	movs	r3, #0
 8006112:	2100      	movs	r1, #0
 8006114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006116:	f7ff fe05 	bl	8005d24 <xTimerGenericCommand>
 800611a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d14f      	bne.n	80061c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	61bb      	str	r3, [r7, #24]
}
 8006134:	bf00      	nop
 8006136:	e7fe      	b.n	8006136 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800613e:	f023 0301 	bic.w	r3, r3, #1
 8006142:	b2da      	uxtb	r2, r3
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800614a:	e03a      	b.n	80061c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800614c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006152:	f043 0301 	orr.w	r3, r3, #1
 8006156:	b2da      	uxtb	r2, r3
 8006158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006162:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	617b      	str	r3, [r7, #20]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	18d1      	adds	r1, r2, r3
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800618e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006190:	f7ff ff06 	bl	8005fa0 <prvInsertTimerInActiveList>
					break;
 8006194:	e015      	b.n	80061c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d103      	bne.n	80061ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80061a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061a6:	f000 fbdb 	bl	8006960 <vPortFree>
 80061aa:	e00a      	b.n	80061c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061b2:	f023 0301 	bic.w	r3, r3, #1
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061be:	e000      	b.n	80061c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80061c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061c2:	4b08      	ldr	r3, [pc, #32]	; (80061e4 <prvProcessReceivedCommands+0x1c0>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	1d39      	adds	r1, r7, #4
 80061c8:	2200      	movs	r2, #0
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe f926 	bl	800441c <xQueueReceive>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f47f af2a 	bne.w	800602c <prvProcessReceivedCommands+0x8>
	}
}
 80061d8:	bf00      	nop
 80061da:	bf00      	nop
 80061dc:	3730      	adds	r7, #48	; 0x30
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000da4 	.word	0x20000da4

080061e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b088      	sub	sp, #32
 80061ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061ee:	e048      	b.n	8006282 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061f0:	4b2d      	ldr	r3, [pc, #180]	; (80062a8 <prvSwitchTimerLists+0xc0>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061fa:	4b2b      	ldr	r3, [pc, #172]	; (80062a8 <prvSwitchTimerLists+0xc0>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3304      	adds	r3, #4
 8006208:	4618      	mov	r0, r3
 800620a:	f7fd fd0f 	bl	8003c2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d02e      	beq.n	8006282 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4413      	add	r3, r2
 800622c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	429a      	cmp	r2, r3
 8006234:	d90e      	bls.n	8006254 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006242:	4b19      	ldr	r3, [pc, #100]	; (80062a8 <prvSwitchTimerLists+0xc0>)
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3304      	adds	r3, #4
 800624a:	4619      	mov	r1, r3
 800624c:	4610      	mov	r0, r2
 800624e:	f7fd fcb4 	bl	8003bba <vListInsert>
 8006252:	e016      	b.n	8006282 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006254:	2300      	movs	r3, #0
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	2300      	movs	r3, #0
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	2100      	movs	r1, #0
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f7ff fd60 	bl	8005d24 <xTimerGenericCommand>
 8006264:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10a      	bne.n	8006282 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	603b      	str	r3, [r7, #0]
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006282:	4b09      	ldr	r3, [pc, #36]	; (80062a8 <prvSwitchTimerLists+0xc0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1b1      	bne.n	80061f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800628c:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <prvSwitchTimerLists+0xc0>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006292:	4b06      	ldr	r3, [pc, #24]	; (80062ac <prvSwitchTimerLists+0xc4>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a04      	ldr	r2, [pc, #16]	; (80062a8 <prvSwitchTimerLists+0xc0>)
 8006298:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800629a:	4a04      	ldr	r2, [pc, #16]	; (80062ac <prvSwitchTimerLists+0xc4>)
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	6013      	str	r3, [r2, #0]
}
 80062a0:	bf00      	nop
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	20000d9c 	.word	0x20000d9c
 80062ac:	20000da0 	.word	0x20000da0

080062b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062b6:	f000 f965 	bl	8006584 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062ba:	4b15      	ldr	r3, [pc, #84]	; (8006310 <prvCheckForValidListAndQueue+0x60>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d120      	bne.n	8006304 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062c2:	4814      	ldr	r0, [pc, #80]	; (8006314 <prvCheckForValidListAndQueue+0x64>)
 80062c4:	f7fd fc28 	bl	8003b18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062c8:	4813      	ldr	r0, [pc, #76]	; (8006318 <prvCheckForValidListAndQueue+0x68>)
 80062ca:	f7fd fc25 	bl	8003b18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062ce:	4b13      	ldr	r3, [pc, #76]	; (800631c <prvCheckForValidListAndQueue+0x6c>)
 80062d0:	4a10      	ldr	r2, [pc, #64]	; (8006314 <prvCheckForValidListAndQueue+0x64>)
 80062d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062d4:	4b12      	ldr	r3, [pc, #72]	; (8006320 <prvCheckForValidListAndQueue+0x70>)
 80062d6:	4a10      	ldr	r2, [pc, #64]	; (8006318 <prvCheckForValidListAndQueue+0x68>)
 80062d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80062da:	2300      	movs	r3, #0
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	4b11      	ldr	r3, [pc, #68]	; (8006324 <prvCheckForValidListAndQueue+0x74>)
 80062e0:	4a11      	ldr	r2, [pc, #68]	; (8006328 <prvCheckForValidListAndQueue+0x78>)
 80062e2:	2110      	movs	r1, #16
 80062e4:	200a      	movs	r0, #10
 80062e6:	f7fd fd33 	bl	8003d50 <xQueueGenericCreateStatic>
 80062ea:	4603      	mov	r3, r0
 80062ec:	4a08      	ldr	r2, [pc, #32]	; (8006310 <prvCheckForValidListAndQueue+0x60>)
 80062ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80062f0:	4b07      	ldr	r3, [pc, #28]	; (8006310 <prvCheckForValidListAndQueue+0x60>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80062f8:	4b05      	ldr	r3, [pc, #20]	; (8006310 <prvCheckForValidListAndQueue+0x60>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	490b      	ldr	r1, [pc, #44]	; (800632c <prvCheckForValidListAndQueue+0x7c>)
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fe fc44 	bl	8004b8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006304:	f000 f96e 	bl	80065e4 <vPortExitCritical>
}
 8006308:	bf00      	nop
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20000da4 	.word	0x20000da4
 8006314:	20000d74 	.word	0x20000d74
 8006318:	20000d88 	.word	0x20000d88
 800631c:	20000d9c 	.word	0x20000d9c
 8006320:	20000da0 	.word	0x20000da0
 8006324:	20000e50 	.word	0x20000e50
 8006328:	20000db0 	.word	0x20000db0
 800632c:	0800788c 	.word	0x0800788c

08006330 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	3b04      	subs	r3, #4
 8006340:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006348:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3b04      	subs	r3, #4
 800634e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f023 0201 	bic.w	r2, r3, #1
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	3b04      	subs	r3, #4
 800635e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006360:	4a0c      	ldr	r2, [pc, #48]	; (8006394 <pxPortInitialiseStack+0x64>)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	3b14      	subs	r3, #20
 800636a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3b04      	subs	r3, #4
 8006376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f06f 0202 	mvn.w	r2, #2
 800637e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3b20      	subs	r3, #32
 8006384:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006386:	68fb      	ldr	r3, [r7, #12]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	08006399 	.word	0x08006399

08006398 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063a2:	4b12      	ldr	r3, [pc, #72]	; (80063ec <prvTaskExitError+0x54>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063aa:	d00a      	beq.n	80063c2 <prvTaskExitError+0x2a>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	60fb      	str	r3, [r7, #12]
}
 80063be:	bf00      	nop
 80063c0:	e7fe      	b.n	80063c0 <prvTaskExitError+0x28>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	60bb      	str	r3, [r7, #8]
}
 80063d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063d6:	bf00      	nop
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d0fc      	beq.n	80063d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063de:	bf00      	nop
 80063e0:	bf00      	nop
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	2000000c 	.word	0x2000000c

080063f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063f0:	4b07      	ldr	r3, [pc, #28]	; (8006410 <pxCurrentTCBConst2>)
 80063f2:	6819      	ldr	r1, [r3, #0]
 80063f4:	6808      	ldr	r0, [r1, #0]
 80063f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fa:	f380 8809 	msr	PSP, r0
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f04f 0000 	mov.w	r0, #0
 8006406:	f380 8811 	msr	BASEPRI, r0
 800640a:	4770      	bx	lr
 800640c:	f3af 8000 	nop.w

08006410 <pxCurrentTCBConst2>:
 8006410:	20000874 	.word	0x20000874
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006414:	bf00      	nop
 8006416:	bf00      	nop

08006418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006418:	4808      	ldr	r0, [pc, #32]	; (800643c <prvPortStartFirstTask+0x24>)
 800641a:	6800      	ldr	r0, [r0, #0]
 800641c:	6800      	ldr	r0, [r0, #0]
 800641e:	f380 8808 	msr	MSP, r0
 8006422:	f04f 0000 	mov.w	r0, #0
 8006426:	f380 8814 	msr	CONTROL, r0
 800642a:	b662      	cpsie	i
 800642c:	b661      	cpsie	f
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	df00      	svc	0
 8006438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800643a:	bf00      	nop
 800643c:	e000ed08 	.word	0xe000ed08

08006440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006446:	4b46      	ldr	r3, [pc, #280]	; (8006560 <xPortStartScheduler+0x120>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a46      	ldr	r2, [pc, #280]	; (8006564 <xPortStartScheduler+0x124>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d10a      	bne.n	8006466 <xPortStartScheduler+0x26>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	613b      	str	r3, [r7, #16]
}
 8006462:	bf00      	nop
 8006464:	e7fe      	b.n	8006464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006466:	4b3e      	ldr	r3, [pc, #248]	; (8006560 <xPortStartScheduler+0x120>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a3f      	ldr	r2, [pc, #252]	; (8006568 <xPortStartScheduler+0x128>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d10a      	bne.n	8006486 <xPortStartScheduler+0x46>
	__asm volatile
 8006470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006474:	f383 8811 	msr	BASEPRI, r3
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	60fb      	str	r3, [r7, #12]
}
 8006482:	bf00      	nop
 8006484:	e7fe      	b.n	8006484 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006486:	4b39      	ldr	r3, [pc, #228]	; (800656c <xPortStartScheduler+0x12c>)
 8006488:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	b2db      	uxtb	r3, r3
 8006490:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	22ff      	movs	r2, #255	; 0xff
 8006496:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	4b31      	ldr	r3, [pc, #196]	; (8006570 <xPortStartScheduler+0x130>)
 80064ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064ae:	4b31      	ldr	r3, [pc, #196]	; (8006574 <xPortStartScheduler+0x134>)
 80064b0:	2207      	movs	r2, #7
 80064b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064b4:	e009      	b.n	80064ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80064b6:	4b2f      	ldr	r3, [pc, #188]	; (8006574 <xPortStartScheduler+0x134>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	4a2d      	ldr	r2, [pc, #180]	; (8006574 <xPortStartScheduler+0x134>)
 80064be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064c0:	78fb      	ldrb	r3, [r7, #3]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064ca:	78fb      	ldrb	r3, [r7, #3]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d2:	2b80      	cmp	r3, #128	; 0x80
 80064d4:	d0ef      	beq.n	80064b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064d6:	4b27      	ldr	r3, [pc, #156]	; (8006574 <xPortStartScheduler+0x134>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f1c3 0307 	rsb	r3, r3, #7
 80064de:	2b04      	cmp	r3, #4
 80064e0:	d00a      	beq.n	80064f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	60bb      	str	r3, [r7, #8]
}
 80064f4:	bf00      	nop
 80064f6:	e7fe      	b.n	80064f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064f8:	4b1e      	ldr	r3, [pc, #120]	; (8006574 <xPortStartScheduler+0x134>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	021b      	lsls	r3, r3, #8
 80064fe:	4a1d      	ldr	r2, [pc, #116]	; (8006574 <xPortStartScheduler+0x134>)
 8006500:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006502:	4b1c      	ldr	r3, [pc, #112]	; (8006574 <xPortStartScheduler+0x134>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800650a:	4a1a      	ldr	r2, [pc, #104]	; (8006574 <xPortStartScheduler+0x134>)
 800650c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	b2da      	uxtb	r2, r3
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006516:	4b18      	ldr	r3, [pc, #96]	; (8006578 <xPortStartScheduler+0x138>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a17      	ldr	r2, [pc, #92]	; (8006578 <xPortStartScheduler+0x138>)
 800651c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006520:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006522:	4b15      	ldr	r3, [pc, #84]	; (8006578 <xPortStartScheduler+0x138>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a14      	ldr	r2, [pc, #80]	; (8006578 <xPortStartScheduler+0x138>)
 8006528:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800652c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800652e:	f000 f8dd 	bl	80066ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006532:	4b12      	ldr	r3, [pc, #72]	; (800657c <xPortStartScheduler+0x13c>)
 8006534:	2200      	movs	r2, #0
 8006536:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006538:	f000 f8fc 	bl	8006734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800653c:	4b10      	ldr	r3, [pc, #64]	; (8006580 <xPortStartScheduler+0x140>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a0f      	ldr	r2, [pc, #60]	; (8006580 <xPortStartScheduler+0x140>)
 8006542:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006546:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006548:	f7ff ff66 	bl	8006418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800654c:	f7fe ff58 	bl	8005400 <vTaskSwitchContext>
	prvTaskExitError();
 8006550:	f7ff ff22 	bl	8006398 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	e000ed00 	.word	0xe000ed00
 8006564:	410fc271 	.word	0x410fc271
 8006568:	410fc270 	.word	0x410fc270
 800656c:	e000e400 	.word	0xe000e400
 8006570:	20000ea0 	.word	0x20000ea0
 8006574:	20000ea4 	.word	0x20000ea4
 8006578:	e000ed20 	.word	0xe000ed20
 800657c:	2000000c 	.word	0x2000000c
 8006580:	e000ef34 	.word	0xe000ef34

08006584 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	607b      	str	r3, [r7, #4]
}
 800659c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800659e:	4b0f      	ldr	r3, [pc, #60]	; (80065dc <vPortEnterCritical+0x58>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3301      	adds	r3, #1
 80065a4:	4a0d      	ldr	r2, [pc, #52]	; (80065dc <vPortEnterCritical+0x58>)
 80065a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065a8:	4b0c      	ldr	r3, [pc, #48]	; (80065dc <vPortEnterCritical+0x58>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d10f      	bne.n	80065d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065b0:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <vPortEnterCritical+0x5c>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	603b      	str	r3, [r7, #0]
}
 80065cc:	bf00      	nop
 80065ce:	e7fe      	b.n	80065ce <vPortEnterCritical+0x4a>
	}
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	2000000c 	.word	0x2000000c
 80065e0:	e000ed04 	.word	0xe000ed04

080065e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065ea:	4b12      	ldr	r3, [pc, #72]	; (8006634 <vPortExitCritical+0x50>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10a      	bne.n	8006608 <vPortExitCritical+0x24>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	607b      	str	r3, [r7, #4]
}
 8006604:	bf00      	nop
 8006606:	e7fe      	b.n	8006606 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006608:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <vPortExitCritical+0x50>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3b01      	subs	r3, #1
 800660e:	4a09      	ldr	r2, [pc, #36]	; (8006634 <vPortExitCritical+0x50>)
 8006610:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006612:	4b08      	ldr	r3, [pc, #32]	; (8006634 <vPortExitCritical+0x50>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d105      	bne.n	8006626 <vPortExitCritical+0x42>
 800661a:	2300      	movs	r3, #0
 800661c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	f383 8811 	msr	BASEPRI, r3
}
 8006624:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	2000000c 	.word	0x2000000c
	...

08006640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006640:	f3ef 8009 	mrs	r0, PSP
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	4b15      	ldr	r3, [pc, #84]	; (80066a0 <pxCurrentTCBConst>)
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	f01e 0f10 	tst.w	lr, #16
 8006650:	bf08      	it	eq
 8006652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665a:	6010      	str	r0, [r2, #0]
 800665c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006664:	f380 8811 	msr	BASEPRI, r0
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f7fe fec6 	bl	8005400 <vTaskSwitchContext>
 8006674:	f04f 0000 	mov.w	r0, #0
 8006678:	f380 8811 	msr	BASEPRI, r0
 800667c:	bc09      	pop	{r0, r3}
 800667e:	6819      	ldr	r1, [r3, #0]
 8006680:	6808      	ldr	r0, [r1, #0]
 8006682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006686:	f01e 0f10 	tst.w	lr, #16
 800668a:	bf08      	it	eq
 800668c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006690:	f380 8809 	msr	PSP, r0
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	f3af 8000 	nop.w

080066a0 <pxCurrentTCBConst>:
 80066a0:	20000874 	.word	0x20000874
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop

080066a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	607b      	str	r3, [r7, #4]
}
 80066c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066c2:	f7fe fde3 	bl	800528c <xTaskIncrementTick>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d003      	beq.n	80066d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066cc:	4b06      	ldr	r3, [pc, #24]	; (80066e8 <xPortSysTickHandler+0x40>)
 80066ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	2300      	movs	r3, #0
 80066d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	f383 8811 	msr	BASEPRI, r3
}
 80066de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80066e0:	bf00      	nop
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	e000ed04 	.word	0xe000ed04

080066ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066f0:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <vPortSetupTimerInterrupt+0x34>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066f6:	4b0b      	ldr	r3, [pc, #44]	; (8006724 <vPortSetupTimerInterrupt+0x38>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066fc:	4b0a      	ldr	r3, [pc, #40]	; (8006728 <vPortSetupTimerInterrupt+0x3c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a0a      	ldr	r2, [pc, #40]	; (800672c <vPortSetupTimerInterrupt+0x40>)
 8006702:	fba2 2303 	umull	r2, r3, r2, r3
 8006706:	099b      	lsrs	r3, r3, #6
 8006708:	4a09      	ldr	r2, [pc, #36]	; (8006730 <vPortSetupTimerInterrupt+0x44>)
 800670a:	3b01      	subs	r3, #1
 800670c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800670e:	4b04      	ldr	r3, [pc, #16]	; (8006720 <vPortSetupTimerInterrupt+0x34>)
 8006710:	2207      	movs	r2, #7
 8006712:	601a      	str	r2, [r3, #0]
}
 8006714:	bf00      	nop
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	e000e010 	.word	0xe000e010
 8006724:	e000e018 	.word	0xe000e018
 8006728:	20000000 	.word	0x20000000
 800672c:	10624dd3 	.word	0x10624dd3
 8006730:	e000e014 	.word	0xe000e014

08006734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006734:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006744 <vPortEnableVFP+0x10>
 8006738:	6801      	ldr	r1, [r0, #0]
 800673a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800673e:	6001      	str	r1, [r0, #0]
 8006740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006742:	bf00      	nop
 8006744:	e000ed88 	.word	0xe000ed88

08006748 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800674e:	f3ef 8305 	mrs	r3, IPSR
 8006752:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b0f      	cmp	r3, #15
 8006758:	d914      	bls.n	8006784 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800675a:	4a17      	ldr	r2, [pc, #92]	; (80067b8 <vPortValidateInterruptPriority+0x70>)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006764:	4b15      	ldr	r3, [pc, #84]	; (80067bc <vPortValidateInterruptPriority+0x74>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	7afa      	ldrb	r2, [r7, #11]
 800676a:	429a      	cmp	r2, r3
 800676c:	d20a      	bcs.n	8006784 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	607b      	str	r3, [r7, #4]
}
 8006780:	bf00      	nop
 8006782:	e7fe      	b.n	8006782 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006784:	4b0e      	ldr	r3, [pc, #56]	; (80067c0 <vPortValidateInterruptPriority+0x78>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800678c:	4b0d      	ldr	r3, [pc, #52]	; (80067c4 <vPortValidateInterruptPriority+0x7c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	429a      	cmp	r2, r3
 8006792:	d90a      	bls.n	80067aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	603b      	str	r3, [r7, #0]
}
 80067a6:	bf00      	nop
 80067a8:	e7fe      	b.n	80067a8 <vPortValidateInterruptPriority+0x60>
	}
 80067aa:	bf00      	nop
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	e000e3f0 	.word	0xe000e3f0
 80067bc:	20000ea0 	.word	0x20000ea0
 80067c0:	e000ed0c 	.word	0xe000ed0c
 80067c4:	20000ea4 	.word	0x20000ea4

080067c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08a      	sub	sp, #40	; 0x28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067d0:	2300      	movs	r3, #0
 80067d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067d4:	f7fe fc9e 	bl	8005114 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067d8:	4b5b      	ldr	r3, [pc, #364]	; (8006948 <pvPortMalloc+0x180>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067e0:	f000 f920 	bl	8006a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067e4:	4b59      	ldr	r3, [pc, #356]	; (800694c <pvPortMalloc+0x184>)
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4013      	ands	r3, r2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f040 8093 	bne.w	8006918 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01d      	beq.n	8006834 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80067f8:	2208      	movs	r2, #8
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4413      	add	r3, r2
 80067fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	2b00      	cmp	r3, #0
 8006808:	d014      	beq.n	8006834 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f023 0307 	bic.w	r3, r3, #7
 8006810:	3308      	adds	r3, #8
 8006812:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <pvPortMalloc+0x6c>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	617b      	str	r3, [r7, #20]
}
 8006830:	bf00      	nop
 8006832:	e7fe      	b.n	8006832 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d06e      	beq.n	8006918 <pvPortMalloc+0x150>
 800683a:	4b45      	ldr	r3, [pc, #276]	; (8006950 <pvPortMalloc+0x188>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	429a      	cmp	r2, r3
 8006842:	d869      	bhi.n	8006918 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006844:	4b43      	ldr	r3, [pc, #268]	; (8006954 <pvPortMalloc+0x18c>)
 8006846:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006848:	4b42      	ldr	r3, [pc, #264]	; (8006954 <pvPortMalloc+0x18c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800684e:	e004      	b.n	800685a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	429a      	cmp	r2, r3
 8006862:	d903      	bls.n	800686c <pvPortMalloc+0xa4>
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1f1      	bne.n	8006850 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800686c:	4b36      	ldr	r3, [pc, #216]	; (8006948 <pvPortMalloc+0x180>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006872:	429a      	cmp	r2, r3
 8006874:	d050      	beq.n	8006918 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2208      	movs	r2, #8
 800687c:	4413      	add	r3, r2
 800687e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	1ad2      	subs	r2, r2, r3
 8006890:	2308      	movs	r3, #8
 8006892:	005b      	lsls	r3, r3, #1
 8006894:	429a      	cmp	r2, r3
 8006896:	d91f      	bls.n	80068d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4413      	add	r3, r2
 800689e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	f003 0307 	and.w	r3, r3, #7
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <pvPortMalloc+0xf8>
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	613b      	str	r3, [r7, #16]
}
 80068bc:	bf00      	nop
 80068be:	e7fe      	b.n	80068be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	1ad2      	subs	r2, r2, r3
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068d2:	69b8      	ldr	r0, [r7, #24]
 80068d4:	f000 f908 	bl	8006ae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068d8:	4b1d      	ldr	r3, [pc, #116]	; (8006950 <pvPortMalloc+0x188>)
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	4a1b      	ldr	r2, [pc, #108]	; (8006950 <pvPortMalloc+0x188>)
 80068e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068e6:	4b1a      	ldr	r3, [pc, #104]	; (8006950 <pvPortMalloc+0x188>)
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	4b1b      	ldr	r3, [pc, #108]	; (8006958 <pvPortMalloc+0x190>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d203      	bcs.n	80068fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068f2:	4b17      	ldr	r3, [pc, #92]	; (8006950 <pvPortMalloc+0x188>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a18      	ldr	r2, [pc, #96]	; (8006958 <pvPortMalloc+0x190>)
 80068f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	4b13      	ldr	r3, [pc, #76]	; (800694c <pvPortMalloc+0x184>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	431a      	orrs	r2, r3
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	2200      	movs	r2, #0
 800690c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800690e:	4b13      	ldr	r3, [pc, #76]	; (800695c <pvPortMalloc+0x194>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3301      	adds	r3, #1
 8006914:	4a11      	ldr	r2, [pc, #68]	; (800695c <pvPortMalloc+0x194>)
 8006916:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006918:	f7fe fc0a 	bl	8005130 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	f003 0307 	and.w	r3, r3, #7
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00a      	beq.n	800693c <pvPortMalloc+0x174>
	__asm volatile
 8006926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	60fb      	str	r3, [r7, #12]
}
 8006938:	bf00      	nop
 800693a:	e7fe      	b.n	800693a <pvPortMalloc+0x172>
	return pvReturn;
 800693c:	69fb      	ldr	r3, [r7, #28]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3728      	adds	r7, #40	; 0x28
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	20004ab0 	.word	0x20004ab0
 800694c:	20004ac4 	.word	0x20004ac4
 8006950:	20004ab4 	.word	0x20004ab4
 8006954:	20004aa8 	.word	0x20004aa8
 8006958:	20004ab8 	.word	0x20004ab8
 800695c:	20004abc 	.word	0x20004abc

08006960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d04d      	beq.n	8006a0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006972:	2308      	movs	r3, #8
 8006974:	425b      	negs	r3, r3
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	4413      	add	r3, r2
 800697a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	4b24      	ldr	r3, [pc, #144]	; (8006a18 <vPortFree+0xb8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4013      	ands	r3, r2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10a      	bne.n	80069a4 <vPortFree+0x44>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	60fb      	str	r3, [r7, #12]
}
 80069a0:	bf00      	nop
 80069a2:	e7fe      	b.n	80069a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <vPortFree+0x62>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	60bb      	str	r3, [r7, #8]
}
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	4b14      	ldr	r3, [pc, #80]	; (8006a18 <vPortFree+0xb8>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4013      	ands	r3, r2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d01e      	beq.n	8006a0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d11a      	bne.n	8006a0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	4b0e      	ldr	r3, [pc, #56]	; (8006a18 <vPortFree+0xb8>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	43db      	mvns	r3, r3
 80069e2:	401a      	ands	r2, r3
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069e8:	f7fe fb94 	bl	8005114 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <vPortFree+0xbc>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4413      	add	r3, r2
 80069f6:	4a09      	ldr	r2, [pc, #36]	; (8006a1c <vPortFree+0xbc>)
 80069f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069fa:	6938      	ldr	r0, [r7, #16]
 80069fc:	f000 f874 	bl	8006ae8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a00:	4b07      	ldr	r3, [pc, #28]	; (8006a20 <vPortFree+0xc0>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3301      	adds	r3, #1
 8006a06:	4a06      	ldr	r2, [pc, #24]	; (8006a20 <vPortFree+0xc0>)
 8006a08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a0a:	f7fe fb91 	bl	8005130 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a0e:	bf00      	nop
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20004ac4 	.word	0x20004ac4
 8006a1c:	20004ab4 	.word	0x20004ab4
 8006a20:	20004ac0 	.word	0x20004ac0

08006a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a30:	4b27      	ldr	r3, [pc, #156]	; (8006ad0 <prvHeapInit+0xac>)
 8006a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f003 0307 	and.w	r3, r3, #7
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00c      	beq.n	8006a58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	3307      	adds	r3, #7
 8006a42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f023 0307 	bic.w	r3, r3, #7
 8006a4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	4a1f      	ldr	r2, [pc, #124]	; (8006ad0 <prvHeapInit+0xac>)
 8006a54:	4413      	add	r3, r2
 8006a56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a5c:	4a1d      	ldr	r2, [pc, #116]	; (8006ad4 <prvHeapInit+0xb0>)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a62:	4b1c      	ldr	r3, [pc, #112]	; (8006ad4 <prvHeapInit+0xb0>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a70:	2208      	movs	r2, #8
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	1a9b      	subs	r3, r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 0307 	bic.w	r3, r3, #7
 8006a7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4a15      	ldr	r2, [pc, #84]	; (8006ad8 <prvHeapInit+0xb4>)
 8006a84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a86:	4b14      	ldr	r3, [pc, #80]	; (8006ad8 <prvHeapInit+0xb4>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a8e:	4b12      	ldr	r3, [pc, #72]	; (8006ad8 <prvHeapInit+0xb4>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	1ad2      	subs	r2, r2, r3
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006aa4:	4b0c      	ldr	r3, [pc, #48]	; (8006ad8 <prvHeapInit+0xb4>)
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	4a0a      	ldr	r2, [pc, #40]	; (8006adc <prvHeapInit+0xb8>)
 8006ab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	4a09      	ldr	r2, [pc, #36]	; (8006ae0 <prvHeapInit+0xbc>)
 8006aba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006abc:	4b09      	ldr	r3, [pc, #36]	; (8006ae4 <prvHeapInit+0xc0>)
 8006abe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ac2:	601a      	str	r2, [r3, #0]
}
 8006ac4:	bf00      	nop
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	20000ea8 	.word	0x20000ea8
 8006ad4:	20004aa8 	.word	0x20004aa8
 8006ad8:	20004ab0 	.word	0x20004ab0
 8006adc:	20004ab8 	.word	0x20004ab8
 8006ae0:	20004ab4 	.word	0x20004ab4
 8006ae4:	20004ac4 	.word	0x20004ac4

08006ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006af0:	4b28      	ldr	r3, [pc, #160]	; (8006b94 <prvInsertBlockIntoFreeList+0xac>)
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	e002      	b.n	8006afc <prvInsertBlockIntoFreeList+0x14>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d8f7      	bhi.n	8006af6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	4413      	add	r3, r2
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d108      	bne.n	8006b2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	441a      	add	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	441a      	add	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d118      	bne.n	8006b70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	4b15      	ldr	r3, [pc, #84]	; (8006b98 <prvInsertBlockIntoFreeList+0xb0>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d00d      	beq.n	8006b66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	441a      	add	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	e008      	b.n	8006b78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b66:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <prvInsertBlockIntoFreeList+0xb0>)
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	e003      	b.n	8006b78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d002      	beq.n	8006b86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b86:	bf00      	nop
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	20004aa8 	.word	0x20004aa8
 8006b98:	20004ab0 	.word	0x20004ab0

08006b9c <gpio>:
 */


#include "i2c.h"

void gpio(){
 8006b9c:	b480      	push	{r7}
 8006b9e:	b089      	sub	sp, #36	; 0x24
 8006ba0:	af00      	add	r7, sp, #0
	uint32_t *rcc = (uint32_t*) 0x40023800;
 8006ba2:	4b20      	ldr	r3, [pc, #128]	; (8006c24 <gpio+0x88>)
 8006ba4:	61fb      	str	r3, [r7, #28]
	uint32_t *rcc1 = (uint32_t*) 0x40023830;
 8006ba6:	4b20      	ldr	r3, [pc, #128]	; (8006c28 <gpio+0x8c>)
 8006ba8:	61bb      	str	r3, [r7, #24]
	uint32_t *rcc2 = (uint32_t*) 0x40023840;
 8006baa:	4b20      	ldr	r3, [pc, #128]	; (8006c2c <gpio+0x90>)
 8006bac:	617b      	str	r3, [r7, #20]

	*rcc1 |= 1<<1;
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f043 0202 	orr.w	r2, r3, #2
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	601a      	str	r2, [r3, #0]
	*rcc2 |= 1<<21;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	601a      	str	r2, [r3, #0]

	uint32_t *p= (uint32_t*) 0x40020400;
 8006bc6:	4b1a      	ldr	r3, [pc, #104]	; (8006c30 <gpio+0x94>)
 8006bc8:	613b      	str	r3, [r7, #16]
	uint32_t *p1= (uint32_t*) 0x40020404;
 8006bca:	4b1a      	ldr	r3, [pc, #104]	; (8006c34 <gpio+0x98>)
 8006bcc:	60fb      	str	r3, [r7, #12]
	uint32_t *p2= (uint32_t*) 0x4002040c;
 8006bce:	4b1a      	ldr	r3, [pc, #104]	; (8006c38 <gpio+0x9c>)
 8006bd0:	60bb      	str	r3, [r7, #8]
	uint32_t *p22= (uint32_t*) 0x40020408;
 8006bd2:	4b1a      	ldr	r3, [pc, #104]	; (8006c3c <gpio+0xa0>)
 8006bd4:	607b      	str	r3, [r7, #4]
	uint32_t *p3= (uint32_t*) 0x40020424;
 8006bd6:	4b1a      	ldr	r3, [pc, #104]	; (8006c40 <gpio+0xa4>)
 8006bd8:	603b      	str	r3, [r7, #0]
	*p |=  (2<<16) | (2<<18);
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f443 2220 	orr.w	r2, r3, #655360	; 0xa0000
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	601a      	str	r2, [r3, #0]
	*p1 |= (1<<8) | (1<<9);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	601a      	str	r2, [r3, #0]
	*p2 |= (1<<16) | (1<<18);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f443 22a0 	orr.w	r2, r3, #327680	; 0x50000
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	601a      	str	r2, [r3, #0]
	*p22 |= (3<<16) | (3<<18);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f443 2270 	orr.w	r2, r3, #983040	; 0xf0000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	601a      	str	r2, [r3, #0]

	*p3 |= (4<<0) | (4<<4);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f043 0244 	orr.w	r2, r3, #68	; 0x44
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	601a      	str	r2, [r3, #0]

}
 8006c16:	bf00      	nop
 8006c18:	3724      	adds	r7, #36	; 0x24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	40023800 	.word	0x40023800
 8006c28:	40023830 	.word	0x40023830
 8006c2c:	40023840 	.word	0x40023840
 8006c30:	40020400 	.word	0x40020400
 8006c34:	40020404 	.word	0x40020404
 8006c38:	4002040c 	.word	0x4002040c
 8006c3c:	40020408 	.word	0x40020408
 8006c40:	40020424 	.word	0x40020424

08006c44 <init3>:

void init3(uint8_t addr){
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	71fb      	strb	r3, [r7, #7]
     gpio();
 8006c4e:	f7ff ffa5 	bl	8006b9c <gpio>
	i2c_base->I2C_CR1 |= 1<<15;
 8006c52:	4b16      	ldr	r3, [pc, #88]	; (8006cac <init3+0x68>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a15      	ldr	r2, [pc, #84]	; (8006cac <init3+0x68>)
 8006c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c5c:	6013      	str	r3, [r2, #0]
		i2c_base->I2C_CR1 &= ~(1<<15);
 8006c5e:	4b13      	ldr	r3, [pc, #76]	; (8006cac <init3+0x68>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a12      	ldr	r2, [pc, #72]	; (8006cac <init3+0x68>)
 8006c64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c68:	6013      	str	r3, [r2, #0]


	i2c_base->I2C_CR2 = 0x08;
 8006c6a:	4b10      	ldr	r3, [pc, #64]	; (8006cac <init3+0x68>)
 8006c6c:	2208      	movs	r2, #8
 8006c6e:	605a      	str	r2, [r3, #4]

	uint16_t ccrvalue= 0xA0;
 8006c70:	23a0      	movs	r3, #160	; 0xa0
 8006c72:	81fb      	strh	r3, [r7, #14]

	i2c_base->I2C_OAR1 = addr<<1;
 8006c74:	79fb      	ldrb	r3, [r7, #7]
 8006c76:	005a      	lsls	r2, r3, #1
 8006c78:	4b0c      	ldr	r3, [pc, #48]	; (8006cac <init3+0x68>)
 8006c7a:	609a      	str	r2, [r3, #8]
	i2c_base->I2C_OAR1 &= ~(1);
 8006c7c:	4b0b      	ldr	r3, [pc, #44]	; (8006cac <init3+0x68>)
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <init3+0x68>)
 8006c82:	f023 0301 	bic.w	r3, r3, #1
 8006c86:	6093      	str	r3, [r2, #8]
	i2c_base->I2C_OAR1 = 1<<14;
 8006c88:	4b08      	ldr	r3, [pc, #32]	; (8006cac <init3+0x68>)
 8006c8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006c8e:	609a      	str	r2, [r3, #8]
	i2c_base->I2C_CCR = 1<<15;
 8006c90:	4b06      	ldr	r3, [pc, #24]	; (8006cac <init3+0x68>)
 8006c92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006c96:	61da      	str	r2, [r3, #28]
	i2c_base->I2C_CCR = 0x1b;
 8006c98:	4b04      	ldr	r3, [pc, #16]	; (8006cac <init3+0x68>)
 8006c9a:	221b      	movs	r2, #27
 8006c9c:	61da      	str	r2, [r3, #28]
	i2c_base->I2C_TRISE = 8+1;
 8006c9e:	4b03      	ldr	r3, [pc, #12]	; (8006cac <init3+0x68>)
 8006ca0:	2209      	movs	r2, #9
 8006ca2:	621a      	str	r2, [r3, #32]

}
 8006ca4:	bf00      	nop
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	40005400 	.word	0x40005400

08006cb0 <ack>:
void ack(){
 8006cb0:	b480      	push	{r7}
 8006cb2:	af00      	add	r7, sp, #0

	i2c_base->I2C_CR1 |= 1<<10;
 8006cb4:	4b05      	ldr	r3, [pc, #20]	; (8006ccc <ack+0x1c>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a04      	ldr	r2, [pc, #16]	; (8006ccc <ack+0x1c>)
 8006cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cbe:	6013      	str	r3, [r2, #0]
}
 8006cc0:	bf00      	nop
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	40005400 	.word	0x40005400

08006cd0 <pe_enable>:
void pe_enable(){
 8006cd0:	b480      	push	{r7}
 8006cd2:	af00      	add	r7, sp, #0

	i2c_base->I2C_CR1 |= 1<<0;
 8006cd4:	4b05      	ldr	r3, [pc, #20]	; (8006cec <pe_enable+0x1c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a04      	ldr	r2, [pc, #16]	; (8006cec <pe_enable+0x1c>)
 8006cda:	f043 0301 	orr.w	r3, r3, #1
 8006cde:	6013      	str	r3, [r2, #0]

}
 8006ce0:	bf00      	nop
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	40005400 	.word	0x40005400

08006cf0 <start>:
void start(){
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0

	i2c_base->I2C_CR1 |= 1<<8;
 8006cf4:	4b09      	ldr	r3, [pc, #36]	; (8006d1c <start+0x2c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a08      	ldr	r2, [pc, #32]	; (8006d1c <start+0x2c>)
 8006cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cfe:	6013      	str	r3, [r2, #0]
   //  i2c_base->I2C_SR1 = 1<<0;
	while (!(i2c_base->I2C_SR1 & (1<<0)));
 8006d00:	bf00      	nop
 8006d02:	4b06      	ldr	r3, [pc, #24]	; (8006d1c <start+0x2c>)
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0f9      	beq.n	8006d02 <start+0x12>
}
 8006d0e:	bf00      	nop
 8006d10:	bf00      	nop
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	40005400 	.word	0x40005400

08006d20 <stop>:
	while (!(i2c_base->I2C_SR1 & 1<<1 ));

		int dummyread = i2c_base->I2C_SR1;
		 dummyread = i2c_base->I2C_SR2;
}
void stop(){
 8006d20:	b480      	push	{r7}
 8006d22:	af00      	add	r7, sp, #0


	while (!(i2c_base->I2C_SR1 &= 132));
 8006d24:	bf00      	nop
 8006d26:	4b09      	ldr	r3, [pc, #36]	; (8006d4c <stop+0x2c>)
 8006d28:	695a      	ldr	r2, [r3, #20]
 8006d2a:	4b08      	ldr	r3, [pc, #32]	; (8006d4c <stop+0x2c>)
 8006d2c:	f002 0284 	and.w	r2, r2, #132	; 0x84
 8006d30:	615a      	str	r2, [r3, #20]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d0f6      	beq.n	8006d26 <stop+0x6>
			i2c_base->I2C_CR1 = 1<<9;
 8006d38:	4b04      	ldr	r3, [pc, #16]	; (8006d4c <stop+0x2c>)
 8006d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d3e:	601a      	str	r2, [r3, #0]
	}
 8006d40:	bf00      	nop
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	40005400 	.word	0x40005400

08006d50 <nack>:
void nack(){
 8006d50:	b480      	push	{r7}
 8006d52:	af00      	add	r7, sp, #0
	i2c_base->I2C_CR1 &= ~(1<<10);
 8006d54:	4b05      	ldr	r3, [pc, #20]	; (8006d6c <nack+0x1c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a04      	ldr	r2, [pc, #16]	; (8006d6c <nack+0x1c>)
 8006d5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d5e:	6013      	str	r3, [r2, #0]
}
 8006d60:	bf00      	nop
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	40005400 	.word	0x40005400

08006d70 <read>:

void read(uint8_t addr,uint8_t *a,uint8_t len){
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	4603      	mov	r3, r0
 8006d78:	6039      	str	r1, [r7, #0]
 8006d7a:	71fb      	strb	r3, [r7, #7]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	71bb      	strb	r3, [r7, #6]
	pe_enable();
 8006d80:	f7ff ffa6 	bl	8006cd0 <pe_enable>
	start();
 8006d84:	f7ff ffb4 	bl	8006cf0 <start>
	ack();
 8006d88:	f7ff ff92 	bl	8006cb0 <ack>

	i2c_base->I2C_DR = addr<<1|1;
 8006d8c:	79fb      	ldrb	r3, [r7, #7]
 8006d8e:	005b      	lsls	r3, r3, #1
 8006d90:	f043 0201 	orr.w	r2, r3, #1
 8006d94:	4b37      	ldr	r3, [pc, #220]	; (8006e74 <read+0x104>)
 8006d96:	611a      	str	r2, [r3, #16]

	//i2c_base->I2C_CR1 &= ~(1<<10);

	while (!(i2c_base->I2C_SR1 & 1<<1 ));
 8006d98:	bf00      	nop
 8006d9a:	4b36      	ldr	r3, [pc, #216]	; (8006e74 <read+0x104>)
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d0f9      	beq.n	8006d9a <read+0x2a>
	int dummyread = i2c_base->I2C_SR1;
 8006da6:	4b33      	ldr	r3, [pc, #204]	; (8006e74 <read+0x104>)
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	60bb      	str	r3, [r7, #8]
	 dummyread = i2c_base->I2C_SR2;
 8006dac:	4b31      	ldr	r3, [pc, #196]	; (8006e74 <read+0x104>)
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	60bb      	str	r3, [r7, #8]
	 if(len==1){
 8006db2:	79bb      	ldrb	r3, [r7, #6]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d110      	bne.n	8006dda <read+0x6a>
	 nack();
 8006db8:	f7ff ffca 	bl	8006d50 <nack>
	 stop();
 8006dbc:	f7ff ffb0 	bl	8006d20 <stop>
	 while (!(i2c_base->I2C_SR1 & 1<<6 ));
 8006dc0:	bf00      	nop
 8006dc2:	4b2c      	ldr	r3, [pc, #176]	; (8006e74 <read+0x104>)
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0f9      	beq.n	8006dc2 <read+0x52>

	 *a=i2c_base->I2C_DR;
 8006dce:	4b29      	ldr	r3, [pc, #164]	; (8006e74 <read+0x104>)
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	701a      	strb	r2, [r3, #0]
		 temp++;
		 while (!(i2c_base->I2C_SR1 & 1<<6 ));
		 stop();
		 *(a+temp)=i2c_base->I2C_DR;
	 }
}
 8006dd8:	e048      	b.n	8006e6c <read+0xfc>
		 ack();
 8006dda:	f7ff ff69 	bl	8006cb0 <ack>
		 int temp=0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]
		 while(len>3){
 8006de2:	e013      	b.n	8006e0c <read+0x9c>
			 while (!(i2c_base->I2C_SR1 & 1<<6 ));
 8006de4:	bf00      	nop
 8006de6:	4b23      	ldr	r3, [pc, #140]	; (8006e74 <read+0x104>)
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d0f9      	beq.n	8006de6 <read+0x76>
				 *(a+temp)=i2c_base->I2C_DR;
 8006df2:	4b20      	ldr	r3, [pc, #128]	; (8006e74 <read+0x104>)
 8006df4:	6919      	ldr	r1, [r3, #16]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	b2ca      	uxtb	r2, r1
 8006dfe:	701a      	strb	r2, [r3, #0]
				 len--;
 8006e00:	79bb      	ldrb	r3, [r7, #6]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	71bb      	strb	r3, [r7, #6]
				 temp++;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	60fb      	str	r3, [r7, #12]
		 while(len>3){
 8006e0c:	79bb      	ldrb	r3, [r7, #6]
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	d8e8      	bhi.n	8006de4 <read+0x74>
		 while(!(i2c_base->I2C_SR1 & 1<<2 ));
 8006e12:	bf00      	nop
 8006e14:	4b17      	ldr	r3, [pc, #92]	; (8006e74 <read+0x104>)
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d0f9      	beq.n	8006e14 <read+0xa4>
		 *(a+temp)=i2c_base->I2C_DR;
 8006e20:	4b14      	ldr	r3, [pc, #80]	; (8006e74 <read+0x104>)
 8006e22:	6919      	ldr	r1, [r3, #16]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	4413      	add	r3, r2
 8006e2a:	b2ca      	uxtb	r2, r1
 8006e2c:	701a      	strb	r2, [r3, #0]
		 temp++;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3301      	adds	r3, #1
 8006e32:	60fb      	str	r3, [r7, #12]
		 nack();
 8006e34:	f7ff ff8c 	bl	8006d50 <nack>
		 *(a+temp)=i2c_base->I2C_DR;
 8006e38:	4b0e      	ldr	r3, [pc, #56]	; (8006e74 <read+0x104>)
 8006e3a:	6919      	ldr	r1, [r3, #16]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	4413      	add	r3, r2
 8006e42:	b2ca      	uxtb	r2, r1
 8006e44:	701a      	strb	r2, [r3, #0]
		 temp++;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	60fb      	str	r3, [r7, #12]
		 while (!(i2c_base->I2C_SR1 & 1<<6 ));
 8006e4c:	bf00      	nop
 8006e4e:	4b09      	ldr	r3, [pc, #36]	; (8006e74 <read+0x104>)
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0f9      	beq.n	8006e4e <read+0xde>
		 stop();
 8006e5a:	f7ff ff61 	bl	8006d20 <stop>
		 *(a+temp)=i2c_base->I2C_DR;
 8006e5e:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <read+0x104>)
 8006e60:	6919      	ldr	r1, [r3, #16]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	4413      	add	r3, r2
 8006e68:	b2ca      	uxtb	r2, r1
 8006e6a:	701a      	strb	r2, [r3, #0]
}
 8006e6c:	bf00      	nop
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	40005400 	.word	0x40005400

08006e78 <write>:

void write(uint8_t addr,uint8_t *data,int len){
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
 8006e84:	73fb      	strb	r3, [r7, #15]
	pe_enable();
 8006e86:	f7ff ff23 	bl	8006cd0 <pe_enable>
	//ack();
	start();
 8006e8a:	f7ff ff31 	bl	8006cf0 <start>
	i2c_base->I2C_DR = addr<<1;
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
 8006e90:	005a      	lsls	r2, r3, #1
 8006e92:	4b16      	ldr	r3, [pc, #88]	; (8006eec <write+0x74>)
 8006e94:	611a      	str	r2, [r3, #16]
		while (!(i2c_base->I2C_SR1 & 1<<1 ));
 8006e96:	bf00      	nop
 8006e98:	4b14      	ldr	r3, [pc, #80]	; (8006eec <write+0x74>)
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d0f9      	beq.n	8006e98 <write+0x20>

			int dummyread = i2c_base->I2C_SR1;
 8006ea4:	4b11      	ldr	r3, [pc, #68]	; (8006eec <write+0x74>)
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	617b      	str	r3, [r7, #20]
			 dummyread = i2c_base->I2C_SR2;
 8006eaa:	4b10      	ldr	r3, [pc, #64]	; (8006eec <write+0x74>)
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	617b      	str	r3, [r7, #20]

	while(len>0){
 8006eb0:	e013      	b.n	8006eda <write+0x62>
		i2c_base->I2C_DR = *data;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	781a      	ldrb	r2, [r3, #0]
 8006eb6:	4b0d      	ldr	r3, [pc, #52]	; (8006eec <write+0x74>)
 8006eb8:	611a      	str	r2, [r3, #16]
		while (!(i2c_base->I2C_SR1 &= 1<<7));
 8006eba:	bf00      	nop
 8006ebc:	4b0b      	ldr	r3, [pc, #44]	; (8006eec <write+0x74>)
 8006ebe:	695a      	ldr	r2, [r3, #20]
 8006ec0:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <write+0x74>)
 8006ec2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006ec6:	615a      	str	r2, [r3, #20]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0f6      	beq.n	8006ebc <write+0x44>
     data++;
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	60bb      	str	r3, [r7, #8]
		len--;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	607b      	str	r3, [r7, #4]
	while(len>0){
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	dce8      	bgt.n	8006eb2 <write+0x3a>
	}
	stop();
 8006ee0:	f7ff ff1e 	bl	8006d20 <stop>
	}
 8006ee4:	bf00      	nop
 8006ee6:	3718      	adds	r7, #24
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	40005400 	.word	0x40005400

08006ef0 <__errno>:
 8006ef0:	4b01      	ldr	r3, [pc, #4]	; (8006ef8 <__errno+0x8>)
 8006ef2:	6818      	ldr	r0, [r3, #0]
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	20000010 	.word	0x20000010

08006efc <__libc_init_array>:
 8006efc:	b570      	push	{r4, r5, r6, lr}
 8006efe:	4d0d      	ldr	r5, [pc, #52]	; (8006f34 <__libc_init_array+0x38>)
 8006f00:	4c0d      	ldr	r4, [pc, #52]	; (8006f38 <__libc_init_array+0x3c>)
 8006f02:	1b64      	subs	r4, r4, r5
 8006f04:	10a4      	asrs	r4, r4, #2
 8006f06:	2600      	movs	r6, #0
 8006f08:	42a6      	cmp	r6, r4
 8006f0a:	d109      	bne.n	8006f20 <__libc_init_array+0x24>
 8006f0c:	4d0b      	ldr	r5, [pc, #44]	; (8006f3c <__libc_init_array+0x40>)
 8006f0e:	4c0c      	ldr	r4, [pc, #48]	; (8006f40 <__libc_init_array+0x44>)
 8006f10:	f000 fc8e 	bl	8007830 <_init>
 8006f14:	1b64      	subs	r4, r4, r5
 8006f16:	10a4      	asrs	r4, r4, #2
 8006f18:	2600      	movs	r6, #0
 8006f1a:	42a6      	cmp	r6, r4
 8006f1c:	d105      	bne.n	8006f2a <__libc_init_array+0x2e>
 8006f1e:	bd70      	pop	{r4, r5, r6, pc}
 8006f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f24:	4798      	blx	r3
 8006f26:	3601      	adds	r6, #1
 8006f28:	e7ee      	b.n	8006f08 <__libc_init_array+0xc>
 8006f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f2e:	4798      	blx	r3
 8006f30:	3601      	adds	r6, #1
 8006f32:	e7f2      	b.n	8006f1a <__libc_init_array+0x1e>
 8006f34:	08007954 	.word	0x08007954
 8006f38:	08007954 	.word	0x08007954
 8006f3c:	08007954 	.word	0x08007954
 8006f40:	08007958 	.word	0x08007958

08006f44 <memcpy>:
 8006f44:	440a      	add	r2, r1
 8006f46:	4291      	cmp	r1, r2
 8006f48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f4c:	d100      	bne.n	8006f50 <memcpy+0xc>
 8006f4e:	4770      	bx	lr
 8006f50:	b510      	push	{r4, lr}
 8006f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f5a:	4291      	cmp	r1, r2
 8006f5c:	d1f9      	bne.n	8006f52 <memcpy+0xe>
 8006f5e:	bd10      	pop	{r4, pc}

08006f60 <memset>:
 8006f60:	4402      	add	r2, r0
 8006f62:	4603      	mov	r3, r0
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d100      	bne.n	8006f6a <memset+0xa>
 8006f68:	4770      	bx	lr
 8006f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f6e:	e7f9      	b.n	8006f64 <memset+0x4>

08006f70 <siprintf>:
 8006f70:	b40e      	push	{r1, r2, r3}
 8006f72:	b500      	push	{lr}
 8006f74:	b09c      	sub	sp, #112	; 0x70
 8006f76:	ab1d      	add	r3, sp, #116	; 0x74
 8006f78:	9002      	str	r0, [sp, #8]
 8006f7a:	9006      	str	r0, [sp, #24]
 8006f7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f80:	4809      	ldr	r0, [pc, #36]	; (8006fa8 <siprintf+0x38>)
 8006f82:	9107      	str	r1, [sp, #28]
 8006f84:	9104      	str	r1, [sp, #16]
 8006f86:	4909      	ldr	r1, [pc, #36]	; (8006fac <siprintf+0x3c>)
 8006f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f8c:	9105      	str	r1, [sp, #20]
 8006f8e:	6800      	ldr	r0, [r0, #0]
 8006f90:	9301      	str	r3, [sp, #4]
 8006f92:	a902      	add	r1, sp, #8
 8006f94:	f000 f868 	bl	8007068 <_svfiprintf_r>
 8006f98:	9b02      	ldr	r3, [sp, #8]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	701a      	strb	r2, [r3, #0]
 8006f9e:	b01c      	add	sp, #112	; 0x70
 8006fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fa4:	b003      	add	sp, #12
 8006fa6:	4770      	bx	lr
 8006fa8:	20000010 	.word	0x20000010
 8006fac:	ffff0208 	.word	0xffff0208

08006fb0 <__ssputs_r>:
 8006fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb4:	688e      	ldr	r6, [r1, #8]
 8006fb6:	429e      	cmp	r6, r3
 8006fb8:	4682      	mov	sl, r0
 8006fba:	460c      	mov	r4, r1
 8006fbc:	4690      	mov	r8, r2
 8006fbe:	461f      	mov	r7, r3
 8006fc0:	d838      	bhi.n	8007034 <__ssputs_r+0x84>
 8006fc2:	898a      	ldrh	r2, [r1, #12]
 8006fc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fc8:	d032      	beq.n	8007030 <__ssputs_r+0x80>
 8006fca:	6825      	ldr	r5, [r4, #0]
 8006fcc:	6909      	ldr	r1, [r1, #16]
 8006fce:	eba5 0901 	sub.w	r9, r5, r1
 8006fd2:	6965      	ldr	r5, [r4, #20]
 8006fd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fdc:	3301      	adds	r3, #1
 8006fde:	444b      	add	r3, r9
 8006fe0:	106d      	asrs	r5, r5, #1
 8006fe2:	429d      	cmp	r5, r3
 8006fe4:	bf38      	it	cc
 8006fe6:	461d      	movcc	r5, r3
 8006fe8:	0553      	lsls	r3, r2, #21
 8006fea:	d531      	bpl.n	8007050 <__ssputs_r+0xa0>
 8006fec:	4629      	mov	r1, r5
 8006fee:	f000 fb55 	bl	800769c <_malloc_r>
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	b950      	cbnz	r0, 800700c <__ssputs_r+0x5c>
 8006ff6:	230c      	movs	r3, #12
 8006ff8:	f8ca 3000 	str.w	r3, [sl]
 8006ffc:	89a3      	ldrh	r3, [r4, #12]
 8006ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007002:	81a3      	strh	r3, [r4, #12]
 8007004:	f04f 30ff 	mov.w	r0, #4294967295
 8007008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800700c:	6921      	ldr	r1, [r4, #16]
 800700e:	464a      	mov	r2, r9
 8007010:	f7ff ff98 	bl	8006f44 <memcpy>
 8007014:	89a3      	ldrh	r3, [r4, #12]
 8007016:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800701a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800701e:	81a3      	strh	r3, [r4, #12]
 8007020:	6126      	str	r6, [r4, #16]
 8007022:	6165      	str	r5, [r4, #20]
 8007024:	444e      	add	r6, r9
 8007026:	eba5 0509 	sub.w	r5, r5, r9
 800702a:	6026      	str	r6, [r4, #0]
 800702c:	60a5      	str	r5, [r4, #8]
 800702e:	463e      	mov	r6, r7
 8007030:	42be      	cmp	r6, r7
 8007032:	d900      	bls.n	8007036 <__ssputs_r+0x86>
 8007034:	463e      	mov	r6, r7
 8007036:	6820      	ldr	r0, [r4, #0]
 8007038:	4632      	mov	r2, r6
 800703a:	4641      	mov	r1, r8
 800703c:	f000 faa8 	bl	8007590 <memmove>
 8007040:	68a3      	ldr	r3, [r4, #8]
 8007042:	1b9b      	subs	r3, r3, r6
 8007044:	60a3      	str	r3, [r4, #8]
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	4433      	add	r3, r6
 800704a:	6023      	str	r3, [r4, #0]
 800704c:	2000      	movs	r0, #0
 800704e:	e7db      	b.n	8007008 <__ssputs_r+0x58>
 8007050:	462a      	mov	r2, r5
 8007052:	f000 fb97 	bl	8007784 <_realloc_r>
 8007056:	4606      	mov	r6, r0
 8007058:	2800      	cmp	r0, #0
 800705a:	d1e1      	bne.n	8007020 <__ssputs_r+0x70>
 800705c:	6921      	ldr	r1, [r4, #16]
 800705e:	4650      	mov	r0, sl
 8007060:	f000 fab0 	bl	80075c4 <_free_r>
 8007064:	e7c7      	b.n	8006ff6 <__ssputs_r+0x46>
	...

08007068 <_svfiprintf_r>:
 8007068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706c:	4698      	mov	r8, r3
 800706e:	898b      	ldrh	r3, [r1, #12]
 8007070:	061b      	lsls	r3, r3, #24
 8007072:	b09d      	sub	sp, #116	; 0x74
 8007074:	4607      	mov	r7, r0
 8007076:	460d      	mov	r5, r1
 8007078:	4614      	mov	r4, r2
 800707a:	d50e      	bpl.n	800709a <_svfiprintf_r+0x32>
 800707c:	690b      	ldr	r3, [r1, #16]
 800707e:	b963      	cbnz	r3, 800709a <_svfiprintf_r+0x32>
 8007080:	2140      	movs	r1, #64	; 0x40
 8007082:	f000 fb0b 	bl	800769c <_malloc_r>
 8007086:	6028      	str	r0, [r5, #0]
 8007088:	6128      	str	r0, [r5, #16]
 800708a:	b920      	cbnz	r0, 8007096 <_svfiprintf_r+0x2e>
 800708c:	230c      	movs	r3, #12
 800708e:	603b      	str	r3, [r7, #0]
 8007090:	f04f 30ff 	mov.w	r0, #4294967295
 8007094:	e0d1      	b.n	800723a <_svfiprintf_r+0x1d2>
 8007096:	2340      	movs	r3, #64	; 0x40
 8007098:	616b      	str	r3, [r5, #20]
 800709a:	2300      	movs	r3, #0
 800709c:	9309      	str	r3, [sp, #36]	; 0x24
 800709e:	2320      	movs	r3, #32
 80070a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80070a8:	2330      	movs	r3, #48	; 0x30
 80070aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007254 <_svfiprintf_r+0x1ec>
 80070ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070b2:	f04f 0901 	mov.w	r9, #1
 80070b6:	4623      	mov	r3, r4
 80070b8:	469a      	mov	sl, r3
 80070ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070be:	b10a      	cbz	r2, 80070c4 <_svfiprintf_r+0x5c>
 80070c0:	2a25      	cmp	r2, #37	; 0x25
 80070c2:	d1f9      	bne.n	80070b8 <_svfiprintf_r+0x50>
 80070c4:	ebba 0b04 	subs.w	fp, sl, r4
 80070c8:	d00b      	beq.n	80070e2 <_svfiprintf_r+0x7a>
 80070ca:	465b      	mov	r3, fp
 80070cc:	4622      	mov	r2, r4
 80070ce:	4629      	mov	r1, r5
 80070d0:	4638      	mov	r0, r7
 80070d2:	f7ff ff6d 	bl	8006fb0 <__ssputs_r>
 80070d6:	3001      	adds	r0, #1
 80070d8:	f000 80aa 	beq.w	8007230 <_svfiprintf_r+0x1c8>
 80070dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070de:	445a      	add	r2, fp
 80070e0:	9209      	str	r2, [sp, #36]	; 0x24
 80070e2:	f89a 3000 	ldrb.w	r3, [sl]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 80a2 	beq.w	8007230 <_svfiprintf_r+0x1c8>
 80070ec:	2300      	movs	r3, #0
 80070ee:	f04f 32ff 	mov.w	r2, #4294967295
 80070f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070f6:	f10a 0a01 	add.w	sl, sl, #1
 80070fa:	9304      	str	r3, [sp, #16]
 80070fc:	9307      	str	r3, [sp, #28]
 80070fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007102:	931a      	str	r3, [sp, #104]	; 0x68
 8007104:	4654      	mov	r4, sl
 8007106:	2205      	movs	r2, #5
 8007108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800710c:	4851      	ldr	r0, [pc, #324]	; (8007254 <_svfiprintf_r+0x1ec>)
 800710e:	f7f9 f887 	bl	8000220 <memchr>
 8007112:	9a04      	ldr	r2, [sp, #16]
 8007114:	b9d8      	cbnz	r0, 800714e <_svfiprintf_r+0xe6>
 8007116:	06d0      	lsls	r0, r2, #27
 8007118:	bf44      	itt	mi
 800711a:	2320      	movmi	r3, #32
 800711c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007120:	0711      	lsls	r1, r2, #28
 8007122:	bf44      	itt	mi
 8007124:	232b      	movmi	r3, #43	; 0x2b
 8007126:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800712a:	f89a 3000 	ldrb.w	r3, [sl]
 800712e:	2b2a      	cmp	r3, #42	; 0x2a
 8007130:	d015      	beq.n	800715e <_svfiprintf_r+0xf6>
 8007132:	9a07      	ldr	r2, [sp, #28]
 8007134:	4654      	mov	r4, sl
 8007136:	2000      	movs	r0, #0
 8007138:	f04f 0c0a 	mov.w	ip, #10
 800713c:	4621      	mov	r1, r4
 800713e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007142:	3b30      	subs	r3, #48	; 0x30
 8007144:	2b09      	cmp	r3, #9
 8007146:	d94e      	bls.n	80071e6 <_svfiprintf_r+0x17e>
 8007148:	b1b0      	cbz	r0, 8007178 <_svfiprintf_r+0x110>
 800714a:	9207      	str	r2, [sp, #28]
 800714c:	e014      	b.n	8007178 <_svfiprintf_r+0x110>
 800714e:	eba0 0308 	sub.w	r3, r0, r8
 8007152:	fa09 f303 	lsl.w	r3, r9, r3
 8007156:	4313      	orrs	r3, r2
 8007158:	9304      	str	r3, [sp, #16]
 800715a:	46a2      	mov	sl, r4
 800715c:	e7d2      	b.n	8007104 <_svfiprintf_r+0x9c>
 800715e:	9b03      	ldr	r3, [sp, #12]
 8007160:	1d19      	adds	r1, r3, #4
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	9103      	str	r1, [sp, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	bfbb      	ittet	lt
 800716a:	425b      	neglt	r3, r3
 800716c:	f042 0202 	orrlt.w	r2, r2, #2
 8007170:	9307      	strge	r3, [sp, #28]
 8007172:	9307      	strlt	r3, [sp, #28]
 8007174:	bfb8      	it	lt
 8007176:	9204      	strlt	r2, [sp, #16]
 8007178:	7823      	ldrb	r3, [r4, #0]
 800717a:	2b2e      	cmp	r3, #46	; 0x2e
 800717c:	d10c      	bne.n	8007198 <_svfiprintf_r+0x130>
 800717e:	7863      	ldrb	r3, [r4, #1]
 8007180:	2b2a      	cmp	r3, #42	; 0x2a
 8007182:	d135      	bne.n	80071f0 <_svfiprintf_r+0x188>
 8007184:	9b03      	ldr	r3, [sp, #12]
 8007186:	1d1a      	adds	r2, r3, #4
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	9203      	str	r2, [sp, #12]
 800718c:	2b00      	cmp	r3, #0
 800718e:	bfb8      	it	lt
 8007190:	f04f 33ff 	movlt.w	r3, #4294967295
 8007194:	3402      	adds	r4, #2
 8007196:	9305      	str	r3, [sp, #20]
 8007198:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007264 <_svfiprintf_r+0x1fc>
 800719c:	7821      	ldrb	r1, [r4, #0]
 800719e:	2203      	movs	r2, #3
 80071a0:	4650      	mov	r0, sl
 80071a2:	f7f9 f83d 	bl	8000220 <memchr>
 80071a6:	b140      	cbz	r0, 80071ba <_svfiprintf_r+0x152>
 80071a8:	2340      	movs	r3, #64	; 0x40
 80071aa:	eba0 000a 	sub.w	r0, r0, sl
 80071ae:	fa03 f000 	lsl.w	r0, r3, r0
 80071b2:	9b04      	ldr	r3, [sp, #16]
 80071b4:	4303      	orrs	r3, r0
 80071b6:	3401      	adds	r4, #1
 80071b8:	9304      	str	r3, [sp, #16]
 80071ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071be:	4826      	ldr	r0, [pc, #152]	; (8007258 <_svfiprintf_r+0x1f0>)
 80071c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071c4:	2206      	movs	r2, #6
 80071c6:	f7f9 f82b 	bl	8000220 <memchr>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d038      	beq.n	8007240 <_svfiprintf_r+0x1d8>
 80071ce:	4b23      	ldr	r3, [pc, #140]	; (800725c <_svfiprintf_r+0x1f4>)
 80071d0:	bb1b      	cbnz	r3, 800721a <_svfiprintf_r+0x1b2>
 80071d2:	9b03      	ldr	r3, [sp, #12]
 80071d4:	3307      	adds	r3, #7
 80071d6:	f023 0307 	bic.w	r3, r3, #7
 80071da:	3308      	adds	r3, #8
 80071dc:	9303      	str	r3, [sp, #12]
 80071de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e0:	4433      	add	r3, r6
 80071e2:	9309      	str	r3, [sp, #36]	; 0x24
 80071e4:	e767      	b.n	80070b6 <_svfiprintf_r+0x4e>
 80071e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80071ea:	460c      	mov	r4, r1
 80071ec:	2001      	movs	r0, #1
 80071ee:	e7a5      	b.n	800713c <_svfiprintf_r+0xd4>
 80071f0:	2300      	movs	r3, #0
 80071f2:	3401      	adds	r4, #1
 80071f4:	9305      	str	r3, [sp, #20]
 80071f6:	4619      	mov	r1, r3
 80071f8:	f04f 0c0a 	mov.w	ip, #10
 80071fc:	4620      	mov	r0, r4
 80071fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007202:	3a30      	subs	r2, #48	; 0x30
 8007204:	2a09      	cmp	r2, #9
 8007206:	d903      	bls.n	8007210 <_svfiprintf_r+0x1a8>
 8007208:	2b00      	cmp	r3, #0
 800720a:	d0c5      	beq.n	8007198 <_svfiprintf_r+0x130>
 800720c:	9105      	str	r1, [sp, #20]
 800720e:	e7c3      	b.n	8007198 <_svfiprintf_r+0x130>
 8007210:	fb0c 2101 	mla	r1, ip, r1, r2
 8007214:	4604      	mov	r4, r0
 8007216:	2301      	movs	r3, #1
 8007218:	e7f0      	b.n	80071fc <_svfiprintf_r+0x194>
 800721a:	ab03      	add	r3, sp, #12
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	462a      	mov	r2, r5
 8007220:	4b0f      	ldr	r3, [pc, #60]	; (8007260 <_svfiprintf_r+0x1f8>)
 8007222:	a904      	add	r1, sp, #16
 8007224:	4638      	mov	r0, r7
 8007226:	f3af 8000 	nop.w
 800722a:	1c42      	adds	r2, r0, #1
 800722c:	4606      	mov	r6, r0
 800722e:	d1d6      	bne.n	80071de <_svfiprintf_r+0x176>
 8007230:	89ab      	ldrh	r3, [r5, #12]
 8007232:	065b      	lsls	r3, r3, #25
 8007234:	f53f af2c 	bmi.w	8007090 <_svfiprintf_r+0x28>
 8007238:	9809      	ldr	r0, [sp, #36]	; 0x24
 800723a:	b01d      	add	sp, #116	; 0x74
 800723c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007240:	ab03      	add	r3, sp, #12
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	462a      	mov	r2, r5
 8007246:	4b06      	ldr	r3, [pc, #24]	; (8007260 <_svfiprintf_r+0x1f8>)
 8007248:	a904      	add	r1, sp, #16
 800724a:	4638      	mov	r0, r7
 800724c:	f000 f87a 	bl	8007344 <_printf_i>
 8007250:	e7eb      	b.n	800722a <_svfiprintf_r+0x1c2>
 8007252:	bf00      	nop
 8007254:	08007918 	.word	0x08007918
 8007258:	08007922 	.word	0x08007922
 800725c:	00000000 	.word	0x00000000
 8007260:	08006fb1 	.word	0x08006fb1
 8007264:	0800791e 	.word	0x0800791e

08007268 <_printf_common>:
 8007268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800726c:	4616      	mov	r6, r2
 800726e:	4699      	mov	r9, r3
 8007270:	688a      	ldr	r2, [r1, #8]
 8007272:	690b      	ldr	r3, [r1, #16]
 8007274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007278:	4293      	cmp	r3, r2
 800727a:	bfb8      	it	lt
 800727c:	4613      	movlt	r3, r2
 800727e:	6033      	str	r3, [r6, #0]
 8007280:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007284:	4607      	mov	r7, r0
 8007286:	460c      	mov	r4, r1
 8007288:	b10a      	cbz	r2, 800728e <_printf_common+0x26>
 800728a:	3301      	adds	r3, #1
 800728c:	6033      	str	r3, [r6, #0]
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	0699      	lsls	r1, r3, #26
 8007292:	bf42      	ittt	mi
 8007294:	6833      	ldrmi	r3, [r6, #0]
 8007296:	3302      	addmi	r3, #2
 8007298:	6033      	strmi	r3, [r6, #0]
 800729a:	6825      	ldr	r5, [r4, #0]
 800729c:	f015 0506 	ands.w	r5, r5, #6
 80072a0:	d106      	bne.n	80072b0 <_printf_common+0x48>
 80072a2:	f104 0a19 	add.w	sl, r4, #25
 80072a6:	68e3      	ldr	r3, [r4, #12]
 80072a8:	6832      	ldr	r2, [r6, #0]
 80072aa:	1a9b      	subs	r3, r3, r2
 80072ac:	42ab      	cmp	r3, r5
 80072ae:	dc26      	bgt.n	80072fe <_printf_common+0x96>
 80072b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072b4:	1e13      	subs	r3, r2, #0
 80072b6:	6822      	ldr	r2, [r4, #0]
 80072b8:	bf18      	it	ne
 80072ba:	2301      	movne	r3, #1
 80072bc:	0692      	lsls	r2, r2, #26
 80072be:	d42b      	bmi.n	8007318 <_printf_common+0xb0>
 80072c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072c4:	4649      	mov	r1, r9
 80072c6:	4638      	mov	r0, r7
 80072c8:	47c0      	blx	r8
 80072ca:	3001      	adds	r0, #1
 80072cc:	d01e      	beq.n	800730c <_printf_common+0xa4>
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	68e5      	ldr	r5, [r4, #12]
 80072d2:	6832      	ldr	r2, [r6, #0]
 80072d4:	f003 0306 	and.w	r3, r3, #6
 80072d8:	2b04      	cmp	r3, #4
 80072da:	bf08      	it	eq
 80072dc:	1aad      	subeq	r5, r5, r2
 80072de:	68a3      	ldr	r3, [r4, #8]
 80072e0:	6922      	ldr	r2, [r4, #16]
 80072e2:	bf0c      	ite	eq
 80072e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072e8:	2500      	movne	r5, #0
 80072ea:	4293      	cmp	r3, r2
 80072ec:	bfc4      	itt	gt
 80072ee:	1a9b      	subgt	r3, r3, r2
 80072f0:	18ed      	addgt	r5, r5, r3
 80072f2:	2600      	movs	r6, #0
 80072f4:	341a      	adds	r4, #26
 80072f6:	42b5      	cmp	r5, r6
 80072f8:	d11a      	bne.n	8007330 <_printf_common+0xc8>
 80072fa:	2000      	movs	r0, #0
 80072fc:	e008      	b.n	8007310 <_printf_common+0xa8>
 80072fe:	2301      	movs	r3, #1
 8007300:	4652      	mov	r2, sl
 8007302:	4649      	mov	r1, r9
 8007304:	4638      	mov	r0, r7
 8007306:	47c0      	blx	r8
 8007308:	3001      	adds	r0, #1
 800730a:	d103      	bne.n	8007314 <_printf_common+0xac>
 800730c:	f04f 30ff 	mov.w	r0, #4294967295
 8007310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007314:	3501      	adds	r5, #1
 8007316:	e7c6      	b.n	80072a6 <_printf_common+0x3e>
 8007318:	18e1      	adds	r1, r4, r3
 800731a:	1c5a      	adds	r2, r3, #1
 800731c:	2030      	movs	r0, #48	; 0x30
 800731e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007322:	4422      	add	r2, r4
 8007324:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007328:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800732c:	3302      	adds	r3, #2
 800732e:	e7c7      	b.n	80072c0 <_printf_common+0x58>
 8007330:	2301      	movs	r3, #1
 8007332:	4622      	mov	r2, r4
 8007334:	4649      	mov	r1, r9
 8007336:	4638      	mov	r0, r7
 8007338:	47c0      	blx	r8
 800733a:	3001      	adds	r0, #1
 800733c:	d0e6      	beq.n	800730c <_printf_common+0xa4>
 800733e:	3601      	adds	r6, #1
 8007340:	e7d9      	b.n	80072f6 <_printf_common+0x8e>
	...

08007344 <_printf_i>:
 8007344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007348:	7e0f      	ldrb	r7, [r1, #24]
 800734a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800734c:	2f78      	cmp	r7, #120	; 0x78
 800734e:	4691      	mov	r9, r2
 8007350:	4680      	mov	r8, r0
 8007352:	460c      	mov	r4, r1
 8007354:	469a      	mov	sl, r3
 8007356:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800735a:	d807      	bhi.n	800736c <_printf_i+0x28>
 800735c:	2f62      	cmp	r7, #98	; 0x62
 800735e:	d80a      	bhi.n	8007376 <_printf_i+0x32>
 8007360:	2f00      	cmp	r7, #0
 8007362:	f000 80d8 	beq.w	8007516 <_printf_i+0x1d2>
 8007366:	2f58      	cmp	r7, #88	; 0x58
 8007368:	f000 80a3 	beq.w	80074b2 <_printf_i+0x16e>
 800736c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007370:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007374:	e03a      	b.n	80073ec <_printf_i+0xa8>
 8007376:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800737a:	2b15      	cmp	r3, #21
 800737c:	d8f6      	bhi.n	800736c <_printf_i+0x28>
 800737e:	a101      	add	r1, pc, #4	; (adr r1, 8007384 <_printf_i+0x40>)
 8007380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007384:	080073dd 	.word	0x080073dd
 8007388:	080073f1 	.word	0x080073f1
 800738c:	0800736d 	.word	0x0800736d
 8007390:	0800736d 	.word	0x0800736d
 8007394:	0800736d 	.word	0x0800736d
 8007398:	0800736d 	.word	0x0800736d
 800739c:	080073f1 	.word	0x080073f1
 80073a0:	0800736d 	.word	0x0800736d
 80073a4:	0800736d 	.word	0x0800736d
 80073a8:	0800736d 	.word	0x0800736d
 80073ac:	0800736d 	.word	0x0800736d
 80073b0:	080074fd 	.word	0x080074fd
 80073b4:	08007421 	.word	0x08007421
 80073b8:	080074df 	.word	0x080074df
 80073bc:	0800736d 	.word	0x0800736d
 80073c0:	0800736d 	.word	0x0800736d
 80073c4:	0800751f 	.word	0x0800751f
 80073c8:	0800736d 	.word	0x0800736d
 80073cc:	08007421 	.word	0x08007421
 80073d0:	0800736d 	.word	0x0800736d
 80073d4:	0800736d 	.word	0x0800736d
 80073d8:	080074e7 	.word	0x080074e7
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	1d1a      	adds	r2, r3, #4
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	602a      	str	r2, [r5, #0]
 80073e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073ec:	2301      	movs	r3, #1
 80073ee:	e0a3      	b.n	8007538 <_printf_i+0x1f4>
 80073f0:	6820      	ldr	r0, [r4, #0]
 80073f2:	6829      	ldr	r1, [r5, #0]
 80073f4:	0606      	lsls	r6, r0, #24
 80073f6:	f101 0304 	add.w	r3, r1, #4
 80073fa:	d50a      	bpl.n	8007412 <_printf_i+0xce>
 80073fc:	680e      	ldr	r6, [r1, #0]
 80073fe:	602b      	str	r3, [r5, #0]
 8007400:	2e00      	cmp	r6, #0
 8007402:	da03      	bge.n	800740c <_printf_i+0xc8>
 8007404:	232d      	movs	r3, #45	; 0x2d
 8007406:	4276      	negs	r6, r6
 8007408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800740c:	485e      	ldr	r0, [pc, #376]	; (8007588 <_printf_i+0x244>)
 800740e:	230a      	movs	r3, #10
 8007410:	e019      	b.n	8007446 <_printf_i+0x102>
 8007412:	680e      	ldr	r6, [r1, #0]
 8007414:	602b      	str	r3, [r5, #0]
 8007416:	f010 0f40 	tst.w	r0, #64	; 0x40
 800741a:	bf18      	it	ne
 800741c:	b236      	sxthne	r6, r6
 800741e:	e7ef      	b.n	8007400 <_printf_i+0xbc>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	6820      	ldr	r0, [r4, #0]
 8007424:	1d19      	adds	r1, r3, #4
 8007426:	6029      	str	r1, [r5, #0]
 8007428:	0601      	lsls	r1, r0, #24
 800742a:	d501      	bpl.n	8007430 <_printf_i+0xec>
 800742c:	681e      	ldr	r6, [r3, #0]
 800742e:	e002      	b.n	8007436 <_printf_i+0xf2>
 8007430:	0646      	lsls	r6, r0, #25
 8007432:	d5fb      	bpl.n	800742c <_printf_i+0xe8>
 8007434:	881e      	ldrh	r6, [r3, #0]
 8007436:	4854      	ldr	r0, [pc, #336]	; (8007588 <_printf_i+0x244>)
 8007438:	2f6f      	cmp	r7, #111	; 0x6f
 800743a:	bf0c      	ite	eq
 800743c:	2308      	moveq	r3, #8
 800743e:	230a      	movne	r3, #10
 8007440:	2100      	movs	r1, #0
 8007442:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007446:	6865      	ldr	r5, [r4, #4]
 8007448:	60a5      	str	r5, [r4, #8]
 800744a:	2d00      	cmp	r5, #0
 800744c:	bfa2      	ittt	ge
 800744e:	6821      	ldrge	r1, [r4, #0]
 8007450:	f021 0104 	bicge.w	r1, r1, #4
 8007454:	6021      	strge	r1, [r4, #0]
 8007456:	b90e      	cbnz	r6, 800745c <_printf_i+0x118>
 8007458:	2d00      	cmp	r5, #0
 800745a:	d04d      	beq.n	80074f8 <_printf_i+0x1b4>
 800745c:	4615      	mov	r5, r2
 800745e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007462:	fb03 6711 	mls	r7, r3, r1, r6
 8007466:	5dc7      	ldrb	r7, [r0, r7]
 8007468:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800746c:	4637      	mov	r7, r6
 800746e:	42bb      	cmp	r3, r7
 8007470:	460e      	mov	r6, r1
 8007472:	d9f4      	bls.n	800745e <_printf_i+0x11a>
 8007474:	2b08      	cmp	r3, #8
 8007476:	d10b      	bne.n	8007490 <_printf_i+0x14c>
 8007478:	6823      	ldr	r3, [r4, #0]
 800747a:	07de      	lsls	r6, r3, #31
 800747c:	d508      	bpl.n	8007490 <_printf_i+0x14c>
 800747e:	6923      	ldr	r3, [r4, #16]
 8007480:	6861      	ldr	r1, [r4, #4]
 8007482:	4299      	cmp	r1, r3
 8007484:	bfde      	ittt	le
 8007486:	2330      	movle	r3, #48	; 0x30
 8007488:	f805 3c01 	strble.w	r3, [r5, #-1]
 800748c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007490:	1b52      	subs	r2, r2, r5
 8007492:	6122      	str	r2, [r4, #16]
 8007494:	f8cd a000 	str.w	sl, [sp]
 8007498:	464b      	mov	r3, r9
 800749a:	aa03      	add	r2, sp, #12
 800749c:	4621      	mov	r1, r4
 800749e:	4640      	mov	r0, r8
 80074a0:	f7ff fee2 	bl	8007268 <_printf_common>
 80074a4:	3001      	adds	r0, #1
 80074a6:	d14c      	bne.n	8007542 <_printf_i+0x1fe>
 80074a8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ac:	b004      	add	sp, #16
 80074ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b2:	4835      	ldr	r0, [pc, #212]	; (8007588 <_printf_i+0x244>)
 80074b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074b8:	6829      	ldr	r1, [r5, #0]
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80074c0:	6029      	str	r1, [r5, #0]
 80074c2:	061d      	lsls	r5, r3, #24
 80074c4:	d514      	bpl.n	80074f0 <_printf_i+0x1ac>
 80074c6:	07df      	lsls	r7, r3, #31
 80074c8:	bf44      	itt	mi
 80074ca:	f043 0320 	orrmi.w	r3, r3, #32
 80074ce:	6023      	strmi	r3, [r4, #0]
 80074d0:	b91e      	cbnz	r6, 80074da <_printf_i+0x196>
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	f023 0320 	bic.w	r3, r3, #32
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	2310      	movs	r3, #16
 80074dc:	e7b0      	b.n	8007440 <_printf_i+0xfc>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	f043 0320 	orr.w	r3, r3, #32
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	2378      	movs	r3, #120	; 0x78
 80074e8:	4828      	ldr	r0, [pc, #160]	; (800758c <_printf_i+0x248>)
 80074ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074ee:	e7e3      	b.n	80074b8 <_printf_i+0x174>
 80074f0:	0659      	lsls	r1, r3, #25
 80074f2:	bf48      	it	mi
 80074f4:	b2b6      	uxthmi	r6, r6
 80074f6:	e7e6      	b.n	80074c6 <_printf_i+0x182>
 80074f8:	4615      	mov	r5, r2
 80074fa:	e7bb      	b.n	8007474 <_printf_i+0x130>
 80074fc:	682b      	ldr	r3, [r5, #0]
 80074fe:	6826      	ldr	r6, [r4, #0]
 8007500:	6961      	ldr	r1, [r4, #20]
 8007502:	1d18      	adds	r0, r3, #4
 8007504:	6028      	str	r0, [r5, #0]
 8007506:	0635      	lsls	r5, r6, #24
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	d501      	bpl.n	8007510 <_printf_i+0x1cc>
 800750c:	6019      	str	r1, [r3, #0]
 800750e:	e002      	b.n	8007516 <_printf_i+0x1d2>
 8007510:	0670      	lsls	r0, r6, #25
 8007512:	d5fb      	bpl.n	800750c <_printf_i+0x1c8>
 8007514:	8019      	strh	r1, [r3, #0]
 8007516:	2300      	movs	r3, #0
 8007518:	6123      	str	r3, [r4, #16]
 800751a:	4615      	mov	r5, r2
 800751c:	e7ba      	b.n	8007494 <_printf_i+0x150>
 800751e:	682b      	ldr	r3, [r5, #0]
 8007520:	1d1a      	adds	r2, r3, #4
 8007522:	602a      	str	r2, [r5, #0]
 8007524:	681d      	ldr	r5, [r3, #0]
 8007526:	6862      	ldr	r2, [r4, #4]
 8007528:	2100      	movs	r1, #0
 800752a:	4628      	mov	r0, r5
 800752c:	f7f8 fe78 	bl	8000220 <memchr>
 8007530:	b108      	cbz	r0, 8007536 <_printf_i+0x1f2>
 8007532:	1b40      	subs	r0, r0, r5
 8007534:	6060      	str	r0, [r4, #4]
 8007536:	6863      	ldr	r3, [r4, #4]
 8007538:	6123      	str	r3, [r4, #16]
 800753a:	2300      	movs	r3, #0
 800753c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007540:	e7a8      	b.n	8007494 <_printf_i+0x150>
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	462a      	mov	r2, r5
 8007546:	4649      	mov	r1, r9
 8007548:	4640      	mov	r0, r8
 800754a:	47d0      	blx	sl
 800754c:	3001      	adds	r0, #1
 800754e:	d0ab      	beq.n	80074a8 <_printf_i+0x164>
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	079b      	lsls	r3, r3, #30
 8007554:	d413      	bmi.n	800757e <_printf_i+0x23a>
 8007556:	68e0      	ldr	r0, [r4, #12]
 8007558:	9b03      	ldr	r3, [sp, #12]
 800755a:	4298      	cmp	r0, r3
 800755c:	bfb8      	it	lt
 800755e:	4618      	movlt	r0, r3
 8007560:	e7a4      	b.n	80074ac <_printf_i+0x168>
 8007562:	2301      	movs	r3, #1
 8007564:	4632      	mov	r2, r6
 8007566:	4649      	mov	r1, r9
 8007568:	4640      	mov	r0, r8
 800756a:	47d0      	blx	sl
 800756c:	3001      	adds	r0, #1
 800756e:	d09b      	beq.n	80074a8 <_printf_i+0x164>
 8007570:	3501      	adds	r5, #1
 8007572:	68e3      	ldr	r3, [r4, #12]
 8007574:	9903      	ldr	r1, [sp, #12]
 8007576:	1a5b      	subs	r3, r3, r1
 8007578:	42ab      	cmp	r3, r5
 800757a:	dcf2      	bgt.n	8007562 <_printf_i+0x21e>
 800757c:	e7eb      	b.n	8007556 <_printf_i+0x212>
 800757e:	2500      	movs	r5, #0
 8007580:	f104 0619 	add.w	r6, r4, #25
 8007584:	e7f5      	b.n	8007572 <_printf_i+0x22e>
 8007586:	bf00      	nop
 8007588:	08007929 	.word	0x08007929
 800758c:	0800793a 	.word	0x0800793a

08007590 <memmove>:
 8007590:	4288      	cmp	r0, r1
 8007592:	b510      	push	{r4, lr}
 8007594:	eb01 0402 	add.w	r4, r1, r2
 8007598:	d902      	bls.n	80075a0 <memmove+0x10>
 800759a:	4284      	cmp	r4, r0
 800759c:	4623      	mov	r3, r4
 800759e:	d807      	bhi.n	80075b0 <memmove+0x20>
 80075a0:	1e43      	subs	r3, r0, #1
 80075a2:	42a1      	cmp	r1, r4
 80075a4:	d008      	beq.n	80075b8 <memmove+0x28>
 80075a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075ae:	e7f8      	b.n	80075a2 <memmove+0x12>
 80075b0:	4402      	add	r2, r0
 80075b2:	4601      	mov	r1, r0
 80075b4:	428a      	cmp	r2, r1
 80075b6:	d100      	bne.n	80075ba <memmove+0x2a>
 80075b8:	bd10      	pop	{r4, pc}
 80075ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075c2:	e7f7      	b.n	80075b4 <memmove+0x24>

080075c4 <_free_r>:
 80075c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075c6:	2900      	cmp	r1, #0
 80075c8:	d044      	beq.n	8007654 <_free_r+0x90>
 80075ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075ce:	9001      	str	r0, [sp, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f1a1 0404 	sub.w	r4, r1, #4
 80075d6:	bfb8      	it	lt
 80075d8:	18e4      	addlt	r4, r4, r3
 80075da:	f000 f913 	bl	8007804 <__malloc_lock>
 80075de:	4a1e      	ldr	r2, [pc, #120]	; (8007658 <_free_r+0x94>)
 80075e0:	9801      	ldr	r0, [sp, #4]
 80075e2:	6813      	ldr	r3, [r2, #0]
 80075e4:	b933      	cbnz	r3, 80075f4 <_free_r+0x30>
 80075e6:	6063      	str	r3, [r4, #4]
 80075e8:	6014      	str	r4, [r2, #0]
 80075ea:	b003      	add	sp, #12
 80075ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075f0:	f000 b90e 	b.w	8007810 <__malloc_unlock>
 80075f4:	42a3      	cmp	r3, r4
 80075f6:	d908      	bls.n	800760a <_free_r+0x46>
 80075f8:	6825      	ldr	r5, [r4, #0]
 80075fa:	1961      	adds	r1, r4, r5
 80075fc:	428b      	cmp	r3, r1
 80075fe:	bf01      	itttt	eq
 8007600:	6819      	ldreq	r1, [r3, #0]
 8007602:	685b      	ldreq	r3, [r3, #4]
 8007604:	1949      	addeq	r1, r1, r5
 8007606:	6021      	streq	r1, [r4, #0]
 8007608:	e7ed      	b.n	80075e6 <_free_r+0x22>
 800760a:	461a      	mov	r2, r3
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	b10b      	cbz	r3, 8007614 <_free_r+0x50>
 8007610:	42a3      	cmp	r3, r4
 8007612:	d9fa      	bls.n	800760a <_free_r+0x46>
 8007614:	6811      	ldr	r1, [r2, #0]
 8007616:	1855      	adds	r5, r2, r1
 8007618:	42a5      	cmp	r5, r4
 800761a:	d10b      	bne.n	8007634 <_free_r+0x70>
 800761c:	6824      	ldr	r4, [r4, #0]
 800761e:	4421      	add	r1, r4
 8007620:	1854      	adds	r4, r2, r1
 8007622:	42a3      	cmp	r3, r4
 8007624:	6011      	str	r1, [r2, #0]
 8007626:	d1e0      	bne.n	80075ea <_free_r+0x26>
 8007628:	681c      	ldr	r4, [r3, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	6053      	str	r3, [r2, #4]
 800762e:	4421      	add	r1, r4
 8007630:	6011      	str	r1, [r2, #0]
 8007632:	e7da      	b.n	80075ea <_free_r+0x26>
 8007634:	d902      	bls.n	800763c <_free_r+0x78>
 8007636:	230c      	movs	r3, #12
 8007638:	6003      	str	r3, [r0, #0]
 800763a:	e7d6      	b.n	80075ea <_free_r+0x26>
 800763c:	6825      	ldr	r5, [r4, #0]
 800763e:	1961      	adds	r1, r4, r5
 8007640:	428b      	cmp	r3, r1
 8007642:	bf04      	itt	eq
 8007644:	6819      	ldreq	r1, [r3, #0]
 8007646:	685b      	ldreq	r3, [r3, #4]
 8007648:	6063      	str	r3, [r4, #4]
 800764a:	bf04      	itt	eq
 800764c:	1949      	addeq	r1, r1, r5
 800764e:	6021      	streq	r1, [r4, #0]
 8007650:	6054      	str	r4, [r2, #4]
 8007652:	e7ca      	b.n	80075ea <_free_r+0x26>
 8007654:	b003      	add	sp, #12
 8007656:	bd30      	pop	{r4, r5, pc}
 8007658:	20004ac8 	.word	0x20004ac8

0800765c <sbrk_aligned>:
 800765c:	b570      	push	{r4, r5, r6, lr}
 800765e:	4e0e      	ldr	r6, [pc, #56]	; (8007698 <sbrk_aligned+0x3c>)
 8007660:	460c      	mov	r4, r1
 8007662:	6831      	ldr	r1, [r6, #0]
 8007664:	4605      	mov	r5, r0
 8007666:	b911      	cbnz	r1, 800766e <sbrk_aligned+0x12>
 8007668:	f000 f8bc 	bl	80077e4 <_sbrk_r>
 800766c:	6030      	str	r0, [r6, #0]
 800766e:	4621      	mov	r1, r4
 8007670:	4628      	mov	r0, r5
 8007672:	f000 f8b7 	bl	80077e4 <_sbrk_r>
 8007676:	1c43      	adds	r3, r0, #1
 8007678:	d00a      	beq.n	8007690 <sbrk_aligned+0x34>
 800767a:	1cc4      	adds	r4, r0, #3
 800767c:	f024 0403 	bic.w	r4, r4, #3
 8007680:	42a0      	cmp	r0, r4
 8007682:	d007      	beq.n	8007694 <sbrk_aligned+0x38>
 8007684:	1a21      	subs	r1, r4, r0
 8007686:	4628      	mov	r0, r5
 8007688:	f000 f8ac 	bl	80077e4 <_sbrk_r>
 800768c:	3001      	adds	r0, #1
 800768e:	d101      	bne.n	8007694 <sbrk_aligned+0x38>
 8007690:	f04f 34ff 	mov.w	r4, #4294967295
 8007694:	4620      	mov	r0, r4
 8007696:	bd70      	pop	{r4, r5, r6, pc}
 8007698:	20004acc 	.word	0x20004acc

0800769c <_malloc_r>:
 800769c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a0:	1ccd      	adds	r5, r1, #3
 80076a2:	f025 0503 	bic.w	r5, r5, #3
 80076a6:	3508      	adds	r5, #8
 80076a8:	2d0c      	cmp	r5, #12
 80076aa:	bf38      	it	cc
 80076ac:	250c      	movcc	r5, #12
 80076ae:	2d00      	cmp	r5, #0
 80076b0:	4607      	mov	r7, r0
 80076b2:	db01      	blt.n	80076b8 <_malloc_r+0x1c>
 80076b4:	42a9      	cmp	r1, r5
 80076b6:	d905      	bls.n	80076c4 <_malloc_r+0x28>
 80076b8:	230c      	movs	r3, #12
 80076ba:	603b      	str	r3, [r7, #0]
 80076bc:	2600      	movs	r6, #0
 80076be:	4630      	mov	r0, r6
 80076c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076c4:	4e2e      	ldr	r6, [pc, #184]	; (8007780 <_malloc_r+0xe4>)
 80076c6:	f000 f89d 	bl	8007804 <__malloc_lock>
 80076ca:	6833      	ldr	r3, [r6, #0]
 80076cc:	461c      	mov	r4, r3
 80076ce:	bb34      	cbnz	r4, 800771e <_malloc_r+0x82>
 80076d0:	4629      	mov	r1, r5
 80076d2:	4638      	mov	r0, r7
 80076d4:	f7ff ffc2 	bl	800765c <sbrk_aligned>
 80076d8:	1c43      	adds	r3, r0, #1
 80076da:	4604      	mov	r4, r0
 80076dc:	d14d      	bne.n	800777a <_malloc_r+0xde>
 80076de:	6834      	ldr	r4, [r6, #0]
 80076e0:	4626      	mov	r6, r4
 80076e2:	2e00      	cmp	r6, #0
 80076e4:	d140      	bne.n	8007768 <_malloc_r+0xcc>
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	4631      	mov	r1, r6
 80076ea:	4638      	mov	r0, r7
 80076ec:	eb04 0803 	add.w	r8, r4, r3
 80076f0:	f000 f878 	bl	80077e4 <_sbrk_r>
 80076f4:	4580      	cmp	r8, r0
 80076f6:	d13a      	bne.n	800776e <_malloc_r+0xd2>
 80076f8:	6821      	ldr	r1, [r4, #0]
 80076fa:	3503      	adds	r5, #3
 80076fc:	1a6d      	subs	r5, r5, r1
 80076fe:	f025 0503 	bic.w	r5, r5, #3
 8007702:	3508      	adds	r5, #8
 8007704:	2d0c      	cmp	r5, #12
 8007706:	bf38      	it	cc
 8007708:	250c      	movcc	r5, #12
 800770a:	4629      	mov	r1, r5
 800770c:	4638      	mov	r0, r7
 800770e:	f7ff ffa5 	bl	800765c <sbrk_aligned>
 8007712:	3001      	adds	r0, #1
 8007714:	d02b      	beq.n	800776e <_malloc_r+0xd2>
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	442b      	add	r3, r5
 800771a:	6023      	str	r3, [r4, #0]
 800771c:	e00e      	b.n	800773c <_malloc_r+0xa0>
 800771e:	6822      	ldr	r2, [r4, #0]
 8007720:	1b52      	subs	r2, r2, r5
 8007722:	d41e      	bmi.n	8007762 <_malloc_r+0xc6>
 8007724:	2a0b      	cmp	r2, #11
 8007726:	d916      	bls.n	8007756 <_malloc_r+0xba>
 8007728:	1961      	adds	r1, r4, r5
 800772a:	42a3      	cmp	r3, r4
 800772c:	6025      	str	r5, [r4, #0]
 800772e:	bf18      	it	ne
 8007730:	6059      	strne	r1, [r3, #4]
 8007732:	6863      	ldr	r3, [r4, #4]
 8007734:	bf08      	it	eq
 8007736:	6031      	streq	r1, [r6, #0]
 8007738:	5162      	str	r2, [r4, r5]
 800773a:	604b      	str	r3, [r1, #4]
 800773c:	4638      	mov	r0, r7
 800773e:	f104 060b 	add.w	r6, r4, #11
 8007742:	f000 f865 	bl	8007810 <__malloc_unlock>
 8007746:	f026 0607 	bic.w	r6, r6, #7
 800774a:	1d23      	adds	r3, r4, #4
 800774c:	1af2      	subs	r2, r6, r3
 800774e:	d0b6      	beq.n	80076be <_malloc_r+0x22>
 8007750:	1b9b      	subs	r3, r3, r6
 8007752:	50a3      	str	r3, [r4, r2]
 8007754:	e7b3      	b.n	80076be <_malloc_r+0x22>
 8007756:	6862      	ldr	r2, [r4, #4]
 8007758:	42a3      	cmp	r3, r4
 800775a:	bf0c      	ite	eq
 800775c:	6032      	streq	r2, [r6, #0]
 800775e:	605a      	strne	r2, [r3, #4]
 8007760:	e7ec      	b.n	800773c <_malloc_r+0xa0>
 8007762:	4623      	mov	r3, r4
 8007764:	6864      	ldr	r4, [r4, #4]
 8007766:	e7b2      	b.n	80076ce <_malloc_r+0x32>
 8007768:	4634      	mov	r4, r6
 800776a:	6876      	ldr	r6, [r6, #4]
 800776c:	e7b9      	b.n	80076e2 <_malloc_r+0x46>
 800776e:	230c      	movs	r3, #12
 8007770:	603b      	str	r3, [r7, #0]
 8007772:	4638      	mov	r0, r7
 8007774:	f000 f84c 	bl	8007810 <__malloc_unlock>
 8007778:	e7a1      	b.n	80076be <_malloc_r+0x22>
 800777a:	6025      	str	r5, [r4, #0]
 800777c:	e7de      	b.n	800773c <_malloc_r+0xa0>
 800777e:	bf00      	nop
 8007780:	20004ac8 	.word	0x20004ac8

08007784 <_realloc_r>:
 8007784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007788:	4680      	mov	r8, r0
 800778a:	4614      	mov	r4, r2
 800778c:	460e      	mov	r6, r1
 800778e:	b921      	cbnz	r1, 800779a <_realloc_r+0x16>
 8007790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007794:	4611      	mov	r1, r2
 8007796:	f7ff bf81 	b.w	800769c <_malloc_r>
 800779a:	b92a      	cbnz	r2, 80077a8 <_realloc_r+0x24>
 800779c:	f7ff ff12 	bl	80075c4 <_free_r>
 80077a0:	4625      	mov	r5, r4
 80077a2:	4628      	mov	r0, r5
 80077a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a8:	f000 f838 	bl	800781c <_malloc_usable_size_r>
 80077ac:	4284      	cmp	r4, r0
 80077ae:	4607      	mov	r7, r0
 80077b0:	d802      	bhi.n	80077b8 <_realloc_r+0x34>
 80077b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80077b6:	d812      	bhi.n	80077de <_realloc_r+0x5a>
 80077b8:	4621      	mov	r1, r4
 80077ba:	4640      	mov	r0, r8
 80077bc:	f7ff ff6e 	bl	800769c <_malloc_r>
 80077c0:	4605      	mov	r5, r0
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d0ed      	beq.n	80077a2 <_realloc_r+0x1e>
 80077c6:	42bc      	cmp	r4, r7
 80077c8:	4622      	mov	r2, r4
 80077ca:	4631      	mov	r1, r6
 80077cc:	bf28      	it	cs
 80077ce:	463a      	movcs	r2, r7
 80077d0:	f7ff fbb8 	bl	8006f44 <memcpy>
 80077d4:	4631      	mov	r1, r6
 80077d6:	4640      	mov	r0, r8
 80077d8:	f7ff fef4 	bl	80075c4 <_free_r>
 80077dc:	e7e1      	b.n	80077a2 <_realloc_r+0x1e>
 80077de:	4635      	mov	r5, r6
 80077e0:	e7df      	b.n	80077a2 <_realloc_r+0x1e>
	...

080077e4 <_sbrk_r>:
 80077e4:	b538      	push	{r3, r4, r5, lr}
 80077e6:	4d06      	ldr	r5, [pc, #24]	; (8007800 <_sbrk_r+0x1c>)
 80077e8:	2300      	movs	r3, #0
 80077ea:	4604      	mov	r4, r0
 80077ec:	4608      	mov	r0, r1
 80077ee:	602b      	str	r3, [r5, #0]
 80077f0:	f7f9 fa52 	bl	8000c98 <_sbrk>
 80077f4:	1c43      	adds	r3, r0, #1
 80077f6:	d102      	bne.n	80077fe <_sbrk_r+0x1a>
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	b103      	cbz	r3, 80077fe <_sbrk_r+0x1a>
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	bd38      	pop	{r3, r4, r5, pc}
 8007800:	20004ad0 	.word	0x20004ad0

08007804 <__malloc_lock>:
 8007804:	4801      	ldr	r0, [pc, #4]	; (800780c <__malloc_lock+0x8>)
 8007806:	f000 b811 	b.w	800782c <__retarget_lock_acquire_recursive>
 800780a:	bf00      	nop
 800780c:	20004ad4 	.word	0x20004ad4

08007810 <__malloc_unlock>:
 8007810:	4801      	ldr	r0, [pc, #4]	; (8007818 <__malloc_unlock+0x8>)
 8007812:	f000 b80c 	b.w	800782e <__retarget_lock_release_recursive>
 8007816:	bf00      	nop
 8007818:	20004ad4 	.word	0x20004ad4

0800781c <_malloc_usable_size_r>:
 800781c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007820:	1f18      	subs	r0, r3, #4
 8007822:	2b00      	cmp	r3, #0
 8007824:	bfbc      	itt	lt
 8007826:	580b      	ldrlt	r3, [r1, r0]
 8007828:	18c0      	addlt	r0, r0, r3
 800782a:	4770      	bx	lr

0800782c <__retarget_lock_acquire_recursive>:
 800782c:	4770      	bx	lr

0800782e <__retarget_lock_release_recursive>:
 800782e:	4770      	bx	lr

08007830 <_init>:
 8007830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007832:	bf00      	nop
 8007834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007836:	bc08      	pop	{r3}
 8007838:	469e      	mov	lr, r3
 800783a:	4770      	bx	lr

0800783c <_fini>:
 800783c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783e:	bf00      	nop
 8007840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007842:	bc08      	pop	{r3}
 8007844:	469e      	mov	lr, r3
 8007846:	4770      	bx	lr
