
LCD_bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000323c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028d0  08003348  08003348  00004348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c18  08005c18  00007028  2**0
                  CONTENTS
  4 .ARM          00000000  08005c18  08005c18  00007028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c18  08005c18  00007028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c18  08005c18  00006c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c1c  08005c1c  00006c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08005c20  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a1c  20000028  08005c48  00007028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a44  08005c48  00007a44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006aed  00000000  00000000  00007051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000192d  00000000  00000000  0000db3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  0000f470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016780  00000000  00000000  0000fba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00008831  00000000  00000000  00026328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0007f239  00000000  00000000  0002eb59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000add92  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000555  00000000  00000000  000addd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001bb0  00000000  00000000  000ae32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000afedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08003330 	.word	0x08003330

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08003330 	.word	0x08003330

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08e      	sub	sp, #56	@ 0x38
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
char s[50] = "kck";
 8000152:	4b0c      	ldr	r3, [pc, #48]	@ (8000184 <main+0x38>)
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	f107 0308 	add.w	r3, r7, #8
 800015a:	222e      	movs	r2, #46	@ 0x2e
 800015c:	2100      	movs	r1, #0
 800015e:	4618      	mov	r0, r3
 8000160:	f003 f8ba 	bl	80032d8 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f001 fa9e 	bl	80016a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f80e 	bl	8000188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f8a0 	bl	80002b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000170:	f000 f880 	bl	8000274 <MX_DMA_Init>
  MX_SPI1_Init();
 8000174:	f000 f848 	bl	8000208 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
ST7789_Init();
 8000178:	f000 fa06 	bl	8000588 <ST7789_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);

ST7789_Test();
 800017c:	f000 fff0 	bl	8001160 <ST7789_Test>
  {
 8000180:	bf00      	nop
 8000182:	e7fb      	b.n	800017c <main+0x30>
 8000184:	006b636b 	.word	0x006b636b

08000188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b090      	sub	sp, #64	@ 0x40
 800018c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018e:	f107 0318 	add.w	r3, r7, #24
 8000192:	2228      	movs	r2, #40	@ 0x28
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f003 f89e 	bl	80032d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]
 80001a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001aa:	2302      	movs	r3, #2
 80001ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ae:	2301      	movs	r3, #1
 80001b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001b2:	2310      	movs	r3, #16
 80001b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b6:	2302      	movs	r3, #2
 80001b8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001ba:	2300      	movs	r3, #0
 80001bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001be:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c4:	f107 0318 	add.w	r3, r7, #24
 80001c8:	4618      	mov	r0, r3
 80001ca:	f001 fff9 	bl	80021c0 <HAL_RCC_OscConfig>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001d4:	f000 f8ac 	bl	8000330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d8:	230f      	movs	r3, #15
 80001da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001dc:	2302      	movs	r3, #2
 80001de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2101      	movs	r1, #1
 80001f0:	4618      	mov	r0, r3
 80001f2:	f002 fa67 	bl	80026c4 <HAL_RCC_ClockConfig>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80001fc:	f000 f898 	bl	8000330 <Error_Handler>
  }
}
 8000200:	bf00      	nop
 8000202:	3740      	adds	r7, #64	@ 0x40
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}

08000208 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800020c:	4b17      	ldr	r3, [pc, #92]	@ (800026c <MX_SPI1_Init+0x64>)
 800020e:	4a18      	ldr	r2, [pc, #96]	@ (8000270 <MX_SPI1_Init+0x68>)
 8000210:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000212:	4b16      	ldr	r3, [pc, #88]	@ (800026c <MX_SPI1_Init+0x64>)
 8000214:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000218:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800021a:	4b14      	ldr	r3, [pc, #80]	@ (800026c <MX_SPI1_Init+0x64>)
 800021c:	2200      	movs	r2, #0
 800021e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000220:	4b12      	ldr	r3, [pc, #72]	@ (800026c <MX_SPI1_Init+0x64>)
 8000222:	2200      	movs	r2, #0
 8000224:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000226:	4b11      	ldr	r3, [pc, #68]	@ (800026c <MX_SPI1_Init+0x64>)
 8000228:	2202      	movs	r2, #2
 800022a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800022c:	4b0f      	ldr	r3, [pc, #60]	@ (800026c <MX_SPI1_Init+0x64>)
 800022e:	2200      	movs	r2, #0
 8000230:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000232:	4b0e      	ldr	r3, [pc, #56]	@ (800026c <MX_SPI1_Init+0x64>)
 8000234:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000238:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800023a:	4b0c      	ldr	r3, [pc, #48]	@ (800026c <MX_SPI1_Init+0x64>)
 800023c:	2200      	movs	r2, #0
 800023e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000240:	4b0a      	ldr	r3, [pc, #40]	@ (800026c <MX_SPI1_Init+0x64>)
 8000242:	2200      	movs	r2, #0
 8000244:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000246:	4b09      	ldr	r3, [pc, #36]	@ (800026c <MX_SPI1_Init+0x64>)
 8000248:	2200      	movs	r2, #0
 800024a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800024c:	4b07      	ldr	r3, [pc, #28]	@ (800026c <MX_SPI1_Init+0x64>)
 800024e:	2200      	movs	r2, #0
 8000250:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000252:	4b06      	ldr	r3, [pc, #24]	@ (800026c <MX_SPI1_Init+0x64>)
 8000254:	220a      	movs	r2, #10
 8000256:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <MX_SPI1_Init+0x64>)
 800025a:	f002 fb8f 	bl	800297c <HAL_SPI_Init>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000264:	f000 f864 	bl	8000330 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000044 	.word	0x20000044
 8000270:	40013000 	.word	0x40013000

08000274 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800027a:	4b0c      	ldr	r3, [pc, #48]	@ (80002ac <MX_DMA_Init+0x38>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	4a0b      	ldr	r2, [pc, #44]	@ (80002ac <MX_DMA_Init+0x38>)
 8000280:	f043 0301 	orr.w	r3, r3, #1
 8000284:	6153      	str	r3, [r2, #20]
 8000286:	4b09      	ldr	r3, [pc, #36]	@ (80002ac <MX_DMA_Init+0x38>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	f003 0301 	and.w	r3, r3, #1
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000292:	2200      	movs	r2, #0
 8000294:	2100      	movs	r1, #0
 8000296:	200d      	movs	r0, #13
 8000298:	f001 fb61 	bl	800195e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800029c:	200d      	movs	r0, #13
 800029e:	f001 fb7a 	bl	8001996 <HAL_NVIC_EnableIRQ>

}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40021000 	.word	0x40021000

080002b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b6:	f107 0308 	add.w	r3, r7, #8
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c4:	4b18      	ldr	r3, [pc, #96]	@ (8000328 <MX_GPIO_Init+0x78>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a17      	ldr	r2, [pc, #92]	@ (8000328 <MX_GPIO_Init+0x78>)
 80002ca:	f043 0304 	orr.w	r3, r3, #4
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b15      	ldr	r3, [pc, #84]	@ (8000328 <MX_GPIO_Init+0x78>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f003 0304 	and.w	r3, r3, #4
 80002d8:	607b      	str	r3, [r7, #4]
 80002da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002dc:	4b12      	ldr	r3, [pc, #72]	@ (8000328 <MX_GPIO_Init+0x78>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a11      	ldr	r2, [pc, #68]	@ (8000328 <MX_GPIO_Init+0x78>)
 80002e2:	f043 0308 	orr.w	r3, r3, #8
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000328 <MX_GPIO_Init+0x78>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0308 	and.w	r3, r3, #8
 80002f0:	603b      	str	r3, [r7, #0]
 80002f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80002f4:	2200      	movs	r2, #0
 80002f6:	f640 4107 	movw	r1, #3079	@ 0xc07
 80002fa:	480c      	ldr	r0, [pc, #48]	@ (800032c <MX_GPIO_Init+0x7c>)
 80002fc:	f001 ff48 	bl	8002190 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000300:	f640 4307 	movw	r3, #3079	@ 0xc07
 8000304:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000306:	2301      	movs	r3, #1
 8000308:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030a:	2300      	movs	r3, #0
 800030c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030e:	2302      	movs	r3, #2
 8000310:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000312:	f107 0308 	add.w	r3, r7, #8
 8000316:	4619      	mov	r1, r3
 8000318:	4804      	ldr	r0, [pc, #16]	@ (800032c <MX_GPIO_Init+0x7c>)
 800031a:	f001 fdbd 	bl	8001e98 <HAL_GPIO_Init>

}
 800031e:	bf00      	nop
 8000320:	3718      	adds	r7, #24
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40021000 	.word	0x40021000
 800032c:	40010c00 	.word	0x40010c00

08000330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000334:	b672      	cpsid	i
}
 8000336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000338:	bf00      	nop
 800033a:	e7fd      	b.n	8000338 <Error_Handler+0x8>

0800033c <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800034c:	480c      	ldr	r0, [pc, #48]	@ (8000380 <ST7789_WriteCommand+0x44>)
 800034e:	f001 ff1f 	bl	8002190 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000358:	4809      	ldr	r0, [pc, #36]	@ (8000380 <ST7789_WriteCommand+0x44>)
 800035a:	f001 ff19 	bl	8002190 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800035e:	1df9      	adds	r1, r7, #7
 8000360:	f04f 33ff 	mov.w	r3, #4294967295
 8000364:	2201      	movs	r2, #1
 8000366:	4807      	ldr	r0, [pc, #28]	@ (8000384 <ST7789_WriteCommand+0x48>)
 8000368:	f002 fb8c 	bl	8002a84 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800036c:	2201      	movs	r2, #1
 800036e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000372:	4803      	ldr	r0, [pc, #12]	@ (8000380 <ST7789_WriteCommand+0x44>)
 8000374:	f001 ff0c 	bl	8002190 <HAL_GPIO_WritePin>
}
 8000378:	bf00      	nop
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40010c00 	.word	0x40010c00
 8000384:	20000044 	.word	0x20000044

08000388 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8000392:	2200      	movs	r2, #0
 8000394:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000398:	4820      	ldr	r0, [pc, #128]	@ (800041c <ST7789_WriteData+0x94>)
 800039a:	f001 fef9 	bl	8002190 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800039e:	2201      	movs	r2, #1
 80003a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003a4:	481d      	ldr	r0, [pc, #116]	@ (800041c <ST7789_WriteData+0x94>)
 80003a6:	f001 fef3 	bl	8002190 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80003aa:	e02a      	b.n	8000402 <ST7789_WriteData+0x7a>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003b2:	4293      	cmp	r3, r2
 80003b4:	bf28      	it	cs
 80003b6:	4613      	movcs	r3, r2
 80003b8:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 80003ba:	4b19      	ldr	r3, [pc, #100]	@ (8000420 <ST7789_WriteData+0x98>)
 80003bc:	881b      	ldrh	r3, [r3, #0]
 80003be:	461a      	mov	r2, r3
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d30e      	bcc.n	80003e4 <ST7789_WriteData+0x5c>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 80003c6:	89fb      	ldrh	r3, [r7, #14]
 80003c8:	461a      	mov	r2, r3
 80003ca:	6879      	ldr	r1, [r7, #4]
 80003cc:	4815      	ldr	r0, [pc, #84]	@ (8000424 <ST7789_WriteData+0x9c>)
 80003ce:	f002 fc9d 	bl	8002d0c <HAL_SPI_Transmit_DMA>

				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 80003d2:	bf00      	nop
 80003d4:	4b13      	ldr	r3, [pc, #76]	@ (8000424 <ST7789_WriteData+0x9c>)
 80003d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003d8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d1f8      	bne.n	80003d4 <ST7789_WriteData+0x4c>
 80003e2:	e006      	b.n	80003f2 <ST7789_WriteData+0x6a>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80003e4:	89fa      	ldrh	r2, [r7, #14]
 80003e6:	f04f 33ff 	mov.w	r3, #4294967295
 80003ea:	6879      	ldr	r1, [r7, #4]
 80003ec:	480d      	ldr	r0, [pc, #52]	@ (8000424 <ST7789_WriteData+0x9c>)
 80003ee:	f002 fb49 	bl	8002a84 <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 80003f2:	89fb      	ldrh	r3, [r7, #14]
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	4413      	add	r3, r2
 80003f8:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80003fa:	89fb      	ldrh	r3, [r7, #14]
 80003fc:	683a      	ldr	r2, [r7, #0]
 80003fe:	1ad3      	subs	r3, r2, r3
 8000400:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d1d1      	bne.n	80003ac <ST7789_WriteData+0x24>
	}

	ST7789_UnSelect();
 8000408:	2201      	movs	r2, #1
 800040a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800040e:	4803      	ldr	r0, [pc, #12]	@ (800041c <ST7789_WriteData+0x94>)
 8000410:	f001 febe 	bl	8002190 <HAL_GPIO_WritePin>
}
 8000414:	bf00      	nop
 8000416:	3710      	adds	r7, #16
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40010c00 	.word	0x40010c00
 8000420:	20000018 	.word	0x20000018
 8000424:	20000044 	.word	0x20000044

08000428 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000432:	2200      	movs	r2, #0
 8000434:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000438:	480c      	ldr	r0, [pc, #48]	@ (800046c <ST7789_WriteSmallData+0x44>)
 800043a:	f001 fea9 	bl	8002190 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800043e:	2201      	movs	r2, #1
 8000440:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000444:	4809      	ldr	r0, [pc, #36]	@ (800046c <ST7789_WriteSmallData+0x44>)
 8000446:	f001 fea3 	bl	8002190 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 800044a:	1df9      	adds	r1, r7, #7
 800044c:	f04f 33ff 	mov.w	r3, #4294967295
 8000450:	2201      	movs	r2, #1
 8000452:	4807      	ldr	r0, [pc, #28]	@ (8000470 <ST7789_WriteSmallData+0x48>)
 8000454:	f002 fb16 	bl	8002a84 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000458:	2201      	movs	r2, #1
 800045a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800045e:	4803      	ldr	r0, [pc, #12]	@ (800046c <ST7789_WriteSmallData+0x44>)
 8000460:	f001 fe96 	bl	8002190 <HAL_GPIO_WritePin>
}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40010c00 	.word	0x40010c00
 8000470:	20000044 	.word	0x20000044

08000474 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800047e:	2036      	movs	r0, #54	@ 0x36
 8000480:	f7ff ff5c 	bl	800033c <ST7789_WriteCommand>
	switch (m) {
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	2b03      	cmp	r3, #3
 8000488:	d81a      	bhi.n	80004c0 <ST7789_SetRotation+0x4c>
 800048a:	a201      	add	r2, pc, #4	@ (adr r2, 8000490 <ST7789_SetRotation+0x1c>)
 800048c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000490:	080004a1 	.word	0x080004a1
 8000494:	080004a9 	.word	0x080004a9
 8000498:	080004b1 	.word	0x080004b1
 800049c:	080004b9 	.word	0x080004b9
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80004a0:	20c0      	movs	r0, #192	@ 0xc0
 80004a2:	f7ff ffc1 	bl	8000428 <ST7789_WriteSmallData>
		break;
 80004a6:	e00c      	b.n	80004c2 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80004a8:	20a0      	movs	r0, #160	@ 0xa0
 80004aa:	f7ff ffbd 	bl	8000428 <ST7789_WriteSmallData>
		break;
 80004ae:	e008      	b.n	80004c2 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff ffb9 	bl	8000428 <ST7789_WriteSmallData>
		break;
 80004b6:	e004      	b.n	80004c2 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80004b8:	2060      	movs	r0, #96	@ 0x60
 80004ba:	f7ff ffb5 	bl	8000428 <ST7789_WriteSmallData>
		break;
 80004be:	e000      	b.n	80004c2 <ST7789_SetRotation+0x4e>
	default:
		break;
 80004c0:	bf00      	nop
	}
}
 80004c2:	bf00      	nop
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop

080004cc <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b087      	sub	sp, #28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4604      	mov	r4, r0
 80004d4:	4608      	mov	r0, r1
 80004d6:	4611      	mov	r1, r2
 80004d8:	461a      	mov	r2, r3
 80004da:	4623      	mov	r3, r4
 80004dc:	80fb      	strh	r3, [r7, #6]
 80004de:	4603      	mov	r3, r0
 80004e0:	80bb      	strh	r3, [r7, #4]
 80004e2:	460b      	mov	r3, r1
 80004e4:	807b      	strh	r3, [r7, #2]
 80004e6:	4613      	mov	r3, r2
 80004e8:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80004ea:	2200      	movs	r2, #0
 80004ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004f0:	4824      	ldr	r0, [pc, #144]	@ (8000584 <ST7789_SetAddressWindow+0xb8>)
 80004f2:	f001 fe4d 	bl	8002190 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80004f6:	88fb      	ldrh	r3, [r7, #6]
 80004f8:	82fb      	strh	r3, [r7, #22]
 80004fa:	887b      	ldrh	r3, [r7, #2]
 80004fc:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80004fe:	88bb      	ldrh	r3, [r7, #4]
 8000500:	827b      	strh	r3, [r7, #18]
 8000502:	883b      	ldrh	r3, [r7, #0]
 8000504:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8000506:	202a      	movs	r0, #42	@ 0x2a
 8000508:	f7ff ff18 	bl	800033c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 800050c:	8afb      	ldrh	r3, [r7, #22]
 800050e:	0a1b      	lsrs	r3, r3, #8
 8000510:	b29b      	uxth	r3, r3
 8000512:	b2db      	uxtb	r3, r3
 8000514:	733b      	strb	r3, [r7, #12]
 8000516:	8afb      	ldrh	r3, [r7, #22]
 8000518:	b2db      	uxtb	r3, r3
 800051a:	737b      	strb	r3, [r7, #13]
 800051c:	8abb      	ldrh	r3, [r7, #20]
 800051e:	0a1b      	lsrs	r3, r3, #8
 8000520:	b29b      	uxth	r3, r3
 8000522:	b2db      	uxtb	r3, r3
 8000524:	73bb      	strb	r3, [r7, #14]
 8000526:	8abb      	ldrh	r3, [r7, #20]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2104      	movs	r1, #4
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff ff28 	bl	8000388 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000538:	202b      	movs	r0, #43	@ 0x2b
 800053a:	f7ff feff 	bl	800033c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800053e:	8a7b      	ldrh	r3, [r7, #18]
 8000540:	0a1b      	lsrs	r3, r3, #8
 8000542:	b29b      	uxth	r3, r3
 8000544:	b2db      	uxtb	r3, r3
 8000546:	723b      	strb	r3, [r7, #8]
 8000548:	8a7b      	ldrh	r3, [r7, #18]
 800054a:	b2db      	uxtb	r3, r3
 800054c:	727b      	strb	r3, [r7, #9]
 800054e:	8a3b      	ldrh	r3, [r7, #16]
 8000550:	0a1b      	lsrs	r3, r3, #8
 8000552:	b29b      	uxth	r3, r3
 8000554:	b2db      	uxtb	r3, r3
 8000556:	72bb      	strb	r3, [r7, #10]
 8000558:	8a3b      	ldrh	r3, [r7, #16]
 800055a:	b2db      	uxtb	r3, r3
 800055c:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800055e:	f107 0308 	add.w	r3, r7, #8
 8000562:	2104      	movs	r1, #4
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ff0f 	bl	8000388 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 800056a:	202c      	movs	r0, #44	@ 0x2c
 800056c:	f7ff fee6 	bl	800033c <ST7789_WriteCommand>
	ST7789_UnSelect();
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000576:	4803      	ldr	r0, [pc, #12]	@ (8000584 <ST7789_SetAddressWindow+0xb8>)
 8000578:	f001 fe0a 	bl	8002190 <HAL_GPIO_WritePin>
}
 800057c:	bf00      	nop
 800057e:	371c      	adds	r7, #28
 8000580:	46bd      	mov	sp, r7
 8000582:	bd90      	pop	{r4, r7, pc}
 8000584:	40010c00 	.word	0x40010c00

08000588 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b08b      	sub	sp, #44	@ 0x2c
 800058c:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 800058e:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8000592:	2100      	movs	r1, #0
 8000594:	484a      	ldr	r0, [pc, #296]	@ (80006c0 <ST7789_Init+0x138>)
 8000596:	f002 fe9f 	bl	80032d8 <memset>
	#endif
	HAL_Delay(10);
 800059a:	200a      	movs	r0, #10
 800059c:	f001 f8e4 	bl	8001768 <HAL_Delay>
    ST7789_RST_Clr();
 80005a0:	2200      	movs	r2, #0
 80005a2:	2102      	movs	r1, #2
 80005a4:	4847      	ldr	r0, [pc, #284]	@ (80006c4 <ST7789_Init+0x13c>)
 80005a6:	f001 fdf3 	bl	8002190 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80005aa:	200a      	movs	r0, #10
 80005ac:	f001 f8dc 	bl	8001768 <HAL_Delay>
    ST7789_RST_Set();
 80005b0:	2201      	movs	r2, #1
 80005b2:	2102      	movs	r1, #2
 80005b4:	4843      	ldr	r0, [pc, #268]	@ (80006c4 <ST7789_Init+0x13c>)
 80005b6:	f001 fdeb 	bl	8002190 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80005ba:	2014      	movs	r0, #20
 80005bc:	f001 f8d4 	bl	8001768 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);
 80005c0:	203a      	movs	r0, #58	@ 0x3a
 80005c2:	f7ff febb 	bl	800033c <ST7789_WriteCommand>
    //	Set color mode
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 80005c6:	2055      	movs	r0, #85	@ 0x55
 80005c8:	f7ff ff2e 	bl	8000428 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80005cc:	20b2      	movs	r0, #178	@ 0xb2
 80005ce:	f7ff feb5 	bl	800033c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80005d2:	4a3d      	ldr	r2, [pc, #244]	@ (80006c8 <ST7789_Init+0x140>)
 80005d4:	f107 0320 	add.w	r3, r7, #32
 80005d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005dc:	6018      	str	r0, [r3, #0]
 80005de:	3304      	adds	r3, #4
 80005e0:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2105      	movs	r1, #5
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff fecd 	bl	8000388 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80005ee:	2002      	movs	r0, #2
 80005f0:	f7ff ff40 	bl	8000474 <ST7789_SetRotation>
	
	// Internal LCD Voltage generator settings
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80005f4:	20b7      	movs	r0, #183	@ 0xb7
 80005f6:	f7ff fea1 	bl	800033c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80005fa:	2035      	movs	r0, #53	@ 0x35
 80005fc:	f7ff ff14 	bl	8000428 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8000600:	20bb      	movs	r0, #187	@ 0xbb
 8000602:	f7ff fe9b 	bl	800033c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8000606:	2019      	movs	r0, #25
 8000608:	f7ff ff0e 	bl	8000428 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 800060c:	20c0      	movs	r0, #192	@ 0xc0
 800060e:	f7ff fe95 	bl	800033c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8000612:	202c      	movs	r0, #44	@ 0x2c
 8000614:	f7ff ff08 	bl	8000428 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8000618:	20c2      	movs	r0, #194	@ 0xc2
 800061a:	f7ff fe8f 	bl	800033c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 800061e:	2001      	movs	r0, #1
 8000620:	f7ff ff02 	bl	8000428 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8000624:	20c3      	movs	r0, #195	@ 0xc3
 8000626:	f7ff fe89 	bl	800033c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 800062a:	2012      	movs	r0, #18
 800062c:	f7ff fefc 	bl	8000428 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000630:	20c4      	movs	r0, #196	@ 0xc4
 8000632:	f7ff fe83 	bl	800033c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8000636:	2020      	movs	r0, #32
 8000638:	f7ff fef6 	bl	8000428 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 800063c:	20c6      	movs	r0, #198	@ 0xc6
 800063e:	f7ff fe7d 	bl	800033c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000642:	200f      	movs	r0, #15
 8000644:	f7ff fef0 	bl	8000428 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8000648:	20d0      	movs	r0, #208	@ 0xd0
 800064a:	f7ff fe77 	bl	800033c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 800064e:	20a4      	movs	r0, #164	@ 0xa4
 8000650:	f7ff feea 	bl	8000428 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000654:	20a1      	movs	r0, #161	@ 0xa1
 8000656:	f7ff fee7 	bl	8000428 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800065a:	20e0      	movs	r0, #224	@ 0xe0
 800065c:	f7ff fe6e 	bl	800033c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000660:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <ST7789_Init+0x144>)
 8000662:	f107 0410 	add.w	r4, r7, #16
 8000666:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000668:	c407      	stmia	r4!, {r0, r1, r2}
 800066a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	210e      	movs	r1, #14
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff fe88 	bl	8000388 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8000678:	20e1      	movs	r0, #225	@ 0xe1
 800067a:	f7ff fe5f 	bl	800033c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800067e:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <ST7789_Init+0x148>)
 8000680:	463c      	mov	r4, r7
 8000682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000684:	c407      	stmia	r4!, {r0, r1, r2}
 8000686:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000688:	463b      	mov	r3, r7
 800068a:	210e      	movs	r1, #14
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff fe7b 	bl	8000388 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8000692:	2021      	movs	r0, #33	@ 0x21
 8000694:	f7ff fe52 	bl	800033c <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000698:	2011      	movs	r0, #17
 800069a:	f7ff fe4f 	bl	800033c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800069e:	2013      	movs	r0, #19
 80006a0:	f7ff fe4c 	bl	800033c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on
 80006a4:	2029      	movs	r0, #41	@ 0x29
 80006a6:	f7ff fe49 	bl	800033c <ST7789_WriteCommand>

	HAL_Delay(50);
 80006aa:	2032      	movs	r0, #50	@ 0x32
 80006ac:	f001 f85c 	bl	8001768 <HAL_Delay>
	ST7789_Fill_Color(BLACK);
 80006b0:	2000      	movs	r0, #0
 80006b2:	f000 f80f 	bl	80006d4 <ST7789_Fill_Color>
				//	Fill with Black.
}
 80006b6:	bf00      	nop
 80006b8:	372c      	adds	r7, #44	@ 0x2c
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd90      	pop	{r4, r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000e0 	.word	0x200000e0
 80006c4:	40010c00 	.word	0x40010c00
 80006c8:	08003348 	.word	0x08003348
 80006cc:	08003350 	.word	0x08003350
 80006d0:	08003360 	.word	0x08003360

080006d4 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80006de:	23ef      	movs	r3, #239	@ 0xef
 80006e0:	22ef      	movs	r2, #239	@ 0xef
 80006e2:	2100      	movs	r1, #0
 80006e4:	2000      	movs	r0, #0
 80006e6:	f7ff fef1 	bl	80004cc <ST7789_SetAddressWindow>
	ST7789_Select();
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006f0:	4810      	ldr	r0, [pc, #64]	@ (8000734 <ST7789_Fill_Color+0x60>)
 80006f2:	f001 fd4d 	bl	8002190 <HAL_GPIO_WritePin>

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	81fb      	strh	r3, [r7, #14]
 80006fa:	e00e      	b.n	800071a <ST7789_Fill_Color+0x46>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 80006fc:	88fb      	ldrh	r3, [r7, #6]
 80006fe:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8000702:	4619      	mov	r1, r3
 8000704:	480c      	ldr	r0, [pc, #48]	@ (8000738 <ST7789_Fill_Color+0x64>)
 8000706:	f002 fde7 	bl	80032d8 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 800070a:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 800070e:	480a      	ldr	r0, [pc, #40]	@ (8000738 <ST7789_Fill_Color+0x64>)
 8000710:	f7ff fe3a 	bl	8000388 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8000714:	89fb      	ldrh	r3, [r7, #14]
 8000716:	3301      	adds	r3, #1
 8000718:	81fb      	strh	r3, [r7, #14]
 800071a:	89fb      	ldrh	r3, [r7, #14]
 800071c:	2b2f      	cmp	r3, #47	@ 0x2f
 800071e:	d9ed      	bls.n	80006fc <ST7789_Fill_Color+0x28>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000726:	4803      	ldr	r0, [pc, #12]	@ (8000734 <ST7789_Fill_Color+0x60>)
 8000728:	f001 fd32 	bl	8002190 <HAL_GPIO_WritePin>
}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40010c00 	.word	0x40010c00
 8000738:	200000e0 	.word	0x200000e0

0800073c <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	80fb      	strh	r3, [r7, #6]
 8000746:	460b      	mov	r3, r1
 8000748:	80bb      	strh	r3, [r7, #4]
 800074a:	4613      	mov	r3, r2
 800074c:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	2bef      	cmp	r3, #239	@ 0xef
 8000752:	d823      	bhi.n	800079c <ST7789_DrawPixel+0x60>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8000754:	88bb      	ldrh	r3, [r7, #4]
 8000756:	2bef      	cmp	r3, #239	@ 0xef
 8000758:	d820      	bhi.n	800079c <ST7789_DrawPixel+0x60>
	
	ST7789_SetAddressWindow(x, y, x, y);
 800075a:	88bb      	ldrh	r3, [r7, #4]
 800075c:	88fa      	ldrh	r2, [r7, #6]
 800075e:	88b9      	ldrh	r1, [r7, #4]
 8000760:	88f8      	ldrh	r0, [r7, #6]
 8000762:	f7ff feb3 	bl	80004cc <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 8000766:	887b      	ldrh	r3, [r7, #2]
 8000768:	0a1b      	lsrs	r3, r3, #8
 800076a:	b29b      	uxth	r3, r3
 800076c:	b2db      	uxtb	r3, r3
 800076e:	733b      	strb	r3, [r7, #12]
 8000770:	887b      	ldrh	r3, [r7, #2]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800077c:	4809      	ldr	r0, [pc, #36]	@ (80007a4 <ST7789_DrawPixel+0x68>)
 800077e:	f001 fd07 	bl	8002190 <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2102      	movs	r1, #2
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fdfd 	bl	8000388 <ST7789_WriteData>
	ST7789_UnSelect();
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000794:	4803      	ldr	r0, [pc, #12]	@ (80007a4 <ST7789_DrawPixel+0x68>)
 8000796:	f001 fcfb 	bl	8002190 <HAL_GPIO_WritePin>
 800079a:	e000      	b.n	800079e <ST7789_DrawPixel+0x62>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 800079c:	bf00      	nop
}
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40010c00 	.word	0x40010c00

080007a8 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b087      	sub	sp, #28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4604      	mov	r4, r0
 80007b0:	4608      	mov	r0, r1
 80007b2:	4611      	mov	r1, r2
 80007b4:	461a      	mov	r2, r3
 80007b6:	4623      	mov	r3, r4
 80007b8:	80fb      	strh	r3, [r7, #6]
 80007ba:	4603      	mov	r3, r0
 80007bc:	80bb      	strh	r3, [r7, #4]
 80007be:	460b      	mov	r3, r1
 80007c0:	807b      	strh	r3, [r7, #2]
 80007c2:	4613      	mov	r3, r2
 80007c4:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 80007c6:	883a      	ldrh	r2, [r7, #0]
 80007c8:	88bb      	ldrh	r3, [r7, #4]
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80007d0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80007d4:	8879      	ldrh	r1, [r7, #2]
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	1acb      	subs	r3, r1, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	bfb8      	it	lt
 80007de:	425b      	neglt	r3, r3
 80007e0:	429a      	cmp	r2, r3
 80007e2:	bfcc      	ite	gt
 80007e4:	2301      	movgt	r3, #1
 80007e6:	2300      	movle	r3, #0
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	827b      	strh	r3, [r7, #18]
    if (steep) {
 80007ec:	8a7b      	ldrh	r3, [r7, #18]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d00b      	beq.n	800080a <ST7789_DrawLine+0x62>
		swap = x0;
 80007f2:	88fb      	ldrh	r3, [r7, #6]
 80007f4:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 80007f6:	88bb      	ldrh	r3, [r7, #4]
 80007f8:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 80007fa:	8a3b      	ldrh	r3, [r7, #16]
 80007fc:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 80007fe:	887b      	ldrh	r3, [r7, #2]
 8000800:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 8000802:	883b      	ldrh	r3, [r7, #0]
 8000804:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 8000806:	8a3b      	ldrh	r3, [r7, #16]
 8000808:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 800080a:	88fa      	ldrh	r2, [r7, #6]
 800080c:	887b      	ldrh	r3, [r7, #2]
 800080e:	429a      	cmp	r2, r3
 8000810:	d90b      	bls.n	800082a <ST7789_DrawLine+0x82>
		swap = x0;
 8000812:	88fb      	ldrh	r3, [r7, #6]
 8000814:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 8000816:	887b      	ldrh	r3, [r7, #2]
 8000818:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 800081a:	8a3b      	ldrh	r3, [r7, #16]
 800081c:	807b      	strh	r3, [r7, #2]

		swap = y0;
 800081e:	88bb      	ldrh	r3, [r7, #4]
 8000820:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 8000822:	883b      	ldrh	r3, [r7, #0]
 8000824:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 8000826:	8a3b      	ldrh	r3, [r7, #16]
 8000828:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 800082a:	887a      	ldrh	r2, [r7, #2]
 800082c:	88fb      	ldrh	r3, [r7, #6]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	b29b      	uxth	r3, r3
 8000832:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 8000834:	883a      	ldrh	r2, [r7, #0]
 8000836:	88bb      	ldrh	r3, [r7, #4]
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	bfb8      	it	lt
 800083e:	425b      	neglt	r3, r3
 8000840:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 8000842:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000846:	0fda      	lsrs	r2, r3, #31
 8000848:	4413      	add	r3, r2
 800084a:	105b      	asrs	r3, r3, #1
 800084c:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 800084e:	88ba      	ldrh	r2, [r7, #4]
 8000850:	883b      	ldrh	r3, [r7, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	d202      	bcs.n	800085c <ST7789_DrawLine+0xb4>
        ystep = 1;
 8000856:	2301      	movs	r3, #1
 8000858:	82bb      	strh	r3, [r7, #20]
 800085a:	e028      	b.n	80008ae <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 800085c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000860:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 8000862:	e024      	b.n	80008ae <ST7789_DrawLine+0x106>
        if (steep) {
 8000864:	8a7b      	ldrh	r3, [r7, #18]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d006      	beq.n	8000878 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 800086a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800086c:	88f9      	ldrh	r1, [r7, #6]
 800086e:	88bb      	ldrh	r3, [r7, #4]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff63 	bl	800073c <ST7789_DrawPixel>
 8000876:	e005      	b.n	8000884 <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 8000878:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800087a:	88b9      	ldrh	r1, [r7, #4]
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ff5c 	bl	800073c <ST7789_DrawPixel>
        }
        err -= dy;
 8000884:	8afa      	ldrh	r2, [r7, #22]
 8000886:	89bb      	ldrh	r3, [r7, #12]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	b29b      	uxth	r3, r3
 800088c:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 800088e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000892:	2b00      	cmp	r3, #0
 8000894:	da08      	bge.n	80008a8 <ST7789_DrawLine+0x100>
            y0 += ystep;
 8000896:	8aba      	ldrh	r2, [r7, #20]
 8000898:	88bb      	ldrh	r3, [r7, #4]
 800089a:	4413      	add	r3, r2
 800089c:	80bb      	strh	r3, [r7, #4]
            err += dx;
 800089e:	8afa      	ldrh	r2, [r7, #22]
 80008a0:	89fb      	ldrh	r3, [r7, #14]
 80008a2:	4413      	add	r3, r2
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	3301      	adds	r3, #1
 80008ac:	80fb      	strh	r3, [r7, #6]
 80008ae:	88fa      	ldrh	r2, [r7, #6]
 80008b0:	887b      	ldrh	r3, [r7, #2]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d9d6      	bls.n	8000864 <ST7789_DrawLine+0xbc>
        }
    }
}
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	371c      	adds	r7, #28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd90      	pop	{r4, r7, pc}

080008c0 <ST7789_DrawRectangle>:
 * @param xi&yi -> 2 coordinates of 2 top points.
 * @param color -> color of the Rectangle line
 * @return none
 */
void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af02      	add	r7, sp, #8
 80008c6:	4604      	mov	r4, r0
 80008c8:	4608      	mov	r0, r1
 80008ca:	4611      	mov	r1, r2
 80008cc:	461a      	mov	r2, r3
 80008ce:	4623      	mov	r3, r4
 80008d0:	80fb      	strh	r3, [r7, #6]
 80008d2:	4603      	mov	r3, r0
 80008d4:	80bb      	strh	r3, [r7, #4]
 80008d6:	460b      	mov	r3, r1
 80008d8:	807b      	strh	r3, [r7, #2]
 80008da:	4613      	mov	r3, r2
 80008dc:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008e4:	4818      	ldr	r0, [pc, #96]	@ (8000948 <ST7789_DrawRectangle+0x88>)
 80008e6:	f001 fc53 	bl	8002190 <HAL_GPIO_WritePin>
	ST7789_DrawLine(x1, y1, x2, y1, color);
 80008ea:	88bc      	ldrh	r4, [r7, #4]
 80008ec:	887a      	ldrh	r2, [r7, #2]
 80008ee:	88b9      	ldrh	r1, [r7, #4]
 80008f0:	88f8      	ldrh	r0, [r7, #6]
 80008f2:	8b3b      	ldrh	r3, [r7, #24]
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	4623      	mov	r3, r4
 80008f8:	f7ff ff56 	bl	80007a8 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y1, x1, y2, color);
 80008fc:	883c      	ldrh	r4, [r7, #0]
 80008fe:	88fa      	ldrh	r2, [r7, #6]
 8000900:	88b9      	ldrh	r1, [r7, #4]
 8000902:	88f8      	ldrh	r0, [r7, #6]
 8000904:	8b3b      	ldrh	r3, [r7, #24]
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	4623      	mov	r3, r4
 800090a:	f7ff ff4d 	bl	80007a8 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y2, x2, y2, color);
 800090e:	883c      	ldrh	r4, [r7, #0]
 8000910:	887a      	ldrh	r2, [r7, #2]
 8000912:	8839      	ldrh	r1, [r7, #0]
 8000914:	88f8      	ldrh	r0, [r7, #6]
 8000916:	8b3b      	ldrh	r3, [r7, #24]
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	4623      	mov	r3, r4
 800091c:	f7ff ff44 	bl	80007a8 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y1, x2, y2, color);
 8000920:	883c      	ldrh	r4, [r7, #0]
 8000922:	887a      	ldrh	r2, [r7, #2]
 8000924:	88b9      	ldrh	r1, [r7, #4]
 8000926:	8878      	ldrh	r0, [r7, #2]
 8000928:	8b3b      	ldrh	r3, [r7, #24]
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	4623      	mov	r3, r4
 800092e:	f7ff ff3b 	bl	80007a8 <ST7789_DrawLine>
	ST7789_UnSelect();
 8000932:	2201      	movs	r2, #1
 8000934:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000938:	4803      	ldr	r0, [pc, #12]	@ (8000948 <ST7789_DrawRectangle+0x88>)
 800093a:	f001 fc29 	bl	8002190 <HAL_GPIO_WritePin>
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	bd90      	pop	{r4, r7, pc}
 8000946:	bf00      	nop
 8000948:	40010c00 	.word	0x40010c00

0800094c <ST7789_DrawCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle line
 * @return  none
 */
void ST7789_DrawCircle(uint16_t x0, uint16_t y0, uint8_t r, uint16_t color)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b087      	sub	sp, #28
 8000950:	af00      	add	r7, sp, #0
 8000952:	4604      	mov	r4, r0
 8000954:	4608      	mov	r0, r1
 8000956:	4611      	mov	r1, r2
 8000958:	461a      	mov	r2, r3
 800095a:	4623      	mov	r3, r4
 800095c:	80fb      	strh	r3, [r7, #6]
 800095e:	4603      	mov	r3, r0
 8000960:	80bb      	strh	r3, [r7, #4]
 8000962:	460b      	mov	r3, r1
 8000964:	70fb      	strb	r3, [r7, #3]
 8000966:	4613      	mov	r3, r2
 8000968:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	b29b      	uxth	r3, r3
 800096e:	f1c3 0301 	rsb	r3, r3, #1
 8000972:	b29b      	uxth	r3, r3
 8000974:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000976:	2301      	movs	r3, #1
 8000978:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800097a:	78fb      	ldrb	r3, [r7, #3]
 800097c:	b29b      	uxth	r3, r3
 800097e:	461a      	mov	r2, r3
 8000980:	03d2      	lsls	r2, r2, #15
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	b29b      	uxth	r3, r3
 8000988:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800098e:	78fb      	ldrb	r3, [r7, #3]
 8000990:	81fb      	strh	r3, [r7, #14]

	ST7789_Select();
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000998:	485f      	ldr	r0, [pc, #380]	@ (8000b18 <ST7789_DrawCircle+0x1cc>)
 800099a:	f001 fbf9 	bl	8002190 <HAL_GPIO_WritePin>
	ST7789_DrawPixel(x0, y0 + r, color);
 800099e:	78fb      	ldrb	r3, [r7, #3]
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	88bb      	ldrh	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	b299      	uxth	r1, r3
 80009a8:	883a      	ldrh	r2, [r7, #0]
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fec5 	bl	800073c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 80009b2:	78fb      	ldrb	r3, [r7, #3]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	88ba      	ldrh	r2, [r7, #4]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	b299      	uxth	r1, r3
 80009bc:	883a      	ldrh	r2, [r7, #0]
 80009be:	88fb      	ldrh	r3, [r7, #6]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff febb 	bl	800073c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 80009c6:	78fb      	ldrb	r3, [r7, #3]
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	4413      	add	r3, r2
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	883a      	ldrh	r2, [r7, #0]
 80009d2:	88b9      	ldrh	r1, [r7, #4]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff feb1 	bl	800073c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	88fa      	ldrh	r2, [r7, #6]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	883a      	ldrh	r2, [r7, #0]
 80009e6:	88b9      	ldrh	r1, [r7, #4]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fea7 	bl	800073c <ST7789_DrawPixel>

	while (x < y) {
 80009ee:	e081      	b.n	8000af4 <ST7789_DrawCircle+0x1a8>
		if (f >= 0) {
 80009f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db0e      	blt.n	8000a16 <ST7789_DrawCircle+0xca>
			y--;
 80009f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	3b01      	subs	r3, #1
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8000a04:	8a7b      	ldrh	r3, [r7, #18]
 8000a06:	3302      	adds	r3, #2
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8000a0c:	8afa      	ldrh	r2, [r7, #22]
 8000a0e:	8a7b      	ldrh	r3, [r7, #18]
 8000a10:	4413      	add	r3, r2
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8000a16:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8000a22:	8abb      	ldrh	r3, [r7, #20]
 8000a24:	3302      	adds	r3, #2
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8000a2a:	8afa      	ldrh	r2, [r7, #22]
 8000a2c:	8abb      	ldrh	r3, [r7, #20]
 8000a2e:	4413      	add	r3, r2
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawPixel(x0 + x, y0 + y, color);
 8000a34:	8a3a      	ldrh	r2, [r7, #16]
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	4413      	add	r3, r2
 8000a3a:	b298      	uxth	r0, r3
 8000a3c:	89fa      	ldrh	r2, [r7, #14]
 8000a3e:	88bb      	ldrh	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	883a      	ldrh	r2, [r7, #0]
 8000a46:	4619      	mov	r1, r3
 8000a48:	f7ff fe78 	bl	800073c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 + y, color);
 8000a4c:	8a3b      	ldrh	r3, [r7, #16]
 8000a4e:	88fa      	ldrh	r2, [r7, #6]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	b298      	uxth	r0, r3
 8000a54:	89fa      	ldrh	r2, [r7, #14]
 8000a56:	88bb      	ldrh	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	883a      	ldrh	r2, [r7, #0]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f7ff fe6c 	bl	800073c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + x, y0 - y, color);
 8000a64:	8a3a      	ldrh	r2, [r7, #16]
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	4413      	add	r3, r2
 8000a6a:	b298      	uxth	r0, r3
 8000a6c:	89fb      	ldrh	r3, [r7, #14]
 8000a6e:	88ba      	ldrh	r2, [r7, #4]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	883a      	ldrh	r2, [r7, #0]
 8000a76:	4619      	mov	r1, r3
 8000a78:	f7ff fe60 	bl	800073c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 - y, color);
 8000a7c:	8a3b      	ldrh	r3, [r7, #16]
 8000a7e:	88fa      	ldrh	r2, [r7, #6]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	b298      	uxth	r0, r3
 8000a84:	89fb      	ldrh	r3, [r7, #14]
 8000a86:	88ba      	ldrh	r2, [r7, #4]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	883a      	ldrh	r2, [r7, #0]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f7ff fe54 	bl	800073c <ST7789_DrawPixel>

		ST7789_DrawPixel(x0 + y, y0 + x, color);
 8000a94:	89fa      	ldrh	r2, [r7, #14]
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	4413      	add	r3, r2
 8000a9a:	b298      	uxth	r0, r3
 8000a9c:	8a3a      	ldrh	r2, [r7, #16]
 8000a9e:	88bb      	ldrh	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	883a      	ldrh	r2, [r7, #0]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f7ff fe48 	bl	800073c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 + x, color);
 8000aac:	89fb      	ldrh	r3, [r7, #14]
 8000aae:	88fa      	ldrh	r2, [r7, #6]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	b298      	uxth	r0, r3
 8000ab4:	8a3a      	ldrh	r2, [r7, #16]
 8000ab6:	88bb      	ldrh	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	883a      	ldrh	r2, [r7, #0]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f7ff fe3c 	bl	800073c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + y, y0 - x, color);
 8000ac4:	89fa      	ldrh	r2, [r7, #14]
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	4413      	add	r3, r2
 8000aca:	b298      	uxth	r0, r3
 8000acc:	8a3b      	ldrh	r3, [r7, #16]
 8000ace:	88ba      	ldrh	r2, [r7, #4]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	883a      	ldrh	r2, [r7, #0]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f7ff fe30 	bl	800073c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 - x, color);
 8000adc:	89fb      	ldrh	r3, [r7, #14]
 8000ade:	88fa      	ldrh	r2, [r7, #6]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	b298      	uxth	r0, r3
 8000ae4:	8a3b      	ldrh	r3, [r7, #16]
 8000ae6:	88ba      	ldrh	r2, [r7, #4]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	883a      	ldrh	r2, [r7, #0]
 8000aee:	4619      	mov	r1, r3
 8000af0:	f7ff fe24 	bl	800073c <ST7789_DrawPixel>
	while (x < y) {
 8000af4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000af8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	f6ff af77 	blt.w	80009f0 <ST7789_DrawCircle+0xa4>
	}
	ST7789_UnSelect();
 8000b02:	2201      	movs	r2, #1
 8000b04:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b08:	4803      	ldr	r0, [pc, #12]	@ (8000b18 <ST7789_DrawCircle+0x1cc>)
 8000b0a:	f001 fb41 	bl	8002190 <HAL_GPIO_WritePin>
}
 8000b0e:	bf00      	nop
 8000b10:	371c      	adds	r7, #28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd90      	pop	{r4, r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40010c00 	.word	0x40010c00

08000b1c <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b088      	sub	sp, #32
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b26:	4603      	mov	r3, r0
 8000b28:	80fb      	strh	r3, [r7, #6]
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	80bb      	strh	r3, [r7, #4]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8000b32:	2200      	movs	r2, #0
 8000b34:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b38:	4837      	ldr	r0, [pc, #220]	@ (8000c18 <ST7789_WriteChar+0xfc>)
 8000b3a:	f001 fb29 	bl	8002190 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8000b3e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b42:	461a      	mov	r2, r3
 8000b44:	88fb      	ldrh	r3, [r7, #6]
 8000b46:	4413      	add	r3, r2
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000b52:	4619      	mov	r1, r3
 8000b54:	88bb      	ldrh	r3, [r7, #4]
 8000b56:	440b      	add	r3, r1
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	88b9      	ldrh	r1, [r7, #4]
 8000b60:	88f8      	ldrh	r0, [r7, #6]
 8000b62:	f7ff fcb3 	bl	80004cc <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
 8000b6a:	e041      	b.n	8000bf0 <ST7789_WriteChar+0xd4>
		b = font.data[(ch - 32) * font.height + i];
 8000b6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b6e:	78fb      	ldrb	r3, [r7, #3]
 8000b70:	3b20      	subs	r3, #32
 8000b72:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8000b76:	fb01 f303 	mul.w	r3, r1, r3
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	440b      	add	r3, r1
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	4413      	add	r3, r2
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
 8000b8c:	e027      	b.n	8000bde <ST7789_WriteChar+0xc2>
			if ((b << j) & 0x8000) {
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d00e      	beq.n	8000bbc <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8000b9e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	743b      	strb	r3, [r7, #16]
 8000ba8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8000bae:	f107 0310 	add.w	r3, r7, #16
 8000bb2:	2102      	movs	r1, #2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fbe7 	bl	8000388 <ST7789_WriteData>
 8000bba:	e00d      	b.n	8000bd8 <ST7789_WriteChar+0xbc>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8000bbc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000bbe:	0a1b      	lsrs	r3, r3, #8
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	733b      	strb	r3, [r7, #12]
 8000bc6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fbd8 	bl	8000388 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	61bb      	str	r3, [r7, #24]
 8000bde:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000be2:	461a      	mov	r2, r3
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d3d1      	bcc.n	8000b8e <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3301      	adds	r3, #1
 8000bee:	61fb      	str	r3, [r7, #28]
 8000bf0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d3b7      	bcc.n	8000b6c <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c02:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <ST7789_WriteChar+0xfc>)
 8000c04:	f001 fac4 	bl	8002190 <HAL_GPIO_WritePin>
}
 8000c08:	bf00      	nop
 8000c0a:	3720      	adds	r7, #32
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c12:	b002      	add	sp, #8
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40010c00 	.word	0x40010c00

08000c1c <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b086      	sub	sp, #24
 8000c22:	af04      	add	r7, sp, #16
 8000c24:	603a      	str	r2, [r7, #0]
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	4603      	mov	r3, r0
 8000c2a:	80fb      	strh	r3, [r7, #6]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c36:	4822      	ldr	r0, [pc, #136]	@ (8000cc0 <ST7789_WriteString+0xa4>)
 8000c38:	f001 faaa 	bl	8002190 <HAL_GPIO_WritePin>
	while (*str) {
 8000c3c:	e02d      	b.n	8000c9a <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	7d3a      	ldrb	r2, [r7, #20]
 8000c42:	4413      	add	r3, r2
 8000c44:	2bef      	cmp	r3, #239	@ 0xef
 8000c46:	dd13      	ble.n	8000c70 <ST7789_WriteString+0x54>
			x = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8000c4c:	7d7b      	ldrb	r3, [r7, #21]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	88bb      	ldrh	r3, [r7, #4]
 8000c52:	4413      	add	r3, r2
 8000c54:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8000c56:	88bb      	ldrh	r3, [r7, #4]
 8000c58:	7d7a      	ldrb	r2, [r7, #21]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	2bef      	cmp	r3, #239	@ 0xef
 8000c5e:	dc21      	bgt.n	8000ca4 <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b20      	cmp	r3, #32
 8000c66:	d103      	bne.n	8000c70 <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	603b      	str	r3, [r7, #0]
				continue;
 8000c6e:	e014      	b.n	8000c9a <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	781a      	ldrb	r2, [r3, #0]
 8000c74:	88b9      	ldrh	r1, [r7, #4]
 8000c76:	88f8      	ldrh	r0, [r7, #6]
 8000c78:	8c3b      	ldrh	r3, [r7, #32]
 8000c7a:	9302      	str	r3, [sp, #8]
 8000c7c:	8bbb      	ldrh	r3, [r7, #28]
 8000c7e:	9301      	str	r3, [sp, #4]
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	f7ff ff49 	bl	8000b1c <ST7789_WriteChar>
		x += font.width;
 8000c8a:	7d3b      	ldrb	r3, [r7, #20]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	4413      	add	r3, r2
 8000c92:	80fb      	strh	r3, [r7, #6]
		str++;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	3301      	adds	r3, #1
 8000c98:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1cd      	bne.n	8000c3e <ST7789_WriteString+0x22>
 8000ca2:	e000      	b.n	8000ca6 <ST7789_WriteString+0x8a>
				break;
 8000ca4:	bf00      	nop
	}
	ST7789_UnSelect();
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cac:	4804      	ldr	r0, [pc, #16]	@ (8000cc0 <ST7789_WriteString+0xa4>)
 8000cae:	f001 fa6f 	bl	8002190 <HAL_GPIO_WritePin>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cbc:	b002      	add	sp, #8
 8000cbe:	4770      	bx	lr
 8000cc0:	40010c00 	.word	0x40010c00

08000cc4 <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b087      	sub	sp, #28
 8000cc8:	af02      	add	r7, sp, #8
 8000cca:	4604      	mov	r4, r0
 8000ccc:	4608      	mov	r0, r1
 8000cce:	4611      	mov	r1, r2
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4623      	mov	r3, r4
 8000cd4:	80fb      	strh	r3, [r7, #6]
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80bb      	strh	r3, [r7, #4]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	807b      	strh	r3, [r7, #2]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ce8:	4822      	ldr	r0, [pc, #136]	@ (8000d74 <ST7789_DrawFilledRectangle+0xb0>)
 8000cea:	f001 fa51 	bl	8002190 <HAL_GPIO_WritePin>
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	2bef      	cmp	r3, #239	@ 0xef
 8000cf2:	d83b      	bhi.n	8000d6c <ST7789_DrawFilledRectangle+0xa8>
 8000cf4:	88bb      	ldrh	r3, [r7, #4]
 8000cf6:	2bef      	cmp	r3, #239	@ 0xef
 8000cf8:	d838      	bhi.n	8000d6c <ST7789_DrawFilledRectangle+0xa8>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 8000cfa:	88fa      	ldrh	r2, [r7, #6]
 8000cfc:	887b      	ldrh	r3, [r7, #2]
 8000cfe:	4413      	add	r3, r2
 8000d00:	2bef      	cmp	r3, #239	@ 0xef
 8000d02:	dd03      	ble.n	8000d0c <ST7789_DrawFilledRectangle+0x48>
		w = ST7789_WIDTH - x;
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000d0a:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 8000d0c:	88ba      	ldrh	r2, [r7, #4]
 8000d0e:	883b      	ldrh	r3, [r7, #0]
 8000d10:	4413      	add	r3, r2
 8000d12:	2bef      	cmp	r3, #239	@ 0xef
 8000d14:	dd03      	ble.n	8000d1e <ST7789_DrawFilledRectangle+0x5a>
		h = ST7789_HEIGHT - y;
 8000d16:	88bb      	ldrh	r3, [r7, #4]
 8000d18:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000d1c:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8000d1e:	2300      	movs	r3, #0
 8000d20:	73fb      	strb	r3, [r7, #15]
 8000d22:	e017      	b.n	8000d54 <ST7789_DrawFilledRectangle+0x90>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	88bb      	ldrh	r3, [r7, #4]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	b299      	uxth	r1, r3
 8000d2e:	88fa      	ldrh	r2, [r7, #6]
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	4413      	add	r3, r2
 8000d34:	b29c      	uxth	r4, r3
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	88bb      	ldrh	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	88f8      	ldrh	r0, [r7, #6]
 8000d42:	8c3b      	ldrh	r3, [r7, #32]
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	4613      	mov	r3, r2
 8000d48:	4622      	mov	r2, r4
 8000d4a:	f7ff fd2d 	bl	80007a8 <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	3301      	adds	r3, #1
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	883a      	ldrh	r2, [r7, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d2e2      	bcs.n	8000d24 <ST7789_DrawFilledRectangle+0x60>
	}
	ST7789_UnSelect();
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d64:	4803      	ldr	r0, [pc, #12]	@ (8000d74 <ST7789_DrawFilledRectangle+0xb0>)
 8000d66:	f001 fa13 	bl	8002190 <HAL_GPIO_WritePin>
 8000d6a:	e000      	b.n	8000d6e <ST7789_DrawFilledRectangle+0xaa>
		return;
 8000d6c:	bf00      	nop
}
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd90      	pop	{r4, r7, pc}
 8000d74:	40010c00 	.word	0x40010c00

08000d78 <ST7789_DrawTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the lines
 * @return  none
 */
void ST7789_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af02      	add	r7, sp, #8
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4608      	mov	r0, r1
 8000d82:	4611      	mov	r1, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	4623      	mov	r3, r4
 8000d88:	80fb      	strh	r3, [r7, #6]
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80bb      	strh	r3, [r7, #4]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	807b      	strh	r3, [r7, #2]
 8000d92:	4613      	mov	r3, r2
 8000d94:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d9c:	4813      	ldr	r0, [pc, #76]	@ (8000dec <ST7789_DrawTriangle+0x74>)
 8000d9e:	f001 f9f7 	bl	8002190 <HAL_GPIO_WritePin>
	/* Draw lines */
	ST7789_DrawLine(x1, y1, x2, y2, color);
 8000da2:	883c      	ldrh	r4, [r7, #0]
 8000da4:	887a      	ldrh	r2, [r7, #2]
 8000da6:	88b9      	ldrh	r1, [r7, #4]
 8000da8:	88f8      	ldrh	r0, [r7, #6]
 8000daa:	8c3b      	ldrh	r3, [r7, #32]
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	4623      	mov	r3, r4
 8000db0:	f7ff fcfa 	bl	80007a8 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y2, x3, y3, color);
 8000db4:	8bbc      	ldrh	r4, [r7, #28]
 8000db6:	8b3a      	ldrh	r2, [r7, #24]
 8000db8:	8839      	ldrh	r1, [r7, #0]
 8000dba:	8878      	ldrh	r0, [r7, #2]
 8000dbc:	8c3b      	ldrh	r3, [r7, #32]
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	4623      	mov	r3, r4
 8000dc2:	f7ff fcf1 	bl	80007a8 <ST7789_DrawLine>
	ST7789_DrawLine(x3, y3, x1, y1, color);
 8000dc6:	88bc      	ldrh	r4, [r7, #4]
 8000dc8:	88fa      	ldrh	r2, [r7, #6]
 8000dca:	8bb9      	ldrh	r1, [r7, #28]
 8000dcc:	8b38      	ldrh	r0, [r7, #24]
 8000dce:	8c3b      	ldrh	r3, [r7, #32]
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	4623      	mov	r3, r4
 8000dd4:	f7ff fce8 	bl	80007a8 <ST7789_DrawLine>
	ST7789_UnSelect();
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dde:	4803      	ldr	r0, [pc, #12]	@ (8000dec <ST7789_DrawTriangle+0x74>)
 8000de0:	f001 f9d6 	bl	8002190 <HAL_GPIO_WritePin>
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd90      	pop	{r4, r7, pc}
 8000dec:	40010c00 	.word	0x40010c00

08000df0 <ST7789_DrawFilledTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the triangle
 * @return  none
 */
void ST7789_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b08d      	sub	sp, #52	@ 0x34
 8000df4:	af02      	add	r7, sp, #8
 8000df6:	4604      	mov	r4, r0
 8000df8:	4608      	mov	r0, r1
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4623      	mov	r3, r4
 8000e00:	80fb      	strh	r3, [r7, #6]
 8000e02:	4603      	mov	r3, r0
 8000e04:	80bb      	strh	r3, [r7, #4]
 8000e06:	460b      	mov	r3, r1
 8000e08:	807b      	strh	r3, [r7, #2]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e14:	485d      	ldr	r0, [pc, #372]	@ (8000f8c <ST7789_DrawFilledTriangle+0x19c>)
 8000e16:	f001 f9bb 	bl	8002190 <HAL_GPIO_WritePin>
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	823b      	strh	r3, [r7, #16]
 8000e1e:	2300      	movs	r3, #0
 8000e20:	81fb      	strh	r3, [r7, #14]
 8000e22:	2300      	movs	r3, #0
 8000e24:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000e26:	2300      	movs	r3, #0
 8000e28:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000e2e:	2300      	movs	r3, #0
 8000e30:	843b      	strh	r3, [r7, #32]
			yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8000e32:	2300      	movs	r3, #0
 8000e34:	83fb      	strh	r3, [r7, #30]
 8000e36:	2300      	movs	r3, #0
 8000e38:	83bb      	strh	r3, [r7, #28]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	837b      	strh	r3, [r7, #26]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	833b      	strh	r3, [r7, #24]
 8000e42:	2300      	movs	r3, #0
 8000e44:	82fb      	strh	r3, [r7, #22]
 8000e46:	2300      	movs	r3, #0
 8000e48:	82bb      	strh	r3, [r7, #20]
			curpixel = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);
 8000e4e:	887a      	ldrh	r2, [r7, #2]
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	bfb8      	it	lt
 8000e58:	425b      	neglt	r3, r3
 8000e5a:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8000e5c:	883a      	ldrh	r2, [r7, #0]
 8000e5e:	88bb      	ldrh	r3, [r7, #4]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	bfb8      	it	lt
 8000e66:	425b      	neglt	r3, r3
 8000e68:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	y = y1;
 8000e6e:	88bb      	ldrh	r3, [r7, #4]
 8000e70:	84bb      	strh	r3, [r7, #36]	@ 0x24

	if (x2 >= x1) {
 8000e72:	887a      	ldrh	r2, [r7, #2]
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d304      	bcc.n	8000e84 <ST7789_DrawFilledTriangle+0x94>
		xinc1 = 1;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	847b      	strh	r3, [r7, #34]	@ 0x22
		xinc2 = 1;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	843b      	strh	r3, [r7, #32]
 8000e82:	e005      	b.n	8000e90 <ST7789_DrawFilledTriangle+0xa0>
	}
	else {
		xinc1 = -1;
 8000e84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e88:	847b      	strh	r3, [r7, #34]	@ 0x22
		xinc2 = -1;
 8000e8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e8e:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 8000e90:	883a      	ldrh	r2, [r7, #0]
 8000e92:	88bb      	ldrh	r3, [r7, #4]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d304      	bcc.n	8000ea2 <ST7789_DrawFilledTriangle+0xb2>
		yinc1 = 1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	83bb      	strh	r3, [r7, #28]
 8000ea0:	e005      	b.n	8000eae <ST7789_DrawFilledTriangle+0xbe>
	}
	else {
		yinc1 = -1;
 8000ea2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ea6:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8000ea8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000eac:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay) {
 8000eae:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000eb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	db10      	blt.n	8000edc <ST7789_DrawFilledTriangle+0xec>
		xinc1 = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	847b      	strh	r3, [r7, #34]	@ 0x22
		yinc2 = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8000ec2:	8a3b      	ldrh	r3, [r7, #16]
 8000ec4:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8000ec6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000eca:	0fda      	lsrs	r2, r3, #31
 8000ecc:	4413      	add	r3, r2
 8000ece:	105b      	asrs	r3, r3, #1
 8000ed0:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8000ed2:	89fb      	ldrh	r3, [r7, #14]
 8000ed4:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8000ed6:	8a3b      	ldrh	r3, [r7, #16]
 8000ed8:	82bb      	strh	r3, [r7, #20]
 8000eda:	e00f      	b.n	8000efc <ST7789_DrawFilledTriangle+0x10c>
	}
	else {
		xinc2 = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8000ee4:	89fb      	ldrh	r3, [r7, #14]
 8000ee6:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8000ee8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000eec:	0fda      	lsrs	r2, r3, #31
 8000eee:	4413      	add	r3, r2
 8000ef0:	105b      	asrs	r3, r3, #1
 8000ef2:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8000ef4:	8a3b      	ldrh	r3, [r7, #16]
 8000ef6:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8000ef8:	89fb      	ldrh	r3, [r7, #14]
 8000efa:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8000efc:	2300      	movs	r3, #0
 8000efe:	827b      	strh	r3, [r7, #18]
 8000f00:	e033      	b.n	8000f6a <ST7789_DrawFilledTriangle+0x17a>
		ST7789_DrawLine(x, y, x3, y3, color);
 8000f02:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8000f04:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8000f06:	8fbc      	ldrh	r4, [r7, #60]	@ 0x3c
 8000f08:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8000f0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	4623      	mov	r3, r4
 8000f12:	f7ff fc49 	bl	80007a8 <ST7789_DrawLine>

		num += numadd;
 8000f16:	8b3a      	ldrh	r2, [r7, #24]
 8000f18:	8afb      	ldrh	r3, [r7, #22]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 8000f20:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000f24:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	db0e      	blt.n	8000f4a <ST7789_DrawFilledTriangle+0x15a>
			num -= den;
 8000f2c:	8b3a      	ldrh	r2, [r7, #24]
 8000f2e:	8b7b      	ldrh	r3, [r7, #26]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8000f36:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000f38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	84fb      	strh	r3, [r7, #38]	@ 0x26
			y += yinc1;
 8000f40:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f42:	8bfb      	ldrh	r3, [r7, #30]
 8000f44:	4413      	add	r3, r2
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	84bb      	strh	r3, [r7, #36]	@ 0x24
		}
		x += xinc2;
 8000f4a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000f4c:	8c3b      	ldrh	r3, [r7, #32]
 8000f4e:	4413      	add	r3, r2
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	84fb      	strh	r3, [r7, #38]	@ 0x26
		y += yinc2;
 8000f54:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f56:	8bbb      	ldrh	r3, [r7, #28]
 8000f58:	4413      	add	r3, r2
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8000f5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	3301      	adds	r3, #1
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	827b      	strh	r3, [r7, #18]
 8000f6a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000f6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	ddc5      	ble.n	8000f02 <ST7789_DrawFilledTriangle+0x112>
	}
	ST7789_UnSelect();
 8000f76:	2201      	movs	r2, #1
 8000f78:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f7c:	4803      	ldr	r0, [pc, #12]	@ (8000f8c <ST7789_DrawFilledTriangle+0x19c>)
 8000f7e:	f001 f907 	bl	8002190 <HAL_GPIO_WritePin>
}
 8000f82:	bf00      	nop
 8000f84:	372c      	adds	r7, #44	@ 0x2c
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd90      	pop	{r4, r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40010c00 	.word	0x40010c00

08000f90 <ST7789_DrawFilledCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle
 * @return  none
 */
void ST7789_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	4604      	mov	r4, r0
 8000f98:	4608      	mov	r0, r1
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4623      	mov	r3, r4
 8000fa0:	80fb      	strh	r3, [r7, #6]
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80bb      	strh	r3, [r7, #4]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	807b      	strh	r3, [r7, #2]
 8000faa:	4613      	mov	r3, r2
 8000fac:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fb4:	4869      	ldr	r0, [pc, #420]	@ (800115c <ST7789_DrawFilledCircle+0x1cc>)
 8000fb6:	f001 f8eb 	bl	8002190 <HAL_GPIO_WritePin>
	int16_t f = 1 - r;
 8000fba:	887b      	ldrh	r3, [r7, #2]
 8000fbc:	f1c3 0301 	rsb	r3, r3, #1
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	03d2      	lsls	r2, r2, #15
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8000fda:	887b      	ldrh	r3, [r7, #2]
 8000fdc:	81fb      	strh	r3, [r7, #14]

	ST7789_DrawPixel(x0, y0 + r, color);
 8000fde:	88f8      	ldrh	r0, [r7, #6]
 8000fe0:	88ba      	ldrh	r2, [r7, #4]
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	883a      	ldrh	r2, [r7, #0]
 8000fea:	4619      	mov	r1, r3
 8000fec:	f7ff fba6 	bl	800073c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 8000ff0:	88f8      	ldrh	r0, [r7, #6]
 8000ff2:	88ba      	ldrh	r2, [r7, #4]
 8000ff4:	887b      	ldrh	r3, [r7, #2]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	883a      	ldrh	r2, [r7, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f7ff fb9d 	bl	800073c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 8001002:	88fa      	ldrh	r2, [r7, #6]
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	4413      	add	r3, r2
 8001008:	b29b      	uxth	r3, r3
 800100a:	88b9      	ldrh	r1, [r7, #4]
 800100c:	883a      	ldrh	r2, [r7, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fb94 	bl	800073c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8001014:	88fa      	ldrh	r2, [r7, #6]
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	b29b      	uxth	r3, r3
 800101c:	88b9      	ldrh	r1, [r7, #4]
 800101e:	883a      	ldrh	r2, [r7, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fb8b 	bl	800073c <ST7789_DrawPixel>
	ST7789_DrawLine(x0 - r, y0, x0 + r, y0, color);
 8001026:	88fa      	ldrh	r2, [r7, #6]
 8001028:	887b      	ldrh	r3, [r7, #2]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b298      	uxth	r0, r3
 800102e:	88b9      	ldrh	r1, [r7, #4]
 8001030:	88fa      	ldrh	r2, [r7, #6]
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	4413      	add	r3, r2
 8001036:	b29a      	uxth	r2, r3
 8001038:	88bc      	ldrh	r4, [r7, #4]
 800103a:	883b      	ldrh	r3, [r7, #0]
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	4623      	mov	r3, r4
 8001040:	f7ff fbb2 	bl	80007a8 <ST7789_DrawLine>

	while (x < y) {
 8001044:	e079      	b.n	800113a <ST7789_DrawFilledCircle+0x1aa>
		if (f >= 0) {
 8001046:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0e      	blt.n	800106c <ST7789_DrawFilledCircle+0xdc>
			y--;
 800104e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001052:	b29b      	uxth	r3, r3
 8001054:	3b01      	subs	r3, #1
 8001056:	b29b      	uxth	r3, r3
 8001058:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 800105a:	8a7b      	ldrh	r3, [r7, #18]
 800105c:	3302      	adds	r3, #2
 800105e:	b29b      	uxth	r3, r3
 8001060:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8001062:	8afa      	ldrh	r2, [r7, #22]
 8001064:	8a7b      	ldrh	r3, [r7, #18]
 8001066:	4413      	add	r3, r2
 8001068:	b29b      	uxth	r3, r3
 800106a:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 800106c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001070:	b29b      	uxth	r3, r3
 8001072:	3301      	adds	r3, #1
 8001074:	b29b      	uxth	r3, r3
 8001076:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8001078:	8abb      	ldrh	r3, [r7, #20]
 800107a:	3302      	adds	r3, #2
 800107c:	b29b      	uxth	r3, r3
 800107e:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8001080:	8afa      	ldrh	r2, [r7, #22]
 8001082:	8abb      	ldrh	r3, [r7, #20]
 8001084:	4413      	add	r3, r2
 8001086:	b29b      	uxth	r3, r3
 8001088:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 800108a:	88fa      	ldrh	r2, [r7, #6]
 800108c:	8a3b      	ldrh	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	b298      	uxth	r0, r3
 8001092:	88ba      	ldrh	r2, [r7, #4]
 8001094:	89fb      	ldrh	r3, [r7, #14]
 8001096:	4413      	add	r3, r2
 8001098:	b299      	uxth	r1, r3
 800109a:	88fa      	ldrh	r2, [r7, #6]
 800109c:	8a3b      	ldrh	r3, [r7, #16]
 800109e:	4413      	add	r3, r2
 80010a0:	b29c      	uxth	r4, r3
 80010a2:	88ba      	ldrh	r2, [r7, #4]
 80010a4:	89fb      	ldrh	r3, [r7, #14]
 80010a6:	4413      	add	r3, r2
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	883b      	ldrh	r3, [r7, #0]
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	4613      	mov	r3, r2
 80010b0:	4622      	mov	r2, r4
 80010b2:	f7ff fb79 	bl	80007a8 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 80010b6:	88fa      	ldrh	r2, [r7, #6]
 80010b8:	8a3b      	ldrh	r3, [r7, #16]
 80010ba:	4413      	add	r3, r2
 80010bc:	b298      	uxth	r0, r3
 80010be:	88ba      	ldrh	r2, [r7, #4]
 80010c0:	89fb      	ldrh	r3, [r7, #14]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	b299      	uxth	r1, r3
 80010c6:	88fa      	ldrh	r2, [r7, #6]
 80010c8:	8a3b      	ldrh	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	b29c      	uxth	r4, r3
 80010ce:	88ba      	ldrh	r2, [r7, #4]
 80010d0:	89fb      	ldrh	r3, [r7, #14]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	883b      	ldrh	r3, [r7, #0]
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	4613      	mov	r3, r2
 80010dc:	4622      	mov	r2, r4
 80010de:	f7ff fb63 	bl	80007a8 <ST7789_DrawLine>

		ST7789_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 80010e2:	88fa      	ldrh	r2, [r7, #6]
 80010e4:	89fb      	ldrh	r3, [r7, #14]
 80010e6:	4413      	add	r3, r2
 80010e8:	b298      	uxth	r0, r3
 80010ea:	88ba      	ldrh	r2, [r7, #4]
 80010ec:	8a3b      	ldrh	r3, [r7, #16]
 80010ee:	4413      	add	r3, r2
 80010f0:	b299      	uxth	r1, r3
 80010f2:	88fa      	ldrh	r2, [r7, #6]
 80010f4:	89fb      	ldrh	r3, [r7, #14]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	b29c      	uxth	r4, r3
 80010fa:	88ba      	ldrh	r2, [r7, #4]
 80010fc:	8a3b      	ldrh	r3, [r7, #16]
 80010fe:	4413      	add	r3, r2
 8001100:	b29a      	uxth	r2, r3
 8001102:	883b      	ldrh	r3, [r7, #0]
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	4613      	mov	r3, r2
 8001108:	4622      	mov	r2, r4
 800110a:	f7ff fb4d 	bl	80007a8 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 800110e:	88fa      	ldrh	r2, [r7, #6]
 8001110:	89fb      	ldrh	r3, [r7, #14]
 8001112:	4413      	add	r3, r2
 8001114:	b298      	uxth	r0, r3
 8001116:	88ba      	ldrh	r2, [r7, #4]
 8001118:	8a3b      	ldrh	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	b299      	uxth	r1, r3
 800111e:	88fa      	ldrh	r2, [r7, #6]
 8001120:	89fb      	ldrh	r3, [r7, #14]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	b29c      	uxth	r4, r3
 8001126:	88ba      	ldrh	r2, [r7, #4]
 8001128:	8a3b      	ldrh	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	b29a      	uxth	r2, r3
 800112e:	883b      	ldrh	r3, [r7, #0]
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	4613      	mov	r3, r2
 8001134:	4622      	mov	r2, r4
 8001136:	f7ff fb37 	bl	80007a8 <ST7789_DrawLine>
	while (x < y) {
 800113a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800113e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001142:	429a      	cmp	r2, r3
 8001144:	f6ff af7f 	blt.w	8001046 <ST7789_DrawFilledCircle+0xb6>
	}
	ST7789_UnSelect();
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800114e:	4803      	ldr	r0, [pc, #12]	@ (800115c <ST7789_DrawFilledCircle+0x1cc>)
 8001150:	f001 f81e 	bl	8002190 <HAL_GPIO_WritePin>
}
 8001154:	bf00      	nop
 8001156:	371c      	adds	r7, #28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	40010c00 	.word	0x40010c00

08001160 <ST7789_Test>:
 * @brief A Simple test function for ST7789
 * @param  none
 * @return  none
 */
void ST7789_Test(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af04      	add	r7, sp, #16
	ST7789_Fill_Color(WHITE);
 8001166:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800116a:	f7ff fab3 	bl	80006d4 <ST7789_Fill_Color>
	HAL_Delay(1000);
 800116e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001172:	f000 faf9 	bl	8001768 <HAL_Delay>
	ST7789_WriteString(10, 20, "Speed Test", Font_11x18, RED, WHITE);
 8001176:	4bb9      	ldr	r3, [pc, #740]	@ (800145c <ST7789_Test+0x2fc>)
 8001178:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800117c:	9202      	str	r2, [sp, #8]
 800117e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001182:	9201      	str	r2, [sp, #4]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	9200      	str	r2, [sp, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4ab5      	ldr	r2, [pc, #724]	@ (8001460 <ST7789_Test+0x300>)
 800118c:	2114      	movs	r1, #20
 800118e:	200a      	movs	r0, #10
 8001190:	f7ff fd44 	bl	8000c1c <ST7789_WriteString>
	HAL_Delay(1000);
 8001194:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001198:	f000 fae6 	bl	8001768 <HAL_Delay>
	ST7789_Fill_Color(CYAN);
 800119c:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 80011a0:	f7ff fa98 	bl	80006d4 <ST7789_Fill_Color>
    HAL_Delay(500);
 80011a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011a8:	f000 fade 	bl	8001768 <HAL_Delay>
	ST7789_Fill_Color(RED);
 80011ac:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80011b0:	f7ff fa90 	bl	80006d4 <ST7789_Fill_Color>
    HAL_Delay(500);
 80011b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011b8:	f000 fad6 	bl	8001768 <HAL_Delay>
	ST7789_Fill_Color(BLUE);
 80011bc:	201f      	movs	r0, #31
 80011be:	f7ff fa89 	bl	80006d4 <ST7789_Fill_Color>
    HAL_Delay(500);
 80011c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011c6:	f000 facf 	bl	8001768 <HAL_Delay>
	ST7789_Fill_Color(GREEN);
 80011ca:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80011ce:	f7ff fa81 	bl	80006d4 <ST7789_Fill_Color>
    HAL_Delay(500);
 80011d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011d6:	f000 fac7 	bl	8001768 <HAL_Delay>
	ST7789_Fill_Color(YELLOW);
 80011da:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80011de:	f7ff fa79 	bl	80006d4 <ST7789_Fill_Color>
    HAL_Delay(500);
 80011e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011e6:	f000 fabf 	bl	8001768 <HAL_Delay>
	ST7789_Fill_Color(BROWN);
 80011ea:	f64b 4040 	movw	r0, #48192	@ 0xbc40
 80011ee:	f7ff fa71 	bl	80006d4 <ST7789_Fill_Color>
    HAL_Delay(500);
 80011f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011f6:	f000 fab7 	bl	8001768 <HAL_Delay>
	ST7789_Fill_Color(DARKBLUE);
 80011fa:	f240 10cf 	movw	r0, #463	@ 0x1cf
 80011fe:	f7ff fa69 	bl	80006d4 <ST7789_Fill_Color>
    HAL_Delay(500);
 8001202:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001206:	f000 faaf 	bl	8001768 <HAL_Delay>
	ST7789_Fill_Color(MAGENTA);
 800120a:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 800120e:	f7ff fa61 	bl	80006d4 <ST7789_Fill_Color>
    HAL_Delay(500);
 8001212:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001216:	f000 faa7 	bl	8001768 <HAL_Delay>
	ST7789_Fill_Color(LIGHTGREEN);
 800121a:	f248 401f 	movw	r0, #33823	@ 0x841f
 800121e:	f7ff fa59 	bl	80006d4 <ST7789_Fill_Color>
    HAL_Delay(500);
 8001222:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001226:	f000 fa9f 	bl	8001768 <HAL_Delay>
	ST7789_Fill_Color(LGRAY);
 800122a:	f24c 6018 	movw	r0, #50712	@ 0xc618
 800122e:	f7ff fa51 	bl	80006d4 <ST7789_Fill_Color>
    HAL_Delay(500);
 8001232:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001236:	f000 fa97 	bl	8001768 <HAL_Delay>
	ST7789_Fill_Color(LBBLUE);
 800123a:	f642 3012 	movw	r0, #11026	@ 0x2b12
 800123e:	f7ff fa49 	bl	80006d4 <ST7789_Fill_Color>
    HAL_Delay(500);
 8001242:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001246:	f000 fa8f 	bl	8001768 <HAL_Delay>
	ST7789_Fill_Color(WHITE);
 800124a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800124e:	f7ff fa41 	bl	80006d4 <ST7789_Fill_Color>
	HAL_Delay(500);
 8001252:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001256:	f000 fa87 	bl	8001768 <HAL_Delay>

	ST7789_WriteString(10, 10, "Font test.", Font_16x26, GBLUE, WHITE);
 800125a:	4b82      	ldr	r3, [pc, #520]	@ (8001464 <ST7789_Test+0x304>)
 800125c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001260:	9202      	str	r2, [sp, #8]
 8001262:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001266:	9201      	str	r2, [sp, #4]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	9200      	str	r2, [sp, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a7e      	ldr	r2, [pc, #504]	@ (8001468 <ST7789_Test+0x308>)
 8001270:	210a      	movs	r1, #10
 8001272:	200a      	movs	r0, #10
 8001274:	f7ff fcd2 	bl	8000c1c <ST7789_WriteString>
	ST7789_WriteString(10, 50, "Hello Steve!", Font_7x10, RED, WHITE);
 8001278:	4b7c      	ldr	r3, [pc, #496]	@ (800146c <ST7789_Test+0x30c>)
 800127a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800127e:	9202      	str	r2, [sp, #8]
 8001280:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001284:	9201      	str	r2, [sp, #4]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	9200      	str	r2, [sp, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a78      	ldr	r2, [pc, #480]	@ (8001470 <ST7789_Test+0x310>)
 800128e:	2132      	movs	r1, #50	@ 0x32
 8001290:	200a      	movs	r0, #10
 8001292:	f7ff fcc3 	bl	8000c1c <ST7789_WriteString>
	ST7789_WriteString(10, 75, "Hello Steve!", Font_11x18, YELLOW, WHITE);
 8001296:	4b71      	ldr	r3, [pc, #452]	@ (800145c <ST7789_Test+0x2fc>)
 8001298:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800129c:	9202      	str	r2, [sp, #8]
 800129e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80012a2:	9201      	str	r2, [sp, #4]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	9200      	str	r2, [sp, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a71      	ldr	r2, [pc, #452]	@ (8001470 <ST7789_Test+0x310>)
 80012ac:	214b      	movs	r1, #75	@ 0x4b
 80012ae:	200a      	movs	r0, #10
 80012b0:	f7ff fcb4 	bl	8000c1c <ST7789_WriteString>
	ST7789_WriteString(10, 100, "Hello Steve!", Font_16x26, MAGENTA, WHITE);
 80012b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001464 <ST7789_Test+0x304>)
 80012b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012ba:	9202      	str	r2, [sp, #8]
 80012bc:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80012c0:	9201      	str	r2, [sp, #4]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	9200      	str	r2, [sp, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a69      	ldr	r2, [pc, #420]	@ (8001470 <ST7789_Test+0x310>)
 80012ca:	2164      	movs	r1, #100	@ 0x64
 80012cc:	200a      	movs	r0, #10
 80012ce:	f7ff fca5 	bl	8000c1c <ST7789_WriteString>
	HAL_Delay(1000);
 80012d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012d6:	f000 fa47 	bl	8001768 <HAL_Delay>

	ST7789_Fill_Color(RED);
 80012da:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80012de:	f7ff f9f9 	bl	80006d4 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Rect./Line.", Font_11x18, YELLOW, BLACK);
 80012e2:	4b5e      	ldr	r3, [pc, #376]	@ (800145c <ST7789_Test+0x2fc>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	9202      	str	r2, [sp, #8]
 80012e8:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80012ec:	9201      	str	r2, [sp, #4]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	9200      	str	r2, [sp, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a5f      	ldr	r2, [pc, #380]	@ (8001474 <ST7789_Test+0x314>)
 80012f6:	210a      	movs	r1, #10
 80012f8:	200a      	movs	r0, #10
 80012fa:	f7ff fc8f 	bl	8000c1c <ST7789_WriteString>
	ST7789_DrawRectangle(30, 30, 100, 100, WHITE);
 80012fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2364      	movs	r3, #100	@ 0x64
 8001306:	2264      	movs	r2, #100	@ 0x64
 8001308:	211e      	movs	r1, #30
 800130a:	201e      	movs	r0, #30
 800130c:	f7ff fad8 	bl	80008c0 <ST7789_DrawRectangle>
	HAL_Delay(1000);
 8001310:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001314:	f000 fa28 	bl	8001768 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001318:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800131c:	f7ff f9da 	bl	80006d4 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Rect.", Font_11x18, YELLOW, BLACK);
 8001320:	4b4e      	ldr	r3, [pc, #312]	@ (800145c <ST7789_Test+0x2fc>)
 8001322:	2200      	movs	r2, #0
 8001324:	9202      	str	r2, [sp, #8]
 8001326:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800132a:	9201      	str	r2, [sp, #4]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	9200      	str	r2, [sp, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a51      	ldr	r2, [pc, #324]	@ (8001478 <ST7789_Test+0x318>)
 8001334:	210a      	movs	r1, #10
 8001336:	200a      	movs	r0, #10
 8001338:	f7ff fc70 	bl	8000c1c <ST7789_WriteString>
	ST7789_DrawFilledRectangle(30, 30, 50, 50, WHITE);
 800133c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2332      	movs	r3, #50	@ 0x32
 8001344:	2232      	movs	r2, #50	@ 0x32
 8001346:	211e      	movs	r1, #30
 8001348:	201e      	movs	r0, #30
 800134a:	f7ff fcbb 	bl	8000cc4 <ST7789_DrawFilledRectangle>
	HAL_Delay(1000);
 800134e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001352:	f000 fa09 	bl	8001768 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001356:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800135a:	f7ff f9bb 	bl	80006d4 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Circle.", Font_11x18, YELLOW, BLACK);
 800135e:	4b3f      	ldr	r3, [pc, #252]	@ (800145c <ST7789_Test+0x2fc>)
 8001360:	2200      	movs	r2, #0
 8001362:	9202      	str	r2, [sp, #8]
 8001364:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001368:	9201      	str	r2, [sp, #4]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	9200      	str	r2, [sp, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a42      	ldr	r2, [pc, #264]	@ (800147c <ST7789_Test+0x31c>)
 8001372:	210a      	movs	r1, #10
 8001374:	200a      	movs	r0, #10
 8001376:	f7ff fc51 	bl	8000c1c <ST7789_WriteString>
	ST7789_DrawCircle(60, 60, 25, WHITE);
 800137a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800137e:	2219      	movs	r2, #25
 8001380:	213c      	movs	r1, #60	@ 0x3c
 8001382:	203c      	movs	r0, #60	@ 0x3c
 8001384:	f7ff fae2 	bl	800094c <ST7789_DrawCircle>
	HAL_Delay(1000);
 8001388:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800138c:	f000 f9ec 	bl	8001768 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001390:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001394:	f7ff f99e 	bl	80006d4 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Cir.", Font_11x18, YELLOW, BLACK);
 8001398:	4b30      	ldr	r3, [pc, #192]	@ (800145c <ST7789_Test+0x2fc>)
 800139a:	2200      	movs	r2, #0
 800139c:	9202      	str	r2, [sp, #8]
 800139e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80013a2:	9201      	str	r2, [sp, #4]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	9200      	str	r2, [sp, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a35      	ldr	r2, [pc, #212]	@ (8001480 <ST7789_Test+0x320>)
 80013ac:	210a      	movs	r1, #10
 80013ae:	200a      	movs	r0, #10
 80013b0:	f7ff fc34 	bl	8000c1c <ST7789_WriteString>
	ST7789_DrawFilledCircle(60, 60, 25, WHITE);
 80013b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013b8:	2219      	movs	r2, #25
 80013ba:	213c      	movs	r1, #60	@ 0x3c
 80013bc:	203c      	movs	r0, #60	@ 0x3c
 80013be:	f7ff fde7 	bl	8000f90 <ST7789_DrawFilledCircle>
	HAL_Delay(1000);
 80013c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013c6:	f000 f9cf 	bl	8001768 <HAL_Delay>

	ST7789_Fill_Color(RED);
 80013ca:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80013ce:	f7ff f981 	bl	80006d4 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Triangle", Font_11x18, YELLOW, BLACK);
 80013d2:	4b22      	ldr	r3, [pc, #136]	@ (800145c <ST7789_Test+0x2fc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	9202      	str	r2, [sp, #8]
 80013d8:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80013dc:	9201      	str	r2, [sp, #4]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	9200      	str	r2, [sp, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a27      	ldr	r2, [pc, #156]	@ (8001484 <ST7789_Test+0x324>)
 80013e6:	210a      	movs	r1, #10
 80013e8:	200a      	movs	r0, #10
 80013ea:	f7ff fc17 	bl	8000c1c <ST7789_WriteString>
	ST7789_DrawTriangle(30, 30, 30, 70, 60, 40, WHITE);
 80013ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013f2:	9302      	str	r3, [sp, #8]
 80013f4:	2328      	movs	r3, #40	@ 0x28
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	233c      	movs	r3, #60	@ 0x3c
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2346      	movs	r3, #70	@ 0x46
 80013fe:	221e      	movs	r2, #30
 8001400:	211e      	movs	r1, #30
 8001402:	201e      	movs	r0, #30
 8001404:	f7ff fcb8 	bl	8000d78 <ST7789_DrawTriangle>
	HAL_Delay(1000);
 8001408:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800140c:	f000 f9ac 	bl	8001768 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001410:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001414:	f7ff f95e 	bl	80006d4 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Tri", Font_11x18, YELLOW, BLACK);
 8001418:	4b10      	ldr	r3, [pc, #64]	@ (800145c <ST7789_Test+0x2fc>)
 800141a:	2200      	movs	r2, #0
 800141c:	9202      	str	r2, [sp, #8]
 800141e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001422:	9201      	str	r2, [sp, #4]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a17      	ldr	r2, [pc, #92]	@ (8001488 <ST7789_Test+0x328>)
 800142c:	210a      	movs	r1, #10
 800142e:	200a      	movs	r0, #10
 8001430:	f7ff fbf4 	bl	8000c1c <ST7789_WriteString>
	ST7789_DrawFilledTriangle(30, 30, 30, 70, 60, 40, WHITE);
 8001434:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001438:	9302      	str	r3, [sp, #8]
 800143a:	2328      	movs	r3, #40	@ 0x28
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	233c      	movs	r3, #60	@ 0x3c
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2346      	movs	r3, #70	@ 0x46
 8001444:	221e      	movs	r2, #30
 8001446:	211e      	movs	r1, #30
 8001448:	201e      	movs	r0, #30
 800144a:	f7ff fcd1 	bl	8000df0 <ST7789_DrawFilledTriangle>
	HAL_Delay(1000);
 800144e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001452:	f000 f989 	bl	8001768 <HAL_Delay>



}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000008 	.word	0x20000008
 8001460:	08003370 	.word	0x08003370
 8001464:	20000010 	.word	0x20000010
 8001468:	0800337c 	.word	0x0800337c
 800146c:	20000000 	.word	0x20000000
 8001470:	08003388 	.word	0x08003388
 8001474:	08003398 	.word	0x08003398
 8001478:	080033a4 	.word	0x080033a4
 800147c:	080033b4 	.word	0x080033b4
 8001480:	080033bc 	.word	0x080033bc
 8001484:	080033c8 	.word	0x080033c8
 8001488:	080033d4 	.word	0x080033d4

0800148c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001492:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <HAL_MspInit+0x40>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	4a0d      	ldr	r2, [pc, #52]	@ (80014cc <HAL_MspInit+0x40>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6193      	str	r3, [r2, #24]
 800149e:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <HAL_MspInit+0x40>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <HAL_MspInit+0x40>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4a07      	ldr	r2, [pc, #28]	@ (80014cc <HAL_MspInit+0x40>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b4:	61d3      	str	r3, [r2, #28]
 80014b6:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <HAL_MspInit+0x40>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	40021000 	.word	0x40021000

080014d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a33      	ldr	r2, [pc, #204]	@ (80015b8 <HAL_SPI_MspInit+0xe8>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d15e      	bne.n	80015ae <HAL_SPI_MspInit+0xde>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014f0:	4b32      	ldr	r3, [pc, #200]	@ (80015bc <HAL_SPI_MspInit+0xec>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a31      	ldr	r2, [pc, #196]	@ (80015bc <HAL_SPI_MspInit+0xec>)
 80014f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b2f      	ldr	r3, [pc, #188]	@ (80015bc <HAL_SPI_MspInit+0xec>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	4b2c      	ldr	r3, [pc, #176]	@ (80015bc <HAL_SPI_MspInit+0xec>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a2b      	ldr	r2, [pc, #172]	@ (80015bc <HAL_SPI_MspInit+0xec>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b29      	ldr	r3, [pc, #164]	@ (80015bc <HAL_SPI_MspInit+0xec>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001520:	23a0      	movs	r3, #160	@ 0xa0
 8001522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4619      	mov	r1, r3
 8001532:	4823      	ldr	r0, [pc, #140]	@ (80015c0 <HAL_SPI_MspInit+0xf0>)
 8001534:	f000 fcb0 	bl	8001e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001538:	2340      	movs	r3, #64	@ 0x40
 800153a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	4619      	mov	r1, r3
 800154a:	481d      	ldr	r0, [pc, #116]	@ (80015c0 <HAL_SPI_MspInit+0xf0>)
 800154c:	f000 fca4 	bl	8001e98 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001550:	4b1c      	ldr	r3, [pc, #112]	@ (80015c4 <HAL_SPI_MspInit+0xf4>)
 8001552:	4a1d      	ldr	r2, [pc, #116]	@ (80015c8 <HAL_SPI_MspInit+0xf8>)
 8001554:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001556:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <HAL_SPI_MspInit+0xf4>)
 8001558:	2210      	movs	r2, #16
 800155a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800155c:	4b19      	ldr	r3, [pc, #100]	@ (80015c4 <HAL_SPI_MspInit+0xf4>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001562:	4b18      	ldr	r3, [pc, #96]	@ (80015c4 <HAL_SPI_MspInit+0xf4>)
 8001564:	2280      	movs	r2, #128	@ 0x80
 8001566:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001568:	4b16      	ldr	r3, [pc, #88]	@ (80015c4 <HAL_SPI_MspInit+0xf4>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800156e:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <HAL_SPI_MspInit+0xf4>)
 8001570:	2200      	movs	r2, #0
 8001572:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001574:	4b13      	ldr	r3, [pc, #76]	@ (80015c4 <HAL_SPI_MspInit+0xf4>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800157a:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <HAL_SPI_MspInit+0xf4>)
 800157c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001580:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001582:	4810      	ldr	r0, [pc, #64]	@ (80015c4 <HAL_SPI_MspInit+0xf4>)
 8001584:	f000 fa22 	bl	80019cc <HAL_DMA_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 800158e:	f7fe fecf 	bl	8000330 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a0b      	ldr	r2, [pc, #44]	@ (80015c4 <HAL_SPI_MspInit+0xf4>)
 8001596:	649a      	str	r2, [r3, #72]	@ 0x48
 8001598:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <HAL_SPI_MspInit+0xf4>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	2023      	movs	r0, #35	@ 0x23
 80015a4:	f000 f9db 	bl	800195e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80015a8:	2023      	movs	r0, #35	@ 0x23
 80015aa:	f000 f9f4 	bl	8001996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015ae:	bf00      	nop
 80015b0:	3720      	adds	r7, #32
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40013000 	.word	0x40013000
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40010800 	.word	0x40010800
 80015c4:	2000009c 	.word	0x2000009c
 80015c8:	40020030 	.word	0x40020030

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <NMI_Handler+0x4>

080015d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <MemManage_Handler+0x4>

080015e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161c:	f000 f888 	bl	8001730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001628:	4802      	ldr	r0, [pc, #8]	@ (8001634 <DMA1_Channel3_IRQHandler+0x10>)
 800162a:	f000 fb01 	bl	8001c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000009c 	.word	0x2000009c

08001638 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <SPI1_IRQHandler+0x10>)
 800163e:	f001 fc17 	bl	8002e70 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000044 	.word	0x20000044

0800164c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001658:	f7ff fff8 	bl	800164c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800165c:	480b      	ldr	r0, [pc, #44]	@ (800168c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800165e:	490c      	ldr	r1, [pc, #48]	@ (8001690 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001660:	4a0c      	ldr	r2, [pc, #48]	@ (8001694 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a09      	ldr	r2, [pc, #36]	@ (8001698 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001674:	4c09      	ldr	r4, [pc, #36]	@ (800169c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001682:	f001 fe31 	bl	80032e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001686:	f7fe fd61 	bl	800014c <main>
  bx lr
 800168a:	4770      	bx	lr
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001694:	08005c20 	.word	0x08005c20
  ldr r2, =_sbss
 8001698:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800169c:	20000a44 	.word	0x20000a44

080016a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC1_2_IRQHandler>
	...

080016a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a8:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <HAL_Init+0x28>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a07      	ldr	r2, [pc, #28]	@ (80016cc <HAL_Init+0x28>)
 80016ae:	f043 0310 	orr.w	r3, r3, #16
 80016b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b4:	2003      	movs	r0, #3
 80016b6:	f000 f947 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ba:	200f      	movs	r0, #15
 80016bc:	f000 f808 	bl	80016d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c0:	f7ff fee4 	bl	800148c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40022000 	.word	0x40022000

080016d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <HAL_InitTick+0x54>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <HAL_InitTick+0x58>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f95f 	bl	80019b2 <HAL_SYSTICK_Config>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00e      	b.n	800171c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d80a      	bhi.n	800171a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001704:	2200      	movs	r2, #0
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	f000 f927 	bl	800195e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001710:	4a06      	ldr	r2, [pc, #24]	@ (800172c <HAL_InitTick+0x5c>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	e000      	b.n	800171c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	2000001c 	.word	0x2000001c
 8001728:	20000024 	.word	0x20000024
 800172c:	20000020 	.word	0x20000020

08001730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001734:	4b05      	ldr	r3, [pc, #20]	@ (800174c <HAL_IncTick+0x1c>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <HAL_IncTick+0x20>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a03      	ldr	r2, [pc, #12]	@ (8001750 <HAL_IncTick+0x20>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	20000024 	.word	0x20000024
 8001750:	20000a40 	.word	0x20000a40

08001754 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return uwTick;
 8001758:	4b02      	ldr	r3, [pc, #8]	@ (8001764 <HAL_GetTick+0x10>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	20000a40 	.word	0x20000a40

08001768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001770:	f7ff fff0 	bl	8001754 <HAL_GetTick>
 8001774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001780:	d005      	beq.n	800178e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001782:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <HAL_Delay+0x44>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800178e:	bf00      	nop
 8001790:	f7ff ffe0 	bl	8001754 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	429a      	cmp	r2, r3
 800179e:	d8f7      	bhi.n	8001790 <HAL_Delay+0x28>
  {
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000024 	.word	0x20000024

080017b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017cc:	4013      	ands	r3, r2
 80017ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e2:	4a04      	ldr	r2, [pc, #16]	@ (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	60d3      	str	r3, [r2, #12]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017fc:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <__NVIC_GetPriorityGrouping+0x18>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	f003 0307 	and.w	r3, r3, #7
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	db0b      	blt.n	800183e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	f003 021f 	and.w	r2, r3, #31
 800182c:	4906      	ldr	r1, [pc, #24]	@ (8001848 <__NVIC_EnableIRQ+0x34>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	2001      	movs	r0, #1
 8001836:	fa00 f202 	lsl.w	r2, r0, r2
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	e000e100 	.word	0xe000e100

0800184c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0a      	blt.n	8001876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	490c      	ldr	r1, [pc, #48]	@ (8001898 <__NVIC_SetPriority+0x4c>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001874:	e00a      	b.n	800188c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4908      	ldr	r1, [pc, #32]	@ (800189c <__NVIC_SetPriority+0x50>)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	440b      	add	r3, r1
 800188a:	761a      	strb	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	@ 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f1c3 0307 	rsb	r3, r3, #7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf28      	it	cs
 80018be:	2304      	movcs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3304      	adds	r3, #4
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d902      	bls.n	80018d0 <NVIC_EncodePriority+0x30>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3b03      	subs	r3, #3
 80018ce:	e000      	b.n	80018d2 <NVIC_EncodePriority+0x32>
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	4313      	orrs	r3, r2
         );
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	@ 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001914:	d301      	bcc.n	800191a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001916:	2301      	movs	r3, #1
 8001918:	e00f      	b.n	800193a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191a:	4a0a      	ldr	r2, [pc, #40]	@ (8001944 <SysTick_Config+0x40>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001922:	210f      	movs	r1, #15
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f7ff ff90 	bl	800184c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800192c:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <SysTick_Config+0x40>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001932:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <SysTick_Config+0x40>)
 8001934:	2207      	movs	r2, #7
 8001936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	e000e010 	.word	0xe000e010

08001948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff2d 	bl	80017b0 <__NVIC_SetPriorityGrouping>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001970:	f7ff ff42 	bl	80017f8 <__NVIC_GetPriorityGrouping>
 8001974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	6978      	ldr	r0, [r7, #20]
 800197c:	f7ff ff90 	bl	80018a0 <NVIC_EncodePriority>
 8001980:	4602      	mov	r2, r0
 8001982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff5f 	bl	800184c <__NVIC_SetPriority>
}
 800198e:	bf00      	nop
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff35 	bl	8001814 <__NVIC_EnableIRQ>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ffa2 	bl	8001904 <SysTick_Config>
 80019c0:	4603      	mov	r3, r0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e043      	b.n	8001a6a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b22      	ldr	r3, [pc, #136]	@ (8001a74 <HAL_DMA_Init+0xa8>)
 80019ea:	4413      	add	r3, r2
 80019ec:	4a22      	ldr	r2, [pc, #136]	@ (8001a78 <HAL_DMA_Init+0xac>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	091b      	lsrs	r3, r3, #4
 80019f4:	009a      	lsls	r2, r3, #2
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a1f      	ldr	r2, [pc, #124]	@ (8001a7c <HAL_DMA_Init+0xb0>)
 80019fe:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2202      	movs	r2, #2
 8001a04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a16:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001a1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	bffdfff8 	.word	0xbffdfff8
 8001a78:	cccccccd 	.word	0xcccccccd
 8001a7c:	40020000 	.word	0x40020000

08001a80 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
 8001a8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_DMA_Start_IT+0x20>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e04b      	b.n	8001b38 <HAL_DMA_Start_IT+0xb8>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d13a      	bne.n	8001b2a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0201 	bic.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f9af 	bl	8001e3c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d008      	beq.n	8001af8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 020e 	orr.w	r2, r2, #14
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e00f      	b.n	8001b18 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0204 	bic.w	r2, r2, #4
 8001b06:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 020a 	orr.w	r2, r2, #10
 8001b16:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	e005      	b.n	8001b36 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b32:	2302      	movs	r3, #2
 8001b34:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d005      	beq.n	8001b64 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2204      	movs	r2, #4
 8001b5c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
 8001b62:	e051      	b.n	8001c08 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 020e 	bic.w	r2, r2, #14
 8001b72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0201 	bic.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a22      	ldr	r2, [pc, #136]	@ (8001c14 <HAL_DMA_Abort_IT+0xd4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d029      	beq.n	8001be2 <HAL_DMA_Abort_IT+0xa2>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a21      	ldr	r2, [pc, #132]	@ (8001c18 <HAL_DMA_Abort_IT+0xd8>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d022      	beq.n	8001bde <HAL_DMA_Abort_IT+0x9e>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1f      	ldr	r2, [pc, #124]	@ (8001c1c <HAL_DMA_Abort_IT+0xdc>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d01a      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0x98>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a1e      	ldr	r2, [pc, #120]	@ (8001c20 <HAL_DMA_Abort_IT+0xe0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d012      	beq.n	8001bd2 <HAL_DMA_Abort_IT+0x92>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c24 <HAL_DMA_Abort_IT+0xe4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00a      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x8c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a1b      	ldr	r2, [pc, #108]	@ (8001c28 <HAL_DMA_Abort_IT+0xe8>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d102      	bne.n	8001bc6 <HAL_DMA_Abort_IT+0x86>
 8001bc0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001bc4:	e00e      	b.n	8001be4 <HAL_DMA_Abort_IT+0xa4>
 8001bc6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bca:	e00b      	b.n	8001be4 <HAL_DMA_Abort_IT+0xa4>
 8001bcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bd0:	e008      	b.n	8001be4 <HAL_DMA_Abort_IT+0xa4>
 8001bd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bd6:	e005      	b.n	8001be4 <HAL_DMA_Abort_IT+0xa4>
 8001bd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bdc:	e002      	b.n	8001be4 <HAL_DMA_Abort_IT+0xa4>
 8001bde:	2310      	movs	r3, #16
 8001be0:	e000      	b.n	8001be4 <HAL_DMA_Abort_IT+0xa4>
 8001be2:	2301      	movs	r3, #1
 8001be4:	4a11      	ldr	r2, [pc, #68]	@ (8001c2c <HAL_DMA_Abort_IT+0xec>)
 8001be6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	4798      	blx	r3
    } 
  }
  return status;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40020008 	.word	0x40020008
 8001c18:	4002001c 	.word	0x4002001c
 8001c1c:	40020030 	.word	0x40020030
 8001c20:	40020044 	.word	0x40020044
 8001c24:	40020058 	.word	0x40020058
 8001c28:	4002006c 	.word	0x4002006c
 8001c2c:	40020000 	.word	0x40020000

08001c30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4c:	2204      	movs	r2, #4
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d04f      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0xc8>
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d04a      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0320 	and.w	r3, r3, #32
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d107      	bne.n	8001c80 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0204 	bic.w	r2, r2, #4
 8001c7e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a66      	ldr	r2, [pc, #408]	@ (8001e20 <HAL_DMA_IRQHandler+0x1f0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d029      	beq.n	8001cde <HAL_DMA_IRQHandler+0xae>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a65      	ldr	r2, [pc, #404]	@ (8001e24 <HAL_DMA_IRQHandler+0x1f4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d022      	beq.n	8001cda <HAL_DMA_IRQHandler+0xaa>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a63      	ldr	r2, [pc, #396]	@ (8001e28 <HAL_DMA_IRQHandler+0x1f8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d01a      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0xa4>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a62      	ldr	r2, [pc, #392]	@ (8001e2c <HAL_DMA_IRQHandler+0x1fc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d012      	beq.n	8001cce <HAL_DMA_IRQHandler+0x9e>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a60      	ldr	r2, [pc, #384]	@ (8001e30 <HAL_DMA_IRQHandler+0x200>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00a      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x98>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a5f      	ldr	r2, [pc, #380]	@ (8001e34 <HAL_DMA_IRQHandler+0x204>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d102      	bne.n	8001cc2 <HAL_DMA_IRQHandler+0x92>
 8001cbc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001cc0:	e00e      	b.n	8001ce0 <HAL_DMA_IRQHandler+0xb0>
 8001cc2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001cc6:	e00b      	b.n	8001ce0 <HAL_DMA_IRQHandler+0xb0>
 8001cc8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001ccc:	e008      	b.n	8001ce0 <HAL_DMA_IRQHandler+0xb0>
 8001cce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001cd2:	e005      	b.n	8001ce0 <HAL_DMA_IRQHandler+0xb0>
 8001cd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cd8:	e002      	b.n	8001ce0 <HAL_DMA_IRQHandler+0xb0>
 8001cda:	2340      	movs	r3, #64	@ 0x40
 8001cdc:	e000      	b.n	8001ce0 <HAL_DMA_IRQHandler+0xb0>
 8001cde:	2304      	movs	r3, #4
 8001ce0:	4a55      	ldr	r2, [pc, #340]	@ (8001e38 <HAL_DMA_IRQHandler+0x208>)
 8001ce2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 8094 	beq.w	8001e16 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001cf6:	e08e      	b.n	8001e16 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d056      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x186>
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d051      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10b      	bne.n	8001d38 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 020a 	bic.w	r2, r2, #10
 8001d2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a38      	ldr	r2, [pc, #224]	@ (8001e20 <HAL_DMA_IRQHandler+0x1f0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d029      	beq.n	8001d96 <HAL_DMA_IRQHandler+0x166>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a37      	ldr	r2, [pc, #220]	@ (8001e24 <HAL_DMA_IRQHandler+0x1f4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d022      	beq.n	8001d92 <HAL_DMA_IRQHandler+0x162>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a35      	ldr	r2, [pc, #212]	@ (8001e28 <HAL_DMA_IRQHandler+0x1f8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d01a      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x15c>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a34      	ldr	r2, [pc, #208]	@ (8001e2c <HAL_DMA_IRQHandler+0x1fc>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d012      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x156>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a32      	ldr	r2, [pc, #200]	@ (8001e30 <HAL_DMA_IRQHandler+0x200>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00a      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x150>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a31      	ldr	r2, [pc, #196]	@ (8001e34 <HAL_DMA_IRQHandler+0x204>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d102      	bne.n	8001d7a <HAL_DMA_IRQHandler+0x14a>
 8001d74:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d78:	e00e      	b.n	8001d98 <HAL_DMA_IRQHandler+0x168>
 8001d7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d7e:	e00b      	b.n	8001d98 <HAL_DMA_IRQHandler+0x168>
 8001d80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d84:	e008      	b.n	8001d98 <HAL_DMA_IRQHandler+0x168>
 8001d86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d8a:	e005      	b.n	8001d98 <HAL_DMA_IRQHandler+0x168>
 8001d8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d90:	e002      	b.n	8001d98 <HAL_DMA_IRQHandler+0x168>
 8001d92:	2320      	movs	r3, #32
 8001d94:	e000      	b.n	8001d98 <HAL_DMA_IRQHandler+0x168>
 8001d96:	2302      	movs	r3, #2
 8001d98:	4a27      	ldr	r2, [pc, #156]	@ (8001e38 <HAL_DMA_IRQHandler+0x208>)
 8001d9a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d034      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001db4:	e02f      	b.n	8001e16 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	2208      	movs	r2, #8
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d028      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x1e8>
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d023      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 020e 	bic.w	r2, r2, #14
 8001dde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de8:	2101      	movs	r1, #1
 8001dea:	fa01 f202 	lsl.w	r2, r1, r2
 8001dee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d004      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	4798      	blx	r3
    }
  }
  return;
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
}
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40020008 	.word	0x40020008
 8001e24:	4002001c 	.word	0x4002001c
 8001e28:	40020030 	.word	0x40020030
 8001e2c:	40020044 	.word	0x40020044
 8001e30:	40020058 	.word	0x40020058
 8001e34:	4002006c 	.word	0x4002006c
 8001e38:	40020000 	.word	0x40020000

08001e3c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e52:	2101      	movs	r1, #1
 8001e54:	fa01 f202 	lsl.w	r2, r1, r2
 8001e58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b10      	cmp	r3, #16
 8001e68:	d108      	bne.n	8001e7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e7a:	e007      	b.n	8001e8c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	60da      	str	r2, [r3, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
	...

08001e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b08b      	sub	sp, #44	@ 0x2c
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eaa:	e161      	b.n	8002170 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001eac:	2201      	movs	r2, #1
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	f040 8150 	bne.w	800216a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4a97      	ldr	r2, [pc, #604]	@ (800212c <HAL_GPIO_Init+0x294>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d05e      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001ed4:	4a95      	ldr	r2, [pc, #596]	@ (800212c <HAL_GPIO_Init+0x294>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d875      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001eda:	4a95      	ldr	r2, [pc, #596]	@ (8002130 <HAL_GPIO_Init+0x298>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d058      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001ee0:	4a93      	ldr	r2, [pc, #588]	@ (8002130 <HAL_GPIO_Init+0x298>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d86f      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001ee6:	4a93      	ldr	r2, [pc, #588]	@ (8002134 <HAL_GPIO_Init+0x29c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d052      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001eec:	4a91      	ldr	r2, [pc, #580]	@ (8002134 <HAL_GPIO_Init+0x29c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d869      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001ef2:	4a91      	ldr	r2, [pc, #580]	@ (8002138 <HAL_GPIO_Init+0x2a0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d04c      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001ef8:	4a8f      	ldr	r2, [pc, #572]	@ (8002138 <HAL_GPIO_Init+0x2a0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d863      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001efe:	4a8f      	ldr	r2, [pc, #572]	@ (800213c <HAL_GPIO_Init+0x2a4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d046      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001f04:	4a8d      	ldr	r2, [pc, #564]	@ (800213c <HAL_GPIO_Init+0x2a4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d85d      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001f0a:	2b12      	cmp	r3, #18
 8001f0c:	d82a      	bhi.n	8001f64 <HAL_GPIO_Init+0xcc>
 8001f0e:	2b12      	cmp	r3, #18
 8001f10:	d859      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001f12:	a201      	add	r2, pc, #4	@ (adr r2, 8001f18 <HAL_GPIO_Init+0x80>)
 8001f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f18:	08001f93 	.word	0x08001f93
 8001f1c:	08001f6d 	.word	0x08001f6d
 8001f20:	08001f7f 	.word	0x08001f7f
 8001f24:	08001fc1 	.word	0x08001fc1
 8001f28:	08001fc7 	.word	0x08001fc7
 8001f2c:	08001fc7 	.word	0x08001fc7
 8001f30:	08001fc7 	.word	0x08001fc7
 8001f34:	08001fc7 	.word	0x08001fc7
 8001f38:	08001fc7 	.word	0x08001fc7
 8001f3c:	08001fc7 	.word	0x08001fc7
 8001f40:	08001fc7 	.word	0x08001fc7
 8001f44:	08001fc7 	.word	0x08001fc7
 8001f48:	08001fc7 	.word	0x08001fc7
 8001f4c:	08001fc7 	.word	0x08001fc7
 8001f50:	08001fc7 	.word	0x08001fc7
 8001f54:	08001fc7 	.word	0x08001fc7
 8001f58:	08001fc7 	.word	0x08001fc7
 8001f5c:	08001f75 	.word	0x08001f75
 8001f60:	08001f89 	.word	0x08001f89
 8001f64:	4a76      	ldr	r2, [pc, #472]	@ (8002140 <HAL_GPIO_Init+0x2a8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f6a:	e02c      	b.n	8001fc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	623b      	str	r3, [r7, #32]
          break;
 8001f72:	e029      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	623b      	str	r3, [r7, #32]
          break;
 8001f7c:	e024      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	3308      	adds	r3, #8
 8001f84:	623b      	str	r3, [r7, #32]
          break;
 8001f86:	e01f      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	330c      	adds	r3, #12
 8001f8e:	623b      	str	r3, [r7, #32]
          break;
 8001f90:	e01a      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d102      	bne.n	8001fa0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	623b      	str	r3, [r7, #32]
          break;
 8001f9e:	e013      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d105      	bne.n	8001fb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa8:	2308      	movs	r3, #8
 8001faa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	611a      	str	r2, [r3, #16]
          break;
 8001fb2:	e009      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	615a      	str	r2, [r3, #20]
          break;
 8001fbe:	e003      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
          break;
 8001fc4:	e000      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          break;
 8001fc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2bff      	cmp	r3, #255	@ 0xff
 8001fcc:	d801      	bhi.n	8001fd2 <HAL_GPIO_Init+0x13a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	e001      	b.n	8001fd6 <HAL_GPIO_Init+0x13e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2bff      	cmp	r3, #255	@ 0xff
 8001fdc:	d802      	bhi.n	8001fe4 <HAL_GPIO_Init+0x14c>
 8001fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	e002      	b.n	8001fea <HAL_GPIO_Init+0x152>
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe6:	3b08      	subs	r3, #8
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	210f      	movs	r1, #15
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	6a39      	ldr	r1, [r7, #32]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	fa01 f303 	lsl.w	r3, r1, r3
 8002004:	431a      	orrs	r2, r3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 80a9 	beq.w	800216a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002018:	4b4a      	ldr	r3, [pc, #296]	@ (8002144 <HAL_GPIO_Init+0x2ac>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	4a49      	ldr	r2, [pc, #292]	@ (8002144 <HAL_GPIO_Init+0x2ac>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6193      	str	r3, [r2, #24]
 8002024:	4b47      	ldr	r3, [pc, #284]	@ (8002144 <HAL_GPIO_Init+0x2ac>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002030:	4a45      	ldr	r2, [pc, #276]	@ (8002148 <HAL_GPIO_Init+0x2b0>)
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	3302      	adds	r3, #2
 8002038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	220f      	movs	r2, #15
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a3d      	ldr	r2, [pc, #244]	@ (800214c <HAL_GPIO_Init+0x2b4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d00d      	beq.n	8002078 <HAL_GPIO_Init+0x1e0>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a3c      	ldr	r2, [pc, #240]	@ (8002150 <HAL_GPIO_Init+0x2b8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d007      	beq.n	8002074 <HAL_GPIO_Init+0x1dc>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a3b      	ldr	r2, [pc, #236]	@ (8002154 <HAL_GPIO_Init+0x2bc>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d101      	bne.n	8002070 <HAL_GPIO_Init+0x1d8>
 800206c:	2302      	movs	r3, #2
 800206e:	e004      	b.n	800207a <HAL_GPIO_Init+0x1e2>
 8002070:	2303      	movs	r3, #3
 8002072:	e002      	b.n	800207a <HAL_GPIO_Init+0x1e2>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <HAL_GPIO_Init+0x1e2>
 8002078:	2300      	movs	r3, #0
 800207a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800207c:	f002 0203 	and.w	r2, r2, #3
 8002080:	0092      	lsls	r2, r2, #2
 8002082:	4093      	lsls	r3, r2
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800208a:	492f      	ldr	r1, [pc, #188]	@ (8002148 <HAL_GPIO_Init+0x2b0>)
 800208c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	3302      	adds	r3, #2
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002158 <HAL_GPIO_Init+0x2c0>)
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	492b      	ldr	r1, [pc, #172]	@ (8002158 <HAL_GPIO_Init+0x2c0>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020b2:	4b29      	ldr	r3, [pc, #164]	@ (8002158 <HAL_GPIO_Init+0x2c0>)
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	4927      	ldr	r1, [pc, #156]	@ (8002158 <HAL_GPIO_Init+0x2c0>)
 80020bc:	4013      	ands	r3, r2
 80020be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d006      	beq.n	80020da <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020cc:	4b22      	ldr	r3, [pc, #136]	@ (8002158 <HAL_GPIO_Init+0x2c0>)
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	4921      	ldr	r1, [pc, #132]	@ (8002158 <HAL_GPIO_Init+0x2c0>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60cb      	str	r3, [r1, #12]
 80020d8:	e006      	b.n	80020e8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020da:	4b1f      	ldr	r3, [pc, #124]	@ (8002158 <HAL_GPIO_Init+0x2c0>)
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	491d      	ldr	r1, [pc, #116]	@ (8002158 <HAL_GPIO_Init+0x2c0>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d006      	beq.n	8002102 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020f4:	4b18      	ldr	r3, [pc, #96]	@ (8002158 <HAL_GPIO_Init+0x2c0>)
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	4917      	ldr	r1, [pc, #92]	@ (8002158 <HAL_GPIO_Init+0x2c0>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
 8002100:	e006      	b.n	8002110 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002102:	4b15      	ldr	r3, [pc, #84]	@ (8002158 <HAL_GPIO_Init+0x2c0>)
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	43db      	mvns	r3, r3
 800210a:	4913      	ldr	r1, [pc, #76]	@ (8002158 <HAL_GPIO_Init+0x2c0>)
 800210c:	4013      	ands	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d01f      	beq.n	800215c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800211c:	4b0e      	ldr	r3, [pc, #56]	@ (8002158 <HAL_GPIO_Init+0x2c0>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	490d      	ldr	r1, [pc, #52]	@ (8002158 <HAL_GPIO_Init+0x2c0>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]
 8002128:	e01f      	b.n	800216a <HAL_GPIO_Init+0x2d2>
 800212a:	bf00      	nop
 800212c:	10320000 	.word	0x10320000
 8002130:	10310000 	.word	0x10310000
 8002134:	10220000 	.word	0x10220000
 8002138:	10210000 	.word	0x10210000
 800213c:	10120000 	.word	0x10120000
 8002140:	10110000 	.word	0x10110000
 8002144:	40021000 	.word	0x40021000
 8002148:	40010000 	.word	0x40010000
 800214c:	40010800 	.word	0x40010800
 8002150:	40010c00 	.word	0x40010c00
 8002154:	40011000 	.word	0x40011000
 8002158:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800215c:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <HAL_GPIO_Init+0x2f4>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	43db      	mvns	r3, r3
 8002164:	4909      	ldr	r1, [pc, #36]	@ (800218c <HAL_GPIO_Init+0x2f4>)
 8002166:	4013      	ands	r3, r2
 8002168:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800216a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216c:	3301      	adds	r3, #1
 800216e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	f47f ae96 	bne.w	8001eac <HAL_GPIO_Init+0x14>
  }
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	372c      	adds	r7, #44	@ 0x2c
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	40010400 	.word	0x40010400

08002190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
 800219c:	4613      	mov	r3, r2
 800219e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021a0:	787b      	ldrb	r3, [r7, #1]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021a6:	887a      	ldrh	r2, [r7, #2]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021ac:	e003      	b.n	80021b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021ae:	887b      	ldrh	r3, [r7, #2]
 80021b0:	041a      	lsls	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	611a      	str	r2, [r3, #16]
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr

080021c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e272      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8087 	beq.w	80022ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021e0:	4b92      	ldr	r3, [pc, #584]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d00c      	beq.n	8002206 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021ec:	4b8f      	ldr	r3, [pc, #572]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 030c 	and.w	r3, r3, #12
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d112      	bne.n	800221e <HAL_RCC_OscConfig+0x5e>
 80021f8:	4b8c      	ldr	r3, [pc, #560]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002204:	d10b      	bne.n	800221e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002206:	4b89      	ldr	r3, [pc, #548]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d06c      	beq.n	80022ec <HAL_RCC_OscConfig+0x12c>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d168      	bne.n	80022ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e24c      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002226:	d106      	bne.n	8002236 <HAL_RCC_OscConfig+0x76>
 8002228:	4b80      	ldr	r3, [pc, #512]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a7f      	ldr	r2, [pc, #508]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 800222e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	e02e      	b.n	8002294 <HAL_RCC_OscConfig+0xd4>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0x98>
 800223e:	4b7b      	ldr	r3, [pc, #492]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a7a      	ldr	r2, [pc, #488]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 8002244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b78      	ldr	r3, [pc, #480]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a77      	ldr	r2, [pc, #476]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 8002250:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e01d      	b.n	8002294 <HAL_RCC_OscConfig+0xd4>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0xbc>
 8002262:	4b72      	ldr	r3, [pc, #456]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a71      	ldr	r2, [pc, #452]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 8002268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	4b6f      	ldr	r3, [pc, #444]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a6e      	ldr	r2, [pc, #440]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e00b      	b.n	8002294 <HAL_RCC_OscConfig+0xd4>
 800227c:	4b6b      	ldr	r3, [pc, #428]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a6a      	ldr	r2, [pc, #424]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 8002282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b68      	ldr	r3, [pc, #416]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a67      	ldr	r2, [pc, #412]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 800228e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002292:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d013      	beq.n	80022c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7ff fa5a 	bl	8001754 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a4:	f7ff fa56 	bl	8001754 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	@ 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e200      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	4b5d      	ldr	r3, [pc, #372]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0xe4>
 80022c2:	e014      	b.n	80022ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7ff fa46 	bl	8001754 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022cc:	f7ff fa42 	bl	8001754 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	@ 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e1ec      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022de:	4b53      	ldr	r3, [pc, #332]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x10c>
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d063      	beq.n	80023c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022fa:	4b4c      	ldr	r3, [pc, #304]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00b      	beq.n	800231e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002306:	4b49      	ldr	r3, [pc, #292]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b08      	cmp	r3, #8
 8002310:	d11c      	bne.n	800234c <HAL_RCC_OscConfig+0x18c>
 8002312:	4b46      	ldr	r3, [pc, #280]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d116      	bne.n	800234c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231e:	4b43      	ldr	r3, [pc, #268]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <HAL_RCC_OscConfig+0x176>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d001      	beq.n	8002336 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e1c0      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002336:	4b3d      	ldr	r3, [pc, #244]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4939      	ldr	r1, [pc, #228]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234a:	e03a      	b.n	80023c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d020      	beq.n	8002396 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002354:	4b36      	ldr	r3, [pc, #216]	@ (8002430 <HAL_RCC_OscConfig+0x270>)
 8002356:	2201      	movs	r2, #1
 8002358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235a:	f7ff f9fb 	bl	8001754 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002362:	f7ff f9f7 	bl	8001754 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e1a1      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002374:	4b2d      	ldr	r3, [pc, #180]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002380:	4b2a      	ldr	r3, [pc, #168]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	4927      	ldr	r1, [pc, #156]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 8002390:	4313      	orrs	r3, r2
 8002392:	600b      	str	r3, [r1, #0]
 8002394:	e015      	b.n	80023c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002396:	4b26      	ldr	r3, [pc, #152]	@ (8002430 <HAL_RCC_OscConfig+0x270>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7ff f9da 	bl	8001754 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a4:	f7ff f9d6 	bl	8001754 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e180      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b6:	4b1d      	ldr	r3, [pc, #116]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d03a      	beq.n	8002444 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d019      	beq.n	800240a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d6:	4b17      	ldr	r3, [pc, #92]	@ (8002434 <HAL_RCC_OscConfig+0x274>)
 80023d8:	2201      	movs	r2, #1
 80023da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023dc:	f7ff f9ba 	bl	8001754 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e4:	f7ff f9b6 	bl	8001754 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e160      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f6:	4b0d      	ldr	r3, [pc, #52]	@ (800242c <HAL_RCC_OscConfig+0x26c>)
 80023f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002402:	2001      	movs	r0, #1
 8002404:	f000 fa9c 	bl	8002940 <RCC_Delay>
 8002408:	e01c      	b.n	8002444 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240a:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <HAL_RCC_OscConfig+0x274>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002410:	f7ff f9a0 	bl	8001754 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002416:	e00f      	b.n	8002438 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002418:	f7ff f99c 	bl	8001754 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d908      	bls.n	8002438 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e146      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000
 8002430:	42420000 	.word	0x42420000
 8002434:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002438:	4b92      	ldr	r3, [pc, #584]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1e9      	bne.n	8002418 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 80a6 	beq.w	800259e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002456:	4b8b      	ldr	r3, [pc, #556]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10d      	bne.n	800247e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002462:	4b88      	ldr	r3, [pc, #544]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	4a87      	ldr	r2, [pc, #540]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800246c:	61d3      	str	r3, [r2, #28]
 800246e:	4b85      	ldr	r3, [pc, #532]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800247a:	2301      	movs	r3, #1
 800247c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247e:	4b82      	ldr	r3, [pc, #520]	@ (8002688 <HAL_RCC_OscConfig+0x4c8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d118      	bne.n	80024bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800248a:	4b7f      	ldr	r3, [pc, #508]	@ (8002688 <HAL_RCC_OscConfig+0x4c8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a7e      	ldr	r2, [pc, #504]	@ (8002688 <HAL_RCC_OscConfig+0x4c8>)
 8002490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002496:	f7ff f95d 	bl	8001754 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249e:	f7ff f959 	bl	8001754 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b64      	cmp	r3, #100	@ 0x64
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e103      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b0:	4b75      	ldr	r3, [pc, #468]	@ (8002688 <HAL_RCC_OscConfig+0x4c8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d106      	bne.n	80024d2 <HAL_RCC_OscConfig+0x312>
 80024c4:	4b6f      	ldr	r3, [pc, #444]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4a6e      	ldr	r2, [pc, #440]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6213      	str	r3, [r2, #32]
 80024d0:	e02d      	b.n	800252e <HAL_RCC_OscConfig+0x36e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10c      	bne.n	80024f4 <HAL_RCC_OscConfig+0x334>
 80024da:	4b6a      	ldr	r3, [pc, #424]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4a69      	ldr	r2, [pc, #420]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	6213      	str	r3, [r2, #32]
 80024e6:	4b67      	ldr	r3, [pc, #412]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4a66      	ldr	r2, [pc, #408]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	f023 0304 	bic.w	r3, r3, #4
 80024f0:	6213      	str	r3, [r2, #32]
 80024f2:	e01c      	b.n	800252e <HAL_RCC_OscConfig+0x36e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b05      	cmp	r3, #5
 80024fa:	d10c      	bne.n	8002516 <HAL_RCC_OscConfig+0x356>
 80024fc:	4b61      	ldr	r3, [pc, #388]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	4a60      	ldr	r2, [pc, #384]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002502:	f043 0304 	orr.w	r3, r3, #4
 8002506:	6213      	str	r3, [r2, #32]
 8002508:	4b5e      	ldr	r3, [pc, #376]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4a5d      	ldr	r2, [pc, #372]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6213      	str	r3, [r2, #32]
 8002514:	e00b      	b.n	800252e <HAL_RCC_OscConfig+0x36e>
 8002516:	4b5b      	ldr	r3, [pc, #364]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4a5a      	ldr	r2, [pc, #360]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	6213      	str	r3, [r2, #32]
 8002522:	4b58      	ldr	r3, [pc, #352]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	4a57      	ldr	r2, [pc, #348]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	f023 0304 	bic.w	r3, r3, #4
 800252c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d015      	beq.n	8002562 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002536:	f7ff f90d 	bl	8001754 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253c:	e00a      	b.n	8002554 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253e:	f7ff f909 	bl	8001754 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800254c:	4293      	cmp	r3, r2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e0b1      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002554:	4b4b      	ldr	r3, [pc, #300]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0ee      	beq.n	800253e <HAL_RCC_OscConfig+0x37e>
 8002560:	e014      	b.n	800258c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002562:	f7ff f8f7 	bl	8001754 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002568:	e00a      	b.n	8002580 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256a:	f7ff f8f3 	bl	8001754 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002578:	4293      	cmp	r3, r2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e09b      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002580:	4b40      	ldr	r3, [pc, #256]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1ee      	bne.n	800256a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800258c:	7dfb      	ldrb	r3, [r7, #23]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d105      	bne.n	800259e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002592:	4b3c      	ldr	r3, [pc, #240]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	4a3b      	ldr	r2, [pc, #236]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800259c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 8087 	beq.w	80026b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a8:	4b36      	ldr	r3, [pc, #216]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 030c 	and.w	r3, r3, #12
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d061      	beq.n	8002678 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d146      	bne.n	800264a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025bc:	4b33      	ldr	r3, [pc, #204]	@ (800268c <HAL_RCC_OscConfig+0x4cc>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c2:	f7ff f8c7 	bl	8001754 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ca:	f7ff f8c3 	bl	8001754 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e06d      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025dc:	4b29      	ldr	r3, [pc, #164]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f0      	bne.n	80025ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025f0:	d108      	bne.n	8002604 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025f2:	4b24      	ldr	r3, [pc, #144]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	4921      	ldr	r1, [pc, #132]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002600:	4313      	orrs	r3, r2
 8002602:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002604:	4b1f      	ldr	r3, [pc, #124]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a19      	ldr	r1, [r3, #32]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002614:	430b      	orrs	r3, r1
 8002616:	491b      	ldr	r1, [pc, #108]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800261c:	4b1b      	ldr	r3, [pc, #108]	@ (800268c <HAL_RCC_OscConfig+0x4cc>)
 800261e:	2201      	movs	r2, #1
 8002620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7ff f897 	bl	8001754 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262a:	f7ff f893 	bl	8001754 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e03d      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800263c:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x46a>
 8002648:	e035      	b.n	80026b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264a:	4b10      	ldr	r3, [pc, #64]	@ (800268c <HAL_RCC_OscConfig+0x4cc>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7ff f880 	bl	8001754 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002658:	f7ff f87c 	bl	8001754 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e026      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266a:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x498>
 8002676:	e01e      	b.n	80026b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d107      	bne.n	8002690 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e019      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 8002684:	40021000 	.word	0x40021000
 8002688:	40007000 	.word	0x40007000
 800268c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002690:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <HAL_RCC_OscConfig+0x500>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d106      	bne.n	80026b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40021000 	.word	0x40021000

080026c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0d0      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d910      	bls.n	8002708 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b67      	ldr	r3, [pc, #412]	@ (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 0207 	bic.w	r2, r3, #7
 80026ee:	4965      	ldr	r1, [pc, #404]	@ (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	4b63      	ldr	r3, [pc, #396]	@ (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0b8      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d020      	beq.n	8002756 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002720:	4b59      	ldr	r3, [pc, #356]	@ (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	4a58      	ldr	r2, [pc, #352]	@ (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800272a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002738:	4b53      	ldr	r3, [pc, #332]	@ (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a52      	ldr	r2, [pc, #328]	@ (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002742:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002744:	4b50      	ldr	r3, [pc, #320]	@ (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	494d      	ldr	r1, [pc, #308]	@ (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d040      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276a:	4b47      	ldr	r3, [pc, #284]	@ (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d115      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e07f      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002782:	4b41      	ldr	r3, [pc, #260]	@ (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e073      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002792:	4b3d      	ldr	r3, [pc, #244]	@ (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e06b      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027a2:	4b39      	ldr	r3, [pc, #228]	@ (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f023 0203 	bic.w	r2, r3, #3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4936      	ldr	r1, [pc, #216]	@ (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b4:	f7fe ffce 	bl	8001754 <HAL_GetTick>
 80027b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ba:	e00a      	b.n	80027d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027bc:	f7fe ffca 	bl	8001754 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e053      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 020c 	and.w	r2, r3, #12
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d1eb      	bne.n	80027bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027e4:	4b27      	ldr	r3, [pc, #156]	@ (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d210      	bcs.n	8002814 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f2:	4b24      	ldr	r3, [pc, #144]	@ (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 0207 	bic.w	r2, r3, #7
 80027fa:	4922      	ldr	r1, [pc, #136]	@ (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	4313      	orrs	r3, r2
 8002800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002802:	4b20      	ldr	r3, [pc, #128]	@ (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d001      	beq.n	8002814 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e032      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002820:	4b19      	ldr	r3, [pc, #100]	@ (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4916      	ldr	r1, [pc, #88]	@ (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800283e:	4b12      	ldr	r3, [pc, #72]	@ (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	490e      	ldr	r1, [pc, #56]	@ (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002852:	f000 f821 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8002856:	4602      	mov	r2, r0
 8002858:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	490a      	ldr	r1, [pc, #40]	@ (800288c <HAL_RCC_ClockConfig+0x1c8>)
 8002864:	5ccb      	ldrb	r3, [r1, r3]
 8002866:	fa22 f303 	lsr.w	r3, r2, r3
 800286a:	4a09      	ldr	r2, [pc, #36]	@ (8002890 <HAL_RCC_ClockConfig+0x1cc>)
 800286c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800286e:	4b09      	ldr	r3, [pc, #36]	@ (8002894 <HAL_RCC_ClockConfig+0x1d0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe ff2c 	bl	80016d0 <HAL_InitTick>

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40022000 	.word	0x40022000
 8002888:	40021000 	.word	0x40021000
 800288c:	08005bf4 	.word	0x08005bf4
 8002890:	2000001c 	.word	0x2000001c
 8002894:	20000020 	.word	0x20000020

08002898 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028b2:	4b1e      	ldr	r3, [pc, #120]	@ (800292c <HAL_RCC_GetSysClockFreq+0x94>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d002      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x30>
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d003      	beq.n	80028ce <HAL_RCC_GetSysClockFreq+0x36>
 80028c6:	e027      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c8:	4b19      	ldr	r3, [pc, #100]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ca:	613b      	str	r3, [r7, #16]
      break;
 80028cc:	e027      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	0c9b      	lsrs	r3, r3, #18
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	4a17      	ldr	r2, [pc, #92]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028d8:	5cd3      	ldrb	r3, [r2, r3]
 80028da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d010      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028e6:	4b11      	ldr	r3, [pc, #68]	@ (800292c <HAL_RCC_GetSysClockFreq+0x94>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	0c5b      	lsrs	r3, r3, #17
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	4a11      	ldr	r2, [pc, #68]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028f2:	5cd3      	ldrb	r3, [r2, r3]
 80028f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x98>)
 80028fa:	fb03 f202 	mul.w	r2, r3, r2
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	e004      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a0c      	ldr	r2, [pc, #48]	@ (800293c <HAL_RCC_GetSysClockFreq+0xa4>)
 800290c:	fb02 f303 	mul.w	r3, r2, r3
 8002910:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	613b      	str	r3, [r7, #16]
      break;
 8002916:	e002      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002918:	4b05      	ldr	r3, [pc, #20]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x98>)
 800291a:	613b      	str	r3, [r7, #16]
      break;
 800291c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800291e:	693b      	ldr	r3, [r7, #16]
}
 8002920:	4618      	mov	r0, r3
 8002922:	371c      	adds	r7, #28
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000
 8002930:	007a1200 	.word	0x007a1200
 8002934:	08005c04 	.word	0x08005c04
 8002938:	08005c14 	.word	0x08005c14
 800293c:	003d0900 	.word	0x003d0900

08002940 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002948:	4b0a      	ldr	r3, [pc, #40]	@ (8002974 <RCC_Delay+0x34>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a0a      	ldr	r2, [pc, #40]	@ (8002978 <RCC_Delay+0x38>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0a5b      	lsrs	r3, r3, #9
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800295c:	bf00      	nop
  }
  while (Delay --);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1e5a      	subs	r2, r3, #1
 8002962:	60fa      	str	r2, [r7, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f9      	bne.n	800295c <RCC_Delay+0x1c>
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	2000001c 	.word	0x2000001c
 8002978:	10624dd3 	.word	0x10624dd3

0800297c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e076      	b.n	8002a7c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	2b00      	cmp	r3, #0
 8002994:	d108      	bne.n	80029a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800299e:	d009      	beq.n	80029b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	61da      	str	r2, [r3, #28]
 80029a6:	e005      	b.n	80029b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fe fd7e 	bl	80014d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a38:	ea42 0103 	orr.w	r1, r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a40:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	0c1a      	lsrs	r2, r3, #16
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f002 0204 	and.w	r2, r2, #4
 8002a5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_SPI_Transmit+0x22>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e12d      	b.n	8002d02 <HAL_SPI_Transmit+0x27e>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002aae:	f7fe fe51 	bl	8001754 <HAL_GetTick>
 8002ab2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d002      	beq.n	8002aca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ac8:	e116      	b.n	8002cf8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HAL_SPI_Transmit+0x52>
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d102      	bne.n	8002adc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ada:	e10d      	b.n	8002cf8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2203      	movs	r2, #3
 8002ae0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	88fa      	ldrh	r2, [r7, #6]
 8002af4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	88fa      	ldrh	r2, [r7, #6]
 8002afa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b22:	d10f      	bne.n	8002b44 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b32:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b42:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4e:	2b40      	cmp	r3, #64	@ 0x40
 8002b50:	d007      	beq.n	8002b62 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b6a:	d14f      	bne.n	8002c0c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <HAL_SPI_Transmit+0xf6>
 8002b74:	8afb      	ldrh	r3, [r7, #22]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d142      	bne.n	8002c00 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	881a      	ldrh	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	1c9a      	adds	r2, r3, #2
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b9e:	e02f      	b.n	8002c00 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d112      	bne.n	8002bd4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb2:	881a      	ldrh	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	1c9a      	adds	r2, r3, #2
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002bd2:	e015      	b.n	8002c00 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bd4:	f7fe fdbe 	bl	8001754 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d803      	bhi.n	8002bec <HAL_SPI_Transmit+0x168>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bea:	d102      	bne.n	8002bf2 <HAL_SPI_Transmit+0x16e>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002bfe:	e07b      	b.n	8002cf8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1ca      	bne.n	8002ba0 <HAL_SPI_Transmit+0x11c>
 8002c0a:	e050      	b.n	8002cae <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <HAL_SPI_Transmit+0x196>
 8002c14:	8afb      	ldrh	r3, [r7, #22]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d144      	bne.n	8002ca4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	330c      	adds	r3, #12
 8002c24:	7812      	ldrb	r2, [r2, #0]
 8002c26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c40:	e030      	b.n	8002ca4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d113      	bne.n	8002c78 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	330c      	adds	r3, #12
 8002c5a:	7812      	ldrb	r2, [r2, #0]
 8002c5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002c76:	e015      	b.n	8002ca4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c78:	f7fe fd6c 	bl	8001754 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d803      	bhi.n	8002c90 <HAL_SPI_Transmit+0x20c>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8e:	d102      	bne.n	8002c96 <HAL_SPI_Transmit+0x212>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002ca2:	e029      	b.n	8002cf8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1c9      	bne.n	8002c42 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	6839      	ldr	r1, [r7, #0]
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 faf2 	bl	800329c <SPI_EndRxTxTransaction>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ccc:	2300      	movs	r3, #0
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	77fb      	strb	r3, [r7, #31]
 8002cee:	e003      	b.n	8002cf8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002d00:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	4613      	mov	r3, r2
 8002d18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_SPI_Transmit_DMA+0x20>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e097      	b.n	8002e5c <HAL_SPI_Transmit_DMA+0x150>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d002      	beq.n	8002d46 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002d40:	2302      	movs	r3, #2
 8002d42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d44:	e085      	b.n	8002e52 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_SPI_Transmit_DMA+0x46>
 8002d4c:	88fb      	ldrh	r3, [r7, #6]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d102      	bne.n	8002d58 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d56:	e07c      	b.n	8002e52 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	88fa      	ldrh	r2, [r7, #6]
 8002d70:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	88fa      	ldrh	r2, [r7, #6]
 8002d76:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d9e:	d10f      	bne.n	8002dc0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dbe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc4:	4a27      	ldr	r2, [pc, #156]	@ (8002e64 <HAL_SPI_Transmit_DMA+0x158>)
 8002dc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dcc:	4a26      	ldr	r2, [pc, #152]	@ (8002e68 <HAL_SPI_Transmit_DMA+0x15c>)
 8002dce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd4:	4a25      	ldr	r2, [pc, #148]	@ (8002e6c <HAL_SPI_Transmit_DMA+0x160>)
 8002dd6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ddc:	2200      	movs	r2, #0
 8002dde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de8:	4619      	mov	r1, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	330c      	adds	r3, #12
 8002df0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002df6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002df8:	f7fe fe42 	bl	8001a80 <HAL_DMA_Start_IT>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d008      	beq.n	8002e14 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e06:	f043 0210 	orr.w	r2, r3, #16
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002e12:	e01e      	b.n	8002e52 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e1e:	2b40      	cmp	r3, #64	@ 0x40
 8002e20:	d007      	beq.n	8002e32 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e30:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0220 	orr.w	r2, r2, #32
 8002e40:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0202 	orr.w	r2, r2, #2
 8002e50:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	08003109 	.word	0x08003109
 8002e68:	08003063 	.word	0x08003063
 8002e6c:	08003125 	.word	0x08003125

08002e70 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10e      	bne.n	8002eb0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d009      	beq.n	8002eb0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d004      	beq.n	8002eb0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	4798      	blx	r3
    return;
 8002eae:	e0b7      	b.n	8003020 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d009      	beq.n	8002ece <HAL_SPI_IRQHandler+0x5e>
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d004      	beq.n	8002ece <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	4798      	blx	r3
    return;
 8002ecc:	e0a8      	b.n	8003020 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d105      	bne.n	8002ee4 <HAL_SPI_IRQHandler+0x74>
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 809e 	beq.w	8003020 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8098 	beq.w	8003020 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d023      	beq.n	8002f42 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d011      	beq.n	8002f2a <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0a:	f043 0204 	orr.w	r2, r3, #4
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	e00b      	b.n	8002f42 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	693b      	ldr	r3, [r7, #16]
        return;
 8002f40:	e06e      	b.n	8003020 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d014      	beq.n	8002f76 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f50:	f043 0201 	orr.w	r2, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d04f      	beq.n	800301e <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002f8c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d104      	bne.n	8002faa <HAL_SPI_IRQHandler+0x13a>
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d034      	beq.n	8003014 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0203 	bic.w	r2, r2, #3
 8002fb8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d011      	beq.n	8002fe6 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc6:	4a18      	ldr	r2, [pc, #96]	@ (8003028 <HAL_SPI_IRQHandler+0x1b8>)
 8002fc8:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fdb6 	bl	8001b40 <HAL_DMA_Abort_IT>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d016      	beq.n	800301c <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff2:	4a0d      	ldr	r2, [pc, #52]	@ (8003028 <HAL_SPI_IRQHandler+0x1b8>)
 8002ff4:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe fda0 	bl	8001b40 <HAL_DMA_Abort_IT>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003012:	e003      	b.n	800301c <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f81b 	bl	8003050 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800301a:	e000      	b.n	800301e <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 800301c:	bf00      	nop
    return;
 800301e:	bf00      	nop
  }
}
 8003020:	3720      	adds	r7, #32
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	08003165 	.word	0x08003165

0800302c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr

08003062 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b086      	sub	sp, #24
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003070:	f7fe fb70 	bl	8001754 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	2b20      	cmp	r3, #32
 8003082:	d03b      	beq.n	80030fc <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0220 	bic.w	r2, r2, #32
 8003092:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0202 	bic.w	r2, r2, #2
 80030a2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	2164      	movs	r1, #100	@ 0x64
 80030a8:	6978      	ldr	r0, [r7, #20]
 80030aa:	f000 f8f7 	bl	800329c <SPI_EndRxTxTransaction>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b8:	f043 0220 	orr.w	r2, r3, #32
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10a      	bne.n	80030de <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2200      	movs	r2, #0
 80030e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80030f4:	6978      	ldr	r0, [r7, #20]
 80030f6:	f7ff ffab 	bl	8003050 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80030fa:	e002      	b.n	8003102 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80030fc:	6978      	ldr	r0, [r7, #20]
 80030fe:	f7ff ff95 	bl	800302c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003114:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff ff91 	bl	800303e <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0203 	bic.w	r2, r2, #3
 8003140:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003146:	f043 0210 	orr.w	r2, r3, #16
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7ff ff7a 	bl	8003050 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800315c:	bf00      	nop
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f7ff ff66 	bl	8003050 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003184:	bf00      	nop
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	4613      	mov	r3, r2
 800319a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800319c:	f7fe fada 	bl	8001754 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	4413      	add	r3, r2
 80031aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031ac:	f7fe fad2 	bl	8001754 <HAL_GetTick>
 80031b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031b2:	4b39      	ldr	r3, [pc, #228]	@ (8003298 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	015b      	lsls	r3, r3, #5
 80031b8:	0d1b      	lsrs	r3, r3, #20
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	fb02 f303 	mul.w	r3, r2, r3
 80031c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031c2:	e054      	b.n	800326e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ca:	d050      	beq.n	800326e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031cc:	f7fe fac2 	bl	8001754 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d902      	bls.n	80031e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d13d      	bne.n	800325e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031fa:	d111      	bne.n	8003220 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003204:	d004      	beq.n	8003210 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800320e:	d107      	bne.n	8003220 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800321e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003224:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003228:	d10f      	bne.n	800324a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003248:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e017      	b.n	800328e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	3b01      	subs	r3, #1
 800326c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4013      	ands	r3, r2
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	429a      	cmp	r2, r3
 800327c:	bf0c      	ite	eq
 800327e:	2301      	moveq	r3, #1
 8003280:	2300      	movne	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	429a      	cmp	r2, r3
 800328a:	d19b      	bne.n	80031c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3720      	adds	r7, #32
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	2000001c 	.word	0x2000001c

0800329c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2200      	movs	r2, #0
 80032b0:	2180      	movs	r1, #128	@ 0x80
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7ff ff6a 	bl	800318c <SPI_WaitFlagStateUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d007      	beq.n	80032ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c2:	f043 0220 	orr.w	r2, r3, #32
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e000      	b.n	80032d0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <memset>:
 80032d8:	4603      	mov	r3, r0
 80032da:	4402      	add	r2, r0
 80032dc:	4293      	cmp	r3, r2
 80032de:	d100      	bne.n	80032e2 <memset+0xa>
 80032e0:	4770      	bx	lr
 80032e2:	f803 1b01 	strb.w	r1, [r3], #1
 80032e6:	e7f9      	b.n	80032dc <memset+0x4>

080032e8 <__libc_init_array>:
 80032e8:	b570      	push	{r4, r5, r6, lr}
 80032ea:	2600      	movs	r6, #0
 80032ec:	4d0c      	ldr	r5, [pc, #48]	@ (8003320 <__libc_init_array+0x38>)
 80032ee:	4c0d      	ldr	r4, [pc, #52]	@ (8003324 <__libc_init_array+0x3c>)
 80032f0:	1b64      	subs	r4, r4, r5
 80032f2:	10a4      	asrs	r4, r4, #2
 80032f4:	42a6      	cmp	r6, r4
 80032f6:	d109      	bne.n	800330c <__libc_init_array+0x24>
 80032f8:	f000 f81a 	bl	8003330 <_init>
 80032fc:	2600      	movs	r6, #0
 80032fe:	4d0a      	ldr	r5, [pc, #40]	@ (8003328 <__libc_init_array+0x40>)
 8003300:	4c0a      	ldr	r4, [pc, #40]	@ (800332c <__libc_init_array+0x44>)
 8003302:	1b64      	subs	r4, r4, r5
 8003304:	10a4      	asrs	r4, r4, #2
 8003306:	42a6      	cmp	r6, r4
 8003308:	d105      	bne.n	8003316 <__libc_init_array+0x2e>
 800330a:	bd70      	pop	{r4, r5, r6, pc}
 800330c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003310:	4798      	blx	r3
 8003312:	3601      	adds	r6, #1
 8003314:	e7ee      	b.n	80032f4 <__libc_init_array+0xc>
 8003316:	f855 3b04 	ldr.w	r3, [r5], #4
 800331a:	4798      	blx	r3
 800331c:	3601      	adds	r6, #1
 800331e:	e7f2      	b.n	8003306 <__libc_init_array+0x1e>
 8003320:	08005c18 	.word	0x08005c18
 8003324:	08005c18 	.word	0x08005c18
 8003328:	08005c18 	.word	0x08005c18
 800332c:	08005c1c 	.word	0x08005c1c

08003330 <_init>:
 8003330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003332:	bf00      	nop
 8003334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003336:	bc08      	pop	{r3}
 8003338:	469e      	mov	lr, r3
 800333a:	4770      	bx	lr

0800333c <_fini>:
 800333c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333e:	bf00      	nop
 8003340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003342:	bc08      	pop	{r3}
 8003344:	469e      	mov	lr, r3
 8003346:	4770      	bx	lr
